/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as fromAction from './../actions/index';
/** @type {?} */
export var initialState = {
    address: {},
    deliveryMode: {
        supported: {},
        selected: '',
    },
    paymentDetails: {},
    orderDetails: {},
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case fromAction.ADD_DELIVERY_ADDRESS_SUCCESS:
        case fromAction.SET_DELIVERY_ADDRESS_SUCCESS: {
            /** @type {?} */
            var address = action.payload;
            return tslib_1.__assign({}, state, { address: address });
        }
        case fromAction.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {
            /** @type {?} */
            var supportedModes = action.payload;
            if (!supportedModes) {
                return state;
            }
            /** @type {?} */
            var supported = supportedModes.reduce(function (modes, mode) {
                var _a;
                return tslib_1.__assign({}, modes, (_a = {}, _a[mode.code] = mode, _a));
            }, tslib_1.__assign({}, state.deliveryMode.supported));
            return tslib_1.__assign({}, state, { deliveryMode: tslib_1.__assign({}, state.deliveryMode, { supported: supported }) });
        }
        case fromAction.SET_DELIVERY_MODE_SUCCESS: {
            /** @type {?} */
            var selected = action.payload;
            return tslib_1.__assign({}, state, { deliveryMode: tslib_1.__assign({}, state.deliveryMode, { selected: selected }) });
        }
        case fromAction.CREATE_PAYMENT_DETAILS_SUCCESS:
        case fromAction.SET_PAYMENT_DETAILS_SUCCESS: {
            return tslib_1.__assign({}, state, { paymentDetails: action.payload });
        }
        case fromAction.CREATE_PAYMENT_DETAILS_FAIL: {
            /** @type {?} */
            var paymentDetails = action.payload;
            if (paymentDetails['hasError']) {
                return tslib_1.__assign({}, state, { paymentDetails: paymentDetails });
            }
            return state;
        }
        case fromAction.PLACE_ORDER_SUCCESS: {
            /** @type {?} */
            var orderDetails = action.payload;
            return tslib_1.__assign({}, state, { orderDetails: orderDetails });
        }
        case fromAction.CLEAR_CHECKOUT_DATA: {
            return initialState;
        }
        case fromAction.CLEAR_CHECKOUT_STEP: {
            /** @type {?} */
            var stepNumber = action.payload;
            switch (stepNumber) {
                case 1: {
                    return tslib_1.__assign({}, state, { address: {} });
                }
                case 2: {
                    return tslib_1.__assign({}, state, { deliveryMode: tslib_1.__assign({}, state.deliveryMode, { supported: {}, selected: '' }) });
                }
                case 3: {
                    return tslib_1.__assign({}, state, { paymentDetails: {} });
                }
            }
            return state;
        }
        case fromAction.CLEAR_SUPPORTED_DELIVERY_MODES:
        case fromAction.CHECKOUT_CLEAR_MISCS_DATA: {
            return tslib_1.__assign({}, state, { deliveryMode: tslib_1.__assign({}, state.deliveryMode, { supported: {} }) });
        }
        case fromAction.LOAD_CHECKOUT_DETAILS_SUCCESS: {
            return tslib_1.__assign({}, state, { address: action.payload.deliveryAddress, deliveryMode: tslib_1.__assign({}, state.deliveryMode, { selected: action.payload.deliveryMode && action.payload.deliveryMode.code }), paymentDetails: action.payload.paymentInfo });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,