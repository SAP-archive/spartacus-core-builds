import { StateUtils } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityLoaderResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
export const LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
export const LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
export const LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
export const UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
export const UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
export const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
export const RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
export const CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
export class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES;
    }
}
export class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES, payload);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class UpdateNotificationPreferences extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES;
    }
}
export class UpdateNotificationPreferencesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class ResetNotificationPreferences extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.type = RESET_NOTIFICATION_PREFERENCES;
    }
}
export class ClearNotificationPreferences extends StateUtils.LoaderResetAction {
    constructor() {
        super(NOTIFICATION_PREFERENCES);
        this.type = CLEAR_NOTIFICATION_PREFERENCES;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvdXNlci9zdG9yZS9hY3Rpb25zL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLHVCQUF1QixFQUN2QixtQkFBbUIsR0FDcEIsTUFBTSx5REFBeUQsQ0FBQztBQUNqRSxPQUFPLEVBQ0wsMENBQTBDLEVBQzFDLHdCQUF3QixHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUd2QixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FDeEMsc0NBQXNDLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQzdDLDJDQUEyQyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUNoRCw4Q0FBOEMsQ0FBQztBQUNqRCxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FDMUMsd0NBQXdDLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQy9DLDZDQUE2QyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUNsRCxnREFBZ0QsQ0FBQztBQUNuRCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FDekMsdUNBQXVDLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBRTFDLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTFFLFlBQW1CLE9BQWU7UUFDaEMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRHpCLFNBQUksR0FBRyw2QkFBNkIsQ0FBQztJQUc5QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUU5RSxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUR4QixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxrQ0FBa0MsQ0FBQztJQUduRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sa0NBQW1DLFNBQVEsVUFBVSxDQUFDLG1CQUFtQjtJQUVwRixZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQURmLFlBQU8sR0FBUCxPQUFPLENBQTBCO1FBRDNDLFNBQUksR0FBRyxxQ0FBcUMsQ0FBQztJQUd0RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsZ0JBQWdCO0lBRWpFLFlBQ1MsT0FBa0U7UUFFekUsS0FBSyxDQUFDLGVBQWUsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFDO1FBRjVELFlBQU8sR0FBUCxPQUFPLENBQTJEO1FBRmxFLFNBQUksR0FBRywrQkFBK0IsQ0FBQztJQUtoRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8saUNBQWtDLFNBQVEsZ0JBQWdCO0lBRXJFLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGVBQWUsRUFBRSwwQ0FBMEMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUQzRCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxvQ0FBb0MsQ0FBQztJQUdyRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sb0NBQXFDLFNBQVEsbUJBQW1CO0lBRTNFLFlBQW1CLE9BQWlDO1FBQ2xELEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQURsRCxZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcsdUNBQXVDLENBQUM7SUFHeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDRCQUE2QixTQUFRLHVCQUF1QjtJQUV2RTtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUY1RCxTQUFJLEdBQUcsOEJBQThCLENBQUM7SUFHL0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDRCQUE2QixTQUFRLFVBQVUsQ0FBQyxpQkFBaUI7SUFFNUU7UUFDRSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUZ6QixTQUFJLEdBQUcsOEJBQThCLENBQUM7SUFHL0MsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IFBST0NFU1NfRkVBVFVSRSB9IGZyb20gJy4uLy4uLy4uL3Byb2Nlc3Mvc3RvcmUvcHJvY2Vzcy1zdGF0ZSc7XG5pbXBvcnQge1xuICBFbnRpdHlGYWlsQWN0aW9uLFxuICBFbnRpdHlMb2FkQWN0aW9uLFxuICBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbixcbiAgRW50aXR5U3VjY2Vzc0FjdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLmFjdGlvbic7XG5pbXBvcnQge1xuICBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQsXG4gIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcbn0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25QcmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvbm90aWZpY2F0aW9uLXByZWZlcmVuY2UubW9kZWwnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMID1cbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTID1cbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBVcGRhdGUgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcbmV4cG9ydCBjb25zdCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUwgPVxuICAnW1VzZXJdIFVwZGF0ZSBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTID1cbiAgJ1tVc2VyXSBVcGRhdGUgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gUmVzZXQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcbmV4cG9ydCBjb25zdCBDTEVBUl9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIENsZWFyIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10pIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIEVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IHByZWZlcmVuY2VzOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10gfVxuICApIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbCBleHRlbmRzIEVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3MgZXh0ZW5kcyBFbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVzZXROb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIEVudGl0eUxvYWRlclJlc2V0QWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFU0VUX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhck5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uUHJlZmVyZW5jZUFjdGlvbiA9XG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3NcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1xuICB8IFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxuICB8IFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2Vzc1xuICB8IFJlc2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcbiAgfCBDbGVhck5vdGlmaWNhdGlvblByZWZlcmVuY2VzO1xuIl19