/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { LOGOUT } from '../../../auth/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { USER_ADDRESSES, USER_CONSENTS, USER_ORDERS, USER_PAYMENT_METHODS, REGIONS, } from '../user-state';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import * as fromOrderDetailsReducer from './order-details.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromResetPasswordReducer from './reset-password.reducer';
import * as fromTitlesReducer from './titles.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserConsentsReducer from './user-consents.reducer';
import * as fromUserDetailsReducer from './user-details.reducer';
import * as fromUserOrdersReducer from './user-orders.reducer';
/**
 * @return {?}
 */
export function getReducers() {
    return {
        account: combineReducers({
            details: fromUserDetailsReducer.reducer,
        }),
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        consents: loaderReducer(USER_CONSENTS, fromUserConsentsReducer.reducer),
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        orders: loaderReducer(USER_ORDERS, fromUserOrdersReducer.reducer),
        order: fromOrderDetailsReducer.reducer,
        countries: fromDeliveryCountries.reducer,
        titles: fromTitlesReducer.reducer,
        regions: loaderReducer(REGIONS, fromRegionsReducer.reducer),
        resetPassword: fromResetPasswordReducer.reducer,
    };
}
/** @type {?} */
export const reducerToken = new InjectionToken('UserReducers');
/** @type {?} */
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
/**
 * @param {?} reducer
 * @return {?}
 */
export function clearUserState(reducer) {
    return function (state, action) {
        if (action.type === LOGOUT) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
/** @type {?} */
export const metaReducers = [clearUserState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBR0wsZUFBZSxHQUVoQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJN0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFDTCxjQUFjLEVBQ2QsYUFBYSxFQUNiLFdBQVcsRUFDWCxvQkFBb0IsRUFFcEIsT0FBTyxHQUVSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sS0FBSywyQkFBMkIsTUFBTSw2QkFBNkIsQ0FBQztBQUMzRSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxLQUFLLHVCQUF1QixNQUFNLHlCQUF5QixDQUFDO0FBQ25FLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFDeEQsT0FBTyxLQUFLLHdCQUF3QixNQUFNLDBCQUEwQixDQUFDO0FBQ3JFLE9BQU8sS0FBSyxpQkFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxPQUFPLEtBQUssb0JBQW9CLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxLQUFLLHVCQUF1QixNQUFNLHlCQUF5QixDQUFDO0FBQ25FLE9BQU8sS0FBSyxzQkFBc0IsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFHL0QsTUFBTSxVQUFVLFdBQVc7SUFDekIsT0FBTztRQUNMLE9BQU8sRUFBRSxlQUFlLENBQUM7WUFDdkIsT0FBTyxFQUFFLHNCQUFzQixDQUFDLE9BQU87U0FDeEMsQ0FBQztRQUNGLFNBQVMsRUFBRSxhQUFhLENBQ3RCLGNBQWMsRUFDZCxvQkFBb0IsQ0FBQyxPQUFPLENBQzdCO1FBQ0QsZ0JBQWdCLEVBQUUsMkJBQTJCLENBQUMsT0FBTztRQUNyRCxRQUFRLEVBQUUsYUFBYSxDQUNyQixhQUFhLEVBQ2IsdUJBQXVCLENBQUMsT0FBTyxDQUNoQztRQUNELFFBQVEsRUFBRSxhQUFhLENBQ3JCLG9CQUFvQixFQUNwQixrQkFBa0IsQ0FBQyxPQUFPLENBQzNCO1FBQ0QsTUFBTSxFQUFFLGFBQWEsQ0FDbkIsV0FBVyxFQUNYLHFCQUFxQixDQUFDLE9BQU8sQ0FDOUI7UUFDRCxLQUFLLEVBQUUsdUJBQXVCLENBQUMsT0FBTztRQUN0QyxTQUFTLEVBQUUscUJBQXFCLENBQUMsT0FBTztRQUN4QyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsT0FBTztRQUNqQyxPQUFPLEVBQUUsYUFBYSxDQUFlLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7UUFDekUsYUFBYSxFQUFFLHdCQUF3QixDQUFDLE9BQU87S0FDaEQsQ0FBQztBQUNKLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FFckIsSUFBSSxjQUFjLENBQThCLGNBQWMsQ0FBQzs7QUFFbkUsTUFBTSxPQUFPLGVBQWUsR0FBYTtJQUN2QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixVQUFVLEVBQUUsV0FBVztDQUN4Qjs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixPQUEyQjtJQUUzQixPQUFPLFVBQVMsS0FBSyxFQUFFLE1BQU07UUFDM0IsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUMxQixLQUFLLEdBQUcsU0FBUyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FBdUIsQ0FBQyxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFjdGlvblJlZHVjZXIsXG4gIEFjdGlvblJlZHVjZXJNYXAsXG4gIGNvbWJpbmVSZWR1Y2VycyxcbiAgTWV0YVJlZHVjZXIsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IExPR09VVCB9IGZyb20gJy4uLy4uLy4uL2F1dGgvaW5kZXgnO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FkZHJlc3MubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudERldGFpbHMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7IE9yZGVySGlzdG9yeUxpc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcbmltcG9ydCB7XG4gIFVTRVJfQUREUkVTU0VTLFxuICBVU0VSX0NPTlNFTlRTLFxuICBVU0VSX09SREVSUyxcbiAgVVNFUl9QQVlNRU5UX01FVEhPRFMsXG4gIFVzZXJTdGF0ZSxcbiAgUkVHSU9OUyxcbiAgUmVnaW9uc1N0YXRlLFxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCAqIGFzIGZyb21CaWxsaW5nQ291bnRyaWVzUmVkdWNlciBmcm9tICcuL2JpbGxpbmctY291bnRyaWVzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbURlbGl2ZXJ5Q291bnRyaWVzIGZyb20gJy4vZGVsaXZlcnktY291bnRyaWVzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbU9yZGVyRGV0YWlsc1JlZHVjZXIgZnJvbSAnLi9vcmRlci1kZXRhaWxzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVBheW1lbnRSZWR1Y2VyIGZyb20gJy4vcGF5bWVudC1tZXRob2RzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVJlZ2lvbnNSZWR1Y2VyIGZyb20gJy4vcmVnaW9ucy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21SZXNldFBhc3N3b3JkUmVkdWNlciBmcm9tICcuL3Jlc2V0LXBhc3N3b3JkLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVRpdGxlc1JlZHVjZXIgZnJvbSAnLi90aXRsZXMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQWRkcmVzc2VzUmVkdWNlciBmcm9tICcuL3VzZXItYWRkcmVzc2VzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJDb25zZW50c1JlZHVjZXIgZnJvbSAnLi91c2VyLWNvbnNlbnRzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVVzZXJEZXRhaWxzUmVkdWNlciBmcm9tICcuL3VzZXItZGV0YWlscy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21Vc2VyT3JkZXJzUmVkdWNlciBmcm9tICcuL3VzZXItb3JkZXJzLnJlZHVjZXInO1xuaW1wb3J0IHsgQ29uc2VudFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29uc2VudC5tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2VycygpOiBBY3Rpb25SZWR1Y2VyTWFwPFVzZXJTdGF0ZT4ge1xuICByZXR1cm4ge1xuICAgIGFjY291bnQ6IGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICBkZXRhaWxzOiBmcm9tVXNlckRldGFpbHNSZWR1Y2VyLnJlZHVjZXIsXG4gICAgfSksXG4gICAgYWRkcmVzc2VzOiBsb2FkZXJSZWR1Y2VyPEFkZHJlc3NbXT4oXG4gICAgICBVU0VSX0FERFJFU1NFUyxcbiAgICAgIGZyb21BZGRyZXNzZXNSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIGJpbGxpbmdDb3VudHJpZXM6IGZyb21CaWxsaW5nQ291bnRyaWVzUmVkdWNlci5yZWR1Y2VyLFxuICAgIGNvbnNlbnRzOiBsb2FkZXJSZWR1Y2VyPENvbnNlbnRUZW1wbGF0ZVtdPihcbiAgICAgIFVTRVJfQ09OU0VOVFMsXG4gICAgICBmcm9tVXNlckNvbnNlbnRzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBwYXltZW50czogbG9hZGVyUmVkdWNlcjxQYXltZW50RGV0YWlsc1tdPihcbiAgICAgIFVTRVJfUEFZTUVOVF9NRVRIT0RTLFxuICAgICAgZnJvbVBheW1lbnRSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIG9yZGVyczogbG9hZGVyUmVkdWNlcjxPcmRlckhpc3RvcnlMaXN0PihcbiAgICAgIFVTRVJfT1JERVJTLFxuICAgICAgZnJvbVVzZXJPcmRlcnNSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIG9yZGVyOiBmcm9tT3JkZXJEZXRhaWxzUmVkdWNlci5yZWR1Y2VyLFxuICAgIGNvdW50cmllczogZnJvbURlbGl2ZXJ5Q291bnRyaWVzLnJlZHVjZXIsXG4gICAgdGl0bGVzOiBmcm9tVGl0bGVzUmVkdWNlci5yZWR1Y2VyLFxuICAgIHJlZ2lvbnM6IGxvYWRlclJlZHVjZXI8UmVnaW9uc1N0YXRlPihSRUdJT05TLCBmcm9tUmVnaW9uc1JlZHVjZXIucmVkdWNlciksXG4gICAgcmVzZXRQYXNzd29yZDogZnJvbVJlc2V0UGFzc3dvcmRSZWR1Y2VyLnJlZHVjZXIsXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyVG9rZW46IEluamVjdGlvblRva2VuPFxuICBBY3Rpb25SZWR1Y2VyTWFwPFVzZXJTdGF0ZT5cbj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxVc2VyU3RhdGU+PignVXNlclJlZHVjZXJzJyk7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyUHJvdmlkZXI6IFByb3ZpZGVyID0ge1xuICBwcm92aWRlOiByZWR1Y2VyVG9rZW4sXG4gIHVzZUZhY3Rvcnk6IGdldFJlZHVjZXJzLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVXNlclN0YXRlKFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueT5cbik6IEFjdGlvblJlZHVjZXI8YW55PiB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBMT0dPVVQpIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbWV0YVJlZHVjZXJzOiBNZXRhUmVkdWNlcjxhbnk+W10gPSBbY2xlYXJVc2VyU3RhdGVdO1xuIl19