import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';
import { UserActions } from '../actions/index';
var NotificationPreferenceEffects = /** @class */ (function () {
    function NotificationPreferenceEffects(actions$, connector) {
        var _this = this;
        this.actions$ = actions$;
        this.connector = connector;
        this.loadPreferences$ = this.actions$.pipe(ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.connector.loadAll(payload).pipe(map(function (preferences) {
                return new UserActions.LoadNotificationPreferencesSuccess(preferences);
            }), catchError(function (error) {
                return of(new UserActions.LoadNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
        this.updatePreferences$ = this.actions$.pipe(ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.connector.update(payload.userId, payload.preferences).pipe(map(function () {
                return new UserActions.UpdateNotificationPreferencesSuccess(payload.preferences);
            }), catchError(function (error) {
                return of(new UserActions.UpdateNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
    }
    NotificationPreferenceEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: UserNotificationPreferenceConnector }
    ]; };
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);
    NotificationPreferenceEffects = __decorate([
        Injectable()
    ], NotificationPreferenceEffects);
    return NotificationPreferenceEffects;
}());
export { NotificationPreferenceEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLGlGQUFpRixDQUFDO0FBQ3RJLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQztJQWlERSx1Q0FDVSxRQUFpQixFQUNqQixTQUE4QztRQUZ4RCxpQkFHSTtRQUZNLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBcUM7UUFqRHhELHFCQUFnQixHQUVaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLEVBQ2pELEdBQUcsQ0FBQyxVQUFDLE1BQStDLElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFkLENBQWMsQ0FBQyxFQUN4RSxTQUFTLENBQUMsVUFBQSxPQUFPO1lBQ2YsT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ2xDLEdBQUcsQ0FDRCxVQUFBLFdBQVc7Z0JBQ1QsT0FBQSxJQUFJLFdBQVcsQ0FBQyxrQ0FBa0MsQ0FBQyxXQUFXLENBQUM7WUFBL0QsQ0FBK0QsQ0FDbEUsRUFDRCxVQUFVLENBQUMsVUFBQSxLQUFLO2dCQUNkLE9BQUEsRUFBRSxDQUNBLElBQUksV0FBVyxDQUFDLCtCQUErQixDQUM3QyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDN0IsQ0FDRjtZQUpELENBSUMsQ0FDRixDQUNGO1FBWkQsQ0FZQyxDQUNGLENBQ0YsQ0FBQztRQUdGLHVCQUFrQixHQUVkLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLCtCQUErQixDQUFDLEVBQ25ELEdBQUcsQ0FBQyxVQUFDLE1BQWlELElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFkLENBQWMsQ0FBQyxFQUMxRSxRQUFRLENBQUMsVUFBQSxPQUFPO1lBQ2QsT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQzdELEdBQUcsQ0FDRDtnQkFDRSxPQUFBLElBQUksV0FBVyxDQUFDLG9DQUFvQyxDQUNsRCxPQUFPLENBQUMsV0FBVyxDQUNwQjtZQUZELENBRUMsQ0FDSixFQUNELFVBQVUsQ0FBQyxVQUFBLEtBQUs7Z0JBQ2QsT0FBQSxFQUFFLENBQ0EsSUFBSSxXQUFXLENBQUMsaUNBQWlDLENBQy9DLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUM3QixDQUNGO1lBSkQsQ0FJQyxDQUNGLENBQ0Y7UUFkRCxDQWNDLENBQ0YsQ0FDRixDQUFDO0lBS0MsQ0FBQzs7Z0JBRmdCLE9BQU87Z0JBQ04sbUNBQW1DOztJQWpEeEQ7UUFEQyxNQUFNLEVBQUU7MkVBcUJQO0lBR0Y7UUFEQyxNQUFNLEVBQUU7NkVBdUJQO0lBL0NTLDZCQUE2QjtRQUR6QyxVQUFVLEVBQUU7T0FDQSw2QkFBNkIsQ0FxRHpDO0lBQUQsb0NBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zLCBFZmZlY3QsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IG1ha2VFcnJvclNlcmlhbGl6YWJsZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvc2VyaWFsaXphdGlvbi11dGlscyc7XG5pbXBvcnQgeyBVc2VyTm90aWZpY2F0aW9uUHJlZmVyZW5jZUNvbm5lY3RvciB9IGZyb20gJy4uLy4uL2Nvbm5lY3RvcnMvbm90aWZpY2F0aW9uLXByZWZlcmVuY2UvdXNlci1ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5jb25uZWN0b3InO1xuaW1wb3J0IHsgVXNlckFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblByZWZlcmVuY2VFZmZlY3RzIHtcbiAgQEVmZmVjdCgpXG4gIGxvYWRQcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8XG4gICAgVXNlckFjdGlvbnMuTm90aWZpY2F0aW9uUHJlZmVyZW5jZUFjdGlvblxuICA+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5MT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyksXG4gICAgbWFwKChhY3Rpb246IFVzZXJBY3Rpb25zLkxvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlcykgPT4gYWN0aW9uLnBheWxvYWQpLFxuICAgIHN3aXRjaE1hcChwYXlsb2FkID0+XG4gICAgICB0aGlzLmNvbm5lY3Rvci5sb2FkQWxsKHBheWxvYWQpLnBpcGUoXG4gICAgICAgIG1hcChcbiAgICAgICAgICBwcmVmZXJlbmNlcyA9PlxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkxvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3MocHJlZmVyZW5jZXMpXG4gICAgICAgICksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT5cbiAgICAgICAgICBvZihcbiAgICAgICAgICAgIG5ldyBVc2VyQWN0aW9ucy5Mb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsKFxuICAgICAgICAgICAgICBtYWtlRXJyb3JTZXJpYWxpemFibGUoZXJyb3IpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xuXG4gIEBFZmZlY3QoKVxuICB1cGRhdGVQcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8XG4gICAgVXNlckFjdGlvbnMuTm90aWZpY2F0aW9uUHJlZmVyZW5jZUFjdGlvblxuICA+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5VUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKSxcbiAgICBtYXAoKGFjdGlvbjogVXNlckFjdGlvbnMuVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICBtZXJnZU1hcChwYXlsb2FkID0+XG4gICAgICB0aGlzLmNvbm5lY3Rvci51cGRhdGUocGF5bG9hZC51c2VySWQsIHBheWxvYWQucHJlZmVyZW5jZXMpLnBpcGUoXG4gICAgICAgIG1hcChcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLlVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyhcbiAgICAgICAgICAgICAgcGF5bG9hZC5wcmVmZXJlbmNlc1xuICAgICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBjYXRjaEVycm9yKGVycm9yID0+XG4gICAgICAgICAgb2YoXG4gICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsKFxuICAgICAgICAgICAgICBtYWtlRXJyb3JTZXJpYWxpemFibGUoZXJyb3IpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSBjb25uZWN0b3I6IFVzZXJOb3RpZmljYXRpb25QcmVmZXJlbmNlQ29ubmVjdG9yXG4gICkge31cbn1cbiJdfQ==