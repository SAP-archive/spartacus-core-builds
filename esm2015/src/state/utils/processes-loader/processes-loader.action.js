import { resetMeta as loaderResetMeta, } from '../loader/loader.action';
export const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';
export const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';
export const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';
export function processesIncrementMeta(entityType) {
    return {
        entityType: entityType,
        loader: undefined,
        processesCountDiff: 1,
    };
}
export function processesDecrementMeta(entityType) {
    return {
        entityType: entityType,
        loader: undefined,
        processesCountDiff: -1,
    };
}
export function processesLoaderResetMeta(entityType) {
    // processes reset action is a reset action for loader reducer, but not the other way around
    return Object.assign(Object.assign({}, loaderResetMeta(entityType)), { processesCountDiff: null });
}
export class ProcessesLoaderResetAction {
    constructor(entityType) {
        this.type = PROCESSES_LOADER_RESET_ACTION;
        this.meta = processesLoaderResetMeta(entityType);
    }
}
export class ProcessesIncrementAction {
    constructor(entityType) {
        this.type = PROCESSES_INCREMENT_ACTION;
        this.meta = processesIncrementMeta(entityType);
    }
}
export class ProcessesDecrementAction {
    constructor(entityType) {
        this.type = PROCESSES_DECREMENT_ACTION;
        this.meta = processesDecrementMeta(entityType);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc2VzLWxvYWRlci5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9zdGF0ZS91dGlscy9wcm9jZXNzZXMtbG9hZGVyL3Byb2Nlc3Nlcy1sb2FkZXIuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCxTQUFTLElBQUksZUFBZSxHQUM3QixNQUFNLHlCQUF5QixDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLDhCQUE4QixDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLDhCQUE4QixDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLDBCQUEwQixDQUFDO0FBWXhFLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsVUFBa0I7SUFFbEIsT0FBTztRQUNMLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLGtCQUFrQixFQUFFLENBQUM7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFVBQWtCO0lBRWxCLE9BQU87UUFDTCxVQUFVLEVBQUUsVUFBVTtRQUN0QixNQUFNLEVBQUUsU0FBUztRQUNqQixrQkFBa0IsRUFBRSxDQUFDLENBQUM7S0FDdkIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQ3RDLFVBQWtCO0lBRWxCLDRGQUE0RjtJQUM1Rix1Q0FDSyxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQzlCLGtCQUFrQixFQUFFLElBQUksSUFDeEI7QUFDSixDQUFDO0FBRUQsTUFBTSxPQUFPLDBCQUEwQjtJQUdyQyxZQUFZLFVBQWtCO1FBRjlCLFNBQUksR0FBRyw2QkFBNkIsQ0FBQztRQUduQyxJQUFJLENBQUMsSUFBSSxHQUFHLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFHbkMsWUFBWSxVQUFrQjtRQUY5QixTQUFJLEdBQUcsMEJBQTBCLENBQUM7UUFHaEMsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sd0JBQXdCO0lBR25DLFlBQVksVUFBa0I7UUFGOUIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO1FBR2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHtcbiAgTG9hZGVyTWV0YSxcbiAgcmVzZXRNZXRhIGFzIGxvYWRlclJlc2V0TWV0YSxcbn0gZnJvbSAnLi4vbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgUFJPQ0VTU0VTX0lOQ1JFTUVOVF9BQ1RJT04gPSAnW1BST0NFU1NFUyBMT0FERVJdIElOQ1JFTUVOVCc7XG5leHBvcnQgY29uc3QgUFJPQ0VTU0VTX0RFQ1JFTUVOVF9BQ1RJT04gPSAnW1BST0NFU1NFUyBMT0FERVJdIERFQ1JFTUVOVCc7XG5leHBvcnQgY29uc3QgUFJPQ0VTU0VTX0xPQURFUl9SRVNFVF9BQ1RJT04gPSAnW1BST0NFU1NFUyBMT0FERVJdIFJFU0VUJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9jZXNzZXNMb2FkZXJNZXRhIGV4dGVuZHMgTG9hZGVyTWV0YSB7XG4gIGVudGl0eVR5cGU6IHN0cmluZztcbiAgcHJvY2Vzc2VzQ291bnREaWZmPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2Nlc3Nlc0xvYWRlckFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHBheWxvYWQ/OiBhbnk7XG4gIHJlYWRvbmx5IG1ldGE/OiBQcm9jZXNzZXNMb2FkZXJNZXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc2VzSW5jcmVtZW50TWV0YShcbiAgZW50aXR5VHlwZTogc3RyaW5nXG4pOiBQcm9jZXNzZXNMb2FkZXJNZXRhIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRpdHlUeXBlOiBlbnRpdHlUeXBlLFxuICAgIGxvYWRlcjogdW5kZWZpbmVkLFxuICAgIHByb2Nlc3Nlc0NvdW50RGlmZjogMSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3Nlc0RlY3JlbWVudE1ldGEoXG4gIGVudGl0eVR5cGU6IHN0cmluZ1xuKTogUHJvY2Vzc2VzTG9hZGVyTWV0YSB7XG4gIHJldHVybiB7XG4gICAgZW50aXR5VHlwZTogZW50aXR5VHlwZSxcbiAgICBsb2FkZXI6IHVuZGVmaW5lZCxcbiAgICBwcm9jZXNzZXNDb3VudERpZmY6IC0xLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc2VzTG9hZGVyUmVzZXRNZXRhKFxuICBlbnRpdHlUeXBlOiBzdHJpbmdcbik6IFByb2Nlc3Nlc0xvYWRlck1ldGEge1xuICAvLyBwcm9jZXNzZXMgcmVzZXQgYWN0aW9uIGlzIGEgcmVzZXQgYWN0aW9uIGZvciBsb2FkZXIgcmVkdWNlciwgYnV0IG5vdCB0aGUgb3RoZXIgd2F5IGFyb3VuZFxuICByZXR1cm4ge1xuICAgIC4uLmxvYWRlclJlc2V0TWV0YShlbnRpdHlUeXBlKSxcbiAgICBwcm9jZXNzZXNDb3VudERpZmY6IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzZXNMb2FkZXJSZXNldEFjdGlvbiBpbXBsZW1lbnRzIFByb2Nlc3Nlc0xvYWRlckFjdGlvbiB7XG4gIHR5cGUgPSBQUk9DRVNTRVNfTE9BREVSX1JFU0VUX0FDVElPTjtcbiAgcmVhZG9ubHkgbWV0YTogUHJvY2Vzc2VzTG9hZGVyTWV0YTtcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXRhID0gcHJvY2Vzc2VzTG9hZGVyUmVzZXRNZXRhKGVudGl0eVR5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzZXNJbmNyZW1lbnRBY3Rpb24gaW1wbGVtZW50cyBQcm9jZXNzZXNMb2FkZXJBY3Rpb24ge1xuICB0eXBlID0gUFJPQ0VTU0VTX0lOQ1JFTUVOVF9BQ1RJT047XG4gIHJlYWRvbmx5IG1ldGE6IFByb2Nlc3Nlc0xvYWRlck1ldGE7XG4gIGNvbnN0cnVjdG9yKGVudGl0eVR5cGU6IHN0cmluZykge1xuICAgIHRoaXMubWV0YSA9IHByb2Nlc3Nlc0luY3JlbWVudE1ldGEoZW50aXR5VHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByb2Nlc3Nlc0RlY3JlbWVudEFjdGlvbiBpbXBsZW1lbnRzIFByb2Nlc3Nlc0xvYWRlckFjdGlvbiB7XG4gIHR5cGUgPSBQUk9DRVNTRVNfREVDUkVNRU5UX0FDVElPTjtcbiAgcmVhZG9ubHkgbWV0YTogUHJvY2Vzc2VzTG9hZGVyTWV0YTtcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXRhID0gcHJvY2Vzc2VzRGVjcmVtZW50TWV0YShlbnRpdHlUeXBlKTtcbiAgfVxufVxuIl19