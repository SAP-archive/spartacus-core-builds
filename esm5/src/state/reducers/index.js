import { Optional, PLATFORM_ID, InjectionToken } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { META_REDUCERS } from '@ngrx/store';
import { Config } from '../../config/config.module';
import { WindowRef } from '../../window/window-ref';
import { getStorageSyncReducer } from './storage-sync.reducer';
import { getTransferStateReducer } from './transfer-state.reducer';
export { getStateSlice } from '../utils/get-state-slice';
export { getStorageSyncReducer } from './storage-sync.reducer';
export * from './transfer-state.reducer';
export var TRANSFER_STATE_META_REDUCER = new InjectionToken('TransferStateMetaReducer');
export var STORAGE_SYNC_META_REDUCER = new InjectionToken('StorageSyncMetaReducer');
var ɵ0 = getTransferStateReducer, ɵ1 = getStorageSyncReducer;
export var stateMetaReducers = [
    {
        provide: TRANSFER_STATE_META_REDUCER,
        useFactory: ɵ0,
        deps: [
            PLATFORM_ID,
            [new Optional(), TransferState],
            [new Optional(), Config],
        ],
    },
    {
        provide: STORAGE_SYNC_META_REDUCER,
        useFactory: ɵ1,
        deps: [WindowRef, [new Optional(), Config]],
    },
    {
        provide: META_REDUCERS,
        useExisting: TRANSFER_STATE_META_REDUCER,
        multi: true,
    },
    {
        provide: META_REDUCERS,
        useExisting: STORAGE_SYNC_META_REDUCER,
        multi: true,
    },
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc3RhdGUvcmVkdWNlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQVksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELGNBQWMsMEJBQTBCLENBQUM7QUFFekMsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELDBCQUEwQixDQUMzQixDQUFDO0FBQ0YsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQ3pELHdCQUF3QixDQUN6QixDQUFDO1NBS2MsdUJBQXVCLE9BU3ZCLHFCQUFxQjtBQVpyQyxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBZTtJQUMzQztRQUNFLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsVUFBVSxJQUF5QjtRQUNuQyxJQUFJLEVBQUU7WUFDSixXQUFXO1lBQ1gsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGFBQWEsQ0FBQztZQUMvQixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDO1NBQ3pCO0tBQ0Y7SUFDRDtRQUNFLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsVUFBVSxJQUF1QjtRQUNqQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzVDO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsYUFBYTtRQUN0QixXQUFXLEVBQUUsMkJBQTJCO1FBQ3hDLEtBQUssRUFBRSxJQUFJO0tBQ1o7SUFDRDtRQUNFLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLFdBQVcsRUFBRSx5QkFBeUI7UUFDdEMsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFByb3ZpZGVyLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTUVUQV9SRURVQ0VSUyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcubW9kdWxlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4uLy4uL3dpbmRvdy93aW5kb3ctcmVmJztcbmltcG9ydCB7IGdldFN0b3JhZ2VTeW5jUmVkdWNlciB9IGZyb20gJy4vc3RvcmFnZS1zeW5jLnJlZHVjZXInO1xuaW1wb3J0IHsgZ2V0VHJhbnNmZXJTdGF0ZVJlZHVjZXIgfSBmcm9tICcuL3RyYW5zZmVyLXN0YXRlLnJlZHVjZXInO1xuXG5leHBvcnQgeyBnZXRTdGF0ZVNsaWNlIH0gZnJvbSAnLi4vdXRpbHMvZ2V0LXN0YXRlLXNsaWNlJztcbmV4cG9ydCB7IGdldFN0b3JhZ2VTeW5jUmVkdWNlciB9IGZyb20gJy4vc3RvcmFnZS1zeW5jLnJlZHVjZXInO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2Zlci1zdGF0ZS5yZWR1Y2VyJztcblxuZXhwb3J0IGNvbnN0IFRSQU5TRkVSX1NUQVRFX01FVEFfUkVEVUNFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ1RyYW5zZmVyU3RhdGVNZXRhUmVkdWNlcidcbik7XG5leHBvcnQgY29uc3QgU1RPUkFHRV9TWU5DX01FVEFfUkVEVUNFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ1N0b3JhZ2VTeW5jTWV0YVJlZHVjZXInXG4pO1xuXG5leHBvcnQgY29uc3Qgc3RhdGVNZXRhUmVkdWNlcnM6IFByb3ZpZGVyW10gPSBbXG4gIHtcbiAgICBwcm92aWRlOiBUUkFOU0ZFUl9TVEFURV9NRVRBX1JFRFVDRVIsXG4gICAgdXNlRmFjdG9yeTogZ2V0VHJhbnNmZXJTdGF0ZVJlZHVjZXIsXG4gICAgZGVwczogW1xuICAgICAgUExBVEZPUk1fSUQsXG4gICAgICBbbmV3IE9wdGlvbmFsKCksIFRyYW5zZmVyU3RhdGVdLFxuICAgICAgW25ldyBPcHRpb25hbCgpLCBDb25maWddLFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBTVE9SQUdFX1NZTkNfTUVUQV9SRURVQ0VSLFxuICAgIHVzZUZhY3Rvcnk6IGdldFN0b3JhZ2VTeW5jUmVkdWNlcixcbiAgICBkZXBzOiBbV2luZG93UmVmLCBbbmV3IE9wdGlvbmFsKCksIENvbmZpZ11dLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTUVUQV9SRURVQ0VSUyxcbiAgICB1c2VFeGlzdGluZzogVFJBTlNGRVJfU1RBVEVfTUVUQV9SRURVQ0VSLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTUVUQV9SRURVQ0VSUyxcbiAgICB1c2VFeGlzdGluZzogU1RPUkFHRV9TWU5DX01FVEFfUkVEVUNFUixcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbl07XG4iXX0=