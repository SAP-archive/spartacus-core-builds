{"version":3,"file":"routing-config.service.d.ts","sources":["routing-config.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\nimport { RouteConfig } from './routes-config';\nexport declare class RoutingConfigService {\n    protected config: RoutingConfig;\n    /**\n     * Reversed routing config for quick lookup of the route name by the configured path.\n     */\n    protected routeNamesByPath: {\n        [path: string]: string;\n    };\n    constructor(config: RoutingConfig);\n    /**\n     * Returns the route config for the given route name.\n     */\n    getRouteConfig(routeName: string): RouteConfig;\n    private warn;\n    /**\n     * Returns the configured route loading strategy.\n     */\n    getLoadStrategy(): RouteLoadStrategy;\n    /**\n     * Returns the route name of the configured path.\n     *\n     * For example, when the config is:\n     * ```\n     * routing: {\n     *   routes: {\n     *      addressBook: { paths: ['my-account/address-book'] }\n     *   }\n     * }\n     * ```\n     *\n     * the `getRouteName('my-account/address-book')` returns `'addressBook'`.\n     */\n    getRouteName(path: string): string;\n    /**\n     * Initializes the property `routeNamesByPath`.\n     *\n     * The original config allows for reading configured path by the route name.\n     * But this method builds up a structure with a 'reversed config'\n     * to read quickly the route name by the path.\n     */\n    protected initRouteNamesByPath(): void;\n}\n"]}