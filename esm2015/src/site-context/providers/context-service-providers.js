/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { APP_INITIALIZER } from '@angular/core';
import { LanguageService } from '../facade/language.service';
import { CurrencyService } from '../facade/currency.service';
import { OccConfig } from '../../occ/config/occ-config';
import { BaseSiteService } from '../facade/base-site.service';
import { getContextParameterDefault } from '../config/context-config-utils';
import { BASE_SITE_CONTEXT_ID, CURRENCY_CONTEXT_ID, LANGUAGE_CONTEXT_ID, } from './context-service-map';
/**
 * @param {?} config
 * @param {?} baseSiteService
 * @param {?} langService
 * @param {?} currService
 * @return {?}
 */
export function inititializeContext(config, baseSiteService, langService, currService) {
    return (/**
     * @return {?}
     */
    () => {
        baseSiteService.initialize(getContextParameterDefault(config, BASE_SITE_CONTEXT_ID));
        langService.initialize(getContextParameterDefault(config, LANGUAGE_CONTEXT_ID));
        currService.initialize(getContextParameterDefault(config, CURRENCY_CONTEXT_ID));
    });
}
/** @type {?} */
export const contextServiceProviders = [
    BaseSiteService,
    LanguageService,
    CurrencyService,
    {
        provide: APP_INITIALIZER,
        useFactory: inititializeContext,
        deps: [OccConfig, BaseSiteService, LanguageService, CurrencyService],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1zZXJ2aWNlLXByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zaXRlLWNvbnRleHQvcHJvdmlkZXJzL2NvbnRleHQtc2VydmljZS1wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsbUJBQW1CLEVBQ25CLG1CQUFtQixHQUNwQixNQUFNLHVCQUF1QixDQUFDOzs7Ozs7OztBQUUvQixNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLE1BQXlCLEVBQ3pCLGVBQWdDLEVBQ2hDLFdBQTRCLEVBQzVCLFdBQTRCO0lBRTVCOzs7SUFBTyxHQUFHLEVBQUU7UUFDVixlQUFlLENBQUMsVUFBVSxDQUN4QiwwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUMsQ0FDekQsQ0FBQztRQUNGLFdBQVcsQ0FBQyxVQUFVLENBQ3BCLDBCQUEwQixDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUN4RCxDQUFDO1FBQ0YsV0FBVyxDQUFDLFVBQVUsQ0FDcEIsMEJBQTBCLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQ3hELENBQUM7SUFDSixDQUFDLEVBQUM7QUFDSixDQUFDOztBQUVELE1BQU0sT0FBTyx1QkFBdUIsR0FBZTtJQUNqRCxlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7SUFDZjtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxtQkFBbUI7UUFDL0IsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDO1FBQ3BFLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2ZhY2FkZS9sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEN1cnJlbmN5U2VydmljZSB9IGZyb20gJy4uL2ZhY2FkZS9jdXJyZW5jeS5zZXJ2aWNlJztcbmltcG9ydCB7IE9jY0NvbmZpZyB9IGZyb20gJy4uLy4uL29jYy9jb25maWcvb2NjLWNvbmZpZyc7XG5pbXBvcnQgeyBCYXNlU2l0ZVNlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvYmFzZS1zaXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRDb25maWcgfSBmcm9tICcuLi9jb25maWcvc2l0ZS1jb250ZXh0LWNvbmZpZyc7XG5pbXBvcnQgeyBnZXRDb250ZXh0UGFyYW1ldGVyRGVmYXVsdCB9IGZyb20gJy4uL2NvbmZpZy9jb250ZXh0LWNvbmZpZy11dGlscyc7XG5pbXBvcnQge1xuICBCQVNFX1NJVEVfQ09OVEVYVF9JRCxcbiAgQ1VSUkVOQ1lfQ09OVEVYVF9JRCxcbiAgTEFOR1VBR0VfQ09OVEVYVF9JRCxcbn0gZnJvbSAnLi9jb250ZXh0LXNlcnZpY2UtbWFwJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpdGlhbGl6ZUNvbnRleHQoXG4gIGNvbmZpZzogU2l0ZUNvbnRleHRDb25maWcsXG4gIGJhc2VTaXRlU2VydmljZTogQmFzZVNpdGVTZXJ2aWNlLFxuICBsYW5nU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxuICBjdXJyU2VydmljZTogQ3VycmVuY3lTZXJ2aWNlXG4pIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBiYXNlU2l0ZVNlcnZpY2UuaW5pdGlhbGl6ZShcbiAgICAgIGdldENvbnRleHRQYXJhbWV0ZXJEZWZhdWx0KGNvbmZpZywgQkFTRV9TSVRFX0NPTlRFWFRfSUQpXG4gICAgKTtcbiAgICBsYW5nU2VydmljZS5pbml0aWFsaXplKFxuICAgICAgZ2V0Q29udGV4dFBhcmFtZXRlckRlZmF1bHQoY29uZmlnLCBMQU5HVUFHRV9DT05URVhUX0lEKVxuICAgICk7XG4gICAgY3VyclNlcnZpY2UuaW5pdGlhbGl6ZShcbiAgICAgIGdldENvbnRleHRQYXJhbWV0ZXJEZWZhdWx0KGNvbmZpZywgQ1VSUkVOQ1lfQ09OVEVYVF9JRClcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgY29udGV4dFNlcnZpY2VQcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXG4gIEJhc2VTaXRlU2VydmljZSxcbiAgTGFuZ3VhZ2VTZXJ2aWNlLFxuICBDdXJyZW5jeVNlcnZpY2UsXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogaW5pdGl0aWFsaXplQ29udGV4dCxcbiAgICBkZXBzOiBbT2NjQ29uZmlnLCBCYXNlU2l0ZVNlcnZpY2UsIExhbmd1YWdlU2VydmljZSwgQ3VycmVuY3lTZXJ2aWNlXSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbl07XG4iXX0=