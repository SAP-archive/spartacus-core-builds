/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { COMPONENT_ENTITY, NAVIGATION_DETAIL_ENTITY, } from '../cms-state';
import { LOGIN, LOGOUT } from '../../../auth/store/actions/login-logout.action';
import { LANGUAGE_CHANGE } from '../../../site-context/store/actions/languages.action';
import { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';
import * as fromNavigation from './navigation-entry-item.reducer';
import * as fromPageReducer from './page-data.reducer';
import * as fromPageIndexReducer from './page-index.reducer';
import { PageType } from '../../../model/cms.model';
/**
 * @return {?}
 */
export function getReducers() {
    return {
        page: combineReducers({
            pageData: fromPageReducer.reducer,
            index: combineReducers({
                content: entityLoaderReducer(PageType.CONTENT_PAGE, fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)),
                product: entityLoaderReducer(PageType.PRODUCT_PAGE, fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)),
                category: entityLoaderReducer(PageType.CATEGORY_PAGE, fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)),
                catalog: entityLoaderReducer(PageType.CATALOG_PAGE, fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)),
            }),
        }),
        component: entityLoaderReducer(COMPONENT_ENTITY),
        navigation: entityLoaderReducer(NAVIGATION_DETAIL_ENTITY, fromNavigation.reducer),
    };
}
/** @type {?} */
export var reducerToken = new InjectionToken('CmsReducers');
/** @type {?} */
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
/**
 * @param {?} reducer
 * @return {?}
 */
export function clearCmsState(reducer) {
    return function (state, action) {
        if (action.type === LANGUAGE_CHANGE ||
            action.type === LOGOUT ||
            action.type === LOGIN) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
/** @type {?} */
export var metaReducers = [clearCmsState];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFLTCxlQUFlLEdBQ2hCLE1BQU0sYUFBYSxDQUFDO0FBRXJCLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsd0JBQXdCLEdBRXpCLE1BQU0sY0FBYyxDQUFDO0FBRXRCLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBRS9GLE9BQU8sS0FBSyxjQUFjLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxLQUFLLGVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEtBQUssb0JBQW9CLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7O0FBRXBELE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU87UUFDTCxJQUFJLEVBQUUsZUFBZSxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxlQUFlLENBQUMsT0FBTztZQUNqQyxLQUFLLEVBQUUsZUFBZSxDQUFDO2dCQUNyQixPQUFPLEVBQUUsbUJBQW1CLENBQzFCLFFBQVEsQ0FBQyxZQUFZLEVBQ3JCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ3BEO2dCQUNELE9BQU8sRUFBRSxtQkFBbUIsQ0FDMUIsUUFBUSxDQUFDLFlBQVksRUFDckIsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDcEQ7Z0JBQ0QsUUFBUSxFQUFFLG1CQUFtQixDQUMzQixRQUFRLENBQUMsYUFBYSxFQUN0QixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUNyRDtnQkFDRCxPQUFPLEVBQUUsbUJBQW1CLENBQzFCLFFBQVEsQ0FBQyxZQUFZLEVBQ3JCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQ3BEO2FBQ0YsQ0FBQztTQUNILENBQUM7UUFDRixTQUFTLEVBQUUsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsVUFBVSxFQUFFLG1CQUFtQixDQUM3Qix3QkFBd0IsRUFDeEIsY0FBYyxDQUFDLE9BQU8sQ0FDdkI7S0FDRixDQUFDO0FBQ0osQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUVyQixJQUFJLGNBQWMsQ0FBNkIsYUFBYSxDQUFDOztBQUVqRSxNQUFNLEtBQU8sZUFBZSxHQUFhO0lBQ3ZDLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFVBQVUsRUFBRSxXQUFXO0NBQ3hCOzs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQzNCLE9BQTRDO0lBRTVDLE9BQU8sVUFBUyxLQUFLLEVBQUUsTUFBTTtRQUMzQixJQUNFLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBZTtZQUMvQixNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU07WUFDdEIsTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQ3JCO1lBQ0EsS0FBSyxHQUFHLFNBQVMsQ0FBQztTQUNuQjtRQUNELE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7QUFDSixDQUFDOztBQUVELE1BQU0sS0FBTyxZQUFZLEdBQWdDLENBQUMsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIEFjdGlvblJlZHVjZXIsXG4gIEFjdGlvblJlZHVjZXJNYXAsXG4gIE1ldGFSZWR1Y2VyLFxuICBBY3Rpb24sXG4gIGNvbWJpbmVSZWR1Y2Vycyxcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG5pbXBvcnQge1xuICBDbXNTdGF0ZSxcbiAgQ09NUE9ORU5UX0VOVElUWSxcbiAgTkFWSUdBVElPTl9ERVRBSUxfRU5USVRZLFxuICBTdGF0ZVdpdGhDbXMsXG59IGZyb20gJy4uL2Ntcy1zdGF0ZSc7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gJy4uLy4uL21vZGVsL25vZGUtaXRlbS5tb2RlbCc7XG5pbXBvcnQgeyBMT0dJTiwgTE9HT1VUIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9zdG9yZS9hY3Rpb25zL2xvZ2luLWxvZ291dC5hY3Rpb24nO1xuaW1wb3J0IHsgTEFOR1VBR0VfQ0hBTkdFIH0gZnJvbSAnLi4vLi4vLi4vc2l0ZS1jb250ZXh0L3N0b3JlL2FjdGlvbnMvbGFuZ3VhZ2VzLmFjdGlvbic7XG5pbXBvcnQgeyBlbnRpdHlMb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLnJlZHVjZXInO1xuXG5pbXBvcnQgKiBhcyBmcm9tTmF2aWdhdGlvbiBmcm9tICcuL25hdmlnYXRpb24tZW50cnktaXRlbS5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21QYWdlUmVkdWNlciBmcm9tICcuL3BhZ2UtZGF0YS5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21QYWdlSW5kZXhSZWR1Y2VyIGZyb20gJy4vcGFnZS1pbmRleC5yZWR1Y2VyJztcbmltcG9ydCB7IFBhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZHVjZXJzKCk6IEFjdGlvblJlZHVjZXJNYXA8Q21zU3RhdGU+IHtcbiAgcmV0dXJuIHtcbiAgICBwYWdlOiBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgcGFnZURhdGE6IGZyb21QYWdlUmVkdWNlci5yZWR1Y2VyLFxuICAgICAgaW5kZXg6IGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICAgIGNvbnRlbnQ6IGVudGl0eUxvYWRlclJlZHVjZXI8c3RyaW5nPihcbiAgICAgICAgICBQYWdlVHlwZS5DT05URU5UX1BBR0UsXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DT05URU5UX1BBR0UpXG4gICAgICAgICksXG4gICAgICAgIHByb2R1Y3Q6IGVudGl0eUxvYWRlclJlZHVjZXI8c3RyaW5nPihcbiAgICAgICAgICBQYWdlVHlwZS5QUk9EVUNUX1BBR0UsXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5QUk9EVUNUX1BBR0UpXG4gICAgICAgICksXG4gICAgICAgIGNhdGVnb3J5OiBlbnRpdHlMb2FkZXJSZWR1Y2VyPHN0cmluZz4oXG4gICAgICAgICAgUGFnZVR5cGUuQ0FURUdPUllfUEFHRSxcbiAgICAgICAgICBmcm9tUGFnZUluZGV4UmVkdWNlci5yZWR1Y2VyKFBhZ2VUeXBlLkNBVEVHT1JZX1BBR0UpXG4gICAgICAgICksXG4gICAgICAgIGNhdGFsb2c6IGVudGl0eUxvYWRlclJlZHVjZXI8c3RyaW5nPihcbiAgICAgICAgICBQYWdlVHlwZS5DQVRBTE9HX1BBR0UsXG4gICAgICAgICAgZnJvbVBhZ2VJbmRleFJlZHVjZXIucmVkdWNlcihQYWdlVHlwZS5DQVRBTE9HX1BBR0UpXG4gICAgICAgICksXG4gICAgICB9KSxcbiAgICB9KSxcbiAgICBjb21wb25lbnQ6IGVudGl0eUxvYWRlclJlZHVjZXIoQ09NUE9ORU5UX0VOVElUWSksXG4gICAgbmF2aWdhdGlvbjogZW50aXR5TG9hZGVyUmVkdWNlcjxOb2RlSXRlbT4oXG4gICAgICBOQVZJR0FUSU9OX0RFVEFJTF9FTlRJVFksXG4gICAgICBmcm9tTmF2aWdhdGlvbi5yZWR1Y2VyXG4gICAgKSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJUb2tlbjogSW5qZWN0aW9uVG9rZW48XG4gIEFjdGlvblJlZHVjZXJNYXA8Q21zU3RhdGU+XG4+ID0gbmV3IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8Q21zU3RhdGU+PignQ21zUmVkdWNlcnMnKTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJQcm92aWRlcjogUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IHJlZHVjZXJUb2tlbixcbiAgdXNlRmFjdG9yeTogZ2V0UmVkdWNlcnMsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDbXNTdGF0ZShcbiAgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxTdGF0ZVdpdGhDbXMsIEFjdGlvbj5cbik6IEFjdGlvblJlZHVjZXI8U3RhdGVXaXRoQ21zLCBBY3Rpb24+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoXG4gICAgICBhY3Rpb24udHlwZSA9PT0gTEFOR1VBR0VfQ0hBTkdFIHx8XG4gICAgICBhY3Rpb24udHlwZSA9PT0gTE9HT1VUIHx8XG4gICAgICBhY3Rpb24udHlwZSA9PT0gTE9HSU5cbiAgICApIHtcbiAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IG1ldGFSZWR1Y2VyczogTWV0YVJlZHVjZXI8U3RhdGVXaXRoQ21zPltdID0gW2NsZWFyQ21zU3RhdGVdO1xuIl19