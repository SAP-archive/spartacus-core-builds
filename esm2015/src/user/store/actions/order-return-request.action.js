import { USER_RETURN_REQUESTS, USER_RETURN_REQUEST_DETAILS, CANCEL_RETURN_PROCESS_ID, } from '../user-state';
import { LoaderFailAction, LoaderLoadAction, LoaderSuccessAction, LoaderResetAction, } from '../../../state/utils/loader/loader.action';
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
export const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';
export const CREATE_ORDER_RETURN_REQUEST_FAIL = '[User] Create Order Return Request Fail';
export const CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[User] Create Order Return Request Success';
export const LOAD_ORDER_RETURN_REQUEST = '[User] Load Order Return Request details';
export const LOAD_ORDER_RETURN_REQUEST_FAIL = '[User] Load Order Return Request details Fail';
export const LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[User] Load Order Return Request details Success';
export const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';
export const CANCEL_ORDER_RETURN_REQUEST_FAIL = '[User] Cancel Order Return Request Fail';
export const CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[User] Cancel Order Return Request Success';
export const LOAD_ORDER_RETURN_REQUEST_LIST = '[User] Load User Order Return Request List';
export const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[User] Load User Order Return Request List Fail';
export const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[User] Load User Order Return Request List Success';
export const CLEAR_ORDER_RETURN_REQUEST = '[User] Clear Order Return Request Details';
export const CLEAR_ORDER_RETURN_REQUEST_LIST = '[User] Clear Order Return Request List';
export const RESET_CANCEL_RETURN_PROCESS = '[User] Reset Cancel Return Request Process';
export class CreateOrderReturnRequest extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST;
    }
}
export class CreateOrderReturnRequestFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class LoadOrderReturnRequest extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST;
    }
}
export class LoadOrderReturnRequestFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST;
    }
}
export class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class LoadOrderReturnRequestList extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
    }
}
export class LoadOrderReturnRequestListFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
    }
}
export class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
    }
}
export class ClearOrderReturnRequest extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUEST_DETAILS);
        this.type = CLEAR_ORDER_RETURN_REQUEST;
    }
}
export class ClearOrderReturnRequestList extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUESTS);
        this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
    }
}
export class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = RESET_CANCEL_RETURN_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,