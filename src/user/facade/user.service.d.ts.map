{"version":3,"file":"user.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/user/facade/user.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected authService?: AuthService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\n    /**\n     * @deprecated since version 1.3\n     *  Use constructor(store: Store<StateWithUser | StateWithProcess<void>>,\n     *  authService: AuthService) instead\n     *\n     *  TODO(issue:#5628) Deprecated since 1.3.0\n     */\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>);\n    /**\n     * Returns a user\n     */\n    get(): Observable<User>;\n    /**\n     * Loads the user's details\n     */\n    load(): void;\n    /**\n     * Register a new user\n     *\n     * @param submitFormData as UserRegisterFormData\n     */\n    register(userRegisterFormData: UserSignUp): void;\n    /**\n     * Register a new user from guest\n     *\n     * @param guid\n     * @param password\n     */\n    registerGuest(guid: string, password: string): void;\n    /**\n     * Returns the register user process loading flag\n     */\n    getRegisterUserResultLoading(): Observable<boolean>;\n    /**\n     * Returns the register user process success flag\n     */\n    getRegisterUserResultSuccess(): Observable<boolean>;\n    /**\n     * Returns the register user process error flag\n     */\n    getRegisterUserResultError(): Observable<boolean>;\n    /**\n     * Resets the register user process flags\n     */\n    resetRegisterUserProcessState(): void;\n    /**\n     * Remove user account, that's also called close user's account\n     */\n    remove(): void;\n    /**\n     * Returns the remove user loading flag\n     */\n    getRemoveUserResultLoading(): Observable<boolean>;\n    /**\n     * Returns the remove user failure outcome.\n     */\n    getRemoveUserResultError(): Observable<boolean>;\n    /**\n     * Returns the remove user process success outcome.\n     */\n    getRemoveUserResultSuccess(): Observable<boolean>;\n    /**\n     * Resets the remove user process state. The state needs to be reset after the process\n     * concludes, regardless if it's a success or an error\n     */\n    resetRemoveUserProcessState(): void;\n    /**\n     * Returns titles\n     */\n    getTitles(): Observable<Title[]>;\n    /**\n     * Retrieves titles\n     */\n    loadTitles(): void;\n    /**\n     * Return whether user's password is successfully reset\n     */\n    isPasswordReset(): Observable<boolean>;\n    /**\n     * Updates the user's details\n     * @param userDetails to be updated\n     */\n    updatePersonalDetails(userDetails: User): void;\n    /**\n     * Returns the update user's personal details loading flag\n     */\n    getUpdatePersonalDetailsResultLoading(): Observable<boolean>;\n    /**\n     * Returns the update user's personal details error flag\n     */\n    getUpdatePersonalDetailsResultError(): Observable<boolean>;\n    /**\n     * Returns the update user's personal details success flag\n     */\n    getUpdatePersonalDetailsResultSuccess(): Observable<boolean>;\n    /**\n     * Resets the update user details processing state\n     */\n    resetUpdatePersonalDetailsProcessingState(): void;\n    /**\n     * Reset new password.  Part of the forgot password flow.\n     * @param token\n     * @param password\n     */\n    resetPassword(token: string, password: string): void;\n    requestForgotPasswordEmail(userEmailAddress: string): void;\n    /**\n     * Updates the user's email\n     */\n    updateEmail(password: string, newUid: string): void;\n    /**\n     * Returns the update user's email success flag\n     */\n    getUpdateEmailResultSuccess(): Observable<boolean>;\n    /**\n     * Returns the update user's email error flag\n     */\n    getUpdateEmailResultError(): Observable<boolean>;\n    /**\n     * Returns the update user's email loading flag\n     */\n    getUpdateEmailResultLoading(): Observable<boolean>;\n    /**\n     * Resets the update user's email processing state\n     */\n    resetUpdateEmailResultState(): void;\n    /**\n     * Updates the password for the user\n     * @param oldPassword the current password that will be changed\n     * @param newPassword the new password\n     */\n    updatePassword(oldPassword: string, newPassword: string): void;\n    /**\n     * Returns the update password loading flag\n     */\n    getUpdatePasswordResultLoading(): Observable<boolean>;\n    /**\n     * Returns the update password failure outcome.\n     */\n    getUpdatePasswordResultError(): Observable<boolean>;\n    /**\n     * Returns the update password process success outcome.\n     */\n    getUpdatePasswordResultSuccess(): Observable<boolean>;\n    /**\n     * Resets the update password process state. The state needs to be reset after the process\n     * concludes, regardless if it's a success or an error\n     */\n    resetUpdatePasswordProcessState(): void;\n    /**\n     * Utility method to distinquish pre / post 1.3.0 in a convenient way.\n     *\n     */\n    private withUserId;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA;"}