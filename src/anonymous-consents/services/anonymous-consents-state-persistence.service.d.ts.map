{"version":3,"file":"anonymous-consents-state-persistence.service.d.ts","sources":["anonymous-consents-state-persistence.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { StatePersistenceService } from '../../state/index';\nimport { AnonymousConsentsService } from '../facade/index';\nimport { AnonymousConsentsState, StateWithAnonymousConsents } from '../store/index';\n/**\n * Anonymous consents state synced to browser storage.\n */\nexport declare type SyncedAnonymousConsentsState = Partial<AnonymousConsentsState>;\n/**\n * Responsible for saving the anonymous consents data in browser storage.\n */\nexport declare class AnonymousConsentsStatePersistenceService implements OnDestroy {\n    protected statePersistenceService: StatePersistenceService;\n    protected store: Store<StateWithAnonymousConsents>;\n    protected anonymousConsentsService: AnonymousConsentsService;\n    protected subscription: Subscription;\n    constructor(statePersistenceService: StatePersistenceService, store: Store<StateWithAnonymousConsents>, anonymousConsentsService: AnonymousConsentsService);\n    /**\n     * Identifier used for storage key.\n     */\n    protected key: string;\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync(): void;\n    /**\n     * Gets and transforms state from different sources into the form that should\n     * be saved in storage.\n     */\n    protected getAuthState(): Observable<SyncedAnonymousConsentsState>;\n    /**\n     * Function called on each browser storage read.\n     * Used to update state from browser -> state.\n     */\n    protected onRead(state: SyncedAnonymousConsentsState): void;\n    ngOnDestroy(): void;\n}\n"]}