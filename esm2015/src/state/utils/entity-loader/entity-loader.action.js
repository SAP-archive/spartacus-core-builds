import { entityMeta } from '../entity/entity.action';
import { failMeta, loadMeta, resetMeta, successMeta, } from '../loader/loader.action';
export const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
export const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
export const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
export const ENTITY_RESET_ACTION = '[ENTITY] RESET';
export function entityLoadMeta(entityType, id) {
    return Object.assign(Object.assign({}, loadMeta(entityType)), entityMeta(entityType, id));
}
export function entityFailMeta(entityType, id, error) {
    return Object.assign(Object.assign({}, failMeta(entityType, error)), entityMeta(entityType, id));
}
export function entitySuccessMeta(entityType, id) {
    return Object.assign(Object.assign({}, successMeta(entityType)), entityMeta(entityType, id));
}
export function entityResetMeta(entityType, id) {
    return Object.assign(Object.assign({}, resetMeta(entityType)), entityMeta(entityType, id));
}
export class EntityLoadAction {
    constructor(entityType, id) {
        this.type = ENTITY_LOAD_ACTION;
        this.meta = entityLoadMeta(entityType, id);
    }
}
export class EntityFailAction {
    constructor(entityType, id, error) {
        this.type = ENTITY_FAIL_ACTION;
        this.meta = entityFailMeta(entityType, id, error);
    }
}
export class EntitySuccessAction {
    constructor(entityType, id, payload) {
        this.payload = payload;
        this.type = ENTITY_SUCCESS_ACTION;
        this.meta = entitySuccessMeta(entityType, id);
    }
}
export class EntityLoaderResetAction {
    constructor(entityType, id) {
        this.type = ENTITY_RESET_ACTION;
        this.meta = entityResetMeta(entityType, id);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWxvYWRlci5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQ0wsUUFBUSxFQUVSLFFBQVEsRUFDUixTQUFTLEVBQ1QsV0FBVyxHQUNaLE1BQU0seUJBQXlCLENBQUM7QUFFakMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsZUFBZSxDQUFDO0FBQ2xELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLG9CQUFvQixDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLHVCQUF1QixDQUFDO0FBQzdELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDO0FBU3BELE1BQU0sVUFBVSxjQUFjLENBQzVCLFVBQWtCLEVBQ2xCLEVBQXFCO0lBRXJCLHVDQUNLLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FDcEIsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFDN0I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsVUFBa0IsRUFDbEIsRUFBcUIsRUFDckIsS0FBVztJQUVYLHVDQUNLLFFBQVEsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEdBQzNCLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQzdCO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsVUFBa0IsRUFDbEIsRUFBcUI7SUFFckIsdUNBQ0ssV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUN2QixVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUM3QjtBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUM3QixVQUFrQixFQUNsQixFQUFxQjtJQUVyQix1Q0FDSyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQ3JCLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQzdCO0FBQ0osQ0FBQztBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBWSxVQUFrQixFQUFFLEVBQXFCO1FBRnJELFNBQUksR0FBRyxrQkFBa0IsQ0FBQztRQUd4QixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFZLFVBQWtCLEVBQUUsRUFBcUIsRUFBRSxLQUFXO1FBRmxFLFNBQUksR0FBRyxrQkFBa0IsQ0FBQztRQUd4QixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxtQkFBbUI7SUFHOUIsWUFBWSxVQUFrQixFQUFFLEVBQXFCLEVBQVMsT0FBYTtRQUFiLFlBQU8sR0FBUCxPQUFPLENBQU07UUFGM0UsU0FBSSxHQUFHLHFCQUFxQixDQUFDO1FBRzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFBWSxVQUFrQixFQUFFLEVBQXFCO1FBRnJELFNBQUksR0FBRyxtQkFBbUIsQ0FBQztRQUd6QixJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgZW50aXR5TWV0YSwgRW50aXR5TWV0YSB9IGZyb20gJy4uL2VudGl0eS9lbnRpdHkuYWN0aW9uJztcbmltcG9ydCB7XG4gIGZhaWxNZXRhLFxuICBMb2FkZXJNZXRhLFxuICBsb2FkTWV0YSxcbiAgcmVzZXRNZXRhLFxuICBzdWNjZXNzTWV0YSxcbn0gZnJvbSAnLi4vbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgRU5USVRZX0xPQURfQUNUSU9OID0gJ1tFTlRJVFldIExPQUQnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9GQUlMX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEIEZBSUwnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9TVUNDRVNTX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEIFNVQ0NFU1MnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9SRVNFVF9BQ1RJT04gPSAnW0VOVElUWV0gUkVTRVQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUxvYWRlck1ldGEgZXh0ZW5kcyBFbnRpdHlNZXRhLCBMb2FkZXJNZXRhIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5TG9hZGVyQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgcGF5bG9hZD86IGFueTtcbiAgcmVhZG9ubHkgbWV0YT86IEVudGl0eUxvYWRlck1ldGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlMb2FkTWV0YShcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxuICBpZDogc3RyaW5nIHwgc3RyaW5nW11cbik6IEVudGl0eUxvYWRlck1ldGEge1xuICByZXR1cm4ge1xuICAgIC4uLmxvYWRNZXRhKGVudGl0eVR5cGUpLFxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5RmFpbE1ldGEoXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcbiAgaWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICBlcnJvcj86IGFueVxuKTogRW50aXR5TG9hZGVyTWV0YSB7XG4gIHJldHVybiB7XG4gICAgLi4uZmFpbE1ldGEoZW50aXR5VHlwZSwgZXJyb3IpLFxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5U3VjY2Vzc01ldGEoXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcbiAgaWQ6IHN0cmluZyB8IHN0cmluZ1tdXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdWNjZXNzTWV0YShlbnRpdHlUeXBlKSxcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eVJlc2V0TWV0YShcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxuICBpZDogc3RyaW5nIHwgc3RyaW5nW11cbik6IEVudGl0eUxvYWRlck1ldGEge1xuICByZXR1cm4ge1xuICAgIC4uLnJlc2V0TWV0YShlbnRpdHlUeXBlKSxcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIEVudGl0eUxvYWRBY3Rpb24gaW1wbGVtZW50cyBFbnRpdHlMb2FkZXJBY3Rpb24ge1xuICB0eXBlID0gRU5USVRZX0xPQURfQUNUSU9OO1xuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHRoaXMubWV0YSA9IGVudGl0eUxvYWRNZXRhKGVudGl0eVR5cGUsIGlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRW50aXR5RmFpbEFjdGlvbiBpbXBsZW1lbnRzIEVudGl0eUxvYWRlckFjdGlvbiB7XG4gIHR5cGUgPSBFTlRJVFlfRkFJTF9BQ1RJT047XG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XG4gIGNvbnN0cnVjdG9yKGVudGl0eVR5cGU6IHN0cmluZywgaWQ6IHN0cmluZyB8IHN0cmluZ1tdLCBlcnJvcj86IGFueSkge1xuICAgIHRoaXMubWV0YSA9IGVudGl0eUZhaWxNZXRhKGVudGl0eVR5cGUsIGlkLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGl0eVN1Y2Nlc3NBY3Rpb24gaW1wbGVtZW50cyBFbnRpdHlMb2FkZXJBY3Rpb24ge1xuICB0eXBlID0gRU5USVRZX1NVQ0NFU1NfQUNUSU9OO1xuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBzdHJpbmdbXSwgcHVibGljIHBheWxvYWQ/OiBhbnkpIHtcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlTdWNjZXNzTWV0YShlbnRpdHlUeXBlLCBpZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGl0eUxvYWRlclJlc2V0QWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcbiAgdHlwZSA9IEVOVElUWV9SRVNFVF9BQ1RJT047XG4gIHJlYWRvbmx5IG1ldGE6IEVudGl0eUxvYWRlck1ldGE7XG4gIGNvbnN0cnVjdG9yKGVudGl0eVR5cGU6IHN0cmluZywgaWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5tZXRhID0gZW50aXR5UmVzZXRNZXRhKGVudGl0eVR5cGUsIGlkKTtcbiAgfVxufVxuIl19