import { APP_INITIALIZER } from '@angular/core';
import { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';
import { BaseSiteService } from '../facade/base-site.service';
import { CurrencyService } from '../facade/currency.service';
import { LanguageService } from '../facade/language.service';
/**
 * @deprecated since 1.3 - should be removed from public API and the logic should be moved to the function `initializeContext`
 */
export function inititializeContext(baseSiteService, langService, currService) {
    return function () {
        baseSiteService.initialize();
        langService.initialize();
        currService.initialize();
    };
}
export function initializeContext(baseSiteService, langService, currService, configInit) {
    return function () {
        var initialize = inititializeContext(baseSiteService, langService, currService);
        configInit.getStableConfig('context').then(function () {
            initialize();
        });
    };
}
/**
 * @deprecated since 1.3 - should be removed
 */
export var deprecatedContextServiceProviders = [
    BaseSiteService,
    LanguageService,
    CurrencyService,
    {
        provide: APP_INITIALIZER,
        useFactory: inititializeContext,
        deps: [BaseSiteService, LanguageService, CurrencyService],
        multi: true,
    },
];
export var contextServiceProviders = [
    BaseSiteService,
    LanguageService,
    CurrencyService,
    {
        provide: APP_INITIALIZER,
        useFactory: initializeContext,
        deps: [
            BaseSiteService,
            LanguageService,
            CurrencyService,
            ConfigInitializerService,
        ],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1zZXJ2aWNlLXByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zaXRlLWNvbnRleHQvcHJvdmlkZXJzL2NvbnRleHQtc2VydmljZS1wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUN0RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU3RDs7R0FFRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsZUFBZ0MsRUFDaEMsV0FBNEIsRUFDNUIsV0FBNEI7SUFFNUIsT0FBTztRQUNMLGVBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM3QixXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDekIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLGVBQWdDLEVBQ2hDLFdBQTRCLEVBQzVCLFdBQTRCLEVBQzVCLFVBQW9DO0lBRXBDLE9BQU87UUFDTCxJQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FDcEMsZUFBZSxFQUNmLFdBQVcsRUFDWCxXQUFXLENBQ1osQ0FBQztRQUVGLFVBQVUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3pDLFVBQVUsRUFBRSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxpQ0FBaUMsR0FBZTtJQUMzRCxlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7SUFDZjtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxtQkFBbUI7UUFDL0IsSUFBSSxFQUFFLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFBRSxlQUFlLENBQUM7UUFDekQsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBZTtJQUNqRCxlQUFlO0lBQ2YsZUFBZTtJQUNmLGVBQWU7SUFDZjtRQUNFLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsSUFBSSxFQUFFO1lBQ0osZUFBZTtZQUNmLGVBQWU7WUFDZixlQUFlO1lBQ2Ysd0JBQXdCO1NBQ3pCO1FBQ0QsS0FBSyxFQUFFLElBQUk7S0FDWjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWdJbml0aWFsaXplclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLWluaXRpYWxpemVyL2NvbmZpZy1pbml0aWFsaXplci5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VTaXRlU2VydmljZSB9IGZyb20gJy4uL2ZhY2FkZS9iYXNlLXNpdGUuc2VydmljZSc7XG5pbXBvcnQgeyBDdXJyZW5jeVNlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvY3VycmVuY3kuc2VydmljZSc7XG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMS4zIC0gc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSBwdWJsaWMgQVBJIGFuZCB0aGUgbG9naWMgc2hvdWxkIGJlIG1vdmVkIHRvIHRoZSBmdW5jdGlvbiBgaW5pdGlhbGl6ZUNvbnRleHRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aXRpYWxpemVDb250ZXh0KFxuICBiYXNlU2l0ZVNlcnZpY2U6IEJhc2VTaXRlU2VydmljZSxcbiAgbGFuZ1NlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcbiAgY3VyclNlcnZpY2U6IEN1cnJlbmN5U2VydmljZVxuKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgYmFzZVNpdGVTZXJ2aWNlLmluaXRpYWxpemUoKTtcbiAgICBsYW5nU2VydmljZS5pbml0aWFsaXplKCk7XG4gICAgY3VyclNlcnZpY2UuaW5pdGlhbGl6ZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRleHQoXG4gIGJhc2VTaXRlU2VydmljZTogQmFzZVNpdGVTZXJ2aWNlLFxuICBsYW5nU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxuICBjdXJyU2VydmljZTogQ3VycmVuY3lTZXJ2aWNlLFxuICBjb25maWdJbml0OiBDb25maWdJbml0aWFsaXplclNlcnZpY2Vcbikge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxpemUgPSBpbml0aXRpYWxpemVDb250ZXh0KFxuICAgICAgYmFzZVNpdGVTZXJ2aWNlLFxuICAgICAgbGFuZ1NlcnZpY2UsXG4gICAgICBjdXJyU2VydmljZVxuICAgICk7XG5cbiAgICBjb25maWdJbml0LmdldFN0YWJsZUNvbmZpZygnY29udGV4dCcpLnRoZW4oKCkgPT4ge1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDEuMyAtIHNob3VsZCBiZSByZW1vdmVkXG4gKi9cbmV4cG9ydCBjb25zdCBkZXByZWNhdGVkQ29udGV4dFNlcnZpY2VQcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXG4gIEJhc2VTaXRlU2VydmljZSxcbiAgTGFuZ3VhZ2VTZXJ2aWNlLFxuICBDdXJyZW5jeVNlcnZpY2UsXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogaW5pdGl0aWFsaXplQ29udGV4dCxcbiAgICBkZXBzOiBbQmFzZVNpdGVTZXJ2aWNlLCBMYW5ndWFnZVNlcnZpY2UsIEN1cnJlbmN5U2VydmljZV0sXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgY29udGV4dFNlcnZpY2VQcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXG4gIEJhc2VTaXRlU2VydmljZSxcbiAgTGFuZ3VhZ2VTZXJ2aWNlLFxuICBDdXJyZW5jeVNlcnZpY2UsXG4gIHtcbiAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgdXNlRmFjdG9yeTogaW5pdGlhbGl6ZUNvbnRleHQsXG4gICAgZGVwczogW1xuICAgICAgQmFzZVNpdGVTZXJ2aWNlLFxuICAgICAgTGFuZ3VhZ2VTZXJ2aWNlLFxuICAgICAgQ3VycmVuY3lTZXJ2aWNlLFxuICAgICAgQ29uZmlnSW5pdGlhbGl6ZXJTZXJ2aWNlLFxuICAgIF0sXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG5dO1xuIl19