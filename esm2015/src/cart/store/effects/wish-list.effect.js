import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { select, Store } from '@ngrx/store';
import { EMPTY, from } from 'rxjs';
import { catchError, concatMap, map, switchMap, withLatestFrom, } from 'rxjs/operators';
import { UserIdService } from '../../../auth/user-auth/facade/user-id.service';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { CartConnector } from '../../connectors/cart/cart.connector';
import { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';
import { getCartIdByUserId, getWishlistName } from '../../utils/utils';
import { CartActions } from '../actions';
import { MultiCartSelectors } from '../selectors';
export class WishListEffects {
    constructor(actions$, cartConnector, saveCartConnector, userIdService, store) {
        this.actions$ = actions$;
        this.cartConnector = cartConnector;
        this.saveCartConnector = saveCartConnector;
        this.userIdService = userIdService;
        this.store = store;
        this.createWishList$ = this.actions$.pipe(ofType(CartActions.CREATE_WISH_LIST), map((action) => action.payload), switchMap((payload) => {
            return this.cartConnector.create(payload.userId).pipe(switchMap((cart) => {
                return this.saveCartConnector
                    .saveCart(payload.userId, cart.code, payload.name, payload.description)
                    .pipe(switchMap((saveCartResult) => [
                    new CartActions.CreateWishListSuccess({
                        cart: saveCartResult.savedCartData,
                        userId: payload.userId,
                    }),
                ]), catchError((error) => from([
                    new CartActions.CreateWishListFail({
                        cartId: cart.code,
                        error: makeErrorSerializable(error),
                    }),
                ])));
            }));
        }));
        this.loadWishList$ = this.actions$.pipe(ofType(CartActions.LOAD_WISH_LIST), map((action) => action.payload), concatMap((payload) => {
            const { userId, customerId, tempCartId } = payload;
            return this.cartConnector.loadAll(userId).pipe(switchMap((carts) => {
                if (carts) {
                    const wishList = carts.find((cart) => cart.name === getWishlistName(customerId));
                    if (Boolean(wishList)) {
                        return [
                            new CartActions.LoadWishListSuccess({
                                cart: wishList,
                                userId,
                                tempCartId,
                                customerId,
                                cartId: getCartIdByUserId(wishList, userId),
                            }),
                            new CartActions.RemoveCart({ cartId: tempCartId }),
                        ];
                    }
                    else {
                        return [
                            new CartActions.CreateWishList({
                                userId,
                                name: getWishlistName(customerId),
                            }),
                        ];
                    }
                }
            }), catchError((error) => from([
                new CartActions.LoadWishListFail({
                    userId,
                    cartId: tempCartId,
                    customerId,
                    error: makeErrorSerializable(error),
                }),
            ])));
        }));
        this.resetWishList$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), withLatestFrom(this.userIdService.getUserId(), this.store.pipe(select(MultiCartSelectors.getWishListId))), switchMap(([, userId, wishListId]) => {
            if (Boolean(wishListId)) {
                return this.cartConnector.load(userId, wishListId).pipe(switchMap((wishList) => [
                    new CartActions.LoadWishListSuccess({
                        cart: wishList,
                        userId,
                        cartId: getCartIdByUserId(wishList, userId),
                    }),
                ]), catchError((error) => from([
                    new CartActions.LoadWishListFail({
                        userId,
                        cartId: wishListId,
                        error: makeErrorSerializable(error),
                    }),
                ])));
            }
            return EMPTY;
        }));
    }
}
WishListEffects.decorators = [
    { type: Injectable }
];
WishListEffects.ctorParameters = () => [
    { type: Actions },
    { type: CartConnector },
    { type: SaveCartConnector },
    { type: UserIdService },
    { type: Store }
];
__decorate([
    Effect()
], WishListEffects.prototype, "createWishList$", void 0);
__decorate([
    Effect()
], WishListEffects.prototype, "loadWishList$", void 0);
__decorate([
    Effect()
], WishListEffects.prototype, "resetWishList$", void 0);
//# sourceMappingURL=data:application/json;base64,