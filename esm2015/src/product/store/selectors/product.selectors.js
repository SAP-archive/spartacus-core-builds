import { createSelector } from '@ngrx/store';
import { initialLoaderState, StateEntityLoaderSelectors, StateLoaderSelectors, } from '../../../state/utils/index';
import { getProductsState } from './feature.selector';
const ɵ0 = (state) => state.details;
export const getProductState = createSelector(getProductsState, ɵ0);
export const getSelectedProductsFactory = (codes) => {
    return createSelector(getProductState, (details) => {
        return codes
            .map((code) => details.entities[code] ? details.entities[code].value : undefined)
            .filter((product) => product !== undefined);
    });
};
export const getSelectedProductStateFactory = (code, scope) => {
    return createSelector(getProductState, (details) => scope
        ? StateEntityLoaderSelectors.entityStateSelector(details, code)[scope] ||
            initialLoaderState
        : StateEntityLoaderSelectors.entityStateSelector(details, code));
};
export const getSelectedProductFactory = (code, scope) => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateLoaderSelectors.loaderValueSelector(productState));
};
export const getSelectedProductLoadingFactory = (code, scope) => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateLoaderSelectors.loaderLoadingSelector(productState));
};
export const getSelectedProductSuccessFactory = (code, scope) => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateLoaderSelectors.loaderSuccessSelector(productState));
};
export const getSelectedProductErrorFactory = (code, scope) => {
    return createSelector(getSelectedProductStateFactory(code, scope), (productState) => StateLoaderSelectors.loaderErrorSelector(productState));
};
const ɵ1 = (details) => {
    return Object.keys(details.entities);
};
export const getAllProductCodes = createSelector(getProductState, ɵ1);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvcHJvZHVjdC9zdG9yZS9zZWxlY3RvcnMvcHJvZHVjdC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFHL0QsT0FBTyxFQUNMLGtCQUFrQixFQUNsQiwwQkFBMEIsRUFDMUIsb0JBQW9CLEdBQ3JCLE1BQU0sNEJBQTRCLENBQUM7QUFHcEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7V0FLakIsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTztBQUg1RSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBR3hCLGNBQWMsQ0FBQyxnQkFBZ0IsS0FBMEMsQ0FBQztBQUU5RSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUN4QyxLQUFlLEVBQ2dDLEVBQUU7SUFDakQsT0FBTyxjQUFjLENBQ25CLGVBQWUsRUFDZixDQUFDLE9BQW1DLEVBQUUsRUFBRTtRQUN0QyxPQUFPLEtBQUs7YUFDVCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNaLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ2xFO2FBQ0EsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxDQUM1QyxJQUFZLEVBQ1osS0FBYyxFQUM0QyxFQUFFO0lBQzVELE9BQU8sY0FBYyxDQUFDLGVBQWUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ2pELEtBQUs7UUFDSCxDQUFDLENBQUMsMEJBQTBCLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNwRSxrQkFBa0I7UUFDcEIsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FDbEUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLElBQVksRUFDWixLQUFjLEVBQytCLEVBQUU7SUFDL0MsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUN6RSxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsQ0FDOUMsSUFBWSxFQUNaLEtBQWMsRUFDK0IsRUFBRTtJQUMvQyxPQUFPLGNBQWMsQ0FDbkIsOEJBQThCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUMzQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQzNFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxJQUFZLEVBQ1osS0FBYyxFQUMrQixFQUFFO0lBQy9DLE9BQU8sY0FBYyxDQUNuQiw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FDM0UsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLElBQVksRUFDWixLQUFjLEVBQytCLEVBQUU7SUFDL0MsT0FBTyxjQUFjLENBQ25CLDhCQUE4QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0MsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUN6RSxDQUFDO0FBQ0osQ0FBQyxDQUFDO1dBS2tDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDOUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBTEQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FBQyxlQUFlLEtBRWhDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wcm9kdWN0Lm1vZGVsJztcbmltcG9ydCB7IEVudGl0eUxvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7XG4gIGluaXRpYWxMb2FkZXJTdGF0ZSxcbiAgU3RhdGVFbnRpdHlMb2FkZXJTZWxlY3RvcnMsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHsgUHJvZHVjdHNTdGF0ZSwgU3RhdGVXaXRoUHJvZHVjdCB9IGZyb20gJy4uL3Byb2R1Y3Qtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0UHJvZHVjdHNTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9kdWN0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFByb2R1Y3QsXG4gIEVudGl0eUxvYWRlclN0YXRlPFByb2R1Y3Q+XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZHVjdHNTdGF0ZSwgKHN0YXRlOiBQcm9kdWN0c1N0YXRlKSA9PiBzdGF0ZS5kZXRhaWxzKTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdHNGYWN0b3J5ID0gKFxuICBjb2Rlczogc3RyaW5nW11cbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoUHJvZHVjdCwgUHJvZHVjdFtdPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQcm9kdWN0U3RhdGUsXG4gICAgKGRldGFpbHM6IEVudGl0eUxvYWRlclN0YXRlPFByb2R1Y3Q+KSA9PiB7XG4gICAgICByZXR1cm4gY29kZXNcbiAgICAgICAgLm1hcCgoY29kZSkgPT5cbiAgICAgICAgICBkZXRhaWxzLmVudGl0aWVzW2NvZGVdID8gZGV0YWlscy5lbnRpdGllc1tjb2RlXS52YWx1ZSA6IHVuZGVmaW5lZFxuICAgICAgICApXG4gICAgICAgIC5maWx0ZXIoKHByb2R1Y3QpID0+IHByb2R1Y3QgIT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdFN0YXRlRmFjdG9yeSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBzY29wZT86IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBMb2FkZXJTdGF0ZTxQcm9kdWN0Pj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZHVjdFN0YXRlLCAoZGV0YWlscykgPT5cbiAgICBzY29wZVxuICAgICAgPyBTdGF0ZUVudGl0eUxvYWRlclNlbGVjdG9ycy5lbnRpdHlTdGF0ZVNlbGVjdG9yKGRldGFpbHMsIGNvZGUpW3Njb3BlXSB8fFxuICAgICAgICBpbml0aWFsTG9hZGVyU3RhdGVcbiAgICAgIDogU3RhdGVFbnRpdHlMb2FkZXJTZWxlY3RvcnMuZW50aXR5U3RhdGVTZWxlY3RvcihkZXRhaWxzLCBjb2RlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEZhY3RvcnkgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgc2NvcGU/OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoUHJvZHVjdCwgUHJvZHVjdD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0U2VsZWN0ZWRQcm9kdWN0U3RhdGVGYWN0b3J5KGNvZGUsIHNjb3BlKSxcbiAgICAocHJvZHVjdFN0YXRlKSA9PiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHByb2R1Y3RTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2R1Y3RMb2FkaW5nRmFjdG9yeSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBzY29wZT86IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3Rvcihwcm9kdWN0U3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9kdWN0U3VjY2Vzc0ZhY3RvcnkgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgc2NvcGU/OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoUHJvZHVjdCwgYm9vbGVhbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0U2VsZWN0ZWRQcm9kdWN0U3RhdGVGYWN0b3J5KGNvZGUsIHNjb3BlKSxcbiAgICAocHJvZHVjdFN0YXRlKSA9PiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJTdWNjZXNzU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkUHJvZHVjdEVycm9yRmFjdG9yeSA9IChcbiAgY29kZTogc3RyaW5nLFxuICBzY29wZT86IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhQcm9kdWN0LCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRTZWxlY3RlZFByb2R1Y3RTdGF0ZUZhY3RvcnkoY29kZSwgc2NvcGUpLFxuICAgIChwcm9kdWN0U3RhdGUpID0+IFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckVycm9yU2VsZWN0b3IocHJvZHVjdFN0YXRlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbFByb2R1Y3RDb2RlczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoUHJvZHVjdCxcbiAgc3RyaW5nW11cbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRQcm9kdWN0U3RhdGUsIChkZXRhaWxzKSA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZXRhaWxzLmVudGl0aWVzKTtcbn0pO1xuIl19