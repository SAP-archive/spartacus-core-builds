{"version":3,"file":"anonymous-consents.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/anonymous-consents/facade/anonymous-consents.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/index';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nexport declare class AnonymousConsentsService {\n    protected store: Store<StateWithAnonymousConsents>;\n    protected authService: AuthService;\n    constructor(store: Store<StateWithAnonymousConsents>, authService: AuthService);\n    /**\n     * Retrieves the anonymous consent templates.\n     */\n    loadTemplates(): void;\n    /**\n     * Conditionally triggers the load of the anonymous consent templates if:\n     *   - `loadIfMissing` parameter is set to `true`\n     *   - the `templates` in the store are `undefined`\n     *\n     * Othewise it just returns the value from the store.\n     *\n     * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n     */\n    getTemplates(loadIfMissing?: boolean): Observable<ConsentTemplate[]>;\n    /**\n     * Returns the anonymous consent templates with the given template code.\n     * @param templateCode a template code by which to filter anonymous consent templates.\n     */\n    getTemplate(templateCode: string): Observable<ConsentTemplate>;\n    /**\n     * Returns an indicator for the loading status for the anonymous consent templates.\n     */\n    getLoadTemplatesLoading(): Observable<boolean>;\n    /**\n     * Returns an indicator for the success status for the anonymous consent templates.\n     */\n    getLoadTemplatesSuccess(): Observable<boolean>;\n    /**\n     * Returns an indicator for the error status for the anonymous consent templates.\n     */\n    getLoadTemplatesError(): Observable<boolean>;\n    /**\n     * Resets the loading, success and error indicators for the anonymous consent templates.\n     */\n    resetLoadTemplatesState(): void;\n    /**\n     * Returns all the anonymous consents.\n     */\n    getConsents(): Observable<AnonymousConsent[]>;\n    /**\n     * Puts the provided anonymous consents into the store.\n     */\n    setConsents(consents: AnonymousConsent[]): void;\n    /**\n     * Returns the anonymous consent for the given template ID.\n     *\n     * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n     *\n     * @param templateId a template ID by which to filter anonymous consent templates.\n     */\n    getConsent(templateId: string): Observable<AnonymousConsent>;\n    /**\n     * Give a consent for the given `templateCode`\n     * @param templateCode for which to give the consent\n     */\n    giveConsent(templateCode: string): void;\n    /**\n     * Sets all the anonymous consents' state to given.\n     */\n    giveAllConsents(): Observable<ConsentTemplate[]>;\n    /**\n     * Returns `true` if the provided `consent` is given.\n     * @param consent a consent to test\n     */\n    isConsentGiven(consent: AnonymousConsent): boolean;\n    /**\n     * Withdraw a consent for the given `templateCode`\n     * @param templateCode for which to withdraw the consent\n     */\n    withdrawConsent(templateCode: string): void;\n    /**\n     * Sets all the anonymous consents' state to withdrawn.\n     */\n    withdrawAllConsents(): Observable<ConsentTemplate[]>;\n    /**\n     * Returns `true` if the provided `consent` is withdrawn.\n     * @param consent a consent to test\n     */\n    isConsentWithdrawn(consent: AnonymousConsent): boolean;\n    /**\n     * Toggles the dismissed state of the anonymous consents banner.\n     * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n     */\n    toggleBannerDismissed(dismissed: boolean): void;\n    /**\n     * Returns `true` if the banner was dismissed, `false` otherwise.\n     */\n    isBannerDismissed(): Observable<boolean>;\n    /**\n     * Returns `true` if the consent templates were updated on the back-end.\n     * If the templates are not present in the store, it triggers the load.\n     */\n    getTemplatesUpdated(): Observable<boolean>;\n    /**\n     * Toggles the `updated` slice of the state\n     * @param updated\n     */\n    toggleTemplatesUpdated(updated: boolean): void;\n    /**\n     * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n     * Otherwise, it returns `false`.\n     */\n    isBannerVisible(): Observable<boolean>;\n    /**\n     * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n     * @param currentTemplates current templates to check\n     * @param newTemplates new templates to check\n     */\n    detectUpdatedTemplates(currentTemplates: ConsentTemplate[], newTemplates: ConsentTemplate[]): boolean;\n    /**\n     * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n     * @param consents to serialize and encode\n     */\n    serializeAndEncode(consents: AnonymousConsent[]): string;\n    /**\n     * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n     * @param rawConsents to decode an deserialize\n     */\n    decodeAndDeserialize(rawConsents: string): AnonymousConsent[];\n    /**\n     *\n     * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n     * Otherwise it returns `false`.\n     *\n     * @param newConsents new consents to compare\n     * @param previousConsents old consents to compare\n     */\n    consentsUpdated(newConsents: AnonymousConsent[], previousConsents: AnonymousConsent[]): boolean;\n}\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoIA;"}