import { HttpErrorResponse } from '@angular/common/http';
import { isObject } from '../config/utils/deep-merge';
/**
 * @deprecated since 2.1, use normalizeHttpError instead
 */
export const UNKNOWN_ERROR = {
    error: 'unknown error',
};
const circularReplacer = () => {
    const seen = new WeakSet();
    return (_key, value) => {
        if (typeof value === 'object' && value !== null) {
            if (seen.has(value)) {
                return;
            }
            seen.add(value);
        }
        return value;
    };
};
const ɵ0 = circularReplacer;
/**
 * @deprecated since 2.1, use normalizeHttpError instead
 */
export function makeErrorSerializable(error) {
    if (error instanceof Error) {
        return {
            message: error.message,
            type: error.name,
            reason: error.stack,
        };
    }
    if (error instanceof HttpErrorResponse) {
        let serializableError = error.error;
        if (isObject(error.error)) {
            serializableError = JSON.stringify(error.error, circularReplacer());
        }
        return {
            message: error.message,
            error: serializableError,
            status: error.status,
            statusText: error.statusText,
            url: error.url,
        };
    }
    return isObject(error) ? UNKNOWN_ERROR : error;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy91dGlsL3NlcmlhbGl6YXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3REOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHO0lBQzNCLEtBQUssRUFBRSxlQUFlO0NBQ3ZCLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtJQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQzNCLE9BQU8sQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLEVBQUU7UUFDL0IsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUMvQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FDbkMsS0FBMkM7SUFFM0MsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1FBQzFCLE9BQU87WUFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsS0FBSztTQUNOLENBQUM7S0FDakI7SUFFRCxJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRTtRQUN0QyxJQUFJLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDcEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7U0FDckU7UUFFRCxPQUFPO1lBQ0wsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLEtBQUssRUFBRSxpQkFBaUI7WUFDeEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7U0FDRyxDQUFDO0tBQ3JCO0lBRUQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xuaW1wb3J0IHsgRXJyb3JNb2RlbCwgSHR0cEVycm9yTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9taXNjLm1vZGVsJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjEsIHVzZSBub3JtYWxpemVIdHRwRXJyb3IgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgVU5LTk9XTl9FUlJPUiA9IHtcbiAgZXJyb3I6ICd1bmtub3duIGVycm9yJyxcbn07XG5cbmNvbnN0IGNpcmN1bGFyUmVwbGFjZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHNlZW4gPSBuZXcgV2Vha1NldCgpO1xuICByZXR1cm4gKF9rZXk6IGFueSwgdmFsdWU6IGFueSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2Vlbi5oYXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlZW4uYWRkKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjEsIHVzZSBub3JtYWxpemVIdHRwRXJyb3IgaW5zdGVhZFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVycm9yU2VyaWFsaXphYmxlKFxuICBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UgfCBFcnJvck1vZGVsIHwgYW55XG4pOiBIdHRwRXJyb3JNb2RlbCB8IEVycm9yIHwgYW55IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIHR5cGU6IGVycm9yLm5hbWUsXG4gICAgICByZWFzb246IGVycm9yLnN0YWNrLFxuICAgIH0gYXMgRXJyb3JNb2RlbDtcbiAgfVxuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgbGV0IHNlcmlhbGl6YWJsZUVycm9yID0gZXJyb3IuZXJyb3I7XG4gICAgaWYgKGlzT2JqZWN0KGVycm9yLmVycm9yKSkge1xuICAgICAgc2VyaWFsaXphYmxlRXJyb3IgPSBKU09OLnN0cmluZ2lmeShlcnJvci5lcnJvciwgY2lyY3VsYXJSZXBsYWNlcigpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIGVycm9yOiBzZXJpYWxpemFibGVFcnJvcixcbiAgICAgIHN0YXR1czogZXJyb3Iuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogZXJyb3Iuc3RhdHVzVGV4dCxcbiAgICAgIHVybDogZXJyb3IudXJsLFxuICAgIH0gYXMgSHR0cEVycm9yTW9kZWw7XG4gIH1cblxuICByZXR1cm4gaXNPYmplY3QoZXJyb3IpID8gVU5LTk9XTl9FUlJPUiA6IGVycm9yO1xufVxuIl19