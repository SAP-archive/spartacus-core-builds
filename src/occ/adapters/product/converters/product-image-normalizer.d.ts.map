{"version":3,"file":"product-image-normalizer.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/occ/adapters/product/converters/product-image-normalizer.d.ts"],"sourcesContent":["import { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\nexport declare class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n    protected config: OccConfig;\n    constructor(config: OccConfig);\n    convert(source: Occ.Product, target?: Product): Product;\n    /**\n     * @desc\n     * Creates the image structure we'd like to have. Instead of\n     * having a single list with all images despite type and format\n     * we create a proper structure. With that we can do:\n     * - images.primary.thumnail.url\n     * - images.GALLERY[0].thumnail.url\n     */\n    normalize(source: Occ.Image[]): Images;\n    /**\n     * Traditionally, in an on-prem world, medias and other backend related calls\n     * are hosted at the same platform, but in a cloud setup, applications are are\n     * typically distributed cross different environments. For media, we use the\n     * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n     * if none provided.\n     */\n    private normalizeImageUrl;\n}\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAqBA;"}