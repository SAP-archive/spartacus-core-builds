{"version":3,"file":"active-cart.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/cart/facade/active-cart.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\nexport declare class ActiveCartService {\n    protected store: Store<StateWithMultiCart>;\n    protected authService: AuthService;\n    protected multiCartService: MultiCartService;\n    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;\n    private previousUserId;\n    private activeCart$;\n    private userId;\n    private cartId;\n    private cartUser;\n    private activeCartId$;\n    private cartSelector$;\n    constructor(store: Store<StateWithMultiCart>, authService: AuthService, multiCartService: MultiCartService);\n    private initActiveCart;\n    /**\n     * Returns active cart\n     */\n    getActive(): Observable<Cart>;\n    /**\n     * Returns active cart id\n     */\n    getActiveCartId(): Observable<string>;\n    /**\n     * Returns cart entries\n     */\n    getEntries(): Observable<OrderEntry[]>;\n    /**\n     * Returns true when cart is stable (not loading and not pending processes on cart)\n     */\n    getLoaded(): Observable<boolean>;\n    private loadOrMerge;\n    private load;\n    private addEntriesGuestMerge;\n    private requireLoadedCartForGuestMerge;\n    private isCartCreating;\n    private requireLoadedCart;\n    /**\n     * Add entry to active cart\n     *\n     * @param productCode\n     * @param quantity\n     */\n    addEntry(productCode: string, quantity: number): void;\n    /**\n     * Remove entry\n     *\n     * @param entry\n     */\n    removeEntry(entry: OrderEntry): void;\n    /**\n     * Update entry\n     *\n     * @param entryNumber\n     * @param quantity\n     */\n    updateEntry(entryNumber: number, quantity: number): void;\n    /**\n     * Returns cart entry\n     *\n     * @param productCode\n     */\n    getEntry(productCode: string): Observable<OrderEntry>;\n    /**\n     * Assign email to cart\n     *\n     * @param email\n     */\n    addEmail(email: string): void;\n    /**\n     * Get assigned user to cart\n     */\n    getAssignedUser(): Observable<User>;\n    /**\n     * Returns true for guest cart\n     */\n    isGuestCart(): boolean;\n    /**\n     * Add multiple entries to a cart\n     *\n     * @param cartEntries : list of entries to add (OrderEntry[])\n     */\n    addEntries(cartEntries: OrderEntry[]): void;\n    private isEmail;\n    /**\n     * Temporary method to merge guest cart with user cart because of backend limitation\n     * This is for an edge case\n     */\n    private guestCartMerge;\n    private isEmpty;\n    private isJustLoggedIn;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;"}