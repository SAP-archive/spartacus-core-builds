/**
 * Helper logic to resolve best matching Applicable
 *
 * Finding best match is a two step process:
 * 1. Find all matching applicables
 *    - all applicables for which hasMatch(...matchParams) will return true
 *    - all applicables without hasMatch method (implicit always match)
 * 2. Find the applicable with highest priority
 *    - applicable with highest getPriority(...priorityParams) will win
 *    - applicable without getPriority method is treated as Priotity.NORMAL or 0
 *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins
 *
 * @param applicables - array or applicable-like instancese
 * @param matchParams - array of parameters passed for hasMatch calls
 * @param priorityParams - array of parameters passed for getPriority calls
 */
export function resolveApplicable(applicables, matchParams = [], priorityParams = []) {
    const matchedApplicables = (applicables !== null && applicables !== void 0 ? applicables : []).filter((applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams));
    if (matchedApplicables.length < 2) {
        return matchedApplicables[0];
    }
    let lastPriority = -Infinity;
    return matchedApplicables.reduce((acc, curr) => {
        const currPriority = curr.getPriority
            ? curr.getPriority(...priorityParams)
            : 0 /* NORMAL */;
        if (lastPriority > currPriority) {
            return acc;
        }
        lastPriority = currPriority;
        return curr;
    }, undefined);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy91dGlsL2FwcGxpY2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0NBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsV0FBZ0IsRUFDaEIsY0FBcUIsRUFBRSxFQUN2QixpQkFBd0IsRUFBRTtJQUUxQixNQUFNLGtCQUFrQixHQUFHLENBQUMsV0FBVyxhQUFYLFdBQVcsY0FBWCxXQUFXLEdBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUNuRCxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FDNUUsQ0FBQztJQUVGLElBQUksa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNqQyxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsSUFBSSxZQUFZLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDN0IsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDN0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVc7WUFDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxjQUFjLENBQUM7WUFDckMsQ0FBQyxlQUFnQixDQUFDO1FBQ3BCLElBQUksWUFBWSxHQUFHLFlBQVksRUFBRTtZQUMvQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVudW0gUHJpb3JpdHkge1xuICAvKipcbiAgICogVXNlZCBhcyBmYWxsYmFjaywgd2hlbiB0aGVyZSBpcyBubyBvdGhlciBtYXRjaGVzXG4gICAqL1xuICBGQUxMQkFDSyA9IC01MCxcbiAgLyoqXG4gICAqIFVzZWQgbWFpbmx5IGluIGxpYnJhcmllcywgZWFzeSBvdmVycmlkYWJsZVxuICAgKi9cbiAgTE9XID0gLTEwLFxuICAvKipcbiAgICogRGVmYXVsdCBwcmlvcml0eVxuICAgKi9cbiAgTk9STUFMID0gMCxcbiAgLyoqXG4gICAqIEhpZ2ggcHJpb3JpdHkgZm9yIG1hdGNoZXMgdGhhdCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlXG4gICAqL1xuICBISUdIID0gMTAsXG59XG5cbi8qKlxuICogQmFzZSBpbnRlcmZhY2UgZm9yIGltcGxlbWVudGluZyBhcHBsaWNhYmxlcyBpbiBhIGNvbnNpc3RlbnQgd2F5XG4gKlxuICogQXBwbGljYWJsZXMgYXJlIG1haW5seSB1c2VkIHRvIGZpbmQgYmVzdCBtYXRjaGluZyBvbmUgZnJvbSBtdWx0aSBwcm92aWRlZFxuICogY2xhc3NlcywgbGlrZSBoYW5kbGVycywgcmVzb2x2ZXJzLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYWJsZSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYXBwbGljYWJsZSBjYW4gYmUgdXNlZCB0byBoYW5kbGUgc3BlY2lmaWVkIGNvbmRpdGlvblxuICAgKi9cbiAgaGFzTWF0Y2g/KC4uLnBhcmFtcyk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJpb3JpdHkgb3Igc2NvcmUgZm9yIHNwZWNpZmllZCBhcHBsaWNhYmxlLlxuICAgKlxuICAgKiBJZiBtdWx0aXBsZSBhcHBsaWNhYmxlcyBjYW4gYmUgYXBwbGllZCB0byBzcGVjaWZpZWQgY29uZGl0aW9uLCB0aGUgb25lXG4gICAqIHdpdGggaGlnaGVzdCBwcmlvcml0eSBvciBzY29yZSB3aW5zLlxuICAgKi9cbiAgZ2V0UHJpb3JpdHk/KC4uLnBhcmFtcyk6IFByaW9yaXR5IHwgbnVtYmVyO1xufVxuXG4vKipcbiAqIEhlbHBlciBsb2dpYyB0byByZXNvbHZlIGJlc3QgbWF0Y2hpbmcgQXBwbGljYWJsZVxuICpcbiAqIEZpbmRpbmcgYmVzdCBtYXRjaCBpcyBhIHR3byBzdGVwIHByb2Nlc3M6XG4gKiAxLiBGaW5kIGFsbCBtYXRjaGluZyBhcHBsaWNhYmxlc1xuICogICAgLSBhbGwgYXBwbGljYWJsZXMgZm9yIHdoaWNoIGhhc01hdGNoKC4uLm1hdGNoUGFyYW1zKSB3aWxsIHJldHVybiB0cnVlXG4gKiAgICAtIGFsbCBhcHBsaWNhYmxlcyB3aXRob3V0IGhhc01hdGNoIG1ldGhvZCAoaW1wbGljaXQgYWx3YXlzIG1hdGNoKVxuICogMi4gRmluZCB0aGUgYXBwbGljYWJsZSB3aXRoIGhpZ2hlc3QgcHJpb3JpdHlcbiAqICAgIC0gYXBwbGljYWJsZSB3aXRoIGhpZ2hlc3QgZ2V0UHJpb3JpdHkoLi4ucHJpb3JpdHlQYXJhbXMpIHdpbGwgd2luXG4gKiAgICAtIGFwcGxpY2FibGUgd2l0aG91dCBnZXRQcmlvcml0eSBtZXRob2QgaXMgdHJlYXRlZCBhcyBQcmlvdGl0eS5OT1JNQUwgb3IgMFxuICogICAgLSBhcHBsaWNhYmxlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGFyZSBzb3J0ZWQgYnkgb3JkZXIgb2YgcHJvdmlkZXJzLCB0aGUgYXBwbGljYWJsZSB0aGF0IHdhcyBwcm92aWRlZCBsYXRlciB3aW5zXG4gKlxuICogQHBhcmFtIGFwcGxpY2FibGVzIC0gYXJyYXkgb3IgYXBwbGljYWJsZS1saWtlIGluc3RhbmNlc2VcbiAqIEBwYXJhbSBtYXRjaFBhcmFtcyAtIGFycmF5IG9mIHBhcmFtZXRlcnMgcGFzc2VkIGZvciBoYXNNYXRjaCBjYWxsc1xuICogQHBhcmFtIHByaW9yaXR5UGFyYW1zIC0gYXJyYXkgb2YgcGFyYW1ldGVycyBwYXNzZWQgZm9yIGdldFByaW9yaXR5IGNhbGxzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQXBwbGljYWJsZTxUIGV4dGVuZHMgQXBwbGljYWJsZT4oXG4gIGFwcGxpY2FibGVzOiBUW10sXG4gIG1hdGNoUGFyYW1zOiBhbnlbXSA9IFtdLFxuICBwcmlvcml0eVBhcmFtczogYW55W10gPSBbXVxuKTogVCB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IG1hdGNoZWRBcHBsaWNhYmxlcyA9IChhcHBsaWNhYmxlcyA/PyBbXSkuZmlsdGVyKFxuICAgIChhcHBsaWNhYmxlKSA9PiAhYXBwbGljYWJsZS5oYXNNYXRjaCB8fCBhcHBsaWNhYmxlLmhhc01hdGNoKC4uLm1hdGNoUGFyYW1zKVxuICApO1xuXG4gIGlmIChtYXRjaGVkQXBwbGljYWJsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBtYXRjaGVkQXBwbGljYWJsZXNbMF07XG4gIH1cblxuICBsZXQgbGFzdFByaW9yaXR5ID0gLUluZmluaXR5O1xuICByZXR1cm4gbWF0Y2hlZEFwcGxpY2FibGVzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiB7XG4gICAgY29uc3QgY3VyclByaW9yaXR5ID0gY3Vyci5nZXRQcmlvcml0eVxuICAgICAgPyBjdXJyLmdldFByaW9yaXR5KC4uLnByaW9yaXR5UGFyYW1zKVxuICAgICAgOiBQcmlvcml0eS5OT1JNQUw7XG4gICAgaWYgKGxhc3RQcmlvcml0eSA+IGN1cnJQcmlvcml0eSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgbGFzdFByaW9yaXR5ID0gY3VyclByaW9yaXR5O1xuICAgIHJldHVybiBjdXJyO1xuICB9LCB1bmRlZmluZWQpO1xufVxuIl19