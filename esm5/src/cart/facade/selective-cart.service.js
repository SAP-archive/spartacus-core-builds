import { __decorate, __read } from "tslib";
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { MultiCartService } from './multi-cart.service';
import { UserService } from '../../user/facade/user.service';
import { AuthService } from '../../auth/facade/auth.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { of, BehaviorSubject, combineLatest } from 'rxjs';
import { map, filter, tap, shareReplay, switchMap, take } from 'rxjs/operators';
import { BaseSiteService } from '../../site-context/facade/base-site.service';
var SelectiveCartService = /** @class */ (function () {
    function SelectiveCartService(store, userService, authService, multiCartService, baseSiteService) {
        var _this = this;
        this.store = store;
        this.userService = userService;
        this.authService = authService;
        this.multiCartService = multiCartService;
        this.baseSiteService = baseSiteService;
        this.cartId$ = new BehaviorSubject(undefined);
        this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
        this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
        this.cartSelector$ = this.cartId$.pipe(switchMap(function (cartId) {
            _this.cartId = cartId;
            return _this.multiCartService.getCartEntity(cartId);
        }));
        combineLatest([
            this.userService.get(),
            this.baseSiteService.getActive(),
        ]).subscribe(function (_a) {
            var _b = __read(_a, 2), user = _b[0], activeBaseSite = _b[1];
            if (user && user.customerId && activeBaseSite) {
                _this.customerId = user.customerId;
                _this.cartId$.next("selectivecart" + activeBaseSite + _this.customerId);
            }
            else if (user && !user.customerId) {
                _this.cartId$.next(undefined);
            }
        });
        this.authService.getOccUserId().subscribe(function (userId) {
            _this.userId = userId;
            if (_this.isJustLoggedIn(userId)) {
                _this.load();
            }
            _this.previousUserId = userId;
        });
        this.selectiveCart$ = this.cartSelector$.pipe(map(function (cartEntity) {
            return {
                cart: cartEntity.value,
                loading: cartEntity.loading,
                loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
            };
        }), filter(function (_a) {
            var loading = _a.loading;
            return !loading;
        }), tap(function (_a) {
            var cart = _a.cart, loaded = _a.loaded;
            if (_this.cartId && _this.isEmpty(cart) && !loaded) {
                _this.load();
            }
        }), map(function (_a) {
            var cart = _a.cart;
            return (cart ? cart : {});
        }), shareReplay({ bufferSize: 1, refCount: true }));
    }
    SelectiveCartService.prototype.getCart = function () {
        return this.selectiveCart$;
    };
    SelectiveCartService.prototype.getEntries = function () {
        return this.multiCartService.getEntries(this.cartId);
    };
    SelectiveCartService.prototype.getLoaded = function () {
        return this.cartSelector$.pipe(map(function (cart) { return (cart.success || cart.error) && !cart.loading; }));
    };
    SelectiveCartService.prototype.load = function () {
        if (this.isLoggedIn(this.userId) && this.cartId) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: this.cartId,
            });
        }
    };
    SelectiveCartService.prototype.addEntry = function (productCode, quantity) {
        var _this = this;
        var loadAttempted = false;
        this.cartSelector$
            .pipe(filter(function () { return !loadAttempted; }), switchMap(function (cartState) {
            if (_this.isEmpty(cartState.value) && !cartState.loading) {
                loadAttempted = true;
                _this.load();
            }
            return of(cartState);
        }), filter(function (cartState) { return !_this.isEmpty(cartState.value); }), take(1))
            .subscribe(function () {
            _this.multiCartService.addEntry(_this.userId, _this.cartId, productCode, quantity);
        });
    };
    SelectiveCartService.prototype.removeEntry = function (entry) {
        this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
    };
    SelectiveCartService.prototype.updateEntry = function (entryNumber, quantity) {
        this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
    };
    SelectiveCartService.prototype.getEntry = function (productCode) {
        return this.multiCartService.getEntry(this.cartId, productCode);
    };
    SelectiveCartService.prototype.isEmpty = function (cart) {
        return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
    };
    SelectiveCartService.prototype.isJustLoggedIn = function (userId) {
        return (this.isLoggedIn(userId) &&
            this.previousUserId !== userId && // *just* logged in
            this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
        );
    };
    SelectiveCartService.prototype.isLoggedIn = function (userId) {
        return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;
    };
    SelectiveCartService.ctorParameters = function () { return [
        { type: Store },
        { type: UserService },
        { type: AuthService },
        { type: MultiCartService },
        { type: BaseSiteService }
    ]; };
    SelectiveCartService = __decorate([
        Injectable()
    ], SelectiveCartService);
    return SelectiveCartService;
}());
export { SelectiveCartService };
//# sourceMappingURL=data:application/json;base64,