{"version":3,"file":"asm-auth-http-header.service.d.ts","sources":["asm-auth-http-header.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpRequest } from '@angular/common/http';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { AuthHttpHeaderService } from '../../auth/user-auth/services/auth-http-header.service';\nimport { AuthStorageService } from '../../auth/user-auth/services/auth-storage.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { GlobalMessageService } from '../../global-message/facade/global-message.service';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { CsAgentAuthService } from '../facade/csagent-auth.service';\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\nexport declare class AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n    protected authService: AuthService;\n    protected authStorageService: AuthStorageService;\n    protected csAgentAuthService: CsAgentAuthService;\n    protected oAuthLibWrapperService: OAuthLibWrapperService;\n    protected routingService: RoutingService;\n    protected globalMessageService: GlobalMessageService;\n    protected occEndpointsService: OccEndpointsService;\n    constructor(authService: AuthService, authStorageService: AuthStorageService, csAgentAuthService: CsAgentAuthService, oAuthLibWrapperService: OAuthLibWrapperService, routingService: RoutingService, globalMessageService: GlobalMessageService, occEndpointsService: OccEndpointsService);\n    /**\n     * @override\n     *\n     * Checks if particular request should be handled by this service.\n     */\n    shouldCatchError(request: HttpRequest<any>): boolean;\n    /**\n     * @override\n     *\n     * Adds `Authorization` header to occ and CS agent requests.\n     * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n     */\n    alterRequest(request: HttpRequest<any>): HttpRequest<any>;\n    protected isCSAgentTokenRequest(request: HttpRequest<any>): boolean;\n    /**\n     * @override\n     *\n     * On backend errors indicating expired `refresh_token` we need to logout\n     * currently logged in user and CS agent.\n     */\n    handleExpiredRefreshToken(): void;\n}\n"]}