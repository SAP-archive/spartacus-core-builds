import { StateLoaderActions } from '../../../state/utils/index';
import { USER_ORDERS } from '../user-state';
export const LOAD_USER_ORDERS = '[User] Load User Orders';
export const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';
export const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';
export const CLEAR_USER_ORDERS = '[User] Clear User Orders';
export class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(USER_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_ORDERS;
    }
}
export class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(USER_ORDERS, payload);
        this.payload = payload;
        this.type = LOAD_USER_ORDERS_FAIL;
    }
}
export class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {
    constructor(payload) {
        super(USER_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_ORDERS_SUCCESS;
    }
}
export class ClearUserOrders extends StateLoaderActions.LoaderResetAction {
    constructor() {
        super(USER_ORDERS);
        this.type = CLEAR_USER_ORDERS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1vcmRlcnMuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy91c2VyLW9yZGVycy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyw4QkFBOEIsQ0FBQztBQUNwRSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUMxRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztBQUU1RCxNQUFNLE9BQU8sY0FBZSxTQUFRLGtCQUFrQixDQUFDLGdCQUFnQjtJQUVyRSxZQUNTLE9BS047UUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFQWixZQUFPLEdBQVAsT0FBTyxDQUtiO1FBUE0sU0FBSSxHQUFHLGdCQUFnQixDQUFDO0lBVWpDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxrQkFBa0IsQ0FBQyxnQkFBZ0I7SUFFekUsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRFgsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcscUJBQXFCLENBQUM7SUFHdEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGtCQUFrQixDQUFDLG1CQUFtQjtJQUUvRSxZQUFtQixPQUF5QjtRQUMxQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFERixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQURuQyxTQUFJLEdBQUcsd0JBQXdCLENBQUM7SUFHekMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsa0JBQWtCLENBQUMsaUJBQWlCO0lBRXZFO1FBQ0UsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRlosU0FBSSxHQUFHLGlCQUFpQixDQUFDO0lBR2xDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yZGVySGlzdG9yeUxpc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZUxvYWRlckFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBVU0VSX09SREVSUyB9IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX09SREVSUyA9ICdbVXNlcl0gTG9hZCBVc2VyIE9yZGVycyc7XG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX09SREVSU19GQUlMID0gJ1tVc2VyXSBMb2FkIFVzZXIgT3JkZXJzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfVVNFUl9PUkRFUlNfU1VDQ0VTUyA9ICdbVXNlcl0gTG9hZCBVc2VyIE9yZGVycyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDTEVBUl9VU0VSX09SREVSUyA9ICdbVXNlcl0gQ2xlYXIgVXNlciBPcmRlcnMnO1xuXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJPcmRlcnMgZXh0ZW5kcyBTdGF0ZUxvYWRlckFjdGlvbnMuTG9hZGVyTG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfT1JERVJTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBwYWdlU2l6ZTogbnVtYmVyO1xuICAgICAgY3VycmVudFBhZ2U/OiBudW1iZXI7XG4gICAgICBzb3J0Pzogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoVVNFUl9PUkRFUlMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlck9yZGVyc0ZhaWwgZXh0ZW5kcyBTdGF0ZUxvYWRlckFjdGlvbnMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfT1JERVJTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihVU0VSX09SREVSUywgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRVc2VyT3JkZXJzU3VjY2VzcyBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9PUkRFUlNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE9yZGVySGlzdG9yeUxpc3QpIHtcbiAgICBzdXBlcihVU0VSX09SREVSUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyVXNlck9yZGVycyBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9VU0VSX09SREVSUztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoVVNFUl9PUkRFUlMpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFVzZXJPcmRlcnNBY3Rpb24gPVxuICB8IExvYWRVc2VyT3JkZXJzXG4gIHwgTG9hZFVzZXJPcmRlcnNGYWlsXG4gIHwgTG9hZFVzZXJPcmRlcnNTdWNjZXNzXG4gIHwgQ2xlYXJVc2VyT3JkZXJzO1xuIl19