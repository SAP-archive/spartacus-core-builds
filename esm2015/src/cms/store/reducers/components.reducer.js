import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
export const initialState = {
    component: undefined,
    pageContext: {},
};
function componentExistsReducer(state = false, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT_FAIL:
            return false;
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:
            return true;
    }
    return state;
}
export function reducer(state = initialState, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_FAIL: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            if (!Array.isArray(action.payload)) {
                const context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
            }
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2Ntcy9zdG9yZS9yZWR1Y2Vycy9jb21wb25lbnRzLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQXNCO0lBQzdDLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxFQUFFO0NBQ2hCLENBQUM7QUFFRixTQUFTLHNCQUFzQixDQUM3QixLQUFLLEdBQUcsS0FBSyxFQUNiLE1BQXdDO0lBRXhDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLFVBQVUsQ0FBQyx1QkFBdUI7WUFDckMsT0FBTyxLQUFLLENBQUM7UUFFZixLQUFLLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQztRQUM1QyxLQUFLLFVBQVUsQ0FBQywwQkFBMEI7WUFDeEMsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQ3JCLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQXdDO0lBRXhDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixNQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSx1Q0FDSyxLQUFLLEtBQ1IsV0FBVyxrQ0FDTixLQUFLLENBQUMsV0FBVyxLQUNwQixDQUFDLE9BQU8sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixNQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSx1Q0FDSyxLQUFLLEtBQ1IsV0FBVyxrQ0FDTixLQUFLLENBQUMsV0FBVyxLQUNwQixDQUFDLE9BQU8sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixNQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSx1Q0FDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBYyxFQUN4QyxXQUFXLGtDQUNOLEtBQUssQ0FBQyxXQUFXLEtBQ3BCLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsT0FFbkU7U0FDSDtRQUNELEtBQUssVUFBVSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDM0MsTUFBTSxrQkFBa0IsR0FBRyxhQUFhLENBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUN0QixzQkFBc0IsQ0FDdkIsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbEMsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZFLHVDQUNLLEtBQUssS0FDUixTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFjLEVBQ3hDLFdBQVcsa0NBQ04sS0FBSyxDQUFDLFdBQVcsS0FDcEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUVuRTthQUNIO1NBQ0Y7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRlclJlZHVjZXIgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLnJlZHVjZXInO1xuaW1wb3J0IHsgc2VyaWFsaXplUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlscy9jbXMtdXRpbHMnO1xuaW1wb3J0IHsgQ21zQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHsgQ29tcG9uZW50c0NvbnRleHQgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBDb21wb25lbnRzQ29udGV4dCA9IHtcbiAgY29tcG9uZW50OiB1bmRlZmluZWQsXG4gIHBhZ2VDb250ZXh0OiB7fSxcbn07XG5cbmZ1bmN0aW9uIGNvbXBvbmVudEV4aXN0c1JlZHVjZXI8VD4oXG4gIHN0YXRlID0gZmFsc2UsXG4gIGFjdGlvbjogQ21zQWN0aW9ucy5DbXNDb21wb25lbnRBY3Rpb248VD5cbik6IGJvb2xlYW4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVF9GQUlMOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSBDbXNBY3Rpb25zLkNNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRTpcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UX1NVQ0NFU1M6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyPFQ+KFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBDbXNBY3Rpb25zLkNtc0NvbXBvbmVudEFjdGlvbjxUPlxuKTogQ29tcG9uZW50c0NvbnRleHQge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVDoge1xuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcbiAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfRkFJTDoge1xuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcbiAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUzoge1xuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgY29tcG9uZW50OiBhY3Rpb24ucGF5bG9hZC5jb21wb25lbnQgYXMgVCxcbiAgICAgICAgcGFnZUNvbnRleHQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcbiAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgQ21zQWN0aW9ucy5DTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0U6IHtcbiAgICAgIGNvbnN0IHBhZ2VDb250ZXh0UmVkdWNlciA9IGxvYWRlclJlZHVjZXI8Ym9vbGVhbj4oXG4gICAgICAgIGFjdGlvbi5tZXRhLmVudGl0eVR5cGUsXG4gICAgICAgIGNvbXBvbmVudEV4aXN0c1JlZHVjZXJcbiAgICAgICk7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWN0aW9uLnBheWxvYWQpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBzZXJpYWxpemVQYWdlQ29udGV4dChhY3Rpb24ucGF5bG9hZC5wYWdlQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgY29tcG9uZW50OiBhY3Rpb24ucGF5bG9hZC5jb21wb25lbnQgYXMgVCxcbiAgICAgICAgICBwYWdlQ29udGV4dDoge1xuICAgICAgICAgICAgLi4uc3RhdGUucGFnZUNvbnRleHQsXG4gICAgICAgICAgICBbY29udGV4dF06IHBhZ2VDb250ZXh0UmVkdWNlcihzdGF0ZS5wYWdlQ29udGV4dFtjb250ZXh0XSwgYWN0aW9uKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG4iXX0=