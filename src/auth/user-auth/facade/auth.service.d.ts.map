{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { BasicAuthService } from '../services/basic-auth.service';\n/**\n * Auth facade on BasicAuthService and AsmAuthService.\n * This service should be used in components, other core features.\n */\nexport declare class AuthService {\n    protected basicAuthService: BasicAuthService;\n    constructor(basicAuthService: BasicAuthService);\n    /**\n     * Check params in url and if there is an code/token then try to login with those.\n     */\n    checkOAuthParamsInUrl(): void;\n    /**\n     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server.\n     */\n    loginWithRedirect(): boolean;\n    /**\n     * Loads a new user token with Resource Owner Password Flow.\n     * @param userId\n     * @param password\n     */\n    authorize(userId: string, password: string): void;\n    /**\n     * Logout a storefront customer.\n     */\n    logout(): Promise<any>;\n    /**\n     * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n     */\n    isUserLoggedIn(): Observable<boolean>;\n    /**\n     * Initialize logout procedure by redirecting to the `logout` endpoint.\n     */\n    initLogout(): void;\n}\n"]}