export const LOAD_USER_TOKEN = '[Auth] Load User Token';
export const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';
export const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';
export const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';
export const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';
export const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';
export const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';
export const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';
export const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';
export class LoadUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN;
    }
}
export class LoadUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN_FAIL;
    }
}
export class LoadUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN_SUCCESS;
    }
}
export class RefreshUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN;
    }
}
export class RefreshUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN_SUCCESS;
    }
}
export class RefreshUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN_FAIL;
    }
}
export class RevokeUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN;
    }
}
export class RevokeUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN_SUCCESS;
    }
}
export class RevokeUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10b2tlbi5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9hdXRoL3N0b3JlL2FjdGlvbnMvdXNlci10b2tlbi5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHdCQUF3QixDQUFDO0FBQ3hELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLDZCQUE2QixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGdDQUFnQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGdDQUFnQyxDQUFDO0FBQ3hFLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLG1DQUFtQyxDQUFDO0FBQzlFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDO0FBQzVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLCtCQUErQixDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBRTVFLE1BQU0sT0FBTyxhQUFhO0lBRXhCLFlBQW1CLE9BQTZDO1FBQTdDLFlBQU8sR0FBUCxPQUFPLENBQXNDO1FBRHZELFNBQUksR0FBRyxlQUFlLENBQUM7SUFDbUMsQ0FBQztDQUNyRTtBQUVELE1BQU0sT0FBTyxpQkFBaUI7SUFFNUIsWUFBbUIsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLG9CQUFvQixDQUFDO0lBQ0gsQ0FBQztDQUNwQztBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsT0FBa0I7UUFBbEIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUQ1QixTQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFDQSxDQUFDO0NBQzFDO0FBRUQsTUFBTSxPQUFPLGdCQUFnQjtJQUUzQixZQUFtQixPQUFpQztRQUFqQyxZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFDb0IsQ0FBQztDQUN6RDtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFFbEMsWUFBbUIsT0FBa0I7UUFBbEIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUQ1QixTQUFJLEdBQUcsMEJBQTBCLENBQUM7SUFDSCxDQUFDO0NBQzFDO0FBRUQsTUFBTSxPQUFPLG9CQUFvQjtJQUUvQixZQUFtQixPQUFZO1FBQVosWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFDTixDQUFDO0NBQ3BDO0FBRUQsTUFBTSxPQUFPLGVBQWU7SUFFMUIsWUFBbUIsT0FBa0I7UUFBbEIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUQ1QixTQUFJLEdBQUcsaUJBQWlCLENBQUM7SUFDTSxDQUFDO0NBQzFDO0FBRUQsTUFBTSxPQUFPLHNCQUFzQjtJQUVqQyxZQUFtQixPQUFrQjtRQUFsQixZQUFPLEdBQVAsT0FBTyxDQUFXO1FBRDVCLFNBQUksR0FBRyx5QkFBeUIsQ0FBQztJQUNGLENBQUM7Q0FDMUM7QUFFRCxNQUFNLE9BQU8sbUJBQW1CO0lBRTlCLFlBQW1CLE9BQVk7UUFBWixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxzQkFBc0IsQ0FBQztJQUNMLENBQUM7Q0FDcEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBVc2VyVG9rZW4gfSBmcm9tICcuLi8uLi9tb2RlbHMvdG9rZW4tdHlwZXMubW9kZWwnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX1RPS0VOID0gJ1tBdXRoXSBMb2FkIFVzZXIgVG9rZW4nO1xuZXhwb3J0IGNvbnN0IExPQURfVVNFUl9UT0tFTl9GQUlMID0gJ1tBdXRoXSBMb2FkIFVzZXIgVG9rZW4gRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX1RPS0VOX1NVQ0NFU1MgPSAnW0F1dGhdIExvYWQgVXNlciBUb2tlbiBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRUZSRVNIX1VTRVJfVE9LRU4gPSAnW0F1dGhdIFJlZnJlc2ggVXNlciBUb2tlbic7XG5leHBvcnQgY29uc3QgUkVGUkVTSF9VU0VSX1RPS0VOX0ZBSUwgPSAnW0F1dGhdIFJlZnJlc2ggVXNlciBUb2tlbiBGYWlsJztcbmV4cG9ydCBjb25zdCBSRUZSRVNIX1VTRVJfVE9LRU5fU1VDQ0VTUyA9ICdbQXV0aF0gUmVmcmVzaCBVc2VyIFRva2VuIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFVk9LRV9VU0VSX1RPS0VOID0gJ1tBdXRoXSBSZXZva2UgVXNlciBUb2tlbic7XG5leHBvcnQgY29uc3QgUkVWT0tFX1VTRVJfVE9LRU5fRkFJTCA9ICdbQXV0aF0gUmV2b2tlIFVzZXIgVG9rZW4gRmFpbCc7XG5leHBvcnQgY29uc3QgUkVWT0tFX1VTRVJfVE9LRU5fU1VDQ0VTUyA9ICdbQXV0aF0gUmV2b2tlIFVzZXIgVG9rZW4gU3VjY2Vzcyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlclRva2VuIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9UT0tFTjtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSkge31cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRVc2VyVG9rZW5GYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9UT0tFTl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7fVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJUb2tlblN1Y2Nlc3MgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9VU0VSX1RPS0VOX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBVc2VyVG9rZW4pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWZyZXNoVXNlclRva2VuIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFRlJFU0hfVVNFUl9UT0tFTjtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgcmVmcmVzaFRva2VuOiBzdHJpbmcgfSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFJlZnJlc2hVc2VyVG9rZW5TdWNjZXNzIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFRlJFU0hfVVNFUl9UT0tFTl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogVXNlclRva2VuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmVmcmVzaFVzZXJUb2tlbkZhaWwgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVGUkVTSF9VU0VSX1RPS0VOX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXZva2VVc2VyVG9rZW4gaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVWT0tFX1VTRVJfVE9LRU47XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBVc2VyVG9rZW4pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXZva2VVc2VyVG9rZW5TdWNjZXNzIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFVk9LRV9VU0VSX1RPS0VOX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBVc2VyVG9rZW4pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXZva2VVc2VyVG9rZW5GYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFVk9LRV9VU0VSX1RPS0VOX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHt9XG59XG5cbi8vIGFjdGlvbiB0eXBlc1xuZXhwb3J0IHR5cGUgVXNlclRva2VuQWN0aW9uID1cbiAgfCBMb2FkVXNlclRva2VuXG4gIHwgTG9hZFVzZXJUb2tlbkZhaWxcbiAgfCBMb2FkVXNlclRva2VuU3VjY2Vzc1xuICB8IFJlZnJlc2hVc2VyVG9rZW5cbiAgfCBSZWZyZXNoVXNlclRva2VuRmFpbFxuICB8IFJlZnJlc2hVc2VyVG9rZW5TdWNjZXNzXG4gIHwgUmV2b2tlVXNlclRva2VuXG4gIHwgUmV2b2tlVXNlclRva2VuRmFpbFxuICB8IFJldm9rZVVzZXJUb2tlblN1Y2Nlc3M7XG4iXX0=