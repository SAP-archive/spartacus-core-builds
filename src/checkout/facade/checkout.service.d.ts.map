{"version":3,"file":"checkout.service.d.ts","sources":["checkout.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { ORDER_TYPE, ReplenishmentOrder, ScheduleReplenishmentForm } from '../../model/replenishment-order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithCheckout } from '../store/checkout-state';\nexport declare class CheckoutService {\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>;\n    protected userIdService: UserIdService;\n    protected activeCartService: ActiveCartService;\n    constructor(checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>, userIdService: UserIdService, activeCartService: ActiveCartService);\n    /**\n     * Places an order\n     */\n    placeOrder(termsChecked: boolean): void;\n    /**\n     * Schedule a replenishment order\n     */\n    scheduleReplenishmentOrder(scheduleReplenishmentForm: ScheduleReplenishmentForm, termsChecked: boolean): void;\n    /**\n     * Returns the place or schedule replenishment order's loading flag\n     */\n    getPlaceOrderLoading(): Observable<boolean>;\n    /**\n     * Returns the place or schedule replenishment order's success flag\n     */\n    getPlaceOrderSuccess(): Observable<boolean>;\n    /**\n     * Returns the place or schedule replenishment order's error flag\n     */\n    getPlaceOrderError(): Observable<boolean>;\n    /**\n     * Resets the place or schedule replenishment order's processing state\n     */\n    clearPlaceOrderState(): void;\n    /**\n     * Clear checkout data\n     */\n    clearCheckoutData(): void;\n    /**\n     * Clear checkout step\n     * @param stepNumber : the step number to be cleared\n     */\n    clearCheckoutStep(stepNumber: number): void;\n    /**\n     * Load checkout details data\n     * @param cartId : string Cart ID of loaded cart\n     */\n    loadCheckoutDetails(cartId: string): void;\n    /**\n     * Get status of checkout details loaded\n     */\n    getCheckoutDetailsLoaded(): Observable<boolean>;\n    /**\n     * Get order details\n     */\n    getOrderDetails(): Observable<Order | ReplenishmentOrder>;\n    /**\n     * Set checkout order type\n     * @param orderType : an enum of types of order we are placing\n     */\n    setOrderType(orderType: ORDER_TYPE): void;\n    /**\n     * Get current checkout order type\n     */\n    getCurrentOrderType(): Observable<ORDER_TYPE>;\n    protected actionAllowed(): boolean;\n}\n"]}