import { __extends } from "tslib";
import { StateLoaderActions } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
export var LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
export var LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
export var LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
export var UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
export var UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
export var UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
export var RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
export var CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
var LoadNotificationPreferences = /** @class */ (function (_super) {
    __extends(LoadNotificationPreferences, _super);
    function LoadNotificationPreferences(payload) {
        var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
        _this.payload = payload;
        _this.type = LOAD_NOTIFICATION_PREFERENCES;
        return _this;
    }
    return LoadNotificationPreferences;
}(StateLoaderActions.LoaderLoadAction));
export { LoadNotificationPreferences };
var LoadNotificationPreferencesFail = /** @class */ (function (_super) {
    __extends(LoadNotificationPreferencesFail, _super);
    function LoadNotificationPreferencesFail(payload) {
        var _this = _super.call(this, NOTIFICATION_PREFERENCES, payload) || this;
        _this.payload = payload;
        _this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
        return _this;
    }
    return LoadNotificationPreferencesFail;
}(StateLoaderActions.LoaderFailAction));
export { LoadNotificationPreferencesFail };
var LoadNotificationPreferencesSuccess = /** @class */ (function (_super) {
    __extends(LoadNotificationPreferencesSuccess, _super);
    function LoadNotificationPreferencesSuccess(payload) {
        var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
        _this.payload = payload;
        _this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
        return _this;
    }
    return LoadNotificationPreferencesSuccess;
}(StateLoaderActions.LoaderSuccessAction));
export { LoadNotificationPreferencesSuccess };
var UpdateNotificationPreferences = /** @class */ (function (_super) {
    __extends(UpdateNotificationPreferences, _super);
    function UpdateNotificationPreferences(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = UPDATE_NOTIFICATION_PREFERENCES;
        return _this;
    }
    return UpdateNotificationPreferences;
}(EntityLoadAction));
export { UpdateNotificationPreferences };
var UpdateNotificationPreferencesFail = /** @class */ (function (_super) {
    __extends(UpdateNotificationPreferencesFail, _super);
    function UpdateNotificationPreferencesFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload) || this;
        _this.payload = payload;
        _this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
        return _this;
    }
    return UpdateNotificationPreferencesFail;
}(EntityFailAction));
export { UpdateNotificationPreferencesFail };
var UpdateNotificationPreferencesSuccess = /** @class */ (function (_super) {
    __extends(UpdateNotificationPreferencesSuccess, _super);
    function UpdateNotificationPreferencesSuccess(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
        return _this;
    }
    return UpdateNotificationPreferencesSuccess;
}(EntitySuccessAction));
export { UpdateNotificationPreferencesSuccess };
var ResetNotificationPreferences = /** @class */ (function (_super) {
    __extends(ResetNotificationPreferences, _super);
    function ResetNotificationPreferences() {
        var _this = _super.call(this, PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID) || this;
        _this.type = RESET_NOTIFICATION_PREFERENCES;
        return _this;
    }
    return ResetNotificationPreferences;
}(EntityResetAction));
export { ResetNotificationPreferences };
var ClearNotificationPreferences = /** @class */ (function (_super) {
    __extends(ClearNotificationPreferences, _super);
    function ClearNotificationPreferences() {
        var _this = _super.call(this, NOTIFICATION_PREFERENCES) || this;
        _this.type = CLEAR_NOTIFICATION_PREFERENCES;
        return _this;
    }
    return ClearNotificationPreferences;
}(StateLoaderActions.LoaderResetAction));
export { ClearNotificationPreferences };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsbUJBQW1CLEdBQ3BCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUNMLDBDQUEwQyxFQUMxQyx3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7QUFHdkIsTUFBTSxDQUFDLElBQU0sNkJBQTZCLEdBQ3hDLHNDQUFzQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxJQUFNLGtDQUFrQyxHQUM3QywyQ0FBMkMsQ0FBQztBQUM5QyxNQUFNLENBQUMsSUFBTSxxQ0FBcUMsR0FDaEQsOENBQThDLENBQUM7QUFDakQsTUFBTSxDQUFDLElBQU0sK0JBQStCLEdBQzFDLHdDQUF3QyxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxJQUFNLG9DQUFvQyxHQUMvQyw2Q0FBNkMsQ0FBQztBQUNoRCxNQUFNLENBQUMsSUFBTSx1Q0FBdUMsR0FDbEQsZ0RBQWdELENBQUM7QUFDbkQsTUFBTSxDQUFDLElBQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxJQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUUxQztJQUFpRCwrQ0FBbUM7SUFFbEYscUNBQW1CLE9BQWU7UUFBbEMsWUFDRSxrQkFBTSx3QkFBd0IsQ0FBQyxTQUNoQztRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUFRO1FBRHpCLFVBQUksR0FBRyw2QkFBNkIsQ0FBQzs7SUFHOUMsQ0FBQztJQUNILGtDQUFDO0FBQUQsQ0FBQyxBQUxELENBQWlELGtCQUFrQixDQUFDLGdCQUFnQixHQUtuRjs7QUFFRDtJQUFxRCxtREFBbUM7SUFFdEYseUNBQW1CLE9BQVk7UUFBL0IsWUFDRSxrQkFBTSx3QkFBd0IsRUFBRSxPQUFPLENBQUMsU0FDekM7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixVQUFJLEdBQUcsa0NBQWtDLENBQUM7O0lBR25ELENBQUM7SUFDSCxzQ0FBQztBQUFELENBQUMsQUFMRCxDQUFxRCxrQkFBa0IsQ0FBQyxnQkFBZ0IsR0FLdkY7O0FBRUQ7SUFBd0Qsc0RBQXNDO0lBRTVGLDRDQUFtQixPQUFpQztRQUFwRCxZQUNFLGtCQUFNLHdCQUF3QixDQUFDLFNBQ2hDO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQTBCO1FBRDNDLFVBQUksR0FBRyxxQ0FBcUMsQ0FBQzs7SUFHdEQsQ0FBQztJQUNILHlDQUFDO0FBQUQsQ0FBQyxBQUxELENBQXdELGtCQUFrQixDQUFDLG1CQUFtQixHQUs3Rjs7QUFFRDtJQUFtRCxpREFBZ0I7SUFFakUsdUNBQ1MsT0FBa0U7UUFEM0UsWUFHRSxrQkFBTSxlQUFlLEVBQUUsMENBQTBDLENBQUMsU0FDbkU7UUFIUSxhQUFPLEdBQVAsT0FBTyxDQUEyRDtRQUZsRSxVQUFJLEdBQUcsK0JBQStCLENBQUM7O0lBS2hELENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFQRCxDQUFtRCxnQkFBZ0IsR0FPbEU7O0FBRUQ7SUFBdUQscURBQWdCO0lBRXJFLDJDQUFtQixPQUFZO1FBQS9CLFlBQ0Usa0JBQU0sZUFBZSxFQUFFLDBDQUEwQyxFQUFFLE9BQU8sQ0FBQyxTQUM1RTtRQUZrQixhQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFVBQUksR0FBRyxvQ0FBb0MsQ0FBQzs7SUFHckQsQ0FBQztJQUNILHdDQUFDO0FBQUQsQ0FBQyxBQUxELENBQXVELGdCQUFnQixHQUt0RTs7QUFFRDtJQUEwRCx3REFBbUI7SUFFM0UsOENBQW1CLE9BQWlDO1FBQXBELFlBQ0Usa0JBQU0sZUFBZSxFQUFFLDBDQUEwQyxDQUFDLFNBQ25FO1FBRmtCLGFBQU8sR0FBUCxPQUFPLENBQTBCO1FBRDNDLFVBQUksR0FBRyx1Q0FBdUMsQ0FBQzs7SUFHeEQsQ0FBQztJQUNILDJDQUFDO0FBQUQsQ0FBQyxBQUxELENBQTBELG1CQUFtQixHQUs1RTs7QUFFRDtJQUFrRCxnREFBaUI7SUFFakU7UUFBQSxZQUNFLGtCQUFNLGVBQWUsRUFBRSwwQ0FBMEMsQ0FBQyxTQUNuRTtRQUhRLFVBQUksR0FBRyw4QkFBOEIsQ0FBQzs7SUFHL0MsQ0FBQztJQUNILG1DQUFDO0FBQUQsQ0FBQyxBQUxELENBQWtELGlCQUFpQixHQUtsRTs7QUFFRDtJQUFrRCxnREFBb0M7SUFFcEY7UUFBQSxZQUNFLGtCQUFNLHdCQUF3QixDQUFDLFNBQ2hDO1FBSFEsVUFBSSxHQUFHLDhCQUE4QixDQUFDOztJQUcvQyxDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBa0Qsa0JBQWtCLENBQUMsaUJBQWlCLEdBS3JGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVMb2FkZXJBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgUFJPQ0VTU19GRUFUVVJFIH0gZnJvbSAnLi4vLi4vLi4vcHJvY2Vzcy9zdG9yZS9wcm9jZXNzLXN0YXRlJztcbmltcG9ydCB7XG4gIEVudGl0eUZhaWxBY3Rpb24sXG4gIEVudGl0eUxvYWRBY3Rpb24sXG4gIEVudGl0eVJlc2V0QWN0aW9uLFxuICBFbnRpdHlTdWNjZXNzQWN0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uJztcbmltcG9ydCB7XG4gIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCxcbiAgTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTLFxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByZWZlcmVuY2UgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUwgPVxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1MgPVxuICAnW1VzZXJdIExvYWQgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIFVwZGF0ZSBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTCA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1MgPVxuICAnW1VzZXJdIFVwZGF0ZSBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVTRVRfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBSZXNldCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuZXhwb3J0IGNvbnN0IENMRUFSX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gQ2xlYXIgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzJztcblxuZXhwb3J0IGNsYXNzIExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbCBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVMb2FkZXJBY3Rpb25zLkxvYWRlclN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSkge1xuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1c2VySWQ6IHN0cmluZzsgcHJlZmVyZW5jZXM6IE5vdGlmaWNhdGlvblByZWZlcmVuY2VbXSB9XG4gICkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsIGV4dGVuZHMgRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCwgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyBleHRlbmRzIEVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgRW50aXR5UmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVTRVRfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBTdGF0ZUxvYWRlckFjdGlvbnMuTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0xFQVJfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb24gPVxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1xuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzXG4gIHwgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3NcbiAgfCBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXG4gIHwgQ2xlYXJOb3RpZmljYXRpb25QcmVmZXJlbmNlcztcbiJdfQ==