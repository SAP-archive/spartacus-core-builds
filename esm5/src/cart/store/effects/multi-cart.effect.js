import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { map } from 'rxjs/operators';
import { CheckoutActions } from '../../../checkout/store/actions';
import * as DeprecatedCartActions from '../actions/cart.action';
import { CartActions } from '../actions/index';
var MultiCartEffects = /** @class */ (function () {
    function MultiCartEffects(actions$) {
        this.actions$ = actions$;
        this.loadCart2$ = this.actions$.pipe(ofType(DeprecatedCartActions.LOAD_CART), map(function (action) {
            return new CartActions.LoadMultiCart(action.payload);
        }));
        this.setTempCart$ = this.actions$.pipe(ofType(CartActions.SET_TEMP_CART), map(function (action) {
            return new CartActions.RemoveTempCart(action.payload);
        }));
        this.mergeCart2$ = this.actions$.pipe(ofType(DeprecatedCartActions.MERGE_CART), map(function (action) {
            return new CartActions.MergeMultiCart(action.payload);
        }));
        this.addEmail2$ = this.actions$.pipe(ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART), map(function (action) {
            return new CartActions.AddEmailToMultiCart(action.payload);
        }));
        this.removeCart$ = this.actions$.pipe(ofType(DeprecatedCartActions.DELETE_CART), map(function (action) { return action.payload; }), map(function (payload) { return new CartActions.RemoveCart(payload.cartId); }));
        // TODO: Change actions to extend Increment action instead of doing extra dispatch in this effect
        // Change for 2.0 release
        this.processesIncrement$ = this.actions$.pipe(ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART, CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE, CartActions.CART_ADD_VOUCHER), map(function (action) { return action.payload; }), map(function (payload) { return new CartActions.CartProcessesIncrement(payload.cartId); }));
    }
    MultiCartEffects.ctorParameters = function () { return [
        { type: Actions }
    ]; };
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "loadCart2$", void 0);
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "setTempCart$", void 0);
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "mergeCart2$", void 0);
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "addEmail2$", void 0);
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "removeCart$", void 0);
    __decorate([
        Effect()
    ], MultiCartEffects.prototype, "processesIncrement$", void 0);
    MultiCartEffects = __decorate([
        Injectable()
    ], MultiCartEffects);
    return MultiCartEffects;
}());
export { MultiCartEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5lZmZlY3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zdG9yZS9lZmZlY3RzL211bHRpLWNhcnQuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHL0M7SUFpRUUsMEJBQW9CLFFBQWlCO1FBQWpCLGFBQVEsR0FBUixRQUFRLENBQVM7UUEvRHJDLGVBQVUsR0FBMEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3BFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsRUFDdkMsR0FBRyxDQUNELFVBQUMsTUFBc0M7WUFDckMsT0FBQSxJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUE3QyxDQUE2QyxDQUNoRCxDQUNGLENBQUM7UUFHRixpQkFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUMvQixNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUNqQyxHQUFHLENBQUMsVUFBQyxNQUErQjtZQUNsQyxPQUFPLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUdGLGdCQUFXLEdBQTJDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN0RSxNQUFNLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLEVBQ3hDLEdBQUcsQ0FDRCxVQUFDLE1BQXVDO1lBQ3RDLE9BQUEsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFBOUMsQ0FBOEMsQ0FDakQsQ0FDRixDQUFDO1FBR0YsZUFBVSxHQUFnRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDMUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQy9DLEdBQUcsQ0FDRCxVQUFDLE1BQWtDO1lBQ2pDLE9BQUEsSUFBSSxXQUFXLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUFuRCxDQUFtRCxDQUN0RCxDQUNGLENBQUM7UUFHRixnQkFBVyxHQUF1QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbEUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxFQUN6QyxHQUFHLENBQUMsVUFBQyxNQUF3QyxJQUFLLE9BQUEsTUFBTSxDQUFDLE9BQU8sRUFBZCxDQUFjLENBQUMsRUFDakUsR0FBRyxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBMUMsQ0FBMEMsQ0FBQyxDQUM3RCxDQUFDO1FBRUYsaUdBQWlHO1FBQ2pHLHlCQUF5QjtRQUV6Qix3QkFBbUIsR0FFZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUNKLHFCQUFxQixDQUFDLGlCQUFpQixFQUN2QyxlQUFlLENBQUMsNEJBQTRCLEVBQzVDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FDN0IsRUFDRCxHQUFHLENBQ0QsVUFDRSxNQUc4QixJQUMzQixPQUFBLE1BQU0sQ0FBQyxPQUFPLEVBQWQsQ0FBYyxDQUNwQixFQUNELEdBQUcsQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLElBQUksV0FBVyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBdEQsQ0FBc0QsQ0FBQyxDQUN6RSxDQUFDO0lBRXNDLENBQUM7O2dCQUFYLE9BQU87O0lBL0RyQztRQURDLE1BQU0sRUFBRTt3REFPUDtJQUdGO1FBREMsTUFBTSxFQUFFOzBEQU1QO0lBR0Y7UUFEQyxNQUFNLEVBQUU7eURBT1A7SUFHRjtRQURDLE1BQU0sRUFBRTt3REFPUDtJQUdGO1FBREMsTUFBTSxFQUFFO3lEQUtQO0lBS0Y7UUFEQyxNQUFNLEVBQUU7aUVBa0JQO0lBL0RTLGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7T0FDQSxnQkFBZ0IsQ0FrRTVCO0lBQUQsdUJBQUM7Q0FBQSxBQWxFRCxJQWtFQztTQWxFWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zLCBFZmZlY3QsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2hlY2tvdXRBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vY2hlY2tvdXQvc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBEZXByZWNhdGVkQ2FydEFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9jYXJ0LmFjdGlvbic7XG5pbXBvcnQgeyBDYXJ0QWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTXVsdGlDYXJ0RWZmZWN0cyB7XG4gIEBFZmZlY3QoKVxuICBsb2FkQ2FydDIkOiBPYnNlcnZhYmxlPENhcnRBY3Rpb25zLkxvYWRNdWx0aUNhcnQ+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShEZXByZWNhdGVkQ2FydEFjdGlvbnMuTE9BRF9DQVJUKSxcbiAgICBtYXAoXG4gICAgICAoYWN0aW9uOiBEZXByZWNhdGVkQ2FydEFjdGlvbnMuTG9hZENhcnQpID0+XG4gICAgICAgIG5ldyBDYXJ0QWN0aW9ucy5Mb2FkTXVsdGlDYXJ0KGFjdGlvbi5wYXlsb2FkKVxuICAgIClcbiAgKTtcblxuICBARWZmZWN0KClcbiAgc2V0VGVtcENhcnQkID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShDYXJ0QWN0aW9ucy5TRVRfVEVNUF9DQVJUKSxcbiAgICBtYXAoKGFjdGlvbjogQ2FydEFjdGlvbnMuU2V0VGVtcENhcnQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgQ2FydEFjdGlvbnMuUmVtb3ZlVGVtcENhcnQoYWN0aW9uLnBheWxvYWQpO1xuICAgIH0pXG4gICk7XG5cbiAgQEVmZmVjdCgpXG4gIG1lcmdlQ2FydDIkOiBPYnNlcnZhYmxlPENhcnRBY3Rpb25zLk1lcmdlTXVsdGlDYXJ0PiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoRGVwcmVjYXRlZENhcnRBY3Rpb25zLk1FUkdFX0NBUlQpLFxuICAgIG1hcChcbiAgICAgIChhY3Rpb246IERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5NZXJnZUNhcnQpID0+XG4gICAgICAgIG5ldyBDYXJ0QWN0aW9ucy5NZXJnZU11bHRpQ2FydChhY3Rpb24ucGF5bG9hZClcbiAgICApXG4gICk7XG5cbiAgQEVmZmVjdCgpXG4gIGFkZEVtYWlsMiQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuQWRkRW1haWxUb011bHRpQ2FydD4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5BRERfRU1BSUxfVE9fQ0FSVCksXG4gICAgbWFwKFxuICAgICAgKGFjdGlvbjogQ2FydEFjdGlvbnMuQWRkRW1haWxUb0NhcnQpID0+XG4gICAgICAgIG5ldyBDYXJ0QWN0aW9ucy5BZGRFbWFpbFRvTXVsdGlDYXJ0KGFjdGlvbi5wYXlsb2FkKVxuICAgIClcbiAgKTtcblxuICBARWZmZWN0KClcbiAgcmVtb3ZlQ2FydCQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuUmVtb3ZlQ2FydD4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5ERUxFVEVfQ0FSVCksXG4gICAgbWFwKChhY3Rpb246IERlcHJlY2F0ZWRDYXJ0QWN0aW9ucy5EZWxldGVDYXJ0KSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgbWFwKChwYXlsb2FkKSA9PiBuZXcgQ2FydEFjdGlvbnMuUmVtb3ZlQ2FydChwYXlsb2FkLmNhcnRJZCkpXG4gICk7XG5cbiAgLy8gVE9ETzogQ2hhbmdlIGFjdGlvbnMgdG8gZXh0ZW5kIEluY3JlbWVudCBhY3Rpb24gaW5zdGVhZCBvZiBkb2luZyBleHRyYSBkaXNwYXRjaCBpbiB0aGlzIGVmZmVjdFxuICAvLyBDaGFuZ2UgZm9yIDIuMCByZWxlYXNlXG4gIEBFZmZlY3QoKVxuICBwcm9jZXNzZXNJbmNyZW1lbnQkOiBPYnNlcnZhYmxlPFxuICAgIENhcnRBY3Rpb25zLkNhcnRQcm9jZXNzZXNJbmNyZW1lbnRcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoXG4gICAgICBEZXByZWNhdGVkQ2FydEFjdGlvbnMuQUREX0VNQUlMX1RPX0NBUlQsXG4gICAgICBDaGVja291dEFjdGlvbnMuQ0xFQVJfQ0hFQ0tPVVRfREVMSVZFUllfTU9ERSxcbiAgICAgIENhcnRBY3Rpb25zLkNBUlRfQUREX1ZPVUNIRVJcbiAgICApLFxuICAgIG1hcChcbiAgICAgIChcbiAgICAgICAgYWN0aW9uOlxuICAgICAgICAgIHwgRGVwcmVjYXRlZENhcnRBY3Rpb25zLkFkZEVtYWlsVG9DYXJ0XG4gICAgICAgICAgfCBDaGVja291dEFjdGlvbnMuQ2xlYXJDaGVja291dERlbGl2ZXJ5TW9kZVxuICAgICAgICAgIHwgQ2FydEFjdGlvbnMuQ2FydEFkZFZvdWNoZXJcbiAgICAgICkgPT4gYWN0aW9uLnBheWxvYWRcbiAgICApLFxuICAgIG1hcCgocGF5bG9hZCkgPT4gbmV3IENhcnRBY3Rpb25zLkNhcnRQcm9jZXNzZXNJbmNyZW1lbnQocGF5bG9hZC5jYXJ0SWQpKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMpIHt9XG59XG4iXX0=