{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/anonymous-consents/connectors/converters.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/checkout/events/checkout.events.ts","ng://@spartacus/core/src/checkout/events/checkout-event.builder.ts","ng://@spartacus/core/src/checkout/events/checkout-event.module.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/util/normalize-http-error.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","configurationFactoryProvidedInRoot","configurationFactory","inject","ConfigChunk","InjectFlags","Optional","DefaultConfigChunk","Config","InjectionToken","providedIn","factory","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","getRouteName","routeNamesByPath","initRouteNamesByPath","_d","paths","forEach","_e","entries","_f","_g","SemanticPathService","routingConfigService","urlParser","ROOT_URL","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","semanticRoute","getSemanticRoute","ɵ1$1","context","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","_activeBaseSite","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","ImageType","VariantType","PriceType","VariantQualifier","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","AnonymousConsentCheckUpdatedVersions","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","checkConsentVersions","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","component","e_3","comp","flexType","e_5","CmsOccModule","CmsPageAdapter","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","ANONYMOUS_CONSENT_NORMALIZER","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","loadAnonymousConsents","head","observe","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","PRODUCT_INTERESTS_NORMALIZER","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","AnonymousConsentNormalizer","anonymousConsentsService","OccReturnRequestNormalizer","returnEntries","OccUserInterestsNormalizer","results","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","OccUserInterestsAdapter","getInterests","notificationType","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","headers$1","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4$1","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","checkConsentVersions$","concatMap","currentConsents","currentConsentVersions","templateVersion","newConsentVersions","detectUpdatedVersion","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","loadAnonymousConsentTemplates$","currentConsentTemplates","newConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","currentVersions","newVersions","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","initActiveCart","isJustLoggedIn","loadOrMerge","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$3","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutEventBuilder","stateEventService","orderPlacedEvent","OrderPlacedEvent","CheckoutEventModule","_checkoutEventBuilder","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$4","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","urlString","firstChild","urlSegment","x","guardName","lookupSemanticRoute","pageLabel","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","configInitializerFactory","configInitializer","ConfigInitializerModule","ConfigInitializerModule_1","configValidatorFactory","validators","ConfigValidatorModule","ConfigValidatorModule_1","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","errorCallback","createElement","parseParams","async","addEventListener","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","normalizedError","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  inject,\n  InjectFlags,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n// separate function needed for production build:\nexport function configurationFactoryProvidedInRoot() {\n  return configurationFactory(\n    inject(ConfigChunk, InjectFlags.Optional),\n    inject(DefaultConfigChunk, InjectFlags.Optional)\n  );\n}\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration', {\n  providedIn: 'root',\n  factory: configurationFactoryProvidedInRoot,\n});\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken<object[]>('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken<object[]>(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\nimport { RouteConfig } from './routes-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  /**\n   * Reversed routing config for quick lookup of the route name by the configured path.\n   */\n  protected routeNamesByPath: { [path: string]: string };\n\n  constructor(protected config: RoutingConfig) {}\n\n  /**\n   * Returns the route config for the given route name.\n   */\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  /**\n   * Returns the configured route loading strategy.\n   */\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n\n  /**\n   * Returns the route name of the configured path.\n   *\n   * For example, when the config is:\n   * ```\n   * routing: {\n   *   routes: {\n   *      addressBook: { paths: ['my-account/address-book'] }\n   *   }\n   * }\n   * ```\n   *\n   * the `getRouteName('my-account/address-book')` returns `'addressBook'`.\n   */\n  getRouteName(path: string) {\n    if (!this.routeNamesByPath) {\n      this.initRouteNamesByPath();\n    }\n    return this.routeNamesByPath[path];\n  }\n\n  /**\n   * Initializes the property `routeNamesByPath`.\n   *\n   * The original config allows for reading configured path by the route name.\n   * But this method builds up a structure with a 'reversed config'\n   * to read quickly the route name by the path.\n   */\n  protected initRouteNamesByPath() {\n    this.routeNamesByPath = {};\n\n    for (const [routeName, routeConfig] of Object.entries(\n      this.config?.routing?.routes\n    )) {\n      routeConfig?.paths?.forEach((path) => {\n        if (isDevMode() && this.routeNamesByPath[path]) {\n          console.error(\n            `The same path '${path}' is configured for two different route names: '${this.routeNamesByPath[path]}' and '${routeName}`\n          );\n        }\n        this.routeNamesByPath[path] = routeName;\n      });\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\nexport interface FeatureModuleConfig {\n  /**\n   * Lazy resolved feature module\n   */\n  module?: () => Promise<any>;\n  /**\n   * Lazy resolved dependency modules\n   */\n  dependencies?: (() => Promise<any>)[];\n  /**\n   * Cms components covered by this feature\n   */\n  cmsComponents?: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n  featureModules?: { [featureName: string]: FeatureModuleConfig };\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behavior, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount =\n          topValues?.length > 0 ? topValues.length : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  // TODO{#8158} - make this method required by removing the the `?` after the method name\n  abstract loadAnonymousConsents?(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> | null {\n    // TODO{#8158} - remove the conditional check, and just `return this.adapter.loadAnonymousConsents()`\n    return this.adapter.loadAnonymousConsents\n      ? this.adapter.loadAnonymousConsents()\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      // TODO{#8158} - remove this if block\n      if (!this.anonymousConsentTemplatesConnector.loadAnonymousConsents()) {\n        return of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates());\n      }\n\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = (applicables ?? []).filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, Subscription, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService implements OnDestroy {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n  protected subscription = new Subscription();\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.initActiveCart();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected initActiveCart() {\n    this.subscription.add(\n      this.authService.getOccUserId().subscribe((userId) => {\n        this.userId = userId;\n        if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n          if (this.isJustLoggedIn(userId)) {\n            this.loadOrMerge(this.cartId);\n          }\n        }\n        this.previousUserId = userId;\n      })\n    );\n\n    this.subscription.add(\n      this.activeCartId$.subscribe((cartId) => {\n        this.cartId = cartId;\n      })\n    );\n\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","/**\n * Indicates that a user has successfully placed an order\n */\nexport class OrderPlacedEvent {\n  code: string;\n}\n","import { Injectable } from '@angular/core';\nimport { StateEventService } from '../../state/event/state-event.service';\nimport { CheckoutActions } from '../store/actions/index';\nimport { OrderPlacedEvent } from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutEventBuilder {\n  constructor(protected stateEventService: StateEventService) {\n    this.register();\n  }\n\n  /**\n   * Registers checkout events\n   */\n  protected register(): void {\n    this.orderPlacedEvent();\n  }\n\n  /**\n   * Register an order successfully placed event\n   */\n  protected orderPlacedEvent(): void {\n    this.stateEventService.register({\n      action: CheckoutActions.PLACE_ORDER_SUCCESS,\n      event: OrderPlacedEvent,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CheckoutEventBuilder } from './checkout-event.builder';\n\n@NgModule({})\nexport class CheckoutEventModule {\n  constructor(_checkoutEventBuilder: CheckoutEventBuilder) {}\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutEventModule } from './events/checkout-event.module';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule, CheckoutEventModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { Injectable, InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { RoutingConfigService } from '../../configurable-routes/routing-config.service';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: undefined,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\n@Injectable()\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n    let urlString = '';\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      urlString +=\n        '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n\n      // we use semantic route information embedded from any parent route\n      if (state.data?.cxRoute) {\n        semanticRoute = state.data?.cxRoute;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n\n    // If `semanticRoute` couldn't be already recognized using `data.cxRoute` property\n    // let's lookup the routing configuration to find the semantic route that has exactly the same configured path as the current URL.\n    // This will work only for simple URLs without any dynamic routing parameters.\n    semanticRoute = semanticRoute || this.lookupSemanticRoute(urlString);\n\n    const { params } = state;\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url: routerState.url,\n      queryParams: routerState.root.queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n\n  /**\n   * Returns the semantic route name for given page label.\n   *\n   * *NOTE*: It works only for simple static urls that are equal to the page label\n   * of cms-driven content page. For example: `/my-account/address-book`.\n   *\n   * It doesn't work for URLs with dynamic parameters. But such case can be handled\n   * by reading the defined `data.cxRoute` from the Angular Routes.\n   *\n   * @param path path to be found in the routing config\n   */\n  private lookupSemanticRoute(path: string): string {\n    // Page label is assumed to start with `/`, but Spartacus configured paths\n    // don't start with slash. So we remove the leading slash:\n    return this.routingConfig.getRouteName(path.substr(1));\n  }\n\n  constructor(private routingConfig: RoutingConfigService) {}\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   * @param errorCallback function to be invoked after error during script loading\n   */\n  public load(\n    src: string,\n    params?: Object,\n    callback?: EventListener,\n    errorCallback?: EventListener\n  ): void {\n    const script: HTMLScriptElement = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n    if (errorCallback) {\n      script.addEventListener('error', errorCallback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorModel } from '../model/misc.model';\nimport { isDevMode } from '@angular/core';\n\n/**\n * Normalizes HttpErrorResponse to HttpErrorModel.\n *\n * Can be used as a safe and generic way for embodying http errors into\n * NgRx Action payload, as it will strip potentially unserializable parts from\n * it and warn in debug mode if passed error is not instance of HttpErrorModel\n * (which usually happens when logic in NgRx Effect is not sealed correctly)\n */\nexport function normalizeHttpError(\n  error: HttpErrorResponse | any\n): HttpErrorModel | undefined {\n  if (error instanceof HttpErrorResponse) {\n    const normalizedError: HttpErrorModel = {\n      message: error.message,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    };\n\n    // include backend's error details\n    if (Array.isArray(error.error.errors)) {\n      normalizedError.details = error.error.errors;\n    } else if (typeof error.error.error === 'string') {\n      normalizedError.details = [\n        {\n          type: error.error.error,\n          message: error.error.error_description,\n        },\n      ];\n    }\n\n    return normalizedError;\n  }\n\n  if (isDevMode()) {\n    console.error(\n      'Error passed to normalizeHttpError is not HttpErrorResponse instance',\n      error\n    );\n  }\n\n  return undefined;\n}\n","export const testestsd = 'sare';\n"]}