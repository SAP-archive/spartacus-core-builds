import { Inject, Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { debounceTime, filter, map, shareReplay, switchMap, } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import * as i0 from "@angular/core";
import * as i1 from "../page/page-meta.resolver";
import * as i2 from "./cms.service";
import * as i3 from "../../lazy-loading/unified-injector";
export class PageMetaService {
    constructor(resolvers, cms, unifiedInjector) {
        this.resolvers = resolvers;
        this.cms = cms;
        this.unifiedInjector = unifiedInjector;
        this.resolvers$ = this.unifiedInjector
            ? this.unifiedInjector
                .getMulti(PageMetaResolver)
                .pipe(shareReplay({ bufferSize: 1, refCount: true }))
            : of(this.resolvers);
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.resolvers = this.resolvers || [];
    }
    getMeta() {
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap((page) => this.getMetaResolver(page)), switchMap((metaResolver) => metaResolver ? this.resolve(metaResolver) : of(null)));
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolveMethods = Object.keys(this.resolverMethods)
            .filter((key) => metaResolver[this.resolverMethods[key]])
            .map((key) => metaResolver[this.resolverMethods[key]]().pipe(map((data) => ({
            [key]: data,
        }))));
        return combineLatest(resolveMethods).pipe(debounceTime(0), // avoid partial data emissions when all methods resolve at the same time
        map((data) => Object.assign({}, ...data)));
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return this.resolvers$.pipe(map((resolvers) => resolveApplicable(resolvers, [page], [page])));
    }
}
PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.PageMetaResolver, 8), i0.ɵɵinject(i2.CmsService), i0.ɵɵinject(i3.UnifiedInjector, 8)); }, token: PageMetaService, providedIn: "root" });
PageMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PageMetaService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PageMetaResolver,] }] },
    { type: CmsService },
    { type: UnifiedInjector, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvZmFjYWRlL3BhZ2UtbWV0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQ0wsWUFBWSxFQUNaLE1BQU0sRUFDTixHQUFHLEVBQ0gsV0FBVyxFQUNYLFNBQVMsR0FDVixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7OztBQUt0RSxNQUFNLE9BQU8sZUFBZTtJQVMxQixZQUdZLFNBQTZCLEVBQzdCLEdBQWUsRUFFZixlQUFpQztRQUhqQyxjQUFTLEdBQVQsU0FBUyxDQUFvQjtRQUM3QixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBRWYsb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBZHJDLGVBQVUsR0FBbUMsSUFBSSxDQUFDLGVBQWU7WUFDdkUsQ0FBQyxDQUFFLElBQUksQ0FBQyxlQUFlO2lCQUNsQixRQUFRLENBQUMsZ0JBQWdCLENBQUM7aUJBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUVwRDtZQUNKLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBWXZCOzs7Ozs7V0FNRztRQUNPLG9CQUFlLEdBQThCO1lBQ3JELEtBQUssRUFBRSxjQUFjO1lBQ3JCLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLEtBQUssRUFBRSxjQUFjO1lBQ3JCLE1BQU0sRUFBRSxlQUFlO1NBQ3hCLENBQUM7UUFoQkEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBaUJELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsU0FBUyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3JELFNBQVMsQ0FBQyxDQUFDLFlBQThCLEVBQUUsRUFBRSxDQUMzQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDckQsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxPQUFPLENBQUMsWUFBOEI7UUFDOUMsTUFBTSxjQUFjLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQ3hELElBQUksQ0FBQyxlQUFlLENBQ3JCO2FBQ0UsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDLENBQ0osQ0FDRixDQUFDO1FBRUosT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUN2QyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUseUVBQXlFO1FBQzFGLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ08sZUFBZSxDQUFDLElBQVU7UUFDbEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDekIsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDakUsQ0FBQztJQUNKLENBQUM7Ozs7WUFsRkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7d0NBV0ksUUFBUSxZQUNSLE1BQU0sU0FBQyxnQkFBZ0I7WUFqQm5CLFVBQVU7WUFDVixlQUFlLHVCQW1CbkIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBkZWJvdW5jZVRpbWUsXG4gIGZpbHRlcixcbiAgbWFwLFxuICBzaGFyZVJlcGxheSxcbiAgc3dpdGNoTWFwLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyByZXNvbHZlQXBwbGljYWJsZSB9IGZyb20gJy4uLy4uL3V0aWwvYXBwbGljYWJsZSc7XG5pbXBvcnQgeyBQYWdlLCBQYWdlTWV0YSB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xuaW1wb3J0IHsgUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4uL3BhZ2UvcGFnZS1tZXRhLnJlc29sdmVyJztcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICcuL2Ntcy5zZXJ2aWNlJztcbmltcG9ydCB7IFVuaWZpZWRJbmplY3RvciB9IGZyb20gJy4uLy4uL2xhenktbG9hZGluZy91bmlmaWVkLWluamVjdG9yJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2VNZXRhU2VydmljZSB7XG4gIHByaXZhdGUgcmVzb2x2ZXJzJDogT2JzZXJ2YWJsZTxQYWdlTWV0YVJlc29sdmVyW10+ID0gdGhpcy51bmlmaWVkSW5qZWN0b3JcbiAgICA/ICh0aGlzLnVuaWZpZWRJbmplY3RvclxuICAgICAgICAuZ2V0TXVsdGkoUGFnZU1ldGFSZXNvbHZlcilcbiAgICAgICAgLnBpcGUoc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSkgYXMgT2JzZXJ2YWJsZTxcbiAgICAgICAgUGFnZU1ldGFSZXNvbHZlcltdXG4gICAgICA+KVxuICAgIDogb2YodGhpcy5yZXNvbHZlcnMpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChQYWdlTWV0YVJlc29sdmVyKVxuICAgIHByb3RlY3RlZCByZXNvbHZlcnM6IFBhZ2VNZXRhUmVzb2x2ZXJbXSxcbiAgICBwcm90ZWN0ZWQgY21zOiBDbXNTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJvdGVjdGVkIHVuaWZpZWRJbmplY3Rvcj86IFVuaWZpZWRJbmplY3RvclxuICApIHtcbiAgICB0aGlzLnJlc29sdmVycyA9IHRoaXMucmVzb2x2ZXJzIHx8IFtdO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiByZXNvbHZlciBpbnRlcmZhY2VzIHdpbGwgYmUgZXZhbHVhdGVkIGZvciB0aGUgcGFnZVJlc29sdmVycy5cbiAgICpcbiAgICogVE9PRDogb3B0aW1pemUgYnJvd3NlciB2cyBTU1IgcmVzb2x2ZXJzOyBpbWFnZSwgcm9ib3RzIGFuZCBkZXNjcmlwdGlvblxuICAgKiAgICAgICBhcmVuJ3QgbmVlZGVkIGR1cmluZyBicm93c2luZy5cbiAgICogVE9ETzogd2UgY2FuIG1ha2UgdGhlIGxpc3Qgb2YgcmVzb2x2ZXIgdHlwZXMgY29uZmlndXJhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZXJNZXRob2RzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIHRpdGxlOiAncmVzb2x2ZVRpdGxlJyxcbiAgICBoZWFkaW5nOiAncmVzb2x2ZUhlYWRpbmcnLFxuICAgIGRlc2NyaXB0aW9uOiAncmVzb2x2ZURlc2NyaXB0aW9uJyxcbiAgICBicmVhZGNydW1iczogJ3Jlc29sdmVCcmVhZGNydW1icycsXG4gICAgaW1hZ2U6ICdyZXNvbHZlSW1hZ2UnLFxuICAgIHJvYm90czogJ3Jlc29sdmVSb2JvdHMnLFxuICB9O1xuXG4gIGdldE1ldGEoKTogT2JzZXJ2YWJsZTxQYWdlTWV0YSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5jbXMuZ2V0Q3VycmVudFBhZ2UoKS5waXBlKFxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgc3dpdGNoTWFwKChwYWdlOiBQYWdlKSA9PiB0aGlzLmdldE1ldGFSZXNvbHZlcihwYWdlKSksXG4gICAgICBzd2l0Y2hNYXAoKG1ldGFSZXNvbHZlcjogUGFnZU1ldGFSZXNvbHZlcikgPT5cbiAgICAgICAgbWV0YVJlc29sdmVyID8gdGhpcy5yZXNvbHZlKG1ldGFSZXNvbHZlcikgOiBvZihudWxsKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWYgYSBgUGFnZVJlc29sdmVyYCBoYXMgaW1wbGVtZW50ZWQgYSByZXNvbHZlciBpbnRlcmZhY2UsIHRoZSByZXNvbHZlZCBkYXRhXG4gICAqIGlzIG1lcmdlZCBpbnRvIHRoZSBgUGFnZU1ldGFgIG9iamVjdC5cbiAgICogQHBhcmFtIG1ldGFSZXNvbHZlclxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc29sdmUobWV0YVJlc29sdmVyOiBQYWdlTWV0YVJlc29sdmVyKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT4ge1xuICAgIGNvbnN0IHJlc29sdmVNZXRob2RzOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPltdID0gT2JqZWN0LmtleXMoXG4gICAgICB0aGlzLnJlc29sdmVyTWV0aG9kc1xuICAgIClcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4gbWV0YVJlc29sdmVyW3RoaXMucmVzb2x2ZXJNZXRob2RzW2tleV1dKVxuICAgICAgLm1hcCgoa2V5KSA9PlxuICAgICAgICBtZXRhUmVzb2x2ZXJbdGhpcy5yZXNvbHZlck1ldGhvZHNba2V5XV0oKS5waXBlKFxuICAgICAgICAgIG1hcCgoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgIFtrZXldOiBkYXRhLFxuICAgICAgICAgIH0pKVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QocmVzb2x2ZU1ldGhvZHMpLnBpcGUoXG4gICAgICBkZWJvdW5jZVRpbWUoMCksIC8vIGF2b2lkIHBhcnRpYWwgZGF0YSBlbWlzc2lvbnMgd2hlbiBhbGwgbWV0aG9kcyByZXNvbHZlIGF0IHRoZSBzYW1lIHRpbWVcbiAgICAgIG1hcCgoZGF0YSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgLi4uZGF0YSkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHJlc29sdmVyIHdpdGggdGhlIGJlc3QgbWF0Y2gsIGJhc2VkIG9uIGEgc2NvcmVcbiAgICogZ2VuZXJhdGVkIGJ5IHRoZSByZXNvbHZlci5cbiAgICpcbiAgICogUmVzb2x2ZXJzIG1hdGNoIGJ5IGRlZmF1bHQgb24gYFBhZ2VUeXBlYCBhbmQgYHBhZ2UudGVtcGxhdGVgLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldE1ldGFSZXNvbHZlcihwYWdlOiBQYWdlKTogT2JzZXJ2YWJsZTxQYWdlTWV0YVJlc29sdmVyPiB7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZXJzJC5waXBlKFxuICAgICAgbWFwKChyZXNvbHZlcnMpID0+IHJlc29sdmVBcHBsaWNhYmxlKHJlc29sdmVycywgW3BhZ2VdLCBbcGFnZV0pKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==