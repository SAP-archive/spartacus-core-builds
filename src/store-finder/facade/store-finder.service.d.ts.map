{"version":3,"file":"store-finder.service.d.ts","sources":["store-finder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GlobalMessageService } from '../../global-message/index';\nimport { GeoPoint } from '../../model/misc.model';\nimport { SearchConfig } from '../../product/model/search-config';\nimport { RoutingService } from '../../routing/index';\nimport { WindowRef } from '../../window/window-ref';\nimport { FindStoresState, StateWithStoreFinder, ViewAllStoresState } from '../store/store-finder-state';\nexport declare class StoreFinderService {\n    protected store: Store<StateWithStoreFinder>;\n    protected winRef: WindowRef;\n    protected globalMessageService: GlobalMessageService;\n    protected routingService: RoutingService;\n    private geolocationWatchId;\n    constructor(store: Store<StateWithStoreFinder>, winRef: WindowRef, globalMessageService: GlobalMessageService, routingService: RoutingService);\n    /**\n     * Returns boolean observable for store's loading state\n     */\n    getStoresLoading(): Observable<boolean>;\n    /**\n     * Returns observable for store's entities\n     */\n    getFindStoresEntities(): Observable<FindStoresState>;\n    /**\n     * Returns boolean observable for view all store's loading state\n     */\n    getViewAllStoresLoading(): Observable<boolean>;\n    /**\n     * Returns observable for view all store's entities\n     */\n    getViewAllStoresEntities(): Observable<ViewAllStoresState>;\n    /**\n     * Store finding action functionality\n     * @param queryText text query\n     * @param searchConfig search configuration\n     * @param longitudeLatitude longitude and latitude coordinates\n     * @param countryIsoCode country ISO code\n     * @param useMyLocation current location coordinates\n     * @param radius radius of the scope from the center point\n     */\n    findStoresAction(queryText: string, searchConfig?: SearchConfig, longitudeLatitude?: GeoPoint, countryIsoCode?: string, useMyLocation?: boolean, radius?: number): void;\n    /**\n     * View all stores\n     */\n    viewAllStores(): void;\n    /**\n     * View all stores by id\n     * @param storeId store id\n     */\n    viewStoreById(storeId: string): void;\n    private clearWatchGeolocation;\n}\n"]}