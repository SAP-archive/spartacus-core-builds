{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/utils/config-validator.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/cart/store/cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/cart.selector.ts","ng://@spartacus/core/src/cart/facade/cart-data.service.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/facade/cart.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/component.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/component.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/store/reducers/cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/store/cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/routing/configurable-routes/url-matcher-factory.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/component.effect.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","ConfigValidatorToken","InjectionToken","provideConfigValidator","configValidator","provide","useValue","multi","validateConfig","config","configValidators","configValidators_1","tslib_1.__values","configValidators_1_1","warning","validate","console","warn","Config","ConfigChunk","provideConfig","provideConfigFactory","configFactory","deps","useFactory","configurationFactory","configChunks","isDevMode","ConfigModule","withConfig","ngModule","providers","withConfigFactory","forRoot","Optional","NgModule","args","imports","CommonModule","declarations","OccConfig","tslib_1.__extends","SiteContextConfig","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","ENTITY_REMOVE_ACTION","ENTITY_REMOVE_ALL_ACTION","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","LOADER_LOAD_ACTION","LOADER_FAIL_ACTION","LOADER_SUCCESS_ACTION","LOADER_RESET_ACTION","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","ENTITY_LOAD_ACTION","ENTITY_FAIL_ACTION","ENTITY_SUCCESS_ACTION","ENTITY_RESET_ACTION","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityResetAction","initialLoaderState","loading","undefined","loaderReducer","loadActionType","reducer","state","action","entity","newValue","entityStateSelector","entities","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","OBJECT_SEPARATOR","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","currentExclusionKey","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","AUTH_FEATURE","CLIENT_TOKEN_DATA","LOAD_CLIENT_TOKEN","LOAD_CLIENT_TOKEN_FAIL","LOAD_CLIENT_TOKEN_SUCCESS","LoadClientToken","_super","_this","StateLoaderActions.LoaderLoadAction","LoadClientTokenFail","StateLoaderActions.LoaderFailAction","LoadClientTokenSuccess","StateLoaderActions.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_FAIL","LOAD_USER_TOKEN_SUCCESS","REFRESH_USER_TOKEN","REFRESH_USER_TOKEN_FAIL","REFRESH_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","getAuthState","createFeatureSelector","getClientTokenState","createSelector","clientToken","getUserTokenState","userToken","getUserToken","token","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","pipe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","getClientToken","AuthSelectors.getClientTokenState","filter","isClientTokenLoaded","AuthActions.LoadClientToken","map","refreshClientToken","Injectable","providedIn","Store","ClientErrorHandlingService","authService","handleExpiredClientToken","request","take","switchMap","handle","createNewRequestWithNewToken","clone","setHeaders","Authorization","token_type","access_token","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","result","RoutingConfig","SemanticPathService","routingConfigService","urlParser","ROOT_URL","get","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","Boolean","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","ROUTER_GO","ROUTER_GO_BY_URL","ROUTER_BACK","ROUTER_FORWARD","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","getPageContext","routingState","context","getNextPageContext","nextState","isNavigating","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","updatedHeaders","delete","getInterceptorParam","rawValue","parse","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","body","throwError","isRequestMapping","resp","errors","LOAD_BASE_SITE","LOAD_BASE_SITE_FAIL","LOAD_BASE_SITE_SUCCESS","SET_ACTIVE_BASE_SITE","BASE_SITE_CHANGE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","LOAD_CURRENCIES_FAIL","LOAD_CURRENCIES_SUCCESS","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","LOAD_LANGUAGES_FAIL","LOAD_LANGUAGES_SUCCESS","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","SITE_CONTEXT_FEATURE","getSiteContextState","getActiveBaseSite","baseSite","activeSite","getBaseSiteData","details","getCurrenciesState","currencies","getCurrenciesEntities","getActiveCurrency","activeCurrency","getAllCurrencies","isocode","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","activeLanguage","getAllLanguages","getContextParameterValues","parameter","getContextParameterDefault","param","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","BASE_SITE_CONTEXT_ID","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","subscribe","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","DynamicTemplate","resolve","templateString","templateVariables","values","Function","bind","OccEndpointsService","baseSiteService","getBaseEndpoint","backend","occ","baseUrl","prefix","getEndpoint","endpoint","getUrl","urlParams","queryParams","endpoints","httpParamsOptions","fromString","httpParams_1","HttpParams","forEach","toString","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","interceptors","HTTP_INTERCEPTORS","useClass","ClientAuthenticationTokenService","http","loadClientAuthenticationToken","getOAuthEndpoint","encodeURIComponent","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","NO_STORAGE","LOCAL_STORAGE","SESSION_STORAGE","TRANSFER_STATE","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","getKeysForStorage","StorageSyncType","persistToStorage","sessionStorageStateSlices","storageType","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","authState","isLoggedIn","hasKey","cxKey","transferredStateSlice","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","ɵ0$3","ɵ1$3","stateMetaReducers","META_REDUCERS","PLATFORM_ID","TransferState","StateModule","StateConfig","useExisting","makeErrorSerializable","Error","message","name","reason","stack","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","AuthActions.LOAD_CLIENT_TOKEN","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","tslib_1.__decorate","Effect","Observable","USERID_CURRENT","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.REFRESH_USER_TOKEN","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","effects","initialState","AuthActions.REFRESH_USER_TOKEN_SUCCESS","AuthActions.LOAD_USER_TOKEN_FAIL","AuthActions.REFRESH_USER_TOKEN_FAIL","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token","auth.userToken.token.refresh_token","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","add","has","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","PageMetaResolver","getScore","page","score","pageType","pageTemplate","template","CART_FEATURE","CART_DATA","getCartsState","getActiveCartState","cartsState","getCartState","StateLoaderSelectors.loaderValueSelector","getCartContent","content","getCartRefresh","refresh","getCartLoaded","StateLoaderSelectors.loaderSuccessSelector","StateLoaderSelectors.loaderLoadingSelector","getCartLoading","getCartMergeComplete","cartMergeComplete","getCartEntriesMap","entries","getCartEntrySelectorFactory","productCode","getCartEntries","code","ANONYMOUS_USERID","CartDataService","_userId","CartSelectors.getCartContent","cart","_cart","hasCart","guid","CART_ADD_ENTRY","CART_ADD_ENTRY_SUCCESS","CART_ADD_ENTRY_FAIL","CART_REMOVE_ENTRY","CART_REMOVE_ENTRY_SUCCESS","CART_REMOVE_ENTRY_FAIL","CART_UPDATE_ENTRY","CART_UPDATE_ENTRY_SUCCESS","CART_UPDATE_ENTRY_FAIL","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CREATE_CART","CREATE_CART_FAIL","CREATE_CART_SUCCESS","LOAD_CART","LOAD_CART_FAIL","LOAD_CART_SUCCESS","MERGE_CART","MERGE_CART_SUCCESS","RESET_CART_DETAILS","CreateCart","CreateCartFail","CreateCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","CartService","cartData","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","_activeCart$","combineLatest","CartSelectors.getCartLoading","asyncScheduler","isJustLoggedIn","loadOrMerge","isCreated","isIncomplete","shareReplay","bufferSize","refCount","getEntries","CartSelectors.getCartEntries","CartSelectors.getCartMergeComplete","getLoaded","CartSelectors.getCartLoaded","CartActions.MergeCart","cartId","CartActions.LoadCart","addEntry","quantity","CartSelectors.getActiveCartState","cartState","CartActions.CreateCart","_","CartActions.CartAddEntry","removeEntry","entry","CartActions.CartRemoveEntry","entryNumber","updateEntry","CartActions.CartUpdateEntry","qty","getEntry","CartSelectors.getCartEntrySelectorFactory","CMS_FEATURE","NAVIGATION_DETAIL_ENTITY","COMPONENT_ENTITY","LOAD_CMS_COMPONENT","LOAD_CMS_COMPONENT_FAIL","LOAD_CMS_COMPONENT_SUCCESS","CMS_GET_COMPONENET_FROM_PAGE","LoadCmsComponent","StateEntityLoaderActions.EntityLoadAction","LoadCmsComponentFail","uid","StateEntityLoaderActions.EntityFailAction","LoadCmsComponentSuccess","StateEntityLoaderActions.EntitySuccessAction","CmsGetComponentFromPage","cmp","LOAD_CMS_NAVIGATION_ITEMS","LOAD_CMS_NAVIGATION_ITEMS_FAIL","LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LOAD_CMS_PAGE_DATA","LOAD_CMS_PAGE_DATA_FAIL","LOAD_CMS_PAGE_DATA_SUCCESS","CMS_SET_PAGE_FAIL_INDEX","LoadCmsPageData","LoadCmsPageDataFail","pageContext","LoadCmsPageDataSuccess","CmsSetPageFailIndex","getCmsState","getComponentState","component","getComponentEntities","componentStateSelectorFactory","StateEntityLoaderSelectors.entityStateSelector","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","CONTENT_PAGE","PRODUCT_PAGE","CATEGORY_PAGE","CATALOG_PAGE","getPageState","getPageStateIndex","index","getPageStateIndexEntityLoaderState","PageType","product","category","catalog","getIndexByType","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","pageData","getPageData","indexValue","getPageComponentTypes","componentTypes","slots","_d","slot","_e","components","_f","flexType","from","getPageComponentTypesSelector","getCurrentSlotSelectorFactory","position","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","CmsSelectors.getPageData","getComponentData","CmsSelectors.componentStateSelectorFactory","componentState","CmsActions.LoadCmsComponent","pluck","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","itemList","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","pageId","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","attemptedLoad","shouldReload","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","INDEX","NOINDEX","FOLLOW","NOFOLLOW","CartPageMetaResolver","cms","resolveTitle","resolveRobots","title","robots","PageRobotsMeta","CartConnector","adapter","loadAll","oldCartId","toMergeCartGuid","CartAdapter","CartEffects","cartConnector","loadCart$","CartActions.LOAD_CART","loadCartParams","isMissingData","CartActions.LoadCartFail","CartActions.LoadCartSuccess","createCart$","CartActions.CREATE_CART","CartActions.CreateCartSuccess","CartActions.MergeCartSuccess","CartActions.CreateCartFail","mergeCart$","CartActions.MERGE_CART","currentCart","refresh$","CartActions.MERGE_CART_SUCCESS","CartActions.CART_ADD_ENTRY_SUCCESS","CartActions.CART_UPDATE_ENTRY_SUCCESS","CartActions.CART_REMOVE_ENTRY_SUCCESS","resetCartDetailsOnSiteContextChange$","SiteContextActions.LANGUAGE_CHANGE","SiteContextActions.CURRENCY_CHANGE","CartActions.ResetCartDetails","CartEntryConnector","update","pickupStore","remove","CartEntryAdapter","CartEntryEffects","cartEntryConnector","addEntry$","CartActions.CART_ADD_ENTRY","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","removeEntry$","CartActions.CART_REMOVE_ENTRY","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CART_UPDATE_ENTRY","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","VERIFY_ADDRESS","VERIFY_ADDRESS_FAIL","VERIFY_ADDRESS_SUCCESS","CLEAR_ADDRESS_VERIFICATION_RESULTS","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LOAD_CARD_TYPES","LOAD_CARD_TYPES_FAIL","LOAD_CARD_TYPES_SUCCESS","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","ADD_DELIVERY_ADDRESS","ADD_DELIVERY_ADDRESS_FAIL","ADD_DELIVERY_ADDRESS_SUCCESS","SET_DELIVERY_ADDRESS","SET_DELIVERY_ADDRESS_FAIL","SET_DELIVERY_ADDRESS_SUCCESS","LOAD_SUPPORTED_DELIVERY_MODES","LOAD_SUPPORTED_DELIVERY_MODES_FAIL","LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","CLEAR_SUPPORTED_DELIVERY_MODES","SET_DELIVERY_MODE","SET_DELIVERY_MODE_FAIL","SET_DELIVERY_MODE_SUCCESS","CREATE_PAYMENT_DETAILS","CREATE_PAYMENT_DETAILS_FAIL","CREATE_PAYMENT_DETAILS_SUCCESS","SET_PAYMENT_DETAILS","SET_PAYMENT_DETAILS_FAIL","SET_PAYMENT_DETAILS_SUCCESS","PLACE_ORDER","PLACE_ORDER_FAIL","PLACE_ORDER_SUCCESS","CLEAR_CHECKOUT_STEP","CLEAR_CHECKOUT_DATA","LOAD_CHECKOUT_DETAILS","LOAD_CHECKOUT_DETAILS_FAIL","LOAD_CHECKOUT_DETAILS_SUCCESS","CHECKOUT_CLEAR_MISCS_DATA","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","initialState$1","CartActions.LOAD_CART_SUCCESS","CartActions.CREATE_CART_SUCCESS","entryMap","CartActions.RESET_CART_DETAILS","cartReducer","clearCartState","CheckoutActions.PLACE_ORDER_SUCCESS","cartStoreConfigFactory","CartStoreModule","metaReducers$1","CartModule","CART_NORMALIZER","CART_MODIFICATION_NORMALIZER","results","initialState$2","CheckoutActions.VERIFY_ADDRESS_SUCCESS","CheckoutActions.VERIFY_ADDRESS_FAIL","CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS","getCheckoutState","getCheckoutStepsState","checkoutState","steps","getCheckoutSteps","getDeliveryAddress","address","getDeliveryMode","deliveryMode","getSupportedDeliveryModes","supported","getSelectedDeliveryModeCode","selected","getSelectedDeliveryMode","getPaymentDetails","paymentDetails","getCheckoutOrderDetails","orderDetails","getCheckoutDetailsLoaded","getAddressVerificationResultsState","addressVerification","getAddressVerificationResults","initialState$3","CheckoutActions.LOAD_CARD_TYPES_SUCCESS","cardTypesEntities","CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA","getCardTypesState","cardTypes","getCardTypesEntites","getAllCardTypes","entites","CheckoutService","checkoutStore","placeOrder","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","loadCheckoutDetails","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","getOrderDetails","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","cartService","translation","translate","count","totalItems","TranslationService","initialState$4","CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","supportedModes","modes","mode","CheckoutActions.SET_DELIVERY_MODE_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS","CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL","CheckoutActions.CLEAR_CHECKOUT_DATA","CheckoutActions.CLEAR_CHECKOUT_STEP","CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES","CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","addressId","verify","UserAddressAdapter","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VERIFY_ADDRESS","data","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","paymentDetailsId","getCardTypes","loadCardTypes","CheckoutPaymentAdapter","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LOAD_CARD_TYPES","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","LOAD_BILLING_COUNTRIES","LOAD_BILLING_COUNTRIES_FAIL","LOAD_BILLING_COUNTRIES_SUCCESS","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LOAD_DELIVERY_COUNTRIES","LOAD_DELIVERY_COUNTRIES_FAIL","LOAD_DELIVERY_COUNTRIES_SUCCESS","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","FORGOT_PASSWORD_EMAIL_REQUEST","FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS","FORGOT_PASSWORD_EMAIL_REQUEST_FAIL","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","LOAD_ORDER_DETAILS","LOAD_ORDER_DETAILS_FAIL","LOAD_ORDER_DETAILS_SUCCESS","CLEAR_ORDER_DETAILS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","UPDATE_EMAIL_PROCESS_ID","UPDATE_PASSWORD_PROCESS_ID","UPDATE_USER_DETAILS_PROCESS_ID","REMOVE_USER_PROCESS_ID","GIVE_CONSENT_PROCESS_ID","WITHDRAW_CONSENT_PROCESS_ID","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","REGIONS","LOAD_USER_PAYMENT_METHODS","LOAD_USER_PAYMENT_METHODS_FAIL","LOAD_USER_PAYMENT_METHODS_SUCCESS","SET_DEFAULT_USER_PAYMENT_METHOD","SET_DEFAULT_USER_PAYMENT_METHOD_FAIL","SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS","DELETE_USER_PAYMENT_METHOD","DELETE_USER_PAYMENT_METHOD_FAIL","DELETE_USER_PAYMENT_METHOD_SUCCESS","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LOAD_REGIONS","LOAD_REGIONS_SUCCESS","LOAD_REGIONS_FAIL","CLEAR_REGIONS","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LOAD_TITLES","LOAD_TITLES_FAIL","LOAD_TITLES_SUCCESS","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","PROCESS_FEATURE","UPDATE_EMAIL","UPDATE_EMAIL_ERROR","UPDATE_EMAIL_SUCCESS","RESET_EMAIL","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","StateEntityLoaderActions.EntityResetAction","UPDATE_PASSWORD","UPDATE_PASSWORD_FAIL","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_RESET","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LOAD_USER_ADDRESSES","LOAD_USER_ADDRESSES_FAIL","LOAD_USER_ADDRESSES_SUCCESS","ADD_USER_ADDRESS","ADD_USER_ADDRESS_FAIL","ADD_USER_ADDRESS_SUCCESS","UPDATE_USER_ADDRESS","UPDATE_USER_ADDRESS_FAIL","UPDATE_USER_ADDRESS_SUCCESS","DELETE_USER_ADDRESS","DELETE_USER_ADDRESS_FAIL","DELETE_USER_ADDRESS_SUCCESS","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LOAD_USER_CONSENTS","LOAD_USER_CONSENTS_SUCCESS","LOAD_USER_CONSENTS_FAIL","RESET_LOAD_USER_CONSENTS","GIVE_USER_CONSENT","GIVE_USER_CONSENT_FAIL","GIVE_USER_CONSENT_SUCCESS","RESET_GIVE_USER_CONSENT_PROCESS","WITHDRAW_USER_CONSENT","WITHDRAW_USER_CONSENT_FAIL","WITHDRAW_USER_CONSENT_SUCCESS","RESET_WITHDRAW_USER_CONSENT_PROCESS","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","StateLoaderActions.LoaderResetAction","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LOAD_USER_DETAILS","LOAD_USER_DETAILS_FAIL","LOAD_USER_DETAILS_SUCCESS","UPDATE_USER_DETAILS","UPDATE_USER_DETAILS_FAIL","UPDATE_USER_DETAILS_SUCCESS","RESET_USER_DETAILS","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","CLEAR_USER_MISCS_DATA","ClearUserMiscsData","LOAD_USER_ORDERS","LOAD_USER_ORDERS_FAIL","LOAD_USER_ORDERS_SUCCESS","CLEAR_USER_ORDERS","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","REGISTER_USER","REGISTER_USER_FAIL","REGISTER_USER_SUCCESS","REMOVE_USER","REMOVE_USER_FAIL","REMOVE_USER_SUCCESS","REMOVE_USER_RESET","RegisterUser","RegisterUserFail","RegisterUserSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","CheckoutConnector","CheckoutAdapter","CheckoutDeliveryConnector","createAddress","setAddress","setMode","deliveryModeId","getMode","getSupportedModes","CheckoutDeliveryAdapter","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.ADD_DELIVERY_ADDRESS","titleCode","UserActions.LoadUserAddresses","CheckoutActions.SetDeliveryAddress","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SET_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","CheckoutActions.ClearSupportedDeliveryModes","clearCheckoutDataOnLogout$","setDeliveryMode$","CheckoutActions.SET_DELIVERY_MODE","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CREATE_PAYMENT_DETAILS","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsSuccess","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SET_PAYMENT_DETAILS","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LOAD_CHECKOUT_DETAILS","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutStoreModule","CheckoutModule","ORDER_NORMALIZER","DELIVERY_MODE_NORMALIZER","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","deliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","setDeliveryMode","CheckoutActions.SetDeliveryMode","verifyAddress","CheckoutActions.VerifyAddress","setDeliveryAddress","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","CheckoutActions.SetPaymentDetails","CmsConfig","CmsStructureConfig","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbLabel","label","resolveBreadcrumbs","breadcrumbs","_page","breadcrumbLabel","link","CmsPageTitleModule","UrlMatcherFactoryService","getFalsyUrlMatcher","getMultiplePathsUrlMatcher","self","matcher","segmentGroup","route","getPathUrlMatcher","parts","pathMatch","hasChildren","posParams","part","substring","consumed","ConfigurableRoutesService","injector","urlMatcherFactory","initCalled","init","configureRouter","configuredRoutes","configureRoutes","resetConfig","configuredRoute","configureRoute","getRouteName","getConfiguredPaths","Injector","UrlPipe","urlService","Pipe","UrlModule","exports","PageContext","RouterEffects","navigate$","RoutingActions.ROUTER_GO","navigateBuUrl$","RoutingActions.ROUTER_GO_BY_URL","navigateByUrl","clearCmsRoutes$","AuthActions.LOGIN","filteredConfig","cxCmsRouteContext","navigateBack$","RoutingActions.ROUTER_BACK","navigateForward$","RoutingActions.ROUTER_FORWARD","Location","cmsRequired","initialState$5","fromNgrxRouter.ROUTER_NAVIGATION","routerState","event","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","serialize","firstChild","x","guardName","pageLabel","urlSegment","join","initConfigurableRoutes","service","RoutingModule","RouterStateSerializer","APP_INITIALIZER","StoreRouterConnectingModule","stateKey","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","typeCode","componentIds","CmsPageConnector","cmsPageAdapter","cmsStructureConfigService","loadFromConfig","mergeDefaultPageStructure","CmsPageAdapter","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.LOAD_CMS_PAGE_DATA","groupBy","group","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.LoadCmsPageDataFail","CmsComponentConnector","configuredComponent","getList","configuredComponents","missingIds","findComponentsByIdsLegacy","findComponentsByIds","loadedComponents","CmsComponentAdapter","ComponentEffects","cmsComponentLoader","loadComponent$","CmsActions.LOAD_CMS_COMPONENT","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","NavigationEntryItemEffects","cmsComponentConnector","loadNavigationItems$","CmsActions.LOAD_CMS_NAVIGATION_ITEMS","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","initialState$6","CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","newItem","compItems","initialState$7","CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS","initialState$8","CmsActions.LOAD_CMS_PAGE_DATA_FAIL","CmsActions.CMS_SET_PAGE_FAIL_INDEX","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","StateTransferType","CmsStoreModule","metaReducers$2","CmsModule","CMS_PAGE_NORMALIZER","CMS_COMPONENT_NORMALIZER","PageMetaService","resolvers","getMeta","metaResolver","getMetaResolver","matchingResolvers","resolver","sort","a","DynamicAttributeService","addDynamicAttributes","properties","element","renderer","groupProps","propName","propValue","classItem","classList","setAttribute","toLowerCase","MSG_TYPE_CONFIRMATION","MSG_TYPE_ERROR","MSG_TYPE_INFO","ADD_MESSAGE","REMOVE_MESSAGE","REMOVE_MESSAGES_BY_TYPE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","UNKNOWN","BAD_REQUEST","FORBIDDEN","NOT_FOUND","CONFLICT","BAD_GATEWAY","GATEWAY_TIMEOUT","HttpErrorHandler","globalMessageService","HttpErrorInterceptor","handlers","reverse","response","handleErrorResponse","handler","getResponseHandler","handleError","h","responseStatus","HttpResponseStatus","UnknownErrorHandler","BadGatewayHandler","GlobalMessageType","BadRequestHandler","errorMessage","error_description","subjectType","subject","ConflictHandler","ForbiddenHandler","GatewayTimeoutHandler","NotFoundHandler","errorHandlers","httpErrorInterceptors","initialState$9","GlobalMessageActions.ADD_MESSAGE","message_1","messages","some","msg","deepEqualObjects","objA","objB","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","splice","GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE","fromGlobalMessage.reducer","GlobalMessageStoreModule","GlobalMessageEffect","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","timeout","delay","GlobalMessageConfig","defaultGlobalMessageConfigFactory","GlobalMessageModule","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","CxDatePipe","language","format","timezone","getLang","lang","getActiveLang","getLocaleId","reportMissingLocaleData","unsubscribe","DatePipe","TranslatePipe","cd","input","options","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","sub","val","markForCheck","ngOnDestroy","pure","ChangeDetectorRef","TranslationChunkService","duplicates","chunks","KEY_SEPARATOR","i18n","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","i18nextInit","languageService","i18nextConfig","ns","fallbackLng","fallbackLang","debug","interpolation","escapeValue","i18next","use","i18nextXhrBackend","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","ɵ0$8","i18nextProviders","defaultI18nConfig","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","String","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","exists","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","Promise","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LOAD_OPEN_ID_TOKEN","LOAD_OPEN_ID_TOKEN_FAIL","LOAD_OPEN_ID_TOKEN_SUCCESS","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","getOpenIdTokenState","openIdToken","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","StateLoaderSelectors.loaderErrorSelector","KymaService","authorizeOpenId","username","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_enabled","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","iif","withLatestFrom","loginAction","loadOpenIdToken$","KymaActions.LOAD_OPEN_ID_TOKEN","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$3","KymaModule","BILLING","SHIPPING","OCC_BASE_URL_META_TAG_NAME","OCC_BASE_URL_META_TAG_PLACEHOLDER","MEDIA_BASE_URL_META_TAG_NAME","MEDIA_BASE_URL_META_TAG_PLACEHOLDER","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","media","metaTag","getTag","defaultOccConfig","occConfigValidator","Occ","PriceType","ImageType","Fields","Fields1","Fields2","Fields3","Fields4","Fields5","Fields6","Fields7","Fields8","Fields9","Fields10","Fields11","Fields12","Fields13","Fields14","Fields15","Fields16","SortEnum","Fields17","Fields18","Fields19","Fields20","Fields21","Fields22","Fields23","Fields24","Fields25","Fields26","Fields27","Fields28","Fields29","Fields30","Fields31","Fields32","Fields33","Fields34","Fields35","Fields36","Fields37","Fields38","Fields39","Fields40","Fields41","Fields42","Fields43","Fields44","Fields45","Fields46","Fields47","Fields48","Fields49","Fields50","Fields51","Fields52","Fields53","Fields54","Fields55","Fields56","Fields57","Fields58","Fields59","Fields60","Fields61","Type","ConverterService","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","DETAILS_PARAMS","OccCartAdapter","getCartEndpoint","cartEndpoint","carts","toAdd","queryString","OccCartEntryAdapter","patch","PRODUCT_NORMALIZER","OccCartNormalizer","CartOccModule","OccCheckoutAdapter","subEndpoint","orderEndpoint","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","put","CustomEncoder","encodeKey","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccCheckoutPaymentAdapter","DOMParser","domparser","getProviderSubInfo","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","createSubWithProvider","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","cardTypeList","Accept","httpParams","encoder","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","getAttribute","paramList","CheckoutOccModule","OccCmsComponentAdapter","getComponentEndPoint","fields","currentPage","pageSize","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","idList","categoryCode","catalogCode","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","loadTime","now","contentSlots","contentSlot","comp","OccCmsPageAdapter","getPagesRequestParams","getPagesEndpoint","CmsOccModule","PRODUCT_REFERENCES_NORMALIZER","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","OccProductReferencesListNormalizer","references","reference","OccProductSearchPageNormalizer","converterService","products","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","OccProductReferencesAdapter","referenceType","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","OccProductAdapter","ProductNameNormalizer","nameHtml","replace","defaultOccProductConfig","productReviews","productReferences","productSearch","productSuggestions","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","regionsEndpoint","COUNTRIES_ENDPOINT","regionList","regions","loadBaseSite","urlSplits","pop","siteList","baseSites","site","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","SiteContextInterceptor","currencyService","activeLang","activeCurr","setParams","curr","SiteContextOccModule","SiteAdapter","StoreFinderConnector","longitudeLatitude","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","storeCountUrl","getStoresEndpoint","countriesAndRegionsStoreCount","storeDetailsUrl","longitude","latitude","StoreFinderOccModule","ORDER_HISTORY_NORMALIZER","OccUserOrderAdapter","getOrderEndpoint","orderCode","orderUrl","loadHistory","OccUserAddressAdapter","getUserEndpoint","addressList","addresses","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","OccUserPaymentAdapter","getPaymentDetailsEndpoint","methodList","payments","paymentMethodID","setDefault","CONSENT_TEMPLATE_NORMALIZER","OccUserConsentAdapter","loadConsents","Cache-Control","consentList","consentTemplates","giveConsent","consentTemplateId","consentTemplateVersion","withdrawConsent","consentCode","UserOccModule","UserAdapter","UserConsentAdapter","UserPaymentAdapter","UserOrderAdapter","OccModule","ProductReferenceNormalizer","defaultPersonalizationConfig","personalization","enabled","httpHeaderName","timestamp","PERSONALIZATION_ID_KEY","OccPersonalizationIdInterceptor","platform","requestHeader","personalizationId","removeItem","HttpResponse","receivedId","PersonalizationConfig","PERSONALIZATION_TIME_KEY","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","ProcessStoreModule","ProcessModule","getProcessStateFactory","processId","entityState","getProcessLoadingFactory","loaderState","getProcessSuccessFactory","getProcessErrorFactory","ProductConnector","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LOAD_PRODUCT_REFERENCES","LOAD_PRODUCT_REFERENCES_FAIL","LOAD_PRODUCT_REFERENCES_SUCCESS","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","LOAD_PRODUCT_REVIEWS","LOAD_PRODUCT_REVIEWS_FAIL","LOAD_PRODUCT_REVIEWS_SUCCESS","POST_PRODUCT_REVIEW","POST_PRODUCT_REVIEW_FAIL","POST_PRODUCT_REVIEW_SUCCESS","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SEARCH_PRODUCTS","SEARCH_PRODUCTS_FAIL","SEARCH_PRODUCTS_SUCCESS","GET_PRODUCT_SUGGESTIONS","GET_PRODUCT_SUGGESTIONS_SUCCESS","GET_PRODUCT_SUGGESTIONS_FAIL","CLEAR_PRODUCT_SEARCH_RESULT","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","PRODUCT_FEATURE","PRODUCT_DETAIL_ENTITY","LOAD_PRODUCT","LOAD_PRODUCT_FAIL","LOAD_PRODUCT_SUCCESS","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","getSelectedProductReferencesFactory","referenceTypeData","list","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$a","ProductActions.SEARCH_PRODUCTS_SUCCESS","res","ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS","ProductActions.CLEAR_PRODUCT_SEARCH_RESULT","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductLoadingFactory","productState","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","codes","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductService","ProductSelectors.getSelectedProductStateFactory","ProductActions.LoadProduct","isLoading","ProductSelectors.getSelectedProductLoadingFactory","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","hasProductListComponent","pagination","totalResults","facetValueName","br","facetCode","facetValueCode","ProductPageMetaResolver","productService","resolveHeading","resolveDescription","resolveImage","heading","description","resolveFirstCategory","resolveManufacturer","summary","categories","name_1","PRIMARY","zoom","firstCategory","manufacturer","SearchPageMetaResolver","total$","query$","total","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LOAD_PRODUCT_REFERENCES","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LOAD_PRODUCT_REVIEWS","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","ProductActions.POST_PRODUCT_REVIEW","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SEARCH_PRODUCTS","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GET_PRODUCT_SUGGESTIONS","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","ProductActions.LOAD_PRODUCT","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$b","ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS","initialState$c","ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$4","pageTitleResolvers","ProductModule","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","inititializeContext","langService","currService","contextServiceProviders","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","urlParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","setValue","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","paramId","segmentId","siteContext","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","Subscription","contextValues","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","serialized","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","defaultSiteContextConfigFactory","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","activateLanguage$","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","activateCurrency$","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$d","SiteContextActions.LOAD_LANGUAGES_SUCCESS","langEntities","initialState$e","SiteContextActions.LOAD_CURRENCIES_SUCCESS","currEntities","currency","initialState$f","SiteContextActions.LOAD_BASE_SITE_SUCCESS","SiteContextActions.SET_ACTIVE_BASE_SITE","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","baseSiteConfigValidator","SiteContextModule","SmartEditService","cmsService","zone","isPreviewPage","getCmsTicket","addPageContract","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","attr","classes","run","NgZone","CmsTicketInterceptor","cmsTicketId","SmartEditModule","STORE_FINDER_DATA","FIND_STORES_ON_HOLD","FIND_STORES","FIND_STORES_FAIL","FIND_STORES_SUCCESS","FIND_STORE_BY_ID","FIND_STORE_BY_ID_FAIL","FIND_STORE_BY_ID_SUCCESS","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","VIEW_ALL_STORES","VIEW_ALL_STORES_FAIL","VIEW_ALL_STORES_SUCCESS","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","getFindStoresState","storesState","findStores","getFindStoresEntities","getStoresLoading","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","StoreFinderActions.FindStores","clearWatchGeolocation","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","useMyLocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingHour","closingTime","formattedHour","closingMinute","minute","valueOf","setHours","setMinutes","getStoreOpeningTime","openingHour","openingTime","openingMinutes","isStoreOpen","openingDate","closingDate","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","callback","script","createElement","parseParams","async","defer","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","StoreFinderConfig","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","stores","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.VIEW_ALL_STORES","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","getTitles","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getUserState","getBillingCountriesState","billingCountries","getBillingCountriesEntites","getAllBillingCountries","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getConsentsState","consents","getConsentsValue","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserConsentService","UserActions.LoadUserConsents","getConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","UsersSelectors.getConsentsLoading","getConsentsResultSuccess","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","initialState$g","UserActions.LOAD_BILLING_COUNTRIES_SUCCESS","countryEntities","UserActions.CLEAR_USER_MISCS_DATA","initialState$h","UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS","initialState$i","UserActions.LOAD_ORDER_DETAILS_SUCCESS","UserActions.CLEAR_ORDER_DETAILS","initialState$j","UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_FAIL","initialState$k","UserActions.LOAD_REGIONS_SUCCESS","initialState$l","UserActions.RESET_PASSWORD_SUCCESS","initialState$m","UserActions.LOAD_TITLES_SUCCESS","titleEntities","initialState$n","UserActions.LOAD_USER_ADDRESSES_FAIL","UserActions.LOAD_USER_ADDRESSES_SUCCESS","initialState$o","UserActions.LOAD_USER_CONSENTS_SUCCESS","UserActions.GIVE_USER_CONSENT_SUCCESS","updatedConsentTemplate_1","initialState$p","UserActions.LOAD_USER_DETAILS_SUCCESS","UserActions.UPDATE_USER_DETAILS_SUCCESS","updatedDetails","sorts","initialState$q","UserActions.LOAD_USER_ORDERS_SUCCESS","UserActions.LOAD_USER_ORDERS_FAIL","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","UserActions.LOAD_BILLING_COUNTRIES","CountryType","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","DeliveryCountriesEffects","loadDeliveryCountries$","UserActions.LOAD_DELIVERY_COUNTRIES","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.FORGOT_PASSWORD_EMAIL_REQUEST","concatMap","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LOAD_ORDER_DETAILS","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LOAD_USER_PAYMENT_METHODS","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SET_DEFAULT_USER_PAYMENT_METHOD","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DELETE_USER_PAYMENT_METHOD","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","UserActions.LOAD_REGIONS","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","UserActions.CLEAR_REGIONS","ResetPasswordEffects","resetPassword$","UserActions.RESET_PASSWORD","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LOAD_TITLES","sortedTitles","sortTitles","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UPDATE_EMAIL","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UPDATE_PASSWORD","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","messageService","loadUserAddresses$","UserActions.LOAD_USER_ADDRESSES","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.ADD_USER_ADDRESS","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UPDATE_USER_ADDRESS","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DELETE_USER_ADDRESS","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","UserActions.ADD_USER_ADDRESS_SUCCESS","showGlobalMessage","showGlobalMessageOnUpdateSuccess$","UserActions.UPDATE_USER_ADDRESS_SUCCESS","showGlobalMessageOnDeleteSuccess$","UserActions.DELETE_USER_ADDRESS_SUCCESS","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LOAD_USER_CONSENTS","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GIVE_USER_CONSENT","consent","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WITHDRAW_USER_CONSENT","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LOAD_USER_DETAILS","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UPDATE_USER_DETAILS","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LOAD_USER_ORDERS","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserActions.CLEAR_USER_ORDERS","UserRegisterEffects","registerUser$","UserActions.REGISTER_USER","_result","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","removeUser$","UserActions.REMOVE_USER","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","UserStoreModule","ReactiveFormsModule","metaReducers$5","RouterModule","UserModule","FADE","ZOOM","CURTAIN","TURNDOWN","GALLERY","BUY","FROM","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n  Optional,\n  isDevMode,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { deepMerge } from './utils/deep-merge';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './utils/config-validator';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(config: any = {}): Provider {\n  return { provide: ConfigChunk, useValue: config, multi: true };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[],\n  configValidators: ConfigValidator[]\n) {\n  const config = deepMerge({}, ...configChunks);\n  if (isDevMode()) {\n    validateConfig(config, configValidators || []);\n  }\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [ConfigChunk, [new Optional(), ConfigValidatorToken]],\n        },\n      ],\n    };\n  }\n}\n","export abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\n\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      endpoints?: {\n        [endpoint: string]: string;\n      };\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n};\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\n\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  loadActionType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === loadActionType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { EntityLoaderState } from './entity-loader-state';\nimport { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue(keys: string, state: any): any {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {};\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return { [previous]: acc };\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice(\n  keys: string[],\n  excludeKeys: string[],\n  state: any\n): any {\n  if (keys && keys.length === 0) {\n    return {};\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(\n  getAuthState,\n  (state: AuthState) => state.clientToken\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(\n  getAuthState,\n  (state: AuthState) => state.userToken\n);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(\n  getUserTokenState,\n  getUserTokenSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout\n   */\n  logout(): void {\n    this.store.dispatch(new AuthActions.Logout());\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map(s => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class RoutingConfig {\n  routing?: {\n    routes: RoutesConfig;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig =\n      this.config && this.config.routing && this.config.routing.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map(segment => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find(path =>\n      this.getParams(path).every(paramName => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(\n  getRouterFeatureState,\n  state => state.router\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  context => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { HttpRequest } from '@angular/common/http';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(\n  getCurrenciesState,\n  currenciesEntitiesSelector\n);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getCurrenciesState,\n  activeCurrencySelector\n);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(\n  getCurrenciesEntities,\n  entities => {\n    return entities\n      ? Object.keys(entities).map(isocode => entities[isocode])\n      : null;\n  }\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(\n  getLanguagesState,\n  languagesEntitiesSelector\n);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getLanguagesState,\n  activeLanguageSelector\n);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(\n  getLanguagesEntities,\n  entities => {\n    return entities\n      ? Object.keys(entities).map(isocode => entities[isocode])\n      : null;\n  }\n);\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map(baseSite => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(\n        select(SiteContextSelectors.getActiveBaseSite),\n        take(1)\n      )\n      .subscribe(activeBaseSite => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap(baseSite => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    const keys = Object.keys(templateVariables);\n    // Can't use Object.values as the compilation settings are to es2015 not es2017\n    const values = keys.map(key => templateVariables[key]);\n\n    const templateFunction = new Function(\n      ...keys,\n      `return \\`${templateString}\\`;`\n    );\n    return templateFunction(...values);\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { OccConfig } from '../config/occ-config';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { HttpParams } from '@angular/common/http';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe(value => (this.activeBaseSite = value));\n    }\n  }\n\n  getBaseEndpoint(): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  getUrl(endpoint: string, urlParams?: object, queryParams?: object): string {\n    if (\n      this.config.backend &&\n      this.config.backend.occ &&\n      this.config.backend.occ.endpoints[endpoint]\n    ) {\n      endpoint = this.config.backend.occ.endpoints[endpoint];\n    }\n\n    if (urlParams) {\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions;\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = { fromString: queryParamsFromEndpoint };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach(key => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable()\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable()\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap(token => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(protected config: AuthConfig, protected http: HttpClient) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n\n  protected getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthConfig } from '../../config/auth-config';\n\nimport { UserToken } from '../../models/token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(protected http: HttpClient, protected config: AuthConfig) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  protected getOAuthEndpoint() {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return reducer => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = getKeysForStorage(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = getKeysForStorage(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          state\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = getKeysForStorage(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = getKeysForStorage(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          state\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getKeysForStorage(\n  keys: { [key: string]: StorageSyncType },\n  storageType: StorageSyncType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter(key => keys[key] === storageType);\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    } else if (value === '') {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: Object,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): Object {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return reducer => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  return function(reducer) {\n    return function(state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(Object.keys(keys), [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  return function(reducer) {\n    return function(state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            Object.keys(keys),\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: META_REDUCERS,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { StateConfig } from './config/state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideConfig(defaultStateConfig),\n        { provide: StateConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    return {\n      message: error.message,\n      error: error.error,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError(error =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","export const USERID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { USERID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = USERID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError(error =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    switchMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = USERID_CURRENT;\n          return new AuthActions.RefreshUserTokenSuccess(token);\n        }, catchError(error => of(new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error)))))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<AuthState>\n> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token': StorageSyncType.LOCAL_STORAGE,\n        },\n        excludeKeys: {\n          'auth.userToken.token.refresh_token': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(authStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class AuthStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '../config/config.module';\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        ...interceptors,\n        ...AuthServices,\n        { provide: AuthConfig, useExisting: Config },\n        provideConfig(defaultAuthConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.routingService.go({ cxRoute: 'login' });\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageType } from '../../model/cms.model';\n\nexport abstract class PageMetaResolver {\n  pageType: PageType;\n  pageTemplate: string;\n\n  abstract resolve(): Observable<PageMeta>;\n\n  getScore(page: Page): number {\n    let score = 0;\n\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","import { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\n\nexport const CART_FEATURE = 'cart';\nexport const CART_DATA = '[Cart] Cart Data';\n\nexport interface StateWithCart {\n  [CART_FEATURE]: CartsState;\n}\n\nexport interface CartsState {\n  active: LoaderState<CartState>;\n}\n\nexport interface CartState {\n  content: Cart;\n  entries: { [code: string]: OrderEntry };\n  refresh: boolean;\n  cartMergeComplete: boolean;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CartsState,\n  CartState,\n  CART_FEATURE,\n  StateWithCart,\n} from '../cart-state';\n\nconst getCartContentSelector = (state: CartState) => state.content;\nconst getCartRefreshSelector = (state: CartState) => state.refresh;\nconst getCartEntriesSelector = (state: CartState) => state.entries;\nconst getCartMergeCompleteSelector = (state: CartState) =>\n  state.cartMergeComplete;\n\nexport const getCartsState: MemoizedSelector<\n  StateWithCart,\n  CartsState\n> = createFeatureSelector<CartsState>(CART_FEATURE);\n\nexport const getActiveCartState: MemoizedSelector<\n  StateWithCart,\n  LoaderState<CartState>\n> = createSelector(\n  getCartsState,\n  (cartsState: CartsState) => cartsState.active\n);\n\nexport const getCartState: MemoizedSelector<\n  StateWithCart,\n  CartState\n> = createSelector(\n  getActiveCartState,\n  state => StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCartContent: MemoizedSelector<\n  StateWithCart,\n  Cart\n> = createSelector(\n  getCartState,\n  getCartContentSelector\n);\n\nexport const getCartRefresh: MemoizedSelector<\n  StateWithCart,\n  boolean\n> = createSelector(\n  getCartState,\n  getCartRefreshSelector\n);\n\nexport const getCartLoaded: MemoizedSelector<\n  StateWithCart,\n  boolean\n> = createSelector(\n  getActiveCartState,\n  state =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state) &&\n    !StateLoaderSelectors.loaderValueSelector(state).refresh\n);\n\nexport const getCartLoading: MemoizedSelector<any, boolean> = createSelector(\n  getActiveCartState,\n  state => StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getCartMergeComplete: MemoizedSelector<\n  StateWithCart,\n  boolean\n> = createSelector(\n  getCartState,\n  getCartMergeCompleteSelector\n);\n\nexport const getCartEntriesMap: MemoizedSelector<\n  StateWithCart,\n  { [code: string]: OrderEntry }\n> = createSelector(\n  getCartState,\n  getCartEntriesSelector\n);\n\nexport const getCartEntrySelectorFactory = (\n  productCode: string\n): MemoizedSelector<StateWithCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesMap,\n    entries => {\n      if (entries) {\n        return entries[productCode];\n      }\n    }\n  );\n};\n\nexport const getCartEntries: MemoizedSelector<\n  StateWithCart,\n  OrderEntry[]\n> = createSelector(\n  getCartEntriesMap,\n  entities => {\n    return Object.keys(entities).map(code => entities[code]);\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { filter } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { StateWithCart } from '../store/cart-state';\nimport { CartSelectors } from '../store/selectors/index';\n\nexport const ANONYMOUS_USERID = 'anonymous';\n\n@Injectable()\nexport class CartDataService {\n  private _userId = ANONYMOUS_USERID;\n  private _cart: Cart;\n\n  constructor(\n    protected store: Store<StateWithCart>,\n    protected authService: AuthService\n  ) {\n    this.authService\n      .getUserToken()\n      .pipe(filter(userToken => this.userId !== userToken.userId))\n      .subscribe(userToken => {\n        if (Object.keys(userToken).length !== 0) {\n          this._userId = userToken.userId;\n        } else {\n          this._userId = ANONYMOUS_USERID;\n        }\n      });\n\n    this.store.pipe(select(CartSelectors.getCartContent)).subscribe(cart => {\n      this._cart = cart;\n    });\n  }\n\n  get hasCart(): boolean {\n    return !!this._cart;\n  }\n\n  get userId(): string {\n    return this._userId;\n  }\n\n  get cart(): Cart {\n    return this._cart;\n  }\n\n  get cartId(): string {\n    if (this.hasCart) {\n      return this.userId === ANONYMOUS_USERID ? this.cart.guid : this.cart.code;\n    }\n  }\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { CART_DATA } from '../cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\n\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartAddEntrySuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartAddEntryFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class CartRemoveEntry extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartRemoveEntryFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class CartUpdateEntry extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CartUpdateEntryFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { Action } from '@ngrx/store';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { CART_DATA } from '../cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport class CreateCart extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class CreateCartFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class CreateCartSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class LoadCart extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CART_DATA);\n  }\n}\n\nexport class LoadCartFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: any) {\n    super(CART_DATA, payload);\n  }\n}\n\nexport class LoadCartSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: any) {\n    super(CART_DATA);\n  }\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCartSuccess implements Action {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class ResetCartDetails implements Action {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  shareReplay,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithCart } from '../store/cart-state';\nimport { CartSelectors } from '../store/selectors/index';\nimport { ANONYMOUS_USERID, CartDataService } from './cart-data.service';\n\n@Injectable()\nexport class CartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private _activeCart$: Observable<Cart>;\n\n  constructor(\n    protected store: Store<StateWithCart>,\n    protected cartData: CartDataService,\n    protected authService: AuthService\n  ) {\n    this._activeCart$ = combineLatest([\n      this.store.select(CartSelectors.getCartContent),\n      this.store.select(CartSelectors.getCartLoading),\n      this.authService.getUserToken(),\n    ]).pipe(\n      // combineLatest emits multiple times on each property update instead of one emit\n      // additionally dispatching actions that changes selectors used here needs to happen in order\n      // for this asyncScheduler is used here\n      debounceTime(1, asyncScheduler),\n      filter(([, loading]) => !loading),\n      tap(([cart, , userToken]) => {\n        if (this.isJustLoggedIn(userToken.userId)) {\n          this.loadOrMerge();\n        } else if (this.isCreated(cart) && this.isIncomplete(cart)) {\n          this.load();\n        }\n\n        this.previousUserId = userToken.userId;\n      }),\n      filter(\n        ([cart]) =>\n          !this.isCreated(cart) ||\n          (this.isCreated(cart) && !this.isIncomplete(cart))\n      ),\n      map(([cart]) => cart),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getActive(): Observable<Cart> {\n    return this._activeCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.store.pipe(select(CartSelectors.getCartEntries));\n  }\n\n  getCartMergeComplete(): Observable<boolean> {\n    return this.store.pipe(select(CartSelectors.getCartMergeComplete));\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.store.pipe(select(CartSelectors.getCartLoaded));\n  }\n\n  private loadOrMerge(): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!this.isCreated(this.cartData.cart)) {\n      this.store.dispatch(\n        new CartActions.LoadCart({\n          userId: this.cartData.userId,\n          cartId: 'current',\n        })\n      );\n    } else {\n      this.store.dispatch(\n        new CartActions.MergeCart({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cart.guid,\n        })\n      );\n    }\n  }\n\n  private load(): void {\n    if (this.cartData.userId !== ANONYMOUS_USERID) {\n      this.store.dispatch(\n        new CartActions.LoadCart({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId ? this.cartData.cartId : 'current',\n        })\n      );\n    } else {\n      this.store.dispatch(\n        new CartActions.LoadCart({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n        })\n      );\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    this.store\n      .pipe(\n        select(CartSelectors.getActiveCartState),\n        tap(cartState => {\n          if (!this.isCreated(cartState.value.content) && !cartState.loading) {\n            this.store.dispatch(\n              new CartActions.CreateCart({ userId: this.cartData.userId })\n            );\n          }\n        }),\n        filter(cartState => this.isCreated(cartState.value.content)),\n        take(1)\n      )\n      .subscribe(_ => {\n        this.store.dispatch(\n          new CartActions.CartAddEntry({\n            userId: this.cartData.userId,\n            cartId: this.cartData.cartId,\n            productCode: productCode,\n            quantity: quantity,\n          })\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId: this.cartData.userId,\n        cartId: this.cartData.cartId,\n        entry: entry.entryNumber,\n      })\n    );\n  }\n\n  updateEntry(entryNumber: string, quantity: number): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          entry: entryNumber,\n          qty: quantity,\n        })\n      );\n    } else {\n      this.store.dispatch(\n        new CartActions.CartRemoveEntry({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          entry: entryNumber,\n        })\n      );\n    }\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.store.pipe(\n      select(CartSelectors.getCartEntrySelectorFactory(productCode))\n    );\n  }\n\n  private isCreated(cart: Cart): boolean {\n    return cart && typeof cart.guid !== 'undefined';\n  }\n\n  /**\n   * Cart is incomplete if it contains only `guid` and `code` properties, which come from local storage.\n   * To get cart content, we need to load cart from backend.\n   */\n  private isIncomplete(cart: Cart): boolean {\n    return cart && Object.keys(cart).length <= 2;\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      typeof userId !== 'undefined' && // logged in user\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { EntityState } from '../../state';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms[ Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentState = EntityLoaderState<any>;\n\nexport type IndexType = {\n  content: EntityLoaderState<string>;\n  product: EntityLoaderState<string>;\n  category: EntityLoaderState<string>;\n  catalog: EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  component: ComponentState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENET_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(public payload: string) {\n    super(COMPONENT_ENTITY, payload);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(uid: string, public payload: any) {\n    super(COMPONENT_ENTITY, uid, payload);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(public payload: T, uid?: string) {\n    super(COMPONENT_ENTITY, uid || payload.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENET_FROM_PAGE;\n  constructor(public payload: T[]) {\n    super(COMPONENT_ENTITY, payload.map(cmp => cmp.uid));\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { CmsState, ComponentState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getComponentEntitiesSelector = (state: ComponentState): any =>\n  Object.keys(state.entities).reduce((acc, cur) => {\n    acc[cur] = state.entities[cur].value;\n    return acc;\n  }, {});\n\nexport const getComponentState: MemoizedSelector<\n  StateWithCms,\n  ComponentState\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.component\n);\n\nexport const getComponentEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: any }\n> = createSelector(\n  getComponentState,\n  getComponentEntitiesSelector\n);\n\nexport const componentStateSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, LoaderState<any>> => {\n  return createSelector(\n    getComponentState,\n    entities => {\n      // the whole component entities are emtpy\n      if (Object.keys(entities.entities).length === 0) {\n        return undefined;\n      } else {\n        return StateEntityLoaderSelectors.entityStateSelector(entities, uid);\n      }\n    }\n  );\n};\n\nexport const componentSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, any> => {\n  return createSelector(\n    componentStateSelectorFactory(uid),\n    state => {\n      if (state) {\n        return StateLoaderSelectors.loaderValueSelector(state);\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.navigation\n);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(\n    getNavigationEntryItemState,\n    nodes => StateEntityLoaderSelectors.entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    itemState => StateLoaderSelectors.loaderValueSelector(itemState)\n  );\n};\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(\n  getCmsState,\n  (state: CmsState) => state.page\n);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(\n  getPageState,\n  (page: PageState) => page.index\n);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, EntityLoaderState<string>> =>\n  createSelector(\n    getPageStateIndex,\n    (index: IndexType) => getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    indexState =>\n      StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(\n    getPageStateIndexLoaderState(pageContext),\n    entity => StateLoaderSelectors.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(\n  getPageState,\n  getPageEntitiesSelector\n);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(\n    getPageData(pageContext),\n    pageData => getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(\n    getPageData(pageContext),\n    entity => {\n      if (entity) {\n        return entity.slots[position] || { components: [] };\n      }\n    }\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  private components: {\n    [uid: string]: Observable<CmsComponent>;\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value: boolean) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap(pageContext =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   * @param uid : CMS componet uid\n   */\n  getComponentData<T extends CmsComponent>(uid: string): Observable<T> {\n    if (!this.components[uid]) {\n      this.components[uid] = combineLatest([\n        this.routingService.isNavigating(),\n        this.store.pipe(\n          select(CmsSelectors.componentStateSelectorFactory(uid))\n        ),\n      ]).pipe(\n        tap(([isNavigating, componentState]) => {\n          // componentState is undefined when the whole components entities are empty.\n          // In this case, we don't load component one by one, but extract component data from cms page\n          if (componentState !== undefined) {\n            const attemptedLoad =\n              componentState.loading ||\n              componentState.success ||\n              componentState.error;\n            if (!attemptedLoad && !isNavigating) {\n              this.store.dispatch(new CmsActions.LoadCmsComponent(uid));\n            }\n          }\n        }),\n        pluck(1),\n        filter(componentState => componentState && componentState.success),\n        pluck('value'),\n        shareReplay({ bufferSize: 1, refCount: true })\n      );\n    }\n\n    return this.components[uid] as Observable<T>;\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService.getPageContext().pipe(\n      switchMap(pageContext =>\n        this.store.pipe(\n          select(\n            CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n          ),\n          filter(Boolean)\n        )\n      )\n    );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe(pageContext =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid : component uid\n   */\n  refreshComponent(uid: string): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent(uid));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter(entity => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from srr failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots: { [key: string]: ContentSlotData };\n  properties?: any;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: any[];\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  resolve(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(page => page !== undefined),\n      switchMap(page =>\n        combineLatest([this.resolveTitle(page), this.resolveRobots()])\n      ),\n      map(([title, robots]) => ({ title, robots }))\n    );\n  }\n\n  resolveTitle(page: Page): Observable<string> {\n    return of(page.title);\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { Cart } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { CartDataService } from '../../facade/cart-data.service';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEffects {\n  @Effect()\n  loadCart$: Observable<\n    CartActions.LoadCartFail | CartActions.LoadCartSuccess\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map(\n      (action: {\n        type: string;\n        payload?: { userId: string; cartId: string };\n      }) => action.payload\n    ),\n    mergeMap(payload => {\n      const loadCartParams = {\n        userId: (payload && payload.userId) || this.cartData.userId,\n        cartId: (payload && payload.cartId) || this.cartData.cartId,\n      };\n\n      if (this.isMissingData(loadCartParams)) {\n        return of(new CartActions.LoadCartFail({}));\n      }\n      return this.cartConnector\n        .load(loadCartParams.userId, loadCartParams.cartId)\n        .pipe(\n          map((cart: Cart) => {\n            return new CartActions.LoadCartSuccess(cart);\n          }),\n          catchError(error =>\n            of(new CartActions.LoadCartFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap(payload => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            if (payload.oldCartId) {\n              return [\n                new CartActions.CreateCartSuccess(cart),\n                new CartActions.MergeCartSuccess({\n                  userId: payload.userId,\n                  cartId: cart.code,\n                }),\n              ];\n            }\n            return [new CartActions.CreateCartSuccess(cart)];\n          }),\n          catchError(error =>\n            of(new CartActions.CreateCartFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap(payload => {\n      return this.cartConnector.load(payload.userId, 'current').pipe(\n        map(currentCart => {\n          return new CartActions.CreateCart({\n            userId: payload.userId,\n            oldCartId: payload.cartId,\n            toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n          });\n        })\n      );\n    })\n  );\n\n  @Effect()\n  refresh$: Observable<CartActions.LoadCart> = this.actions$.pipe(\n    ofType(\n      CartActions.MERGE_CART_SUCCESS,\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.MergeCartSuccess\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n      ) => action.payload\n    ),\n    map(\n      payload =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => new CartActions.ResetCartDetails())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private cartData: CartDataService\n  ) {}\n\n  private isMissingData(payload: { userId: string; cartId: string }) {\n    return payload.userId === undefined || payload.cartId === undefined;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  @Effect()\n  addEntry$: Observable<\n    CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (entry: any) =>\n              new CartActions.CartAddEntrySuccess({\n                ...entry,\n                userId: payload.userId,\n                cartId: payload.cartId,\n              })\n          ),\n          catchError(error =>\n            of(new CartActions.CartAddEntryFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    CartActions.CartRemoveEntrySuccess | CartActions.CartRemoveEntryFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entry)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError(error =>\n            of(\n              new CartActions.CartRemoveEntryFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    CartActions.CartUpdateEntrySuccess | CartActions.CartUpdateEntryFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    mergeMap(payload =>\n      this.cartEntryConnector\n        .update(payload.userId, payload.cartId, payload.entry, payload.qty)\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError(error =>\n            of(\n              new CartActions.CartUpdateEntryFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { CartEffects } from './cart.effect';\nimport { CartEntryEffects } from './cart-entry.effect';\n\nexport const effects: any[] = [CartEffects, CartEntryEffects];\n\nexport * from './cart.effect';\nexport * from './cart-entry.effect';\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport { CHECKOUT_DETAILS } from '../checkout-state';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress implements Action {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class SetDeliveryAddressFail implements Action {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetDeliveryAddressSuccess implements Action {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class LoadSupportedDeliveryModes implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class LoadSupportedDeliveryModesFail implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadSupportedDeliveryModesSuccess implements Action {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {}\n}\n\nexport class SetDeliveryMode implements Action {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {}\n}\n\nexport class SetDeliveryModeFail implements Action {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetDeliveryModeSuccess implements Action {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {}\n}\n\nexport class CreatePaymentDetails implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {}\n}\n\nexport class CreatePaymentDetailsFail implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class SetPaymentDetails implements Action {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {}\n}\n\nexport class SetPaymentDetailsFail implements Action {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetPaymentDetailsSuccess implements Action {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { OrderEntry } from '../../../model/order.model';\nimport { CartActions } from '../actions/index';\nimport { CartState } from '../cart-state';\n\nexport const initialState: CartState = {\n  content: {},\n  entries: {},\n  refresh: false,\n  cartMergeComplete: false,\n};\n\nexport function reducer(\n  state = initialState,\n  action: CartActions.CartAction | CartActions.CartEntryAction\n): CartState {\n  switch (action.type) {\n    case CartActions.MERGE_CART: {\n      return {\n        ...state,\n        cartMergeComplete: false,\n      };\n    }\n\n    case CartActions.MERGE_CART_SUCCESS: {\n      return {\n        ...state,\n        cartMergeComplete: true,\n        refresh: true,\n      };\n    }\n\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS: {\n      const content = { ...action.payload };\n      let entries = {};\n      if (content.entries) {\n        entries = content.entries.reduce(\n          (entryMap: { [code: string]: any }, entry: OrderEntry) => {\n            return {\n              ...entryMap,\n              /*\n              If we refresh the page from cart details page, 2 load cart\n              Actions gets dispatched. One is non-detail, and the second is detailed.\n              In the case where the detailed once get resolved first, we merge the existing\n              data with the new data from the response (to not delete existing detailed data).\n              */\n              [entry.product.code]:\n                state.entries && state.entries[entry.product.code]\n                  ? {\n                      ...state.entries[entry.product.code],\n                      ...entry,\n                    }\n                  : entry,\n            };\n          },\n          {\n            ...entries,\n          }\n        );\n        delete content['entries'];\n      }\n      return {\n        ...state,\n        content,\n        entries,\n        refresh: false,\n      };\n    }\n\n    case CartActions.CART_REMOVE_ENTRY_SUCCESS:\n    case CartActions.CART_UPDATE_ENTRY_SUCCESS:\n    case CartActions.CART_ADD_ENTRY_SUCCESS: {\n      return {\n        ...state,\n        refresh: true,\n      };\n    }\n\n    case CartActions.RESET_CART_DETAILS: {\n      return {\n        content: {\n          guid: state.content.guid,\n          code: state.content.code,\n        },\n        entries: {},\n        refresh: false,\n        cartMergeComplete: false,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CheckoutActions } from '../../../checkout/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CartsState, CartState, CART_DATA } from './../cart-state';\nimport { reducer as cartReducer } from './cart.reducer';\n\nexport function getReducers(): ActionReducerMap<CartsState> {\n  return {\n    active: loaderReducer<CartState>(CART_DATA, cartReducer),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CartsState>\n> = new InjectionToken<ActionReducerMap<CartsState>>('CartReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === CheckoutActions.PLACE_ORDER_SUCCESS\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearCartState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CART_FEATURE } from './cart-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cartStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [`${CART_FEATURE}.active.value.content.guid`]: StorageSyncType.LOCAL_STORAGE,\n          [`${CART_FEATURE}.active.value.content.code`]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CART_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(cartStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class CartStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CartDataService } from './facade/cart-data.service';\nimport { CartService } from './facade/index';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { CartStoreModule } from './store/cart-store.module';\n\n@NgModule({\n  imports: [CartStoreModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartDataService,\n        CartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(\n  getCheckoutStepsState,\n  state => StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(\n  getCheckoutSteps,\n  getDeliveryAddressSelector\n);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(\n  getCheckoutSteps,\n  getDeliveryModeSelector\n);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    return Object.keys(deliveryMode.supported).map(\n      code => deliveryMode.supported[code]\n    );\n  }\n);\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    return deliveryMode.selected;\n  }\n);\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(\n  getDeliveryMode,\n  deliveryMode => {\n    if (deliveryMode.selected !== '') {\n      if (Object.keys(deliveryMode.supported).length === 0) {\n        return null;\n      }\n      return deliveryMode.supported[deliveryMode.selected];\n    }\n  }\n);\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(\n  getCheckoutSteps,\n  getPaymentDetailsSelector\n);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(\n  getCheckoutSteps,\n  getOrderDetailsSelector\n);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  state =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.cardTypes\n);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(\n  getCardTypesState,\n  fromReducer.getCardTypesEntites\n);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(\n  getCardTypesEntites,\n  entites => {\n    return Object.keys(entites).map(code => entites[code]);\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  ANONYMOUS_USERID,\n  CartDataService,\n} from '../../cart/facade/cart-data.service';\nimport { Order } from '../../model/order.model';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected cartData: CartDataService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.PlaceOrder({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  loadCheckoutDetails(cartId: string) {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.LoadCheckoutDetails({\n        userId: this.cartData.userId,\n        cartId,\n      })\n    );\n  }\n\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    return this.cartData.userId !== ANONYMOUS_USERID;\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CartService } from '../../cart/facade/cart.service';\nimport { PageMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { Cart } from '../../model/cart.model';\nimport { PageType } from '../../model/cms.model';\nimport { TranslationService } from '../../i18n/translation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  constructor(\n    protected cartService: CartService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolve(): Observable<PageMeta> {\n    return this.cartService.getActive().pipe(\n      switchMap(cart =>\n        combineLatest([this.resolveTitle(cart), this.resolveRobots()])\n      ),\n      map(([title, robots]) => ({ title, robots }))\n    );\n  }\n\n  resolveTitle(cart: Cart): Observable<string> {\n    return this.translation.translate('pageMetaResolver.checkout.title', {\n      count: cart.totalItems,\n    });\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CheckoutState>\n> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map(action => action.payload),\n    mergeMap(payload =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map(data => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError(error =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map(cardTypes => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError(error =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Action } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport class LoadOrderDetails implements Action {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {}\n}\n\nexport class LoadOrderDetailsFail implements Action {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadOrderDetailsSuccess implements Action {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearOrderDetails implements Action {\n  readonly type = CLEAR_ORDER_DETAILS;\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { Title, User } from '../../model/misc.model';\nimport { Order, OrderHistoryList } from '../../model/order.model';\nimport { LoaderState } from '../../state';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const REGIONS = '[User] Regions';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  consents: LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: OrderDetailsState;\n  titles: TitlesState;\n  regions: LoaderState<RegionsState>;\n  resetPassword: boolean;\n}\n\nexport interface OrderDetailsState {\n  order: Order;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {}\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { REMOVE_USER_PROCESS_ID } from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {}\n}\n\nexport class RegisterUserFail implements Action {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {}\n}\n\nexport class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap(payload =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap(address => {\n            address['titleCode'] = payload.address.titleCode;\n            return [\n              new UserActions.LoadUserAddresses(payload.userId),\n              new CheckoutActions.SetDeliveryAddress({\n                userId: payload.userId,\n                cartId: payload.cartId,\n                address: address,\n              }),\n            ];\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map(data => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    CheckoutActions.CheckoutClearMiscsData\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new CheckoutActions.CheckoutClearMiscsData())\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap(details => [\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n            new CheckoutActions.CreatePaymentDetailsSuccess(details),\n          ]),\n          catchError(error =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError(error =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap(data => [new CheckoutActions.PlaceOrderSuccess(data)]),\n          catchError(error =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap(payload => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError(error =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map(payload => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId ? payload.cartId : 'current',\n      });\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, shareReplay, tap } from 'rxjs/operators';\nimport {\n  ANONYMOUS_USERID,\n  CartDataService,\n} from '../../cart/facade/cart-data.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected cartData: CartDataService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      tap(deliveryModes => {\n        if (Object.keys(deliveryModes).length === 0) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter(results => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.AddDeliveryAddress({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          address: address,\n        })\n      );\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadSupportedDeliveryModes({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.SetDeliveryMode({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          selectedModeId: mode,\n        })\n      );\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.VerifyAddress({\n          userId: this.cartData.userId,\n          address,\n        })\n      );\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.SetDeliveryAddress({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cart.code,\n          address: address,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    return this.cartData.userId !== ANONYMOUS_USERID;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  ANONYMOUS_USERID,\n  CartDataService,\n} from '../../cart/facade/cart-data.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected cartData: CartDataService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.CreatePaymentDetails({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cartId,\n          paymentDetails,\n        })\n      );\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.SetPaymentDetails({\n          userId: this.cartData.userId,\n          cartId: this.cartData.cart.code,\n          paymentDetails: paymentDetails,\n        })\n      );\n    }\n  }\n\n  protected actionAllowed(): boolean {\n    return this.cartData.userId !== ANONYMOUS_USERID;\n  }\n}\n","import { StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components?fields=${fields}',\n        pages: 'cms/pages?fields=${fields}',\n        page: 'cms/pages/${id}?fields=${fields}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../facade/cms.service';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\nimport { PageType } from '../../model/cms.model';\nimport { TranslationService } from '../../i18n/translation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  resolve(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap(page =>\n        combineLatest([\n          this.resolveTitle(page),\n          this.resolveBreadcrumbLabel().pipe(\n            switchMap(label => this.resolveBreadcrumbs(page, label))\n          ),\n        ])\n      ),\n      map(([title, breadcrumbs]) => ({ title, breadcrumbs }))\n    );\n  }\n\n  resolveTitle(page: Page): Observable<string> {\n    return of(page.title);\n  }\n\n  resolveBreadcrumbLabel(): Observable<string> {\n    return this.translation.translate('common.home');\n  }\n\n  resolveBreadcrumbs(_page: Page, breadcrumbLabel: string): Observable<any[]> {\n    // as long as we do not have CMSX-8689 in place\n    // we need specific resolvers for nested pages\n    return of([{ label: breadcrumbLabel, link: '/' }]);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import {\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n  Route,\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherFactoryService {\n  getFalsyUrlMatcher(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  getMultiplePathsUrlMatcher(paths: string[]): UrlMatcher {\n    const self = this;\n\n    const matcher = function multiplePathsUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < paths.length; i++) {\n        const result = self.getPathUrlMatcher(paths[i])(\n          segments,\n          segmentGroup,\n          route\n        );\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    matcher.paths = paths; // property added for easier debugging of routes\n    return matcher;\n  }\n\n  // Similar to Angular's defaultUrlMatcher. The difference is that `path` comes from function's argument, not from `route.path`\n  private getPathUrlMatcher(path: string = ''): UrlMatcher {\n    return (\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null => {\n      const parts = path.split('/');\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n  }\n}\n","import { Injectable, Injector, isDevMode } from '@angular/core';\nimport { Routes, Router, Route } from '@angular/router';\nimport { RoutingConfigService } from './routing-config.service';\nimport { UrlMatcherFactoryService } from './url-matcher-factory.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    private injector: Injector,\n    private routingConfigService: RoutingConfigService,\n    private urlMatcherFactory: UrlMatcherFactoryService\n  ) {}\n\n  private initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Configures all existing Routes in the Router\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n      this.configureRouter();\n    }\n  }\n\n  private configureRouter() {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n\n    const configuredRoutes = this.configureRoutes(router.config);\n\n    router.resetConfig(configuredRoutes);\n  }\n\n  private configureRoutes(routes: Routes): Routes {\n    const result = [];\n    routes.forEach(route => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      result.push(configuredRoute);\n    });\n    return result;\n  }\n\n  private configureRoute(route: Route): Route {\n    if (this.getRouteName(route)) {\n      const paths = this.getConfiguredPaths(route);\n      switch (paths.length) {\n        case 0:\n          delete route.path;\n          return {\n            ...route,\n            matcher: this.urlMatcherFactory.getFalsyUrlMatcher(),\n          };\n\n        case 1:\n          delete route.matcher;\n          return { ...route, path: paths[0] };\n\n        default:\n          delete route.path;\n          return {\n            ...route,\n            matcher: this.urlMatcherFactory.getMultiplePathsUrlMatcher(paths),\n          };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  private getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  private getConfiguredPaths(route: Route): string[] {\n    const routeName = this.getRouteName(route);\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    if (routeConfig === undefined) {\n      this.warn(\n        `Could not configure the named route '${routeName}'`,\n        route,\n        `due to undefined key '${routeName}' in the routes config`\n      );\n      return [];\n    }\n    if (routeConfig && routeConfig.paths === undefined) {\n      this.warn(\n        `Could not configure the named route '${routeName}'`,\n        route,\n        `due to undefined 'paths' for the named route '${routeName}' in the routes config`\n      );\n      return [];\n    }\n\n    // routeConfig or routeConfig.paths can be null - which means switching off the route\n    return (routeConfig && routeConfig.paths) || [];\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe],\n  exports: [UrlPipe],\n})\nexport class UrlModule {}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(url => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(_ => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<State>\n> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              x => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map(urlSegment => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { Config } from '../config/config.module';\nimport { RoutingConfig } from './configurable-routes/config/routing-config';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n        { provide: RoutingConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap(page => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map(page => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map(id => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find(p => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap(page => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap(loadFromConfig => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError(error => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap(page => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(_ =>\n      this.routingService.getRouterState().pipe(\n        take(1),\n        filter(\n          routerState =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        map(routerState => routerState.state.context),\n        mergeMap(context => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy(pageContext => pageContext.type + pageContext.id),\n    mergeMap(group =>\n      group.pipe(\n        switchMap(pageContext =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              return [\n                new CmsActions.CmsGetComponentFromPage(cmsStructure.components),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n            }),\n            catchError(error =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap(configuredComponent =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap(configuredComponents => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map(loadedComponents => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentLoader: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n\n  @Effect()\n  loadComponent$: Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_COMPONENT),\n    map((action: CmsActions.LoadCmsComponent) => action.payload),\n    groupBy(uid => uid),\n    mergeMap(group =>\n      group.pipe(\n        switchMap(uid =>\n          this.routingService.getRouterState().pipe(\n            filter(routerState => routerState !== undefined),\n            map(routerState => routerState.state.context),\n            take(1),\n            mergeMap(pageContext =>\n              this.cmsComponentLoader.get(uid, pageContext).pipe(\n                map(data => new CmsActions.LoadCmsComponentSuccess(data, uid)),\n                catchError(error =>\n                  of(\n                    new CmsActions.LoadCmsComponentFail(\n                      uid,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map(payload => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap(data => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter(routerState => routerState !== undefined),\n          map(routerState => routerState.state.context),\n          take(1),\n          mergeMap(pageContext =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  components =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError(error =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach(item => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { PageEffects } from './page.effect';\nimport { ComponentEffects } from './component.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './page.effect';\nexport * from './component.effect';\nexport * from './navigation-entry-item.effect';\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    component: entityLoaderReducer(COMPONENT_ENTITY),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<CmsState>\n> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function(state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(cmsStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '../config/config.module';\nimport { CmsConfig } from './config/cms-config';\nimport { CmsStructureConfig } from './config/cms-structure.config';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [\n        CmsService,\n        { provide: CmsConfig, useExisting: Config },\n        { provide: CmsStructureConfig, useExisting: Config },\n        provideConfig(defaultCmsModuleConfig),\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n        if (metaResolver) {\n          return metaResolver.resolve();\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * return the title resolver with the best match\n   * title resovers can by default match on PageType and page template\n   * but custom match comparisors can be implemented.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    const matchingResolvers = this.resolvers.filter(\n      resolver => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function(a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param properties: properties in each cms item response data\n   * @param element: slot or cms component element\n   * @param renderer\n   */\n  addDynamicAttributes(\n    properties: any,\n    element: Element,\n    renderer: Renderer2\n  ): void {\n    if (properties) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach(group => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach(propName => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach(classItem => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n}\n","import { GlobalMessageType } from '../models/global-message.model';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    entities => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    entities => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter(data => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   */\n  add(text: string | Translatable, type: GlobalMessageType): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  abstract responseStatus: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpResponseStatus } from '../models/response-status.model';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {\n    // We reverse the handlers to allow for custom handlers\n    // that replace standard handlers\n    this.handlers.reverse();\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    const status = response.status;\n    let handler = this.handlers.find(h => h.responseStatus === status);\n    if (!handler) {\n      handler = this.handlers.find(\n        h => h.responseStatus === HttpResponseStatus.UNKNOWN\n      );\n    }\n    return handler;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Translatable } from '../../../i18n/translatable';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (\n      response.url.includes(OAUTH_ENDPOINT) &&\n      response.error &&\n      response.error.error === 'invalid_grant' &&\n      request.body.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    } else {\n      if (\n        response.error &&\n        response.error.errors &&\n        response.error.errors instanceof Array\n      ) {\n        response.error.errors.forEach((error: ErrorModel) => {\n          let errorMessage: Translatable;\n          if (error.type === 'PasswordMismatchError') {\n            // uses en translation error message instead of backend exception error\n            // @todo: this condition could be removed if backend gives better message\n            errorMessage = {\n              key: 'httpHandlers.badRequestOldPasswordIncorrect',\n            };\n          } else if (\n            error.subjectType === 'cart' &&\n            error.reason === 'notFound'\n          ) {\n            errorMessage = { key: 'httpHandlers.cartNotFound' };\n          } else if (error.type === 'ValidationError') {\n            // build translation key in case of backend field validation error\n            errorMessage = {\n              key: `httpHandlers.validationErrors.${error.reason}.${\n                error.subject\n              }`,\n            };\n          } else {\n            // this is currently showing up in case we have a page not found. It should be a 404.\n            // see https://jira.hybris.com/browse/CMSX-8516\n            errorMessage = { raw: error.message || '' };\n          }\n          this.globalMessageService.add(\n            errorMessage,\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        });\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../models/response-status.model';\nimport { HttpErrorHandler } from './http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { HttpErrorInterceptor } from './http-error.interceptor';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { UnknownErrorHandler } from './handlers/unknown-error.handler';\nimport { BadGatewayHandler } from './handlers/bad-gateway.handler';\nimport { BadRequestHandler } from './handlers/bad-request.handler';\nimport { ConflictHandler } from './handlers/conflict.handler';\nimport { ForbiddenHandler } from './handlers/forbidden.handler';\nimport { GatewayTimeoutHandler } from './handlers/gateway-timeout.handler';\nimport { NotFoundHandler } from './handlers/not-found.handler';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport { deepEqualObjects } from '../../../util/compare-equal-objects';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const messages: Translatable[] = state.entities[message.type];\n        if (!messages.some(msg => deepEqualObjects(msg, message.text))) {\n          return {\n            ...state,\n            entities: {\n              ...state.entities,\n              [message.type]: [...messages, message.text],\n            },\n          };\n        }\n      }\n      return state;\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducer<GlobalMessageState>\n> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { delay, filter, mergeMap, pluck, switchMap } from 'rxjs/operators';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload', 'type'),\n    mergeMap((type: GlobalMessageType) => {\n      const config = this.config.globalMessages[type];\n      return this.store.pipe(\n        select(GlobalMessageSelectors.getGlobalMessageCountByType(type)),\n        filter(\n          (count: number) =>\n            config && config.timeout !== undefined && count && count > 0\n        ),\n        switchMap((count: number) =>\n          of(\n            new GlobalMessageActions.RemoveMessage({\n              type,\n              index: count - 1,\n            })\n          ).pipe(delay(config.timeout))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  httpErrorInterceptors,\n  errorHandlers,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { Config, ConfigModule } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { GlobalMessageConfig } from './config/global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n    ConfigModule.withConfigFactory(defaultGlobalMessageConfigFactory),\n  ],\n  providers: [\n    GlobalMessageService,\n    { provide: GlobalMessageConfig, useExisting: Config },\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap(languages => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter(languages => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(\n        select(SiteContextSelectors.getActiveLanguage),\n        take(1)\n      )\n      .subscribe(activeLanguage => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe(lang => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe(val => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\n\nexport abstract class I18nConfig {\n  i18n?: {\n    fallbackLang?: string | false;\n    backend?: {\n      loadPath?: string;\n      crossDomain?: boolean;\n    };\n    resources?: TranslationResources;\n    debug?: boolean;\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach(chunk => {\n      chunks[chunk].forEach(key => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach(key => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import i18next from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { I18nConfig } from '../config/i18n-config';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  config: I18nConfig,\n  languageService: LanguageService\n): () => Promise<any> {\n  return () => {\n    let i18nextConfig: i18next.InitOptions = {\n      ns: [], // don't preload any namespaces\n      fallbackLng: config.i18n.fallbackLang,\n      debug: config.i18n.debug,\n      interpolation: {\n        escapeValue: false,\n      },\n    };\n    if (config.i18n.backend) {\n      i18next.use(i18nextXhrBackend);\n      i18nextConfig = { ...i18nextConfig, backend: config.i18n.backend };\n    }\n    return i18next.init(i18nextConfig, () => {\n      // Don't use i18next's 'resources' config key for adding static translations,\n      // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n      i18nextAddTranslations(config.i18n.resources);\n      syncI18nextWithSiteContext(languageService);\n    });\n  };\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach(lang => {\n    Object.keys(resources[lang]).forEach(chunkName => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe(lang => i18next.changeLanguage(lang));\n}\n","import { Provider, APP_INITIALIZER } from '@angular/core';\nimport { I18nConfig } from '../config/i18n-config';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [I18nConfig, LanguageService],\n    multi: true,\n  },\n];\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport i18next from 'i18next';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\n\n@Injectable()\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>(subscriber => {\n      const translate = () => {\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TranslatePipe } from './translate.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { I18nConfig } from './config/i18n-config';\nimport { TranslationService } from './translation.service';\nimport { provideConfig, Config } from '../config/config.module';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { CxDatePipe } from './date.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideConfig(defaultI18nConfig),\n        { provide: I18nConfig, useExisting: Config },\n        { provide: TranslationService, useClass: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map(optionName => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>(subscriber => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    /**\n     * If set to `true`, the integration with kyma will be enabled, and Open ID token will be retrieved when registering/logging in,\n     */\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(\n  getKymaState,\n  state => state.openIdToken\n);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_enabled: false,\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError(error => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { iif, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<KymaActions.LoadOpenIdToken> = iif<\n    KymaActions.LoadOpenIdToken,\n    KymaActions.LoadOpenIdToken\n  >(\n    () => this.config.authentication && this.config.authentication.kyma_enabled,\n    this.actions$.pipe(\n      ofType<KymaActions.LoadOpenIdTokenSuccess>(\n        AuthActions.LOAD_USER_TOKEN_SUCCESS\n      ),\n      withLatestFrom(\n        this.actions$.pipe(\n          ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n        )\n      ),\n      map(\n        ([, loginAction]) =>\n          new KymaActions.LoadOpenIdToken({\n            username: loginAction.payload.userId,\n            password: loginAction.payload.password,\n          })\n      )\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap(payload =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map(token => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError(error =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService,\n    private config: KymaConfig\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<KymaState>\n> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(kymaStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaConfig } from './config/kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    KymaStoreModule,\n    ConfigModule.withConfig(defaultKymaConfig),\n  ],\n  providers: [...KymaServices, { provide: KymaConfig, useExisting: Config }],\n})\nexport class KymaModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n}\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map(source => this.convertSource(source, injectionToken));\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce(\n      (target, converter) => {\n        return converter.convert(source, target);\n      },\n      undefined as T\n    );\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DETAILS_PARAMS =\n  'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +\n  'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue)),' +\n  'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +\n  'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +\n  'appliedVouchers,productDiscounts(formattedValue)';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = `users/${userId}/carts/`;\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    const url = this.getCartEndpoint(userId);\n    const params = new HttpParams({\n      fromString: `fields=carts(${DETAILS_PARAMS},saveTime)`,\n    });\n\n    return this.http.get<Occ.CartList>(url, { params: params }).pipe(\n      pluck('carts'),\n      this.converter.pipeableMany(CART_NORMALIZER)\n    );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    const url = this.getCartEndpoint(userId) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${DETAILS_PARAMS}`,\n    });\n\n    if (cartId === 'current') {\n      return this.loadAll(userId).pipe(\n        map(carts => {\n          if (carts) {\n            const activeCart = carts.find(cart => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(url, { params: params })\n        .pipe(this.converter.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId);\n    const toAdd = JSON.stringify({});\n    let queryString = `fields=${DETAILS_PARAMS}`;\n\n    if (oldCartId) {\n      queryString = `${queryString}&oldCartId=${oldCartId}`;\n    }\n    if (toMergeCartGuid) {\n      queryString = `${queryString}&toMergeCartGuid=${toMergeCartGuid}`;\n    }\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n\n    return this.http\n      .post<Occ.Cart>(url, toAdd, { params: params })\n      .pipe(this.converter.pipeable(CART_NORMALIZER));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const url = this.getCartEndpoint(userId) + cartId + '/entries';\n\n    const params = new HttpParams({\n      fromString: 'code=' + productCode + '&qty=' + quantity,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers, params })\n      .pipe(this.converter.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    let queryString = 'qty=' + qty;\n    if (pickupStore) {\n      queryString = queryString + '&pickupStore=' + pickupStore;\n    }\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport { Cart } from '../../../../model/cart.model';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable()\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map(entry => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useClass: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable()\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map(entry =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map(consignment => ({\n        ...consignment,\n        entries: consignment.entries.map(entry => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map(entry =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map(data => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap(sub => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map(response => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap(fromPaymentProvider => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map(cardTypeList => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach(key => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function(result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useClass: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl('components', { fields }, requestParams);\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable()\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { PageContext } from '../../../routing';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl('page', {\n            id: pageContext.id,\n            fields: fields ? fields : 'DEFAULT',\n          }),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', { fields }, params);\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useClass: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   */\n  abstract load(productCode: string): Observable<Product>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable()\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map(reference => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Injectable } from '@angular/core';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport { ProductSearchPage } from '../../../../model/product-search.model';\n\n@Injectable()\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n    if (source.products) {\n      target.products = source.products.map(product =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable()\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        /**\n         * Traditionally, in an on-prem world, medias and other backend related calls\n         * are hosted at the same platform, but in a cloud setup, applications are are\n         * typically distributed cross different environments. For media, we use the\n         * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n         * if none provided.\n         */\n        image.url =\n          (this.config.backend.media.baseUrl ||\n            this.config.backend.occ.baseUrl ||\n            '') + image.url;\n\n        imageContainer[image.format] = image;\n      }\n    }\n    return images;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http.get(this.getEndpoint(productCode, maxCount)).pipe(\n      pluck('reviews'),\n      this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n    );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\n\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { pluck } from 'rxjs/operators';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {\n        query,\n      },\n      {\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {\n      term,\n      max,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  protected getEndpoint(code: string): string {\n    return this.occEndpoints.getUrl('product', {\n      productCode: code,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product:\n          'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,numberOfReviews,categories(FULL)',\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch&query=${query}',\n        // tslint:enable\n        productSuggestions: 'products/suggestions?term=${term}&max=${max}',\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ConfigModule } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(defaultOccProductConfig),\n  ],\n  providers: [\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useClass: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useClass: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useClass: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useClass: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst COUNTRIES_ENDPOINT = 'countries';\nconst REGIONS_ENDPOINT = 'regions';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpoints.getEndpoint('languages'))\n      .pipe(\n        map(languageList => languageList.languages),\n        this.converter.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpoints.getEndpoint('currencies'))\n      .pipe(\n        map(currencyList => currencyList.currencies),\n        this.converter.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    let params;\n\n    if (type) {\n      params = new HttpParams().set('type', type);\n    }\n\n    return this.http\n      .get<Occ.CountryList>(this.occEndpoints.getEndpoint(COUNTRIES_ENDPOINT), {\n        params,\n      })\n      .pipe(\n        map(countryList => countryList.countries),\n        this.converter.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    const regionsEndpoint = `${COUNTRIES_ENDPOINT}/${countryIsoCode}/${REGIONS_ENDPOINT}?fields=regions(name,isocode,isocodeShort)`;\n    return this.http\n      .get<Occ.RegionList>(this.occEndpoints.getEndpoint(regionsEndpoint))\n      .pipe(\n        map(regionList => regionList.regions),\n        this.converter.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpoints.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map(siteList => {\n          return siteList.baseSites.find(site => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Currency, Language, BaseSite } from '../../model/misc.model';\nimport { Country, CountryType, Region } from '../../model/address.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap(currencies => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter(currenies => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter(active => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(\n        select(SiteContextSelectors.getActiveCurrency),\n        take(1)\n      )\n      .subscribe(activeCurrency => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable()\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe(data => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe(data => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst STORES_ENDPOINT = 'stores';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(\n      this.converter.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER)\n    );\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    const storeCountUrl = this.getStoresEndpoint('storescounts');\n\n    return this.http.get<Occ.StoreCountList>(storeCountUrl).pipe(\n      map(({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount),\n      this.converter.pipeableMany(STORE_COUNT_NORMALIZER)\n    );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    const storeDetailsUrl = this.getStoresEndpoint(storeId);\n    const params = { fields: 'FULL' };\n\n    return this.http\n      .get<Occ.PointOfService>(storeDetailsUrl, { params })\n      .pipe(this.converter.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const url = this.getStoresEndpoint();\n    let params: HttpParams = new HttpParams({\n      fromString:\n        'fields=stores(name,displayName,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),' +\n        'geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),' +\n        'pagination(DEFAULT),' +\n        'sorts(DEFAULT)',\n    });\n\n    if (longitudeLatitude) {\n      params = params.set('longitude', String(longitudeLatitude.longitude));\n      params = params.set('latitude', String(longitudeLatitude.latitude));\n    } else {\n      params = params.set('query', query);\n    }\n    if (searchConfig.pageSize) {\n      params = params.set('pageSize', String(searchConfig.pageSize));\n    }\n    if (searchConfig.currentPage) {\n      params = params.set('currentPage', String(searchConfig.currentPage));\n    }\n    if (searchConfig.sort) {\n      params = params.set('sort', searchConfig.sort);\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(url, { params });\n  }\n\n  protected getStoresEndpoint(url?: string): string {\n    const baseUrl = this.occEndpoints.getEndpoint(STORES_ENDPOINT);\n\n    return url ? baseUrl + '/' + url : baseUrl;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [{ provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter }],\n})\nexport class StoreFinderOccModule {}\n","import { Observable } from 'rxjs';\nimport { Order, OrderHistoryList } from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { OrderHistoryList } from '../../../model/order.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { Order, OrderHistoryList } from '../../../model/order.model';\nimport { ORDER_HISTORY_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getOrderEndpoint(userId: string): string {\n    const orderEndpoint = 'users/' + userId + '/orders';\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId);\n\n    const orderUrl = url + '/' + orderCode;\n\n    const params = new HttpParams({\n      fromString: FULL_PARAMS,\n    });\n\n    return this.http\n      .get<Occ.Order>(orderUrl, {\n        params: params,\n      })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const url = this.getOrderEndpoint(userId);\n    let params = new HttpParams();\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (sort) {\n      params = params.set('sort', sort);\n    }\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url, { params: params })\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\n\nconst USER_ENDPOINT = 'users/';\nconst ADDRESSES_ENDPOINT = '/addresses';\nconst ADDRESSES_VERIFICATION_ENDPOINT = '/addresses/verification';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  private getUserEndpoint(userId: string): string {\n    const endpoint = `${USER_ENDPOINT}${userId}`;\n    return this.occEndpoints.getEndpoint(endpoint);\n  }\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.getUserEndpoint(userId) + ADDRESSES_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http.get<Occ.AddressList>(url, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      map(addressList => addressList.addresses),\n      this.converter.pipeableMany(ADDRESS_NORMALIZER)\n    );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.getUserEndpoint(userId) + ADDRESSES_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url =\n      this.getUserEndpoint(userId) + ADDRESSES_ENDPOINT + '/' + addressId;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.getUserEndpoint(userId) + ADDRESSES_VERIFICATION_ENDPOINT;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http.post<AddressValidation>(url, address, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n    );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url =\n      this.getUserEndpoint(userId) + ADDRESSES_ENDPOINT + '/' + addressId;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\nconst USER_ENDPOINT = 'users/';\nconst FORGOT_PASSWORD_ENDPOINT = '/forgottenpasswordtokens';\nconst RESET_PASSWORD_ENDPOINT = '/resetpassword';\nconst UPDATE_EMAIL_ENDPOINT = '/login';\nconst UPDATE_PASSWORD_ENDPOINT = '/password';\nconst TITLES_ENDPOINT = 'titles';\n\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  private getUserEndpoint(userId?: string): string {\n    const endpoint = userId ? `${USER_ENDPOINT}${userId}` : USER_ENDPOINT;\n    return this.occEndpoints.getEndpoint(endpoint);\n  }\n\n  load(userId: string): Observable<User> {\n    const url = this.getUserEndpoint(userId);\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.getUserEndpoint(userId);\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.getUserEndpoint();\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getEndpoint(FORGOT_PASSWORD_ENDPOINT);\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getEndpoint(RESET_PASSWORD_ENDPOINT);\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.getUserEndpoint(userId) + UPDATE_EMAIL_ENDPOINT;\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.getUserEndpoint(userId) + UPDATE_PASSWORD_ENDPOINT;\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.getUserEndpoint(userId);\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    return this.http\n      .get<Occ.TitleList>(this.occEndpoints.getEndpoint(TITLES_ENDPOINT))\n      .pipe(\n        map(titleList => titleList.titles),\n        this.converter.pipeableMany(TITLE_NORMALIZER)\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Occ } from '../../occ-models/occ.models';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\n\nconst USER_ENDPOINT = 'users/';\nconst PAYMENT_DETAILS_ENDPOINT = '/paymentdetails';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  private getPaymentDetailsEndpoint(userId: string): string {\n    const endpoint = `${USER_ENDPOINT}${userId}${PAYMENT_DETAILS_ENDPOINT}`;\n    return this.occEndpoints.getEndpoint(endpoint);\n  }\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url = this.getPaymentDetailsEndpoint(userId) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http.get<Occ.PaymentDetailsList>(url, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      map(methodList => methodList.payments),\n      this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n    );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.getPaymentDetailsEndpoint(userId) + `/${paymentMethodID}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.getPaymentDetailsEndpoint(userId) + `/${paymentMethodID}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { Occ } from '../../occ-models/occ.models';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\n\nconst USER_ENDPOINT = 'users/';\nconst CONSENTS_TEMPLATES_ENDPOINT = '/consenttemplates';\nconst CONSENTS_ENDPOINT = '/consents';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  private getUserEndpoint(userId?: string): string {\n    const endpoint = userId ? `${USER_ENDPOINT}${userId}` : USER_ENDPOINT;\n    return this.occEndpoints.getEndpoint(endpoint);\n  }\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.getUserEndpoint(userId) + CONSENTS_TEMPLATES_ENDPOINT;\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http.get<Occ.ConsentTemplateList>(url, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      map(consentList => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.getUserEndpoint() + userId + CONSENTS_ENDPOINT;\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError(error => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url =\n      this.getUserEndpoint() + userId + CONSENTS_ENDPOINT + '/' + consentCode;\n    return this.http.delete(url, { headers });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n  ],\n})\nexport class UserOccModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/utils/config-validator';\nimport { Config, provideConfig } from '../config/config.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { OccConfig } from './config/occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\n\n@NgModule({\n  imports: [\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        { provide: OccConfig, useExisting: Config },\n        provideConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","export abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n  };\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n  },\n};\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable()\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable()\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { PersonalizationConfig } from './config/personalization-config';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [ConfigModule.withConfig(defaultPersonalizationConfig)],\n  providers: [{ provide: PersonalizationConfig, useExisting: Config }],\n})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<EntityLoaderState<any>>\n> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateEntityLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(\n    getProcessState(),\n    entityState =>\n      StateEntityLoaderSelectors.entityStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(\n    getProcessStateFactory(processId),\n    loaderState => loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(\n    getProcessStateFactory(processId),\n    loaderState => loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(\n    getProcessStateFactory(processId),\n    loaderState => loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string): Observable<Product> {\n    return this.adapter.load(productCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { Product } from '../../../model/product.model';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport class LoadProduct extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string) {\n    super(PRODUCT_DETAIL_ENTITY, payload);\n  }\n}\n\nexport class LoadProductFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any) {\n    super(PRODUCT_DETAIL_ENTITY, productCode, payload);\n  }\n}\n\nexport class LoadProductSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product) {\n    super(PRODUCT_DETAIL_ENTITY, payload.code);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(\n    getProductReferencesState,\n    referenceTypeData => {\n      if (referenceTypeData.productCode === productCode) {\n        return !!referenceTypeData.list ? referenceTypeData.list : [];\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.reviews\n);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(\n    getProductReviewsState,\n    reviewData => {\n      if (reviewData.productCode === productCode) {\n        return reviewData.list;\n      }\n    }\n  );\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.search\n);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getSearchResults\n);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.details\n);\n\nexport const getSelectedProductsFactory = (\n  codes: string[]\n): MemoizedSelector<StateWithProduct, Product[]> => {\n  return createSelector(\n    getProductState,\n    (details: EntityLoaderState<Product>) => {\n      return codes\n        .map(code =>\n          details.entities[code] ? details.entities[code].value : undefined\n        )\n        .filter(product => product !== undefined);\n    }\n  );\n};\n\nexport const getSelectedProductStateFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    details => StateEntityLoaderSelectors.entityStateSelector(details, code)\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => StateLoaderSelectors.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => StateLoaderSelectors.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => StateLoaderSelectors.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code),\n    productState => StateLoaderSelectors.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(\n  getProductState,\n  details => {\n    return Object.keys(details.entities);\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReferencesFactory(productCode)),\n      tap(references => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap(reviews => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, tap } from 'rxjs/operators';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  private products: { [code: string]: Observable<Product> } = {};\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   */\n  get(productCode: string): Observable<Product> {\n    if (!this.products[productCode]) {\n      this.products[productCode] = this.store.pipe(\n        select(ProductSelectors.getSelectedProductStateFactory(productCode)),\n        tap(productState => {\n          const attemptedLoad =\n            productState.loading || productState.success || productState.error;\n\n          if (!attemptedLoad) {\n            this.store.dispatch(new ProductActions.LoadProduct(productCode));\n          }\n        }),\n        map(productState => productState.value),\n        shareReplay({ bufferSize: 1, refCount: true })\n      );\n    }\n    return this.products[productCode];\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductLoadingFactory(productCode))\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductSuccessFactory(productCode))\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(productCode: string): Observable<boolean> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductErrorFactory(productCode))\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport { PageTitleResolver } from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolve(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap(page => {\n        // only the existence of a plp component tells us if products\n        // are rendered or if this is an ordinary content page\n        if (this.hasProductListComponent(page)) {\n          return this.productSearchService.getResults().pipe(\n            filter(data => data.breadcrumbs && data.breadcrumbs.length > 0),\n            switchMap(data =>\n              combineLatest([\n                this.resolveTitle(data),\n                this.resolveBreadcrumbLabel().pipe(\n                  switchMap(label => this.resolveBreadcrumbs(data, label))\n                ),\n              ])\n            ),\n            map(([title, breadcrumbs]) => ({ title, breadcrumbs }))\n          );\n        } else {\n          return of({\n            title: page.title || page.name,\n          });\n        }\n      })\n    );\n  }\n\n  resolveTitle(data: ProductSearchPage): Observable<string> {\n    return this.translation.translate('pageMetaResolver.category.title', {\n      count: data.pagination.totalResults,\n      query: data.breadcrumbs[0].facetValueName,\n    });\n  }\n\n  resolveBreadcrumbLabel(): Observable<string> {\n    return this.translation.translate('common.home');\n  }\n\n  resolveBreadcrumbs(\n    data: ProductSearchPage,\n    breadcrumbLabel: string\n  ): Observable<any[]> {\n    const breadcrumbs = [];\n    breadcrumbs.push({ label: breadcrumbLabel, link: '/' });\n    for (const br of data.breadcrumbs) {\n      if (br.facetCode === 'category') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return of(breadcrumbs);\n  }\n\n  private hasProductListComponent(page: Page): boolean {\n    // ProductListComponent\n    return !!Object.keys(page.slots).find(\n      key =>\n        !!page.slots[key].components.find(\n          comp => comp.typeCode === 'CMSProductListComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  resolve(): Observable<PageMeta> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap(code => this.productService.get(code)),\n      filter(Boolean),\n      switchMap((p: Product) =>\n        combineLatest([\n          this.resolveHeading(p),\n          this.resolveTitle(p),\n          this.resolveDescription(p),\n          this.resolveBreadcrumbLabel().pipe(\n            switchMap(label => this.resolveBreadcrumbs(p, label))\n          ),\n          this.resolveImage(p),\n        ])\n      ),\n      map(([heading, title, description, breadcrumbs, image]) => ({\n        heading,\n        title,\n        description,\n        breadcrumbs,\n        image,\n      }))\n    );\n  }\n\n  resolveHeading(product: Product): Observable<string> {\n    return this.translation.translate('pageMetaResolver.product.heading', {\n      heading: product.name,\n    });\n  }\n\n  resolveTitle(product: Product): Observable<string> {\n    let title = product.name;\n    title += this.resolveFirstCategory(product);\n    title += this.resolveManufacturer(product);\n\n    return this.translation.translate('pageMetaResolver.product.title', {\n      title: title,\n    });\n  }\n\n  resolveDescription(product: Product): Observable<string> {\n    return this.translation.translate('pageMetaResolver.product.description', {\n      description: product.summary,\n    });\n  }\n\n  resolveBreadcrumbLabel(): Observable<string> {\n    return this.translation.translate('common.home');\n  }\n\n  resolveBreadcrumbs(\n    product: Product,\n    breadcrumbLabel: string\n  ): Observable<any[]> {\n    const breadcrumbs = [];\n    breadcrumbs.push({ label: breadcrumbLabel, link: '/' });\n    for (const { name, code, url } of product.categories) {\n      breadcrumbs.push({\n        label: name || code,\n        link: url,\n      });\n    }\n    return of(breadcrumbs);\n  }\n\n  resolveImage(product: any): Observable<string> {\n    let result;\n    if (\n      product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY.zoom &&\n      product.images.PRIMARY.zoom.url\n    ) {\n      result = product.images.PRIMARY.zoom.url;\n    }\n    return of(result);\n  }\n\n  private resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories && product.categories.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  private resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { PageMeta } from '../../cms/model/page.model';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolve(): Observable<PageMeta> {\n    const total$: Observable<\n      number\n    > = this.productSearchService.getResults().pipe(\n      filter(data => !!(data && data.pagination)),\n      map(results => results.pagination.totalResults)\n    );\n\n    const query$: Observable<\n      string\n    > = this.routingService.getRouterState().pipe(\n      map(state => state.state.params['query']),\n      filter(Boolean)\n    );\n\n    return combineLatest([total$, query$]).pipe(\n      switchMap(([total, query]: [number, string]) =>\n        this.resolveTitle(total, query)\n      ),\n      map(title => ({ title }))\n    );\n  }\n\n  resolveTitle(total: number, query: string): Observable<string> {\n    return this.translation.translate('pageMetaResolver.search.title', {\n      count: total,\n      query: query,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap(payload => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map(data => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError(_error =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap(productCode => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map(data => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError(_error =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap(payload => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map(reviewResponse => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError(_error =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap(group =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map(data => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError(error =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap(payload => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map(suggestions => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError(error =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductEffects {\n  @Effect()\n  loadProduct$: Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT),\n    map((action: ProductActions.LoadProduct) => action.payload),\n    groupBy(productCode => productCode),\n    mergeMap(group =>\n      group.pipe(\n        switchMap(productCode => {\n          return this.productConnector.get(productCode).pipe(\n            map(product => {\n              return new ProductActions.LoadProductSuccess(product);\n            }),\n            catchError(error =>\n              of(\n                new ProductActions.LoadProductFail(\n                  productCode,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          );\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list,\n        productCode,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { ProductsState, PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<ProductsState>\n> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(productStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SiteAdapter } from './site.adapter';\nimport { Observable } from 'rxjs';\nimport { Currency, Language, BaseSite } from '../../model/misc.model';\nimport { Country, CountryType, Region } from '../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { BaseSiteService } from '../facade/base-site.service';\n\nexport function inititializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService\n) {\n  return () => {\n    baseSiteService.initialize();\n    langService.initialize();\n    currService.initialize();\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: inititializeContext,\n    deps: [BaseSiteService, LanguageService, CurrencyService],\n    multi: true,\n  },\n];\n","import { Injectable, Injector } from '@angular/core';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        param => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe(val => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n}\n","import { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private readonly urlEncodingParameters: string[];\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n    this.urlEncodingParameters = this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const segments = url.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/');\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map(param => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { Subscription } from 'rxjs';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.router.url);\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach(param => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe(value => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            event =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach(param =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    siteContextRoutesHandler.init();\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler],\n    multi: true,\n  },\n];\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          languages => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          currencies => new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map(baseSite => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError(error =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport * as fromLanguages from './languages.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromBaseSite from './base-site.reducer';\nimport { SiteContextState } from '../state';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<SiteContextState>\n> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigModule } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    ConfigModule.withConfigFactory(siteContextStoreConfigFactory),\n  ],\n  providers: [reducerProvider],\n})\nexport class SiteContextStoreModule {}\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { StateModule } from '../state/index';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\nimport { provideConfigValidator } from '../config/utils/config-validator';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\n\n// @dynamic\n@NgModule({\n  imports: [\n    ConfigModule.withConfigFactory(defaultSiteContextConfigFactory),\n    StateModule,\n    SiteContextStoreModule,\n  ],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        { provide: SiteContextConfig, useExisting: Config },\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { takeWhile, take, filter } from 'rxjs/operators';\n\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { Page } from '../../cms/model/page.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { PageType } from '../../model/cms.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n    this.addPageContract();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(takeWhile(([cmsPage]) => cmsPage === undefined))\n      .subscribe(([, routerState]) => {\n        if (routerState.nextState && !this._cmsTicketId) {\n          this._cmsTicketId = routerState.nextState.queryParams['cmsTicketId'];\n          if (this._cmsTicketId) {\n            this.cmsService.launchInSmartEdit = true;\n            this.getDefaultPreviewCode();\n          }\n        }\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter(site => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe(site => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe(cmsPage => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach(attr =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach(attr =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach(classItem => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable()\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      searchConfig?: StoreFinderSearchConfig;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(\n  getFindStoresState,\n  state => StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(\n  getFindStoresState,\n  state => StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(\n  getViewAllStoresState,\n  state => StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(\n  getViewAllStoresState,\n  state => StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param searchConfig search configuration\n   * @param countryIsoCode country ISO code\n   */\n  findStoresAction(\n    queryText: string,\n    longitudeLatitude: GeoPoint,\n    searchConfig: StoreFinderSearchConfig,\n    countryIsoCode?: string\n  ) {\n    this.store.dispatch(\n      new StoreFinderActions.FindStores({\n        queryText: queryText,\n        longitudeLatitude: longitudeLatitude,\n        searchConfig: searchConfig,\n        countryIsoCode: countryIsoCode,\n      })\n    );\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  /**\n   * Find all stores\n   * @param queryText text query\n   * @param useMyLocation use current location\n   */\n  findStores(queryText: string, useMyLocation?: boolean) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const longitudeLatitude: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({ queryText, longitudeLatitude })\n          );\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({ queryText })\n      );\n    }\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): Date {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result: Date = null;\n\n    if (requestedDaySchedule.closed === false) {\n      const closingHour = requestedDaySchedule.closingTime.formattedHour.split(\n        ':'\n      )[0];\n      const closingMinute = requestedDaySchedule.closingTime.minute;\n      result = new Date(date.valueOf());\n      result.setHours(closingHour);\n      result.setMinutes(closingMinute);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): Date {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result: Date = null;\n\n    if (requestedDaySchedule.closed === false) {\n      const openingHour = requestedDaySchedule.openingTime.formattedHour.split(\n        ':'\n      )[0];\n      const openingMinutes = requestedDaySchedule.openingTime.minute;\n      result = new Date(date.valueOf());\n      result.setHours(openingHour);\n      result.setMinutes(openingMinutes);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns information about store open status\n   * @param location store location\n   * @param date date to compare\n   */\n  isStoreOpen(location: PointOfService, date: Date): boolean {\n    const requestedDaySchedule = this.getSchedule(location, date);\n    let result = false;\n\n    if (requestedDaySchedule.closed === false) {\n      const openingDate = this.getStoreOpeningTime(location, date);\n      const closingDate = this.getStoreClosingTime(location, date);\n\n      result = date > openingDate && date < closingDate;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      weekDayOpeningListItem => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map(key => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function() {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function() {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function() {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 12,\n    selectedMarkerScale: 16,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<StoresState>\n> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap(payload =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map(data => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                store =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap(payload =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map(data => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError(error =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map(data => new StoreFinderActions.ViewAllStoresSuccess(data)),\n        catchError(error =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [\n    ConfigModule.withConfig(defaultStoreFinderConfig),\n    StoreFinderStoreModule,\n  ],\n  providers: [\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useExisting: Config },\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserOrderAdapter } from './user-order.adapter';\nimport { Order, OrderHistoryList } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.billingCountries\n);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(\n  getBillingCountriesEntites,\n  entites => Object.keys(entites).map(isocode => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.countries\n);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(\n  getDeliveryCountriesEntites,\n  entites => Object.keys(entites).map(isocode => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(\n    getDeliveryCountriesEntites,\n    entities => (Object.keys(entities).length !== 0 ? entities[isocode] : null)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { OrderDetailsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  OrderDetailsState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.order\n);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(\n  getOrderState,\n  (state: OrderDetailsState) => state.order\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.payments\n);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.regions\n);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateLoaderSelectors.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateLoaderSelectors.loaderSuccessSelector(state),\n    loading: StateLoaderSelectors.loaderLoadingSelector(state),\n    regions: StateLoaderSelectors.loaderValueSelector(state).entities,\n    country: StateLoaderSelectors.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.resetPassword\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.titles\n);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(\n  getTitlesState,\n  (state: TitlesState) => state.entities\n);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(\n  getTitlesEntites,\n  entites => Object.keys(entites).map(code => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(\n    getTitlesEntites,\n    entities => (Object.keys(entities).length !== 0 ? entities[code] : null)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.addresses\n);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consents\n);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.account\n);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.orders\n);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrdersState,\n  (state: LoaderState<OrderHistoryList>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(\n  getOrdersState,\n  (state: LoaderState<OrderHistoryList>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { USERID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable()\nexport class UserService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap(details => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.store.dispatch(new UserActions.LoadUserDetails(USERID_CURRENT));\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.store.dispatch(new UserActions.RemoveUser(USERID_CURRENT));\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.store.dispatch(\n      new UserActions.UpdateUserDetails({\n        username: USERID_CURRENT,\n        userDetails,\n      })\n    );\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.store.dispatch(\n      new UserActions.UpdateEmailAction({\n        uid: USERID_CURRENT,\n        password,\n        newUid,\n      })\n    );\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.store.dispatch(\n      new UserActions.UpdatePassword({\n        userId: USERID_CURRENT,\n        oldPassword,\n        newPassword,\n      })\n    );\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { USERID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.store.dispatch(new UserActions.LoadUserAddresses(USERID_CURRENT));\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.store.dispatch(\n      new UserActions.AddUserAddress({\n        userId: USERID_CURRENT,\n        address: address,\n      })\n    );\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.store.dispatch(\n      new UserActions.UpdateUserAddress({\n        userId: USERID_CURRENT,\n        addressId: addressId,\n        address: { defaultAddress: true },\n      })\n    );\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.store.dispatch(\n      new UserActions.UpdateUserAddress({\n        userId: USERID_CURRENT,\n        addressId: addressId,\n        address: address,\n      })\n    );\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.store.dispatch(\n      new UserActions.DeleteUserAddress({\n        userId: USERID_CURRENT,\n        addressId: addressId,\n      })\n    );\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { USERID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.store.dispatch(new UserActions.LoadUserConsents(USERID_CURRENT));\n  }\n\n  /**\n   * Returns all consents\n   */\n  getConsents(): Observable<ConsentTemplate[]> {\n    return this.store.pipe(select(UsersSelectors.getConsentsValue));\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.store.dispatch(\n      new UserActions.GiveUserConsent({\n        userId: USERID_CURRENT,\n        consentTemplateId,\n        consentTemplateVersion,\n      })\n    );\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.store.dispatch(\n      new UserActions.WithdrawUserConsent({\n        userId: USERID_CURRENT,\n        consentCode,\n      })\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { USERID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.store.dispatch(new UserActions.LoadUserPaymentMethods(USERID_CURRENT));\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.store.dispatch(\n      new UserActions.SetDefaultUserPaymentMethod({\n        userId: USERID_CURRENT,\n        paymentMethodId,\n      })\n    );\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.store.dispatch(\n      new UserActions.DeleteUserPaymentMethod({\n        userId: USERID_CURRENT,\n        paymentMethodId,\n      })\n    );\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Order, OrderHistoryList } from '../../model/order.model';\nimport { USERID_CURRENT } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(protected store: Store<StateWithUser | StateWithProcess<void>>) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.store.dispatch(\n      new UserActions.LoadOrderDetails({\n        userId: USERID_CURRENT,\n        orderCode: orderCode,\n      })\n    );\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap(orderListState => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map(orderListState => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.store.dispatch(\n      new UserActions.LoadUserOrders({\n        userId: USERID_CURRENT,\n        pageSize: pageSize,\n        currentPage: currentPage,\n        sort: sort,\n      })\n    );\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\nimport { OrderDetailsState } from '../user-state';\n\nexport const initialState: OrderDetailsState = {\n  order: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): OrderDetailsState {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n\n      return {\n        ...state,\n        order,\n      };\n    }\n    case UserActions.CLEAR_ORDER_DETAILS: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map(consentTemplate =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: fromOrderDetailsReducer.reducer,\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<UserState>\n> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function(state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          countries => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError(error =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          countries => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError(error =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap(userEmailAddress => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError(error =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap(data => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap(payload => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap(data => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError(error =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          regions =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError(error =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError(error =>\n          of(new UserActions.ResetPasswordFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Title } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map(titles => {\n          const sortedTitles = this.sortTitles(titles);\n          return new UserActions.LoadTitlesSuccess(sortedTitles);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  private sortTitles(titles: Title[]) {\n    const drTitle = { code: 'dr', name: 'Dr.' };\n    const revTitle = { code: 'rev', name: 'Rev.' };\n\n    const filteredTitles = titles.filter(\n      t => t.code !== 'dr' && t.code !== 'rev'\n    );\n    const sortedTitles = [...filteredTitles, drTitle, revTitle];\n    return sortedTitles;\n  }\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap(payload =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError(error =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap(payload =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(_ => new UserActions.UpdatePasswordSuccess()),\n          catchError(error =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { USERID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError(error =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map(data => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(USERID_CURRENT);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError(error =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap(payload => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map(data => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError(error =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    switchMap(userId =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map(consents => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError(error =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.GIVE_USER_CONSENT),\n    map((action: UserActions.GiveUserConsent) => action.payload),\n    switchMap(({ userId, consentTemplateId, consentTemplateVersion }) =>\n      this.userConsentConnector\n        .giveConsent(userId, consentTemplateId, consentTemplateVersion)\n        .pipe(\n          map(consent => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError(error =>\n            of(\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    switchMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError(error =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap(userId => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError(error =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap(payload =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(_ => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)),\n        catchError(error =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport { USER_ORDERS } from '../user-state';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap(payload => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError(error =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_USER_ORDERS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(USER_ORDERS);\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        switchMap(_result => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: user.password,\n          }),\n          new UserActions.RegisterUserSuccess(),\n        ]),\n        catchError(error =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(_result => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError(error =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './delivery-countries.effect';\nexport * from './order-details.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './clear-miscs-data.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserService } from './facade/user.service';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n      providers: [UserService],\n    };\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: string;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: string;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: string;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","export const testestsd = 'sare';\n"]}