{"version":3,"file":"auth-storage.service.d.ts","sources":["auth-storage.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OAuthStorage } from 'angular-oauth2-oidc';\nimport { Observable } from 'rxjs';\nimport { AuthToken } from '../models/auth-token.model';\n/**\n * Storage service for AuthToken. Used as a storage for angular-oauth2-oidc library.\n */\nexport declare class AuthStorageService extends OAuthStorage {\n    /**\n     * Extracted keys that are not `JSON.stringify` from reading the angular-oauth2-oidc source code\n     */\n    protected static readonly nonStringifiedOAuthLibKeys: string[];\n    protected _token$: Observable<AuthToken>;\n    protected decode(key: string, value: any): any;\n    protected encode(key: string, value: any): any;\n    /**\n     * Returns complete token (all fields).\n     *\n     * @return observable emitting AuthToken\n     */\n    getToken(): Observable<AuthToken>;\n    /**\n     * Set current value of token.\n     *\n     * @param token\n     */\n    setToken(token: AuthToken): void;\n    /**\n     * Get parameter from the token (eg. access_token)\n     *\n     * @param key\n     */\n    getItem(key: string): any;\n    /**\n     * Removes parameter from the token (eg. access_token)\n     *\n     * @param key\n     */\n    removeItem(key: string): void;\n    /**\n     * Sets parameter of the token (eg. access_token)\n     *\n     * @param key\n     */\n    setItem(key: string, data: any): void;\n}\n"]}