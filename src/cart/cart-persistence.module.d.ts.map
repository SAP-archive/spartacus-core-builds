{"version":3,"file":"cart-persistence.module.d.ts","sources":["cart-persistence.module.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ModuleWithProviders } from '@angular/core';\nimport { MetaReducer } from '@ngrx/store';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nexport declare function cartStatePersistenceFactory(cartStatePersistenceService: MultiCartStatePersistenceService, configInit: ConfigInitializerService): () => Promise<void>;\n/**\n * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`\n * will use `current` cart instead of the one saved in browser. This meta reducer\n * sets the value on store initialization to null cart which holds active cart loading\n * until the data from storage is restored.\n */\nexport declare function uninitializeActiveCartMetaReducerFactory(): MetaReducer<any>;\n/**\n * Complimentary module for cart to store cart id in browser storage.\n * This makes it possible to work on the same anonymous cart even after page refresh.\n */\nexport declare class CartPersistenceModule {\n    static forRoot(): ModuleWithProviders<CartPersistenceModule>;\n}\n"]}