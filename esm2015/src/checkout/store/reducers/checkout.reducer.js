import { CheckoutActions } from './../actions/index';
export const initialState = {
    poNumber: { po: undefined, costCenter: undefined },
    address: {},
    deliveryMode: {
        supported: {},
        selected: '',
    },
    paymentDetails: {},
    orderDetails: {},
};
export function reducer(state = initialState, action) {
    switch (action.type) {
        case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {
            const cart = action.payload;
            return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { po: cart.purchaseOrderNumber }) });
        }
        case CheckoutActions.SET_COST_CENTER_SUCCESS: {
            return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { costCenter: action.payload }) });
        }
        case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:
        case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {
            const address = action.payload;
            return Object.assign(Object.assign({}, state), { address });
        }
        case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {
            const supportedModes = action.payload;
            if (!supportedModes) {
                return state;
            }
            const supported = supportedModes.reduce((modes, mode) => {
                return Object.assign(Object.assign({}, modes), { [mode.code]: mode });
            }, Object.assign({}, state.deliveryMode.supported));
            return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported }) });
        }
        case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {
            const selected = action.payload;
            return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected }) });
        }
        case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:
        case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {
            return Object.assign(Object.assign({}, state), { paymentDetails: action.payload });
        }
        case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {
            const paymentDetails = action.payload;
            if (paymentDetails['hasError']) {
                return Object.assign(Object.assign({}, state), { paymentDetails });
            }
            return state;
        }
        case CheckoutActions.PLACE_ORDER_SUCCESS:
        case CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: {
            const orderDetails = action.payload;
            return Object.assign(Object.assign({}, state), { orderDetails });
        }
        case CheckoutActions.CLEAR_CHECKOUT_DATA: {
            return initialState;
        }
        case CheckoutActions.CLEAR_CHECKOUT_STEP: {
            const stepNumber = action.payload;
            switch (stepNumber) {
                case 1: {
                    return Object.assign(Object.assign({}, state), { address: {} });
                }
                case 2: {
                    return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {}, selected: '' }) });
                }
                case 3: {
                    return Object.assign(Object.assign({}, state), { paymentDetails: {} });
                }
            }
            return state;
        }
        case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:
        case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {
            return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {} }) });
        }
        case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {
            return Object.assign(Object.assign({}, state), { address: action.payload.deliveryAddress, deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: action.payload.deliveryMode && action.payload.deliveryMode.code }), paymentDetails: action.payload.paymentInfo });
        }
        case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {
            return Object.assign(Object.assign({}, state), { address: {} });
        }
        case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {
            return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: '' }) });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,