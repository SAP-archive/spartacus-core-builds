import { Observable } from 'rxjs';
import { Page, PageMeta } from '../model/page.model';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import * as ɵngcc0 from '@angular/core';
export declare class PageMetaService {
    protected resolvers: PageMetaResolver[];
    protected cms: CmsService;
    constructor(resolvers: PageMetaResolver[], cms: CmsService);
    /**
     * The list of resolver interfaces will be evaluated for the pageResolvers.
     *
     * TOOD: optimize browser vs SSR resolvers; image, robots and description
     *       aren't needed during browsing.
     * TODO: we can make the list of resolver types configurable
     */
    protected resolverMethods: {
        [key: string]: string;
    };
    getMeta(): Observable<PageMeta>;
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta>;
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    protected getMetaResolver(page: Page): PageMetaResolver;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PageMetaService, [{ optional: true; }, null]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicGFnZS1tZXRhLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQYWdlLCBQYWdlTWV0YSB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xuaW1wb3J0IHsgUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4uL3BhZ2UvcGFnZS1tZXRhLnJlc29sdmVyJztcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICcuL2Ntcy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhZ2VNZXRhU2VydmljZSB7XG4gICAgcHJvdGVjdGVkIHJlc29sdmVyczogUGFnZU1ldGFSZXNvbHZlcltdO1xuICAgIHByb3RlY3RlZCBjbXM6IENtc1NlcnZpY2U7XG4gICAgY29uc3RydWN0b3IocmVzb2x2ZXJzOiBQYWdlTWV0YVJlc29sdmVyW10sIGNtczogQ21zU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogVGhlIGxpc3Qgb2YgcmVzb2x2ZXIgaW50ZXJmYWNlcyB3aWxsIGJlIGV2YWx1YXRlZCBmb3IgdGhlIHBhZ2VSZXNvbHZlcnMuXG4gICAgICpcbiAgICAgKiBUT09EOiBvcHRpbWl6ZSBicm93c2VyIHZzIFNTUiByZXNvbHZlcnM7IGltYWdlLCByb2JvdHMgYW5kIGRlc2NyaXB0aW9uXG4gICAgICogICAgICAgYXJlbid0IG5lZWRlZCBkdXJpbmcgYnJvd3NpbmcuXG4gICAgICogVE9ETzogd2UgY2FuIG1ha2UgdGhlIGxpc3Qgb2YgcmVzb2x2ZXIgdHlwZXMgY29uZmlndXJhYmxlXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlc29sdmVyTWV0aG9kczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICBnZXRNZXRhKCk6IE9ic2VydmFibGU8UGFnZU1ldGE+O1xuICAgIC8qKlxuICAgICAqIElmIGEgYFBhZ2VSZXNvbHZlcmAgaGFzIGltcGxlbWVudGVkIGEgcmVzb2x2ZXIgaW50ZXJmYWNlLCB0aGUgcmVzb2x2ZWQgZGF0YVxuICAgICAqIGlzIG1lcmdlZCBpbnRvIHRoZSBgUGFnZU1ldGFgIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gbWV0YVJlc29sdmVyXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlc29sdmUobWV0YVJlc29sdmVyOiBQYWdlTWV0YVJlc29sdmVyKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT47XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSByZXNvbHZlciB3aXRoIHRoZSBiZXN0IG1hdGNoLCBiYXNlZCBvbiBhIHNjb3JlXG4gICAgICogZ2VuZXJhdGVkIGJ5IHRoZSByZXNvbHZlci5cbiAgICAgKlxuICAgICAqIFJlc29sdmVycyBtYXRjaCBieSBkZWZhdWx0IG9uIGBQYWdlVHlwZWAgYW5kIGBwYWdlLnRlbXBsYXRlYC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0TWV0YVJlc29sdmVyKHBhZ2U6IFBhZ2UpOiBQYWdlTWV0YVJlc29sdmVyO1xufVxuIl19