/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillingCountriesEffect } from './billing-countries.effect';
import { DeliveryCountriesEffects } from './delivery-countries.effect';
import { ForgotPasswordEffects } from './forgot-password.effect';
import { OrderDetailsEffect } from './order-details.effect';
import { UserPaymentMethodsEffects } from './payment-methods.effect';
import { RegionsEffects } from './regions.effect';
import { ResetPasswordEffects } from './reset-password.effect';
import { TitlesEffects } from './titles.effect';
import { UpdatePasswordEffects } from './update-password.effect';
import { UserAddressesEffects } from './user-addresses.effect';
import { UserDetailsEffects } from './user-details.effect';
import { UserOrdersEffect } from './user-orders.effect';
import { UserRegisterEffects } from './user-register.effect';
/** @type {?} */
export const effects = [
    DeliveryCountriesEffects,
    RegionsEffects,
    TitlesEffects,
    UserDetailsEffects,
    UserAddressesEffects,
    UserPaymentMethodsEffects,
    UserRegisterEffects,
    UserOrdersEffect,
    OrderDetailsEffect,
    BillingCountriesEffect,
    ResetPasswordEffects,
    ForgotPasswordEffects,
    UpdatePasswordEffects,
];
export { BillingCountriesEffect } from './billing-countries.effect';
export { DeliveryCountriesEffects } from './delivery-countries.effect';
export { OrderDetailsEffect } from './order-details.effect';
export { UserPaymentMethodsEffects } from './payment-methods.effect';
export { RegionsEffects } from './regions.effect';
export { ResetPasswordEffects } from './reset-password.effect';
export { TitlesEffects } from './titles.effect';
export { UserAddressesEffects } from './user-addresses.effect';
export { UserDetailsEffects } from './user-details.effect';
export { UserOrdersEffect } from './user-orders.effect';
export { UserRegisterEffects } from './user-register.effect';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9lZmZlY3RzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUU3RCxNQUFNLE9BQU8sT0FBTyxHQUFVO0lBQzVCLHdCQUF3QjtJQUN4QixjQUFjO0lBQ2QsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixvQkFBb0I7SUFDcEIscUJBQXFCO0lBQ3JCLHFCQUFxQjtDQUN0QjtBQUVELHVDQUFjLDRCQUE0QixDQUFDO0FBQzNDLHlDQUFjLDZCQUE2QixDQUFDO0FBQzVDLG1DQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLDBDQUFjLDBCQUEwQixDQUFDO0FBQ3pDLCtCQUFjLGtCQUFrQixDQUFDO0FBQ2pDLHFDQUFjLHlCQUF5QixDQUFDO0FBQ3hDLDhCQUFjLGlCQUFpQixDQUFDO0FBQ2hDLHFDQUFjLHlCQUF5QixDQUFDO0FBQ3hDLG1DQUFjLHVCQUF1QixDQUFDO0FBQ3RDLGlDQUFjLHNCQUFzQixDQUFDO0FBQ3JDLG9DQUFjLHdCQUF3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlsbGluZ0NvdW50cmllc0VmZmVjdCB9IGZyb20gJy4vYmlsbGluZy1jb3VudHJpZXMuZWZmZWN0JztcbmltcG9ydCB7IERlbGl2ZXJ5Q291bnRyaWVzRWZmZWN0cyB9IGZyb20gJy4vZGVsaXZlcnktY291bnRyaWVzLmVmZmVjdCc7XG5pbXBvcnQgeyBGb3Jnb3RQYXNzd29yZEVmZmVjdHMgfSBmcm9tICcuL2ZvcmdvdC1wYXNzd29yZC5lZmZlY3QnO1xuaW1wb3J0IHsgT3JkZXJEZXRhaWxzRWZmZWN0IH0gZnJvbSAnLi9vcmRlci1kZXRhaWxzLmVmZmVjdCc7XG5pbXBvcnQgeyBVc2VyUGF5bWVudE1ldGhvZHNFZmZlY3RzIH0gZnJvbSAnLi9wYXltZW50LW1ldGhvZHMuZWZmZWN0JztcbmltcG9ydCB7IFJlZ2lvbnNFZmZlY3RzIH0gZnJvbSAnLi9yZWdpb25zLmVmZmVjdCc7XG5pbXBvcnQgeyBSZXNldFBhc3N3b3JkRWZmZWN0cyB9IGZyb20gJy4vcmVzZXQtcGFzc3dvcmQuZWZmZWN0JztcbmltcG9ydCB7IFRpdGxlc0VmZmVjdHMgfSBmcm9tICcuL3RpdGxlcy5lZmZlY3QnO1xuaW1wb3J0IHsgVXBkYXRlUGFzc3dvcmRFZmZlY3RzIH0gZnJvbSAnLi91cGRhdGUtcGFzc3dvcmQuZWZmZWN0JztcbmltcG9ydCB7IFVzZXJBZGRyZXNzZXNFZmZlY3RzIH0gZnJvbSAnLi91c2VyLWFkZHJlc3Nlcy5lZmZlY3QnO1xuaW1wb3J0IHsgVXNlckRldGFpbHNFZmZlY3RzIH0gZnJvbSAnLi91c2VyLWRldGFpbHMuZWZmZWN0JztcbmltcG9ydCB7IFVzZXJPcmRlcnNFZmZlY3QgfSBmcm9tICcuL3VzZXItb3JkZXJzLmVmZmVjdCc7XG5pbXBvcnQgeyBVc2VyUmVnaXN0ZXJFZmZlY3RzIH0gZnJvbSAnLi91c2VyLXJlZ2lzdGVyLmVmZmVjdCc7XG5cbmV4cG9ydCBjb25zdCBlZmZlY3RzOiBhbnlbXSA9IFtcbiAgRGVsaXZlcnlDb3VudHJpZXNFZmZlY3RzLFxuICBSZWdpb25zRWZmZWN0cyxcbiAgVGl0bGVzRWZmZWN0cyxcbiAgVXNlckRldGFpbHNFZmZlY3RzLFxuICBVc2VyQWRkcmVzc2VzRWZmZWN0cyxcbiAgVXNlclBheW1lbnRNZXRob2RzRWZmZWN0cyxcbiAgVXNlclJlZ2lzdGVyRWZmZWN0cyxcbiAgVXNlck9yZGVyc0VmZmVjdCxcbiAgT3JkZXJEZXRhaWxzRWZmZWN0LFxuICBCaWxsaW5nQ291bnRyaWVzRWZmZWN0LFxuICBSZXNldFBhc3N3b3JkRWZmZWN0cyxcbiAgRm9yZ290UGFzc3dvcmRFZmZlY3RzLFxuICBVcGRhdGVQYXNzd29yZEVmZmVjdHMsXG5dO1xuXG5leHBvcnQgKiBmcm9tICcuL2JpbGxpbmctY291bnRyaWVzLmVmZmVjdCc7XG5leHBvcnQgKiBmcm9tICcuL2RlbGl2ZXJ5LWNvdW50cmllcy5lZmZlY3QnO1xuZXhwb3J0ICogZnJvbSAnLi9vcmRlci1kZXRhaWxzLmVmZmVjdCc7XG5leHBvcnQgKiBmcm9tICcuL3BheW1lbnQtbWV0aG9kcy5lZmZlY3QnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpb25zLmVmZmVjdCc7XG5leHBvcnQgKiBmcm9tICcuL3Jlc2V0LXBhc3N3b3JkLmVmZmVjdCc7XG5leHBvcnQgKiBmcm9tICcuL3RpdGxlcy5lZmZlY3QnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VyLWFkZHJlc3Nlcy5lZmZlY3QnO1xuZXhwb3J0ICogZnJvbSAnLi91c2VyLWRldGFpbHMuZWZmZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vdXNlci1vcmRlcnMuZWZmZWN0JztcbmV4cG9ydCAqIGZyb20gJy4vdXNlci1yZWdpc3Rlci5lZmZlY3QnO1xuIl19