{"version":3,"file":"user-replenishment-order.service.d.ts","sources":["user-replenishment-order.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ReplenishmentOrder, ReplenishmentOrderList } from '../../model/replenishment-order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserReplenishmentOrderService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected authService: AuthService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, authService: AuthService);\n    /**\n     * Returns replenishment order details for a given 'current' user\n     *\n     * @param replenishmentOrderCode a replenishment order code\n     */\n    loadReplenishmentOrderDetails(replenishmentOrderCode: string): void;\n    /**\n     * Returns a replenishment order details\n     */\n    getReplenishmentOrderDetails(): Observable<ReplenishmentOrder>;\n    /**\n     * Returns a replenishment order details loading flag\n     */\n    getReplenishmentOrderDetailsLoading(): Observable<boolean>;\n    /**\n     * Returns a replenishment order details success flag\n     */\n    getReplenishmentOrderDetailsSuccess(): Observable<boolean>;\n    /**\n     * Returns a replenishment order details error flag\n     */\n    getReplenishmentOrderDetailsError(): Observable<boolean>;\n    /**\n     * Clears the replenishment orders details state\n     */\n    clearReplenishmentOrderDetails(): void;\n    /**\n     * Cancels a specific replenishment order for a given 'current' user\n     *\n     * @param replenishmentOrderCode a replenishment order code\n     */\n    cancelReplenishmentOrder(replenishmentOrderCode: string): void;\n    /**\n     * Returns the cancel replenishment order loading flag\n     */\n    getCancelReplenishmentOrderLoading(): Observable<boolean>;\n    /**\n     * Returns the cancel replenishment order success flag\n     */\n    getCancelReplenishmentOrderSuccess(): Observable<boolean>;\n    /**\n     * Returns the cancel replenishment order error flag\n     */\n    getCancelReplenishmentOrderError(): Observable<boolean>;\n    /**\n     * Clears the cancel replenishment order processing state\n     */\n    clearCancelReplenishmentOrderProcessState(): void;\n    /**\n     * Returns replenishment order history list\n     */\n    getReplenishmentOrderHistoryList(pageSize: number): Observable<ReplenishmentOrderList>;\n    /**\n     * Returns a loading flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListLoading(): Observable<boolean>;\n    /**\n     * Returns a error flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListError(): Observable<boolean>;\n    /**\n     * Returns a success flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListSuccess(): Observable<boolean>;\n    /**\n     * Retrieves a replenishment order list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadReplenishmentOrderList(pageSize?: number, currentPage?: number, sort?: string): void;\n    /**\n     * Cleaning replenishment order list\n     */\n    clearReplenishmentOrderList(): void;\n}\n"]}