import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';
import { UserActions } from '../actions/index';
var NotificationPreferenceEffects = /** @class */ (function () {
    function NotificationPreferenceEffects(actions$, connector) {
        var _this = this;
        this.actions$ = actions$;
        this.connector = connector;
        this.loadPreferences$ = this.actions$.pipe(ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.connector.loadAll(payload).pipe(map(function (preferences) {
                return new UserActions.LoadNotificationPreferencesSuccess(preferences);
            }), catchError(function (error) {
                return of(new UserActions.LoadNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
        this.updatePreferences$ = this.actions$.pipe(ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES), map(function (action) { return action.payload; }), mergeMap(function (payload) {
            return _this.connector.update(payload.userId, payload.preferences).pipe(map(function () {
                return new UserActions.UpdateNotificationPreferencesSuccess(payload.preferences);
            }), catchError(function (error) {
                return of(new UserActions.UpdateNotificationPreferencesFail(makeErrorSerializable(error)));
            }));
        }));
    }
    NotificationPreferenceEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: UserNotificationPreferenceConnector }
    ]; };
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "loadPreferences$", void 0);
    __decorate([
        Effect()
    ], NotificationPreferenceEffects.prototype, "updatePreferences$", void 0);
    NotificationPreferenceEffects = __decorate([
        Injectable()
    ], NotificationPreferenceEffects);
    return NotificationPreferenceEffects;
}());
export { NotificationPreferenceEffects };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLGlGQUFpRixDQUFDO0FBQ3RJLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQztJQWlERSx1Q0FDVSxRQUFpQixFQUNqQixTQUE4QztRQUZ4RCxpQkFHSTtRQUZNLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBcUM7UUFqRHhELHFCQUFnQixHQUVaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLEVBQ2pELEdBQUcsQ0FBQyxVQUFDLE1BQStDLElBQUssT0FBQSxNQUFNLENBQUMsT0FBTyxFQUFkLENBQWMsQ0FBQyxFQUN4RSxTQUFTLENBQUMsVUFBQyxPQUFPO1lBQ2hCLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNsQyxHQUFHLENBQ0QsVUFBQyxXQUFXO2dCQUNWLE9BQUEsSUFBSSxXQUFXLENBQUMsa0NBQWtDLENBQUMsV0FBVyxDQUFDO1lBQS9ELENBQStELENBQ2xFLEVBQ0QsVUFBVSxDQUFDLFVBQUMsS0FBSztnQkFDZixPQUFBLEVBQUUsQ0FDQSxJQUFJLFdBQVcsQ0FBQywrQkFBK0IsQ0FDN0MscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQzdCLENBQ0Y7WUFKRCxDQUlDLENBQ0YsQ0FDRjtRQVpELENBWUMsQ0FDRixDQUNGLENBQUM7UUFHRix1QkFBa0IsR0FFZCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLFdBQVcsQ0FBQywrQkFBK0IsQ0FBQyxFQUNuRCxHQUFHLENBQUMsVUFBQyxNQUFpRCxJQUFLLE9BQUEsTUFBTSxDQUFDLE9BQU8sRUFBZCxDQUFjLENBQUMsRUFDMUUsUUFBUSxDQUFDLFVBQUMsT0FBTztZQUNmLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM3RCxHQUFHLENBQ0Q7Z0JBQ0UsT0FBQSxJQUFJLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FDbEQsT0FBTyxDQUFDLFdBQVcsQ0FDcEI7WUFGRCxDQUVDLENBQ0osRUFDRCxVQUFVLENBQUMsVUFBQyxLQUFLO2dCQUNmLE9BQUEsRUFBRSxDQUNBLElBQUksV0FBVyxDQUFDLGlDQUFpQyxDQUMvQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDN0IsQ0FDRjtZQUpELENBSUMsQ0FDRixDQUNGO1FBZEQsQ0FjQyxDQUNGLENBQ0YsQ0FBQztJQUtDLENBQUM7O2dCQUZnQixPQUFPO2dCQUNOLG1DQUFtQzs7SUFqRHhEO1FBREMsTUFBTSxFQUFFOzJFQXFCUDtJQUdGO1FBREMsTUFBTSxFQUFFOzZFQXVCUDtJQS9DUyw2QkFBNkI7UUFEekMsVUFBVSxFQUFFO09BQ0EsNkJBQTZCLENBcUR6QztJQUFELG9DQUFDO0NBQUEsQUFyREQsSUFxREM7U0FyRFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBtYWtlRXJyb3JTZXJpYWxpemFibGUgfSBmcm9tICcuLi8uLi8uLi91dGlsL3NlcmlhbGl6YXRpb24tdXRpbHMnO1xuaW1wb3J0IHsgVXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2VDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlL3VzZXItbm90aWZpY2F0aW9uLXByZWZlcmVuY2UuY29ubmVjdG9yJztcbmltcG9ydCB7IFVzZXJBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25QcmVmZXJlbmNlRWZmZWN0cyB7XG4gIEBFZmZlY3QoKVxuICBsb2FkUHJlZmVyZW5jZXMkOiBPYnNlcnZhYmxlPFxuICAgIFVzZXJBY3Rpb25zLk5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb25cbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoVXNlckFjdGlvbnMuTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpLFxuICAgIG1hcCgoYWN0aW9uOiBVc2VyQWN0aW9ucy5Mb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+XG4gICAgICB0aGlzLmNvbm5lY3Rvci5sb2FkQWxsKHBheWxvYWQpLnBpcGUoXG4gICAgICAgIG1hcChcbiAgICAgICAgICAocHJlZmVyZW5jZXMpID0+XG4gICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyhwcmVmZXJlbmNlcylcbiAgICAgICAgKSxcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICAgICAgb2YoXG4gICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbChcbiAgICAgICAgICAgICAgbWFrZUVycm9yU2VyaWFsaXphYmxlKGVycm9yKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiAgKTtcblxuICBARWZmZWN0KClcbiAgdXBkYXRlUHJlZmVyZW5jZXMkOiBPYnNlcnZhYmxlPFxuICAgIFVzZXJBY3Rpb25zLk5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb25cbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoVXNlckFjdGlvbnMuVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyksXG4gICAgbWFwKChhY3Rpb246IFVzZXJBY3Rpb25zLlVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgbWVyZ2VNYXAoKHBheWxvYWQpID0+XG4gICAgICB0aGlzLmNvbm5lY3Rvci51cGRhdGUocGF5bG9hZC51c2VySWQsIHBheWxvYWQucHJlZmVyZW5jZXMpLnBpcGUoXG4gICAgICAgIG1hcChcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLlVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyhcbiAgICAgICAgICAgICAgcGF5bG9hZC5wcmVmZXJlbmNlc1xuICAgICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICBvZihcbiAgICAgICAgICAgIG5ldyBVc2VyQWN0aW9ucy5VcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwoXG4gICAgICAgICAgICAgIG1ha2VFcnJvclNlcmlhbGl6YWJsZShlcnJvcilcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIGNvbm5lY3RvcjogVXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2VDb25uZWN0b3JcbiAgKSB7fVxufVxuIl19