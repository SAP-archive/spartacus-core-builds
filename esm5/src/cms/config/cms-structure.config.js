import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { Config } from '../../config/config.module';
import { CmsConfig } from './cms-config';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config.module";
/**
 * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
 * instead of using a backend CMS system. The configuration can be used to build
 * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
 * only require the necessary properties. Adapter logic is applied to serialize
 * the `CmsStructureConfig` into the required UI model.
 */
var CmsStructureConfig = /** @class */ (function (_super) {
    __extends(CmsStructureConfig, _super);
    function CmsStructureConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CmsStructureConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function CmsStructureConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: CmsStructureConfig, providedIn: "root" });
    CmsStructureConfig = __decorate([
        Injectable({
            providedIn: 'root',
            useExisting: Config,
        })
    ], CmsStructureConfig);
    return CmsStructureConfig;
}(CmsConfig));
export { CmsStructureConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXN0cnVjdHVyZS5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2NvbmZpZy9jbXMtc3RydWN0dXJlLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBMER6Qzs7Ozs7O0dBTUc7QUFLSDtJQUFpRCxzQ0FBUztJQUExRDs7S0FNQzs7SUFOcUIsa0JBQWtCO1FBSnZDLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1lBQ2xCLFdBQVcsRUFBRSxNQUFNO1NBQ3BCLENBQUM7T0FDb0Isa0JBQWtCLENBTXZDOzZCQTlFRDtDQThFQyxBQU5ELENBQWlELFNBQVMsR0FNekQ7U0FOcUIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy5tb2R1bGUnO1xuaW1wb3J0IHsgQ29udGVudFNsb3RDb21wb25lbnREYXRhIH0gZnJvbSAnLi4vbW9kZWwvY29udGVudC1zbG90LWNvbXBvbmVudC1kYXRhLm1vZGVsJztcbmltcG9ydCB7IENtc0NvbmZpZyB9IGZyb20gJy4vY21zLWNvbmZpZyc7XG5cbi8qKlxuICogVGhlIGBDbXNQYWdlQ29uZmlnYCBpcyB1c2VkIHRvIGJ1aWxkIHBhZ2VzIGJ5IGNvbmZpZ3VyYXRpb24uXG4gKiBUaGUgaW50ZXJmYWNlcyBhcmUgZGVzaWduZWQgdG8gaGF2ZSBhIGNsZWFuIGNvbmZpZ3VyYXRpb24gZm9yXG4gKiBzdGF0aWMgQ01TIHN0cnVjdHVyZS4gT3JkaW5hcnkgYXR0cmlidXRlcyB0aGF0IGFyZSBub3RcbiAqIHJlcXVpcmVkIGZvciBjb25maWd1cmFibGUgcGFnZXMgaGF2ZSBiZWVuIGxlZnQgb3V0IGFuZFxuICogd2lsbCBub3QgYmUgc2VyaWFsaXplZCBpbiB0aGUgYWRhcHRlciBsb2dpYy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbXNQYWdlQ29uZmlnIHtcbiAgLyoqXG4gICAqIFdoZW4gdGhlIGBpZ25vcmVCYWNrZW5kYCBpcyBzZXQgdG8gdHJ1ZSwgdGhlIENNUyBiYWNrZW5kXG4gICAqIHdpbGwgbm90IGJlIGNvbnN1bWVkLiBUaGlzIHNhdmVzIG5ldHdvcmsgbGF0ZW5jeSBhbmQgaXNcbiAgICogdXNlZnVsIGZvciBjb21tb2RpdHkgY29tbWVyY2UgcGFnZXMuXG4gICAqICovXG4gIGlnbm9yZUJhY2tlbmQ/OiBib29sZWFuO1xuXG4gIHBhZ2VJZD86IHN0cmluZztcblxuICB0eXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFnZSB0aXRsZSBpcyB0eXBpY2FsbHkgdXNlZCB0byBkaXNwbGF5IHRoZSBwYWdlIGhlYWRpbmdcbiAgICogYXMgd2VsbCBhcyBmb3IgdGhlIHBhZ2UgdGl0bGUgdGFnLiBUaGUgbGF0dGVyIGlzIHVzZWQgZm9yIGJyb3dzZXJcbiAgICogbmF2aWdhdGlvbiBhcyB3ZWxsIGFzIFNFTyBhbmQgc29jaWFsIHNoYXJlIHBsYXRmb3Jtcy5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiB0aGUgdGVtcGxhdGUgaXMgdXNlZCB0byBiaW5kIHRvIHRoZSBsYXlvdXRcbiAgICogY29uZmlndXJhdGlvbiBhbmQgY3NzIGxheW91dCBjbGFzc1xuICAgKi9cbiAgdGVtcGxhdGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdlIHNsb3RzIHJlcHJlc2VudCB2YXJpb3VzIHNlY3Rpb25zIG9uIHRoZSBwYWdlIHRoYXRcbiAgICogY2FuIGNvbnRhaW4gY29tcG9uZW50cy5cbiAgICovXG4gIHNsb3RzOiB7IFtrZXk6IHN0cmluZ106IENtc1BhZ2VTbG90Q29uZmlnIH07XG59XG5cbi8qKlxuICogVGhlIGBDbXNQYWdlU2xvdHNDb25maWdgIChwbHVyYWwpIGhvbGRzIGBDbXNQYWdlU2xvdENvbmZpZ2Agb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbXNQYWdlU2xvdHNDb25maWcge1xuICBba2V5OiBzdHJpbmddOiBDbXNQYWdlU2xvdENvbmZpZztcbn1cblxuLyoqXG4gKiBUaGUgYENtc1BhZ2VTbG90Q29uZmlnYCBpcyBhIHNpbXBsaWZpZWQgY29uZmlndXJhdGlvbiBtb2RlbFxuICogdGhhdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgc2xvdHMgaW4gc3RhdGljIGNvbmZpZ3VyYXRpb24sXG4gKiByYXRoZXIgdGhhbiBsb2FkaW5nIGZyb20gYSBiYWNrZW5kLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENtc1BhZ2VTbG90Q29uZmlnIHtcbiAgY29tcG9uZW50SWRzPzogc3RyaW5nW107XG4gIHByb3BlcnRpZXM/OiBhbnk7XG59XG5cbi8qKlxuICogVGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdgIGlzIHVzZWQgdG8gYnVpbGQgcGFnZXMgaW4gU3BhcnRhY3VzIGJ5IGNvbmZpZ3VyYXRpb25cbiAqIGluc3RlYWQgb2YgdXNpbmcgYSBiYWNrZW5kIENNUyBzeXN0ZW0uIFRoZSBjb25maWd1cmF0aW9uIGNhbiBiZSB1c2VkIHRvIGJ1aWxkXG4gKiBjb21wbGV0ZSBwYWdlcyBvciBwYXJ0cyBvZiBhIHBhZ2UuIFRoZSBgQ21zU3RydWN0dXJlQ29uZmlnYCBpcyBvcHRpbWl6ZWQgdG9cbiAqIG9ubHkgcmVxdWlyZSB0aGUgbmVjZXNzYXJ5IHByb3BlcnRpZXMuIEFkYXB0ZXIgbG9naWMgaXMgYXBwbGllZCB0byBzZXJpYWxpemVcbiAqIHRoZSBgQ21zU3RydWN0dXJlQ29uZmlnYCBpbnRvIHRoZSByZXF1aXJlZCBVSSBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUV4aXN0aW5nOiBDb25maWcsXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENtc1N0cnVjdHVyZUNvbmZpZyBleHRlbmRzIENtc0NvbmZpZyB7XG4gIGNtc1N0cnVjdHVyZToge1xuICAgIGNvbXBvbmVudHM/OiB7IFtrZXk6IHN0cmluZ106IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB8IGFueSB9O1xuICAgIHBhZ2VzPzogQ21zUGFnZUNvbmZpZ1tdO1xuICAgIHNsb3RzPzogQ21zUGFnZVNsb3RzQ29uZmlnO1xuICB9O1xufVxuIl19