import { __extends } from "tslib";
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { COMPONENT_ENTITY } from '../cms-state';
export var LOAD_CMS_COMPONENT = '[Cms] Load Component';
export var LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
export var LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
export var CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
var LoadCmsComponent = /** @class */ (function (_super) {
    __extends(LoadCmsComponent, _super);
    function LoadCmsComponent(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT;
        return _this;
    }
    return LoadCmsComponent;
}(StateEntityLoaderActions.EntityLoadAction));
export { LoadCmsComponent };
var LoadCmsComponentFail = /** @class */ (function (_super) {
    __extends(LoadCmsComponentFail, _super);
    function LoadCmsComponentFail(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid, payload.error) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT_FAIL;
        return _this;
    }
    return LoadCmsComponentFail;
}(StateEntityLoaderActions.EntityFailAction));
export { LoadCmsComponentFail };
var LoadCmsComponentSuccess = /** @class */ (function (_super) {
    __extends(LoadCmsComponentSuccess, _super);
    function LoadCmsComponentSuccess(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid || payload.component.uid || '') || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT_SUCCESS;
        return _this;
    }
    return LoadCmsComponentSuccess;
}(StateEntityLoaderActions.EntitySuccessAction));
export { LoadCmsComponentSuccess };
var CmsGetComponentFromPage = /** @class */ (function (_super) {
    __extends(CmsGetComponentFromPage, _super);
    function CmsGetComponentFromPage(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, [].concat(payload).map(function (cmp) { return cmp.component.uid; })) || this;
        _this.payload = payload;
        _this.type = CMS_GET_COMPONENT_FROM_PAGE;
        return _this;
    }
    return CmsGetComponentFromPage;
}(StateEntityLoaderActions.EntitySuccessAction));
export { CmsGetComponentFromPage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL2FjdGlvbnMvY29tcG9uZW50cy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN6RCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRywyQkFBMkIsQ0FBQztBQUNuRSxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FBRyw4QkFBOEIsQ0FBQztBQUN6RSxNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRywrQkFBK0IsQ0FBQztBQUUzRTtJQUFzQyxvQ0FBeUM7SUFFN0UsMEJBQ1MsT0FHTjtRQUpILFlBTUUsa0JBQU0sZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUNyQztRQU5RLGFBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxVQUFJLEdBQUcsa0JBQWtCLENBQUM7O0lBUW5DLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFWRCxDQUFzQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsR0FVOUU7O0FBRUQ7SUFBMEMsd0NBQXlDO0lBRWpGLDhCQUNTLE9BQThEO1FBRHZFLFlBR0Usa0JBQU0sZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQ3BEO1FBSFEsYUFBTyxHQUFQLE9BQU8sQ0FBdUQ7UUFGOUQsVUFBSSxHQUFHLHVCQUF1QixDQUFDOztJQUt4QyxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBUEQsQ0FBMEMsd0JBQXdCLENBQUMsZ0JBQWdCLEdBT2xGOztBQUVEO0lBRVUsMkNBQTRDO0lBRXBELGlDQUNTLE9BSU47UUFMSCxZQU9FLGtCQUFNLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLFNBQ3BFO1FBUFEsYUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFVBQUksR0FBRywwQkFBMEIsQ0FBQzs7SUFTM0MsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQWJELENBRVUsd0JBQXdCLENBQUMsbUJBQW1CLEdBV3JEOztBQUVEO0lBRVUsMkNBQTRDO0lBRXBELGlDQUNTLE9BRXlDO1FBSGxELFlBS0Usa0JBQ0UsZ0JBQWdCLEVBQ2hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQWpCLENBQWlCLENBQUMsQ0FDbkQsU0FDRjtRQVJRLGFBQU8sR0FBUCxPQUFPLENBRWtDO1FBSnpDLFVBQUksR0FBRywyQkFBMkIsQ0FBQzs7SUFVNUMsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQWRELENBRVUsd0JBQXdCLENBQUMsbUJBQW1CLEdBWXJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vcm91dGluZy9pbmRleCc7XG5pbXBvcnQgeyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDT01QT05FTlRfRU5USVRZIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfQ01TX0NPTVBPTkVOVCA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUwgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UX1NVQ0NFU1MgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFID0gJ1tDbXNdIEdldCBDb21wb25lbnQgZnJvbSBQYWdlJztcblxuZXhwb3J0IGNsYXNzIExvYWRDbXNDb21wb25lbnQgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1aWQ6IHN0cmluZztcbiAgICAgIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dDtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudEZhaWwgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfRkFJTDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHsgdWlkOiBzdHJpbmc7IGVycm9yOiBhbnk7IHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudFN1Y2Nlc3M8XG4gIFQgZXh0ZW5kcyBDbXNDb21wb25lbnRcbj4gZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIGNvbXBvbmVudDogVDtcbiAgICAgIHVpZD86IHN0cmluZztcbiAgICAgIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dDtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkIHx8IHBheWxvYWQuY29tcG9uZW50LnVpZCB8fCAnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENtc0dldENvbXBvbmVudEZyb21QYWdlPFxuICBUIGV4dGVuZHMgQ21zQ29tcG9uZW50XG4+IGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDpcbiAgICAgIHwgeyBjb21wb25lbnQ6IFQ7IHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCB9XG4gICAgICB8IHsgY29tcG9uZW50OiBUOyBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQgfVtdXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgQ09NUE9ORU5UX0VOVElUWSxcbiAgICAgIFtdLmNvbmNhdChwYXlsb2FkKS5tYXAoKGNtcCkgPT4gY21wLmNvbXBvbmVudC51aWQpXG4gICAgKTtcbiAgfVxufVxuXG4vLyBhY3Rpb24gdHlwZXNcbmV4cG9ydCB0eXBlIENtc0NvbXBvbmVudEFjdGlvbjxUIGV4dGVuZHMgQ21zQ29tcG9uZW50PiA9XG4gIHwgTG9hZENtc0NvbXBvbmVudFxuICB8IExvYWRDbXNDb21wb25lbnRGYWlsXG4gIHwgTG9hZENtc0NvbXBvbmVudFN1Y2Nlc3M8VD5cbiAgfCBDbXNHZXRDb21wb25lbnRGcm9tUGFnZTxUPjtcbiJdfQ==