{"version":3,"file":"lazy-modules.service.d.ts","sources":["lazy-modules.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Compiler, Injector, NgModuleRef, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { EventService } from '../event/event.service';\n/**\n * Utility service for managing dynamic imports of Angular services\n */\nexport declare class LazyModulesService implements OnDestroy {\n    protected compiler: Compiler;\n    protected injector: Injector;\n    protected events: EventService;\n    /**\n     * Expose lazy loaded module references\n     */\n    readonly modules$: Observable<NgModuleRef<any>>;\n    private readonly dependencyModules;\n    private readonly eventSubscription;\n    constructor(compiler: Compiler, injector: Injector, events: EventService);\n    /**\n     * Resolves module instance based dynamic import wrapped in an arrow function\n     *\n     * New module instance will be created with each call.\n     *\n     * @param moduleFunc\n     * @param feature\n     */\n    resolveModuleInstance(moduleFunc: () => Promise<any>, feature?: string): Observable<NgModuleRef<any>>;\n    /**\n     * Returns dependency module instance and initializes it when needed.\n     *\n     * Module will be instantiated only once, at first request for a this specific module class\n     */\n    resolveDependencyModuleInstance(moduleFunc: () => Promise<any>): Observable<NgModuleRef<any>>;\n    /**\n     * Resolve any Angular module from an function that return module or moduleFactory\n     */\n    private resolveModuleFactory;\n    ngOnDestroy(): void;\n}\n"]}