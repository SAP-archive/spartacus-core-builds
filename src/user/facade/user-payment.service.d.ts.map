{"version":3,"file":"user-payment.service.d.ts","sources":["user-payment.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { StateWithUser } from '../store/user-state';\nexport declare class UserPaymentService {\n    protected store: Store<StateWithUser | StateWithProcess<void>>;\n    protected userIdService: UserIdService;\n    constructor(store: Store<StateWithUser | StateWithProcess<void>>, userIdService: UserIdService);\n    /**\n     * Loads all user's payment methods.\n     */\n    loadPaymentMethods(): void;\n    /**\n     * Returns all user's payment methods\n     */\n    getPaymentMethods(): Observable<PaymentDetails[]>;\n    /**\n     * Returns a loading flag for payment methods\n     */\n    getPaymentMethodsLoading(): Observable<boolean>;\n    getPaymentMethodsLoadedSuccess(): Observable<boolean>;\n    /**\n     * Sets the payment as a default one\n     * @param paymentMethodId a payment method ID\n     */\n    setPaymentMethodAsDefault(paymentMethodId: string): void;\n    /**\n     * Deletes the payment method\n     *\n     * @param paymentMethodId a payment method ID\n     */\n    deletePaymentMethod(paymentMethodId: string): void;\n    /**\n     * Returns all billing countries\n     */\n    getAllBillingCountries(): Observable<Country[]>;\n    /**\n     * Retrieves billing countries\n     */\n    loadBillingCountries(): void;\n}\n"]}