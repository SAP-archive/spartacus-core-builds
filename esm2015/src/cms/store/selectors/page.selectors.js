/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { entityStateSelector, loaderValueSelector, } from '../../../state';
import { getCmsState } from './feature.selectors';
import { PageType } from '../../../model/cms.model';
/** @type {?} */
export const getPageEntitiesSelector = (state) => state.pageData.entities;
/** @type {?} */
export const getIndexByType = (index, type) => {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
/** @type {?} */
export const getPageComponentTypesSelector = (page) => {
    /** @type {?} */
    const componentTypes = new Set();
    if (page && page.slots) {
        for (const slot of Object.keys(page.slots)) {
            for (const component of page.slots[slot].components || []) {
                componentTypes.add(component.flexType);
            }
        }
    }
    return Array.from(componentTypes);
};
/** @type {?} */
export const getPageState = createSelector(getCmsState, (state) => state.page);
/** @type {?} */
export const getPageStateIndex = createSelector(getPageState, (page) => page.index);
/** @type {?} */
export const getIndex = (pageContext) => createSelector(getPageStateIndex, (index) => getIndexByType(index, pageContext.type));
/** @type {?} */
export const getIndexEntity = (pageContext) => createSelector(getIndex(pageContext), indexState => entityStateSelector(indexState, pageContext.id));
/** @type {?} */
export const getIndexValue = (pageContext) => createSelector(getIndexEntity(pageContext), entity => loaderValueSelector(entity));
/** @type {?} */
export const getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
/** @type {?} */
export const getPageData = (pageContext) => createSelector(getPageEntities, getIndexValue(pageContext), (entities, indexValue) => entities[indexValue]);
/** @type {?} */
export const getPageComponentTypes = (pageContext) => createSelector(getPageData(pageContext), pageData => getPageComponentTypesSelector(pageData));
/** @type {?} */
export const currentSlotSelectorFactory = (pageContext, position) => {
    return createSelector(getPageData(pageContext), entity => {
        if (entity) {
            return entity.slots[position] || { components: [] };
        }
    });
};
//# sourceMappingURL=data:application/json;base64,