import { StateLoaderActions } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
export const LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
export const LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
export const LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
export const UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
export const UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
export const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
export const RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
export const CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
export class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES;
    }
}
export class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES, payload);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class UpdateNotificationPreferences extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES;
    }
}
export class UpdateNotificationPreferencesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class ResetNotificationPreferences extends EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.type = RESET_NOTIFICATION_PREFERENCES;
    }
}
export class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {
    constructor() {
        super(NOTIFICATION_PREFERENCES);
        this.type = CLEAR_NOTIFICATION_PREFERENCES;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixtQkFBbUIsR0FDcEIsTUFBTSx5REFBeUQsQ0FBQztBQUNqRSxPQUFPLEVBQ0wsMENBQTBDLEVBQzFDLHdCQUF3QixHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUd2QixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FDeEMsc0NBQXNDLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQzdDLDJDQUEyQyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUNoRCw4Q0FBOEMsQ0FBQztBQUNqRCxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FDMUMsd0NBQXdDLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQy9DLDZDQUE2QyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUNsRCxnREFBZ0QsQ0FBQztBQUNuRCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FDekMsdUNBQXVDLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBRTFDLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxrQkFBa0IsQ0FBQyxnQkFBZ0I7SUFFbEYsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQURmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFEekIsU0FBSSxHQUFHLDZCQUE2QixDQUFDO0lBRzlDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTywrQkFBZ0MsU0FBUSxrQkFBa0IsQ0FBQyxnQkFBZ0I7SUFFdEYsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEeEIsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsa0NBQWtDLENBQUM7SUFHbkQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLGtCQUFrQixDQUFDLG1CQUFtQjtJQUU1RixZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQURmLFlBQU8sR0FBUCxPQUFPLENBQTBCO1FBRDNDLFNBQUksR0FBRyxxQ0FBcUMsQ0FBQztJQUd0RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsZ0JBQWdCO0lBRWpFLFlBQ1MsT0FBa0U7UUFFekUsS0FBSyxDQUFDLGVBQWUsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFDO1FBRjVELFlBQU8sR0FBUCxPQUFPLENBQTJEO1FBRmxFLFNBQUksR0FBRywrQkFBK0IsQ0FBQztJQUtoRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8saUNBQWtDLFNBQVEsZ0JBQWdCO0lBRXJFLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGVBQWUsRUFBRSwwQ0FBMEMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUQzRCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxvQ0FBb0MsQ0FBQztJQUdyRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sb0NBQXFDLFNBQVEsbUJBQW1CO0lBRTNFLFlBQW1CLE9BQWlDO1FBQ2xELEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQURsRCxZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcsdUNBQXVDLENBQUM7SUFHeEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDRCQUE2QixTQUFRLGlCQUFpQjtJQUVqRTtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUY1RCxTQUFJLEdBQUcsOEJBQThCLENBQUM7SUFHL0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDRCQUE2QixTQUFRLGtCQUFrQixDQUFDLGlCQUFpQjtJQUVwRjtRQUNFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRnpCLFNBQUksR0FBRyw4QkFBOEIsQ0FBQztJQUcvQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZUxvYWRlckFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHtcbiAgRW50aXR5RmFpbEFjdGlvbixcbiAgRW50aXR5TG9hZEFjdGlvbixcbiAgRW50aXR5UmVzZXRBY3Rpb24sXG4gIEVudGl0eVN1Y2Nlc3NBY3Rpb24sXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1sb2FkZXIvZW50aXR5LWxvYWRlci5hY3Rpb24nO1xuaW1wb3J0IHtcbiAgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lELFxuICBOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMsXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTCA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMID1cbiAgJ1tVc2VyXSBVcGRhdGUgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVNFVF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIFJlc2V0IE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgQ0xFQVJfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBDbGVhciBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgU3RhdGVMb2FkZXJBY3Rpb25zLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNGYWlsIGV4dGVuZHMgU3RhdGVMb2FkZXJBY3Rpb25zLkxvYWRlckZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUywgcGF5bG9hZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZUxvYWRlckFjdGlvbnMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdKSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBFbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBwcmVmZXJlbmNlczogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdIH1cbiAgKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwgZXh0ZW5kcyBFbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lELCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzIGV4dGVuZHMgRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10pIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBFbnRpdHlSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xlYXJOb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIFN0YXRlTG9hZGVyQWN0aW9ucy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uUHJlZmVyZW5jZUFjdGlvbiA9XG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXG4gIHwgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3NcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1xuICB8IFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbFxuICB8IFVwZGF0ZU5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2Vzc1xuICB8IFJlc2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcbiAgfCBDbGVhck5vdGlmaWNhdGlvblByZWZlcmVuY2VzO1xuIl19