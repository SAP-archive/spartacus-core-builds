import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { from, of } from 'rxjs';
import { catchError, concatMap, filter, map, mergeMap, switchMap, } from 'rxjs/operators';
import { AuthActions } from '../../../auth/store/actions/index';
import { CartActions } from '../../../cart/store/actions/index';
import { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { UserActions } from '../../../user/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { withdrawOn } from '../../../util/withdraw-on';
import { CheckoutConnector } from '../../connectors/checkout/checkout.connector';
import { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';
import { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';
import { CheckoutActions } from '../actions/index';
let CheckoutEffects = class CheckoutEffects {
    constructor(actions$, checkoutDeliveryConnector, checkoutPaymentConnector, checkoutConnector) {
        this.actions$ = actions$;
        this.checkoutDeliveryConnector = checkoutDeliveryConnector;
        this.checkoutPaymentConnector = checkoutPaymentConnector;
        this.checkoutConnector = checkoutConnector;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.addDeliveryAddress$ = this.actions$.pipe(ofType(CheckoutActions.ADD_DELIVERY_ADDRESS), map((action) => action.payload), mergeMap((payload) => this.checkoutDeliveryConnector
            .createAddress(payload.userId, payload.cartId, payload.address)
            .pipe(mergeMap((address) => {
            address['titleCode'] = payload.address.titleCode;
            if (payload.address.region && payload.address.region.isocodeShort) {
                Object.assign(address.region, {
                    isocodeShort: payload.address.region.isocodeShort,
                });
            }
            if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                return [
                    new CheckoutActions.SetDeliveryAddress({
                        userId: payload.userId,
                        cartId: payload.cartId,
                        address: address,
                    }),
                ];
            }
            else {
                return [
                    new UserActions.LoadUserAddresses(payload.userId),
                    new CheckoutActions.SetDeliveryAddress({
                        userId: payload.userId,
                        cartId: payload.cartId,
                        address: address,
                    }),
                ];
            }
        }), catchError((error) => of(new CheckoutActions.AddDeliveryAddressFail(makeErrorSerializable(error)))))), withdrawOn(this.contextChange$));
        this.setDeliveryAddress$ = this.actions$.pipe(ofType(CheckoutActions.SET_DELIVERY_ADDRESS), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutDeliveryConnector
                .setAddress(payload.userId, payload.cartId, payload.address.id)
                .pipe(mergeMap(() => [
                new CheckoutActions.SetDeliveryAddressSuccess(payload.address),
                new CheckoutActions.ClearCheckoutDeliveryMode({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
                new CheckoutActions.ClearSupportedDeliveryModes(),
                new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),
                new CheckoutActions.LoadSupportedDeliveryModes({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
            ]), catchError((error) => of(new CheckoutActions.SetDeliveryAddressFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.loadSupportedDeliveryModes$ = this.actions$.pipe(ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutDeliveryConnector
                .getSupportedModes(payload.userId, payload.cartId)
                .pipe(map((data) => {
                return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);
            }), catchError((error) => of(new CheckoutActions.LoadSupportedDeliveryModesFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.clearCheckoutMiscsDataOnLanguageChange$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), mergeMap(() => [
            new CheckoutActions.CheckoutClearMiscsData(),
            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),
        ]));
        this.clearDeliveryModesOnCurrencyChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE), map(() => new CheckoutActions.ClearSupportedDeliveryModes()));
        this.clearCheckoutDataOnLogout$ = this.actions$.pipe(ofType(AuthActions.LOGOUT), map(() => new CheckoutActions.ClearCheckoutData()));
        this.clearCheckoutDataOnLogin$ = this.actions$.pipe(ofType(AuthActions.LOGIN), map(() => new CheckoutActions.ClearCheckoutData()));
        this.setDeliveryMode$ = this.actions$.pipe(ofType(CheckoutActions.SET_DELIVERY_MODE), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutDeliveryConnector
                .setMode(payload.userId, payload.cartId, payload.selectedModeId)
                .pipe(mergeMap(() => {
                return [
                    new CheckoutActions.SetDeliveryModeSuccess(payload.selectedModeId),
                    new CartActions.LoadCart({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ];
            }), catchError((error) => of(new CheckoutActions.SetDeliveryModeFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.createPaymentDetails$ = this.actions$.pipe(ofType(CheckoutActions.CREATE_PAYMENT_DETAILS), map((action) => action.payload), mergeMap((payload) => {
            // get information for creating a subscription directly with payment provider
            return this.checkoutPaymentConnector
                .create(payload.userId, payload.cartId, payload.paymentDetails)
                .pipe(mergeMap((details) => {
                if (payload.userId === OCC_USER_ID_ANONYMOUS) {
                    return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];
                }
                else {
                    return [
                        new UserActions.LoadUserPaymentMethods(payload.userId),
                        new CheckoutActions.CreatePaymentDetailsSuccess(details),
                    ];
                }
            }), catchError((error) => of(new CheckoutActions.CreatePaymentDetailsFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.setPaymentDetails$ = this.actions$.pipe(ofType(CheckoutActions.SET_PAYMENT_DETAILS), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutPaymentConnector
                .set(payload.userId, payload.cartId, payload.paymentDetails.id)
                .pipe(map(() => new CheckoutActions.SetPaymentDetailsSuccess(payload.paymentDetails)), catchError((error) => of(new CheckoutActions.SetPaymentDetailsFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.placeOrder$ = this.actions$.pipe(ofType(CheckoutActions.PLACE_ORDER), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutConnector
                .placeOrder(payload.userId, payload.cartId)
                .pipe(switchMap((data) => [
                new CartActions.RemoveCart(payload.cartId),
                new CheckoutActions.PlaceOrderSuccess(data),
            ]), catchError((error) => of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.loadCheckoutDetails$ = this.actions$.pipe(ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutConnector
                .loadCheckoutDetails(payload.userId, payload.cartId)
                .pipe(map((data) => new CheckoutActions.LoadCheckoutDetailsSuccess(data)), catchError((error) => of(new CheckoutActions.LoadCheckoutDetailsFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.reloadDetailsOnMergeCart$ = this.actions$.pipe(ofType(CartActions.MERGE_CART_SUCCESS), map((action) => action.payload), map((payload) => {
            return new CheckoutActions.LoadCheckoutDetails({
                userId: payload.userId,
                cartId: payload.cartId,
            });
        }));
        this.clearCheckoutDeliveryAddress$ = this.actions$.pipe(ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS), map((action) => action.payload), filter((payload) => Boolean(payload.cartId)), switchMap((payload) => {
            return this.checkoutConnector
                .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)
                .pipe(map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()), catchError((error) => of(new CheckoutActions.ClearCheckoutDeliveryAddressFail(makeErrorSerializable(error)))));
        }), withdrawOn(this.contextChange$));
        this.clearCheckoutDeliveryMode$ = this.actions$.pipe(ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE), map((action) => action.payload), filter((payload) => Boolean(payload.cartId)), concatMap((payload) => {
            return this.checkoutConnector
                .clearCheckoutDeliveryMode(payload.userId, payload.cartId)
                .pipe(map(() => new CheckoutActions.ClearCheckoutDeliveryModeSuccess({
                userId: payload.userId,
                cartId: payload.cartId,
            })), catchError((error) => from([
                new CheckoutActions.ClearCheckoutDeliveryModeFail(makeErrorSerializable(error)),
                new CartActions.CartProcessesDecrement(payload.cartId),
                new CartActions.LoadCart({
                    cartId: payload.cartId,
                    userId: payload.userId,
                }),
            ])));
        }), withdrawOn(this.contextChange$));
    }
};
CheckoutEffects.ctorParameters = () => [
    { type: Actions },
    { type: CheckoutDeliveryConnector },
    { type: CheckoutPaymentConnector },
    { type: CheckoutConnector }
];
__decorate([
    Effect()
], CheckoutEffects.prototype, "addDeliveryAddress$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "setDeliveryAddress$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "loadSupportedDeliveryModes$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearCheckoutMiscsDataOnLanguageChange$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearDeliveryModesOnCurrencyChange$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearCheckoutDataOnLogout$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearCheckoutDataOnLogin$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "setDeliveryMode$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "createPaymentDetails$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "setPaymentDetails$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "placeOrder$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "loadCheckoutDetails$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "reloadDetailsOnMergeCart$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearCheckoutDeliveryAddress$", void 0);
__decorate([
    Effect()
], CheckoutEffects.prototype, "clearCheckoutDeliveryMode$", void 0);
CheckoutEffects = __decorate([
    Injectable()
], CheckoutEffects);
export { CheckoutEffects };
//# sourceMappingURL=data:application/json;base64,