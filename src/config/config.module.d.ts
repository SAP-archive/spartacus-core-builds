import { InjectionToken, ModuleWithProviders, Provider } from '@angular/core';
/**
 * Global Configuration injection token, can be used to inject configuration to any part of the app
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export declare const Config: InjectionToken<unknown>;
/**
 * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.
 * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.
 */
export declare const ConfigChunk: InjectionToken<unknown>;
/**
 * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.
 * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.
 *
 * General rule is, that all config provided in libraries should be provided as default config.
 */
export declare const DefaultConfigChunk: InjectionToken<unknown>;
/**
 * Helper function to provide configuration chunk using ConfigChunk token
 *
 * To provide default configuration in libraries provideDefaultConfig should be used instead.
 *
 * @param config Config object to merge with the global configuration
 */
export declare function provideConfig(config?: any, defaultConfig?: boolean): Provider;
/**
 * Helper function to provide configuration with factory function, using ConfigChunk token
 *
 * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.
 *
 * @param configFactory Factory Function that will generate config object
 * @param deps Optional dependencies to a factory function
 */
export declare function provideConfigFactory(configFactory: Function, deps?: any[], defaultConfig?: boolean): Provider;
/**
 * Helper function to provide default configuration chunk using DefaultConfigChunk token
 *
 * @param config Config object to merge with the default configuration
 */
export declare function provideDefaultConfig(config?: any): Provider;
/**
 * Helper function to provide default configuration with factory function, using DefaultConfigChunk token
 *
 * @param configFactory Factory Function that will generate config object
 * @param deps Optional dependencies to a factory function
 */
export declare function provideDefaultConfigFactory(configFactory: Function, deps?: any[]): Provider;
/**
 * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.
 *
 */
export declare function configurationFactory(configChunks?: any[], defaultConfigChunks?: any[]): any;
export declare class ConfigModule {
    /**
     * Import ConfigModule and contribute config to the global configuration
     *
     * To provide default configuration in libraries provideDefaultConfig should be used instead.
     *
     * @param config Config object to merge with the global configuration
     */
    static withConfig(config: object): ModuleWithProviders<ConfigModule>;
    /**
     * Import ConfigModule and contribute config to the global configuration using factory function
     *
     * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.
     *
     * @param configFactory Factory function that will generate configuration
     * @param deps Optional dependencies to factory function
     */
    static withConfigFactory(configFactory: Function, deps?: any[]): ModuleWithProviders<ConfigModule>;
    /**
     * Module with providers, should be imported only once, if possible, at the root of the app.
     *
     * @param config
     */
    static forRoot(config?: any): ModuleWithProviders<ConfigModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ConfigModule, never, [typeof ɵngcc1.CommonModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ConfigModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJjb25maWcubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBHbG9iYWwgQ29uZmlndXJhdGlvbiBpbmplY3Rpb24gdG9rZW4sIGNhbiBiZSB1c2VkIHRvIGluamVjdCBjb25maWd1cmF0aW9uIHRvIGFueSBwYXJ0IG9mIHRoZSBhcHBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQ29uZmlnOiBJbmplY3Rpb25Ub2tlbjx1bmtub3duPjtcbi8qKlxuICogQ29uZmlnIGNodW5rIHRva2VuLCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGNvbmZpZ3VyYXRpb24gY2h1bmsgYW5kIGNvbnRyaWJ1dGUgdG8gdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSwgdXNlIGBwcm92aWRlQ29uZmlnYCBvciBpbXBvcnQgYENvbmZpZ01vZHVsZS53aXRoQ29uZmlnYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBDb25maWdDaHVuazogSW5qZWN0aW9uVG9rZW48dW5rbm93bj47XG4vKipcbiAqIENvbmZpZyBjaHVuayB0b2tlbiwgY2FuIGJlIHVzZWQgdG8gcHJvdmlkZSBjb25maWd1cmF0aW9uIGNodW5rIGFuZCBjb250cmlidXRlIHRvIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uXG4gKiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHksIHVzZSBgcHJvdmlkZURlZmF1bHRDb25maWdgIG9yIGBwcm92aWRlRGVmYXVsdENvbmZpZ0ZhY3RvcnlgIGluc3RlYWQuXG4gKlxuICogR2VuZXJhbCBydWxlIGlzLCB0aGF0IGFsbCBjb25maWcgcHJvdmlkZWQgaW4gbGlicmFyaWVzIHNob3VsZCBiZSBwcm92aWRlZCBhcyBkZWZhdWx0IGNvbmZpZy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRGVmYXVsdENvbmZpZ0NodW5rOiBJbmplY3Rpb25Ub2tlbjx1bmtub3duPjtcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHByb3ZpZGUgY29uZmlndXJhdGlvbiBjaHVuayB1c2luZyBDb25maWdDaHVuayB0b2tlblxuICpcbiAqIFRvIHByb3ZpZGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGluIGxpYnJhcmllcyBwcm92aWRlRGVmYXVsdENvbmZpZyBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBjb25maWcgQ29uZmlnIG9iamVjdCB0byBtZXJnZSB3aXRoIHRoZSBnbG9iYWwgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBwcm92aWRlQ29uZmlnKGNvbmZpZz86IGFueSwgZGVmYXVsdENvbmZpZz86IGJvb2xlYW4pOiBQcm92aWRlcjtcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHByb3ZpZGUgY29uZmlndXJhdGlvbiB3aXRoIGZhY3RvcnkgZnVuY3Rpb24sIHVzaW5nIENvbmZpZ0NodW5rIHRva2VuXG4gKlxuICogVG8gcHJvdmlkZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gaW4gbGlicmFyaWVzIHByb3ZpZGVEZWZhdWx0Q29uZmlnRmFjdG9yeSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBjb25maWdGYWN0b3J5IEZhY3RvcnkgRnVuY3Rpb24gdGhhdCB3aWxsIGdlbmVyYXRlIGNvbmZpZyBvYmplY3RcbiAqIEBwYXJhbSBkZXBzIE9wdGlvbmFsIGRlcGVuZGVuY2llcyB0byBhIGZhY3RvcnkgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gcHJvdmlkZUNvbmZpZ0ZhY3RvcnkoY29uZmlnRmFjdG9yeTogRnVuY3Rpb24sIGRlcHM/OiBhbnlbXSwgZGVmYXVsdENvbmZpZz86IGJvb2xlYW4pOiBQcm92aWRlcjtcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHByb3ZpZGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGNodW5rIHVzaW5nIERlZmF1bHRDb25maWdDaHVuayB0b2tlblxuICpcbiAqIEBwYXJhbSBjb25maWcgQ29uZmlnIG9iamVjdCB0byBtZXJnZSB3aXRoIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gcHJvdmlkZURlZmF1bHRDb25maWcoY29uZmlnPzogYW55KTogUHJvdmlkZXI7XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBwcm92aWRlIGRlZmF1bHQgY29uZmlndXJhdGlvbiB3aXRoIGZhY3RvcnkgZnVuY3Rpb24sIHVzaW5nIERlZmF1bHRDb25maWdDaHVuayB0b2tlblxuICpcbiAqIEBwYXJhbSBjb25maWdGYWN0b3J5IEZhY3RvcnkgRnVuY3Rpb24gdGhhdCB3aWxsIGdlbmVyYXRlIGNvbmZpZyBvYmplY3RcbiAqIEBwYXJhbSBkZXBzIE9wdGlvbmFsIGRlcGVuZGVuY2llcyB0byBhIGZhY3RvcnkgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gcHJvdmlkZURlZmF1bHRDb25maWdGYWN0b3J5KGNvbmZpZ0ZhY3Rvcnk6IEZ1bmN0aW9uLCBkZXBzPzogYW55W10pOiBQcm92aWRlcjtcbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbiB0aGF0IG1lcmdlcyBhbGwgY29uZmlndXJhdGlvbnMgY2h1bmtzLiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkgd2l0aG91dCBleHBsaWNpdCByZWFzb24uXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBjb25maWd1cmF0aW9uRmFjdG9yeShjb25maWdDaHVua3M/OiBhbnlbXSwgZGVmYXVsdENvbmZpZ0NodW5rcz86IGFueVtdKTogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29uZmlnTW9kdWxlIHtcbiAgICAvKipcbiAgICAgKiBJbXBvcnQgQ29uZmlnTW9kdWxlIGFuZCBjb250cmlidXRlIGNvbmZpZyB0byB0aGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cbiAgICAgKlxuICAgICAqIFRvIHByb3ZpZGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGluIGxpYnJhcmllcyBwcm92aWRlRGVmYXVsdENvbmZpZyBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyBDb25maWcgb2JqZWN0IHRvIG1lcmdlIHdpdGggdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgc3RhdGljIHdpdGhDb25maWcoY29uZmlnOiBvYmplY3QpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvbmZpZ01vZHVsZT47XG4gICAgLyoqXG4gICAgICogSW1wb3J0IENvbmZpZ01vZHVsZSBhbmQgY29udHJpYnV0ZSBjb25maWcgdG8gdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIHVzaW5nIGZhY3RvcnkgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIFRvIHByb3ZpZGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGluIGxpYnJhcmllcyBwcm92aWRlRGVmYXVsdENvbmZpZ0ZhY3Rvcnkgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGdlbmVyYXRlIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcGFyYW0gZGVwcyBPcHRpb25hbCBkZXBlbmRlbmNpZXMgdG8gZmFjdG9yeSBmdW5jdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyB3aXRoQ29uZmlnRmFjdG9yeShjb25maWdGYWN0b3J5OiBGdW5jdGlvbiwgZGVwcz86IGFueVtdKTogTW9kdWxlV2l0aFByb3ZpZGVyczxDb25maWdNb2R1bGU+O1xuICAgIC8qKlxuICAgICAqIE1vZHVsZSB3aXRoIHByb3ZpZGVycywgc2hvdWxkIGJlIGltcG9ydGVkIG9ubHkgb25jZSwgaWYgcG9zc2libGUsIGF0IHRoZSByb290IG9mIHRoZSBhcHAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29uZmlnXG4gICAgICovXG4gICAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogYW55KTogTW9kdWxlV2l0aFByb3ZpZGVyczxDb25maWdNb2R1bGU+O1xufVxuIl19