import { __assign } from "tslib";
import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions } from '../../../auth/index';
import { SiteContextActions } from '../../../site-context/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { ANONYMOUS_CONSENTS, } from '../anonymous-consents-state';
import * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';
import * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';
import * as fromAnonymousConsents from './anonymous-consents.reducer';
export function getReducers() {
    return {
        templates: loaderReducer(ANONYMOUS_CONSENTS),
        consents: fromAnonymousConsents.reducer,
        ui: combineReducers({
            bannerDismissed: fromAnonymousConsentsBanner.reducer,
            updated: fromAnonymousConsentsUpdate.reducer,
        }),
    };
}
export var reducerToken = new InjectionToken('AnonymousConsentsReducers');
export var reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearAnonymousConsentTemplates(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT ||
            action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = __assign(__assign({}, state), { templates: undefined });
        }
        return reducer(state, action);
    };
}
export var metaReducers = [
    clearAnonymousConsentTemplates,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYW5vbnltb3VzLWNvbnNlbnRzL3N0b3JlL3JlZHVjZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFJTCxlQUFlLEdBRWhCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0UsT0FBTyxFQUVMLGtCQUFrQixHQUNuQixNQUFNLDZCQUE2QixDQUFDO0FBQ3JDLE9BQU8sS0FBSywyQkFBMkIsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEtBQUssMkJBQTJCLE1BQU0scUNBQXFDLENBQUM7QUFDbkYsT0FBTyxLQUFLLHFCQUFxQixNQUFNLDhCQUE4QixDQUFDO0FBRXRFLE1BQU0sVUFBVSxXQUFXO0lBQ3pCLE9BQU87UUFDTCxTQUFTLEVBQUUsYUFBYSxDQUFvQixrQkFBa0IsQ0FBQztRQUMvRCxRQUFRLEVBQUUscUJBQXFCLENBQUMsT0FBTztRQUN2QyxFQUFFLEVBQUUsZUFBZSxDQUFDO1lBQ2xCLGVBQWUsRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1lBQ3BELE9BQU8sRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1NBQzdDLENBQUM7S0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FFcEIsSUFBSSxjQUFjLENBQ3JCLDJCQUEyQixDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFhO0lBQ3ZDLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFVBQVUsRUFBRSxXQUFXO0NBQ3hCLENBQUM7QUFFRixNQUFNLFVBQVUsOEJBQThCLENBQzVDLE9BQXNEO0lBRXRELE9BQU8sVUFBVSxLQUFLLEVBQUUsTUFBTTtRQUM1QixJQUNFLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLE1BQU07WUFDbEMsTUFBTSxDQUFDLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxlQUFlLEVBQ2xEO1lBQ0EsS0FBSyx5QkFDQSxLQUFLLEtBQ1IsU0FBUyxFQUFFLFNBQVMsR0FDckIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQXVCO0lBQzlDLDhCQUE4QjtDQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBY3Rpb24sXG4gIEFjdGlvblJlZHVjZXIsXG4gIEFjdGlvblJlZHVjZXJNYXAsXG4gIGNvbWJpbmVSZWR1Y2VycyxcbiAgTWV0YVJlZHVjZXIsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEF1dGhBY3Rpb25zIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9pbmRleCc7XG5pbXBvcnQgeyBDb25zZW50VGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jb25zZW50Lm1vZGVsJztcbmltcG9ydCB7IFNpdGVDb250ZXh0QWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NpdGUtY29udGV4dC9pbmRleCc7XG5pbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcbmltcG9ydCB7XG4gIEFub255bW91c0NvbnNlbnRzU3RhdGUsXG4gIEFOT05ZTU9VU19DT05TRU5UUyxcbn0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcbmltcG9ydCAqIGFzIGZyb21Bbm9ueW1vdXNDb25zZW50c0Jhbm5lciBmcm9tICcuL2Fub255bW91cy1jb25zZW50cy1iYW5uZXIucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQW5vbnltb3VzQ29uc2VudHNVcGRhdGUgZnJvbSAnLi9hbm9ueW1vdXMtY29uc2VudHMtdXBkYXRlLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUFub255bW91c0NvbnNlbnRzIGZyb20gJy4vYW5vbnltb3VzLWNvbnNlbnRzLnJlZHVjZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkdWNlcnMoKTogQWN0aW9uUmVkdWNlck1hcDxBbm9ueW1vdXNDb25zZW50c1N0YXRlPiB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVzOiBsb2FkZXJSZWR1Y2VyPENvbnNlbnRUZW1wbGF0ZVtdPihBTk9OWU1PVVNfQ09OU0VOVFMpLFxuICAgIGNvbnNlbnRzOiBmcm9tQW5vbnltb3VzQ29uc2VudHMucmVkdWNlcixcbiAgICB1aTogY29tYmluZVJlZHVjZXJzKHtcbiAgICAgIGJhbm5lckRpc21pc3NlZDogZnJvbUFub255bW91c0NvbnNlbnRzQmFubmVyLnJlZHVjZXIsXG4gICAgICB1cGRhdGVkOiBmcm9tQW5vbnltb3VzQ29uc2VudHNVcGRhdGUucmVkdWNlcixcbiAgICB9KSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJUb2tlbjogSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxcbiAgQW5vbnltb3VzQ29uc2VudHNTdGF0ZVxuPj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48QWN0aW9uUmVkdWNlck1hcDxBbm9ueW1vdXNDb25zZW50c1N0YXRlPj4oXG4gICdBbm9ueW1vdXNDb25zZW50c1JlZHVjZXJzJ1xuKTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJQcm92aWRlcjogUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IHJlZHVjZXJUb2tlbixcbiAgdXNlRmFjdG9yeTogZ2V0UmVkdWNlcnMsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzKFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPEFub255bW91c0NvbnNlbnRzU3RhdGUsIEFjdGlvbj5cbik6IEFjdGlvblJlZHVjZXI8QW5vbnltb3VzQ29uc2VudHNTdGF0ZSwgQWN0aW9uPiB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChcbiAgICAgIGFjdGlvbi50eXBlID09PSBBdXRoQWN0aW9ucy5MT0dPVVQgfHxcbiAgICAgIGFjdGlvbi50eXBlID09PSBTaXRlQ29udGV4dEFjdGlvbnMuTEFOR1VBR0VfQ0hBTkdFXG4gICAgKSB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRlbXBsYXRlczogdW5kZWZpbmVkLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBtZXRhUmVkdWNlcnM6IE1ldGFSZWR1Y2VyPGFueT5bXSA9IFtcbiAgY2xlYXJBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzLFxuXTtcbiJdfQ==