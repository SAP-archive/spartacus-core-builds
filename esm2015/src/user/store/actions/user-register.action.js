/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, } from '../user-state';
/** @type {?} */
export const REGISTER_USER = '[User] Register User';
/** @type {?} */
export const REGISTER_USER_FAIL = '[User] Register User Fail';
/** @type {?} */
export const REGISTER_USER_SUCCESS = '[User] Register User Success';
/** @type {?} */
export const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
/** @type {?} */
export const REMOVE_USER = '[User] Remove User';
/** @type {?} */
export const REMOVE_USER_FAIL = '[User] Remove User Fail';
/** @type {?} */
export const REMOVE_USER_SUCCESS = '[User] Remove User Success';
/** @type {?} */
export const REMOVE_USER_RESET = '[User] Reset Remove User Process State';
export class RegisterUser extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REGISTER_USER;
    }
}
if (false) {
    /** @type {?} */
    RegisterUser.prototype.type;
    /** @type {?} */
    RegisterUser.prototype.payload;
}
export class RegisterUserFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REGISTER_USER_FAIL;
    }
}
if (false) {
    /** @type {?} */
    RegisterUserFail.prototype.type;
    /** @type {?} */
    RegisterUserFail.prototype.payload;
}
export class RegisterUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = REGISTER_USER_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    RegisterUserSuccess.prototype.type;
}
export class ResetRegisterUserProcess extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = RESET_REGISTER_USER_PROCESS;
    }
}
if (false) {
    /** @type {?} */
    ResetRegisterUserProcess.prototype.type;
}
export class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REMOVE_USER;
    }
}
if (false) {
    /** @type {?} */
    RemoveUser.prototype.type;
    /** @type {?} */
    RemoveUser.prototype.payload;
}
export class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {
    /**
     * @param {?} payload
     */
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REMOVE_USER_FAIL;
    }
}
if (false) {
    /** @type {?} */
    RemoveUserFail.prototype.type;
    /** @type {?} */
    RemoveUserFail.prototype.payload;
}
export class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_SUCCESS;
    }
}
if (false) {
    /** @type {?} */
    RemoveUserSuccess.prototype.type;
}
export class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_RESET;
    }
}
if (false) {
    /** @type {?} */
    RemoveUserReset.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZWdpc3Rlci5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL3VzZXItcmVnaXN0ZXIuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixzQkFBc0IsR0FDdkIsTUFBTSxlQUFlLENBQUM7O0FBRXZCLE1BQU0sT0FBTyxhQUFhLEdBQUcsc0JBQXNCOztBQUNuRCxNQUFNLE9BQU8sa0JBQWtCLEdBQUcsMkJBQTJCOztBQUM3RCxNQUFNLE9BQU8scUJBQXFCLEdBQUcsOEJBQThCOztBQUNuRSxNQUFNLE9BQU8sMkJBQTJCLEdBQUcsb0NBQW9DOztBQUUvRSxNQUFNLE9BQU8sV0FBVyxHQUFHLG9CQUFvQjs7QUFDL0MsTUFBTSxPQUFPLGdCQUFnQixHQUFHLHlCQUF5Qjs7QUFDekQsTUFBTSxPQUFPLG1CQUFtQixHQUFHLDRCQUE0Qjs7QUFDL0QsTUFBTSxPQUFPLGlCQUFpQixHQUFHLHdDQUF3QztBQUV6RSxNQUFNLE9BQU8sWUFBYSxTQUFRLHdCQUF3QixDQUFDLGdCQUFnQjs7OztJQUV6RSxZQUFtQixPQUFtQjtRQUNwQyxLQUFLLENBQUMsZUFBZSxFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFEaEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUQ3QixTQUFJLEdBQUcsYUFBYSxDQUFDO0lBRzlCLENBQUM7Q0FDRjs7O0lBSkMsNEJBQThCOztJQUNsQiwrQkFBMEI7O0FBS3hDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSx3QkFBd0IsQ0FBQyxnQkFBZ0I7Ozs7SUFFN0UsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsZUFBZSxFQUFFLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRHpDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBR25DLENBQUM7Q0FDRjs7O0lBSkMsZ0NBQW1DOztJQUN2QixtQ0FBbUI7O0FBS2pDLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSx3QkFBd0IsQ0FBQyxtQkFBbUI7SUFFbkY7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLHdCQUF3QixDQUFDLENBQUM7UUFGMUMsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBR3RDLENBQUM7Q0FDRjs7O0lBSkMsbUNBQXNDOztBQU14QyxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsd0JBQXdCLENBQUMsaUJBQWlCO0lBRXRGO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRjFDLFNBQUksR0FBRywyQkFBMkIsQ0FBQztJQUc1QyxDQUFDO0NBQ0Y7OztJQUpDLHdDQUE0Qzs7QUFNOUMsTUFBTSxPQUFPLFVBQVcsU0FBUSx3QkFBd0IsQ0FBQyxnQkFBZ0I7Ozs7SUFFdkUsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLENBQUMsZUFBZSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFEOUIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsV0FBVyxDQUFDO0lBRzVCLENBQUM7Q0FDRjs7O0lBSkMsMEJBQTRCOztJQUNoQiw2QkFBc0I7O0FBS3BDLE1BQU0sT0FBTyxjQUFlLFNBQVEsd0JBQXdCLENBQUMsZ0JBQWdCOzs7O0lBRTNFLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLGVBQWUsRUFBRSxzQkFBc0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUR2QyxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxnQkFBZ0IsQ0FBQztJQUdqQyxDQUFDO0NBQ0Y7OztJQUpDLDhCQUFpQzs7SUFDckIsaUNBQW1COztBQUtqQyxNQUFNLE9BQU8saUJBQWtCLFNBQVEsd0JBQXdCLENBQUMsbUJBQW1CO0lBRWpGO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBRnhDLFNBQUksR0FBRyxtQkFBbUIsQ0FBQztJQUdwQyxDQUFDO0NBQ0Y7OztJQUpDLGlDQUFvQzs7QUFNdEMsTUFBTSxPQUFPLGVBQWdCLFNBQVEsd0JBQXdCLENBQUMsaUJBQWlCO0lBRTdFO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBRnhDLFNBQUksR0FBRyxpQkFBaUIsQ0FBQztJQUdsQyxDQUFDO0NBQ0Y7OztJQUpDLCtCQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJTaWduVXAgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9taXNjLm1vZGVsJztcbmltcG9ydCB7IFBST0NFU1NfRkVBVFVSRSB9IGZyb20gJy4uLy4uLy4uL3Byb2Nlc3Mvc3RvcmUvcHJvY2Vzcy1zdGF0ZSc7XG5pbXBvcnQgeyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQge1xuICBSRUdJU1RFUl9VU0VSX1BST0NFU1NfSUQsXG4gIFJFTU9WRV9VU0VSX1BST0NFU1NfSUQsXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgUkVHSVNURVJfVVNFUiA9ICdbVXNlcl0gUmVnaXN0ZXIgVXNlcic7XG5leHBvcnQgY29uc3QgUkVHSVNURVJfVVNFUl9GQUlMID0gJ1tVc2VyXSBSZWdpc3RlciBVc2VyIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFJFR0lTVEVSX1VTRVJfU1VDQ0VTUyA9ICdbVXNlcl0gUmVnaXN0ZXIgVXNlciBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVNFVF9SRUdJU1RFUl9VU0VSX1BST0NFU1MgPSAnW1VzZXJdIFJlc2V0IFJlZ2lzdGVyIFVzZXIgUHJvY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBSRU1PVkVfVVNFUiA9ICdbVXNlcl0gUmVtb3ZlIFVzZXInO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9VU0VSX0ZBSUwgPSAnW1VzZXJdIFJlbW92ZSBVc2VyIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9VU0VSX1NVQ0NFU1MgPSAnW1VzZXJdIFJlbW92ZSBVc2VyIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9VU0VSX1JFU0VUID0gJ1tVc2VyXSBSZXNldCBSZW1vdmUgVXNlciBQcm9jZXNzIFN0YXRlJztcblxuZXhwb3J0IGNsYXNzIFJlZ2lzdGVyVXNlciBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFR0lTVEVSX1VTRVI7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBVc2VyU2lnblVwKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRUdJU1RFUl9VU0VSX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWdpc3RlclVzZXJGYWlsIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVHSVNURVJfVVNFUl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRUdJU1RFUl9VU0VSX1BST0NFU1NfSUQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWdpc3RlclVzZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVHSVNURVJfVVNFUl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFJFR0lTVEVSX1VTRVJfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0UmVnaXN0ZXJVc2VyUHJvY2VzcyBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9SRUdJU1RFUl9VU0VSX1BST0NFU1M7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgUkVHSVNURVJfVVNFUl9QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3ZlVXNlciBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFTU9WRV9VU0VSO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRU1PVkVfVVNFUl9QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3ZlVXNlckZhaWwgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRU1PVkVfVVNFUl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBSRU1PVkVfVVNFUl9QUk9DRVNTX0lELCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3ZlVXNlclN1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRU1PVkVfVVNFUl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFJFTU9WRV9VU0VSX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdmVVc2VyUmVzZXQgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5UmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gUkVNT1ZFX1VTRVJfUkVTRVQ7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgUkVNT1ZFX1VTRVJfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBVc2VyUmVnaXN0ZXJPclJlbW92ZUFjdGlvbiA9XG4gIHwgUmVnaXN0ZXJVc2VyXG4gIHwgUmVnaXN0ZXJVc2VyRmFpbFxuICB8IFJlZ2lzdGVyVXNlclN1Y2Nlc3NcbiAgfCBSZXNldFJlZ2lzdGVyVXNlclByb2Nlc3NcbiAgfCBSZW1vdmVVc2VyXG4gIHwgUmVtb3ZlVXNlckZhaWxcbiAgfCBSZW1vdmVVc2VyU3VjY2Vzc1xuICB8IFJlbW92ZVVzZXJSZXNldDtcbiJdfQ==