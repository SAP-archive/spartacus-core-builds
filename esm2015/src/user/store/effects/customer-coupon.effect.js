import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as fromCustomerCouponsAction from '../actions/customer-coupon.action';
import { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';
import { makeErrorSerializable } from '../../../util/serialization-utils';
export class CustomerCouponEffects {
    constructor(actions$, customerCouponConnector) {
        this.actions$ = actions$;
        this.customerCouponConnector = customerCouponConnector;
        this.loadCustomerCoupons$ = this.actions$.pipe(ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS), map((action) => action.payload), mergeMap((payload) => {
            return this.customerCouponConnector
                .getCustomerCoupons(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map((coupons) => {
                return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(coupons);
            }), catchError((error) => of(new fromCustomerCouponsAction.LoadCustomerCouponsFail(makeErrorSerializable(error)))));
        }));
        this.subscribeCustomerCoupon$ = this.actions$.pipe(ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON), map((action) => action.payload), mergeMap((payload) => {
            return this.customerCouponConnector
                .turnOnNotification(payload.userId, payload.couponCode)
                .pipe(map((data) => {
                return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(data);
            }), catchError((error) => of(new fromCustomerCouponsAction.SubscribeCustomerCouponFail(makeErrorSerializable(error)))));
        }));
        this.unsubscribeCustomerCoupon$ = this.actions$.pipe(ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON), map((action) => action.payload), mergeMap((payload) => {
            return this.customerCouponConnector
                .turnOffNotification(payload.userId, payload.couponCode)
                .pipe(map(() => {
                return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(payload.couponCode);
            }), catchError((error) => of(new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(makeErrorSerializable(error)))));
        }));
        this.claimCustomerCoupon$ = this.actions$.pipe(ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON), map((action) => action.payload), mergeMap((payload) => {
            return this.customerCouponConnector
                .claimCustomerCoupon(payload.userId, payload.couponCode)
                .pipe(map((data) => {
                return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(data);
            }), catchError((error) => of(new fromCustomerCouponsAction.ClaimCustomerCouponFail(makeErrorSerializable(error)))));
        }));
    }
}
CustomerCouponEffects.decorators = [
    { type: Injectable }
];
CustomerCouponEffects.ctorParameters = () => [
    { type: Actions },
    { type: CustomerCouponConnector }
];
__decorate([
    Effect()
], CustomerCouponEffects.prototype, "loadCustomerCoupons$", void 0);
__decorate([
    Effect()
], CustomerCouponEffects.prototype, "subscribeCustomerCoupon$", void 0);
__decorate([
    Effect()
], CustomerCouponEffects.prototype, "unsubscribeCustomerCoupon$", void 0);
__decorate([
    Effect()
], CustomerCouponEffects.prototype, "claimCustomerCoupon$", void 0);
//# sourceMappingURL=data:application/json;base64,