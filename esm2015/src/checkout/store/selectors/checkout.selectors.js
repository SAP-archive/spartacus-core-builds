import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { CHECKOUT_FEATURE, } from '../checkout-state';
const getDeliveryAddressSelector = (state) => state.address;
const ɵ0 = getDeliveryAddressSelector;
const getDeliveryModeSelector = (state) => state.deliveryMode;
const ɵ1 = getDeliveryModeSelector;
const getPaymentDetailsSelector = (state) => state.paymentDetails;
const ɵ2 = getPaymentDetailsSelector;
const getOrderDetailsSelector = (state) => state.orderDetails;
const ɵ3 = getOrderDetailsSelector;
export const getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);
const ɵ4 = (checkoutState) => checkoutState.steps;
export const getCheckoutStepsState = createSelector(getCheckoutState, ɵ4);
const ɵ5 = (state) => StateUtils.loaderValueSelector(state);
export const getCheckoutSteps = createSelector(getCheckoutStepsState, ɵ5);
export const getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);
export const getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);
const ɵ6 = (deliveryMode) => {
    return (deliveryMode &&
        Object.keys(deliveryMode.supported).map((code) => deliveryMode.supported[code]));
};
export const getSupportedDeliveryModes = createSelector(getDeliveryMode, ɵ6);
const ɵ7 = (deliveryMode) => {
    return deliveryMode && deliveryMode.selected;
};
export const getSelectedDeliveryModeCode = createSelector(getDeliveryMode, ɵ7);
const ɵ8 = (deliveryMode) => {
    if (deliveryMode.selected !== '') {
        if (Object.keys(deliveryMode.supported).length === 0) {
            return null;
        }
        return deliveryMode.supported[deliveryMode.selected];
    }
};
export const getSelectedDeliveryMode = createSelector(getDeliveryMode, ɵ8);
export const getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);
export const getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);
const ɵ9 = (state) => StateUtils.loaderSuccessSelector(state) &&
    !StateUtils.loaderLoadingSelector(state);
export const getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, ɵ9);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQuc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3NlbGVjdG9ycy9jaGVja291dC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEdBRWYsTUFBTSxhQUFhLENBQUM7QUFJckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFHTCxnQkFBZ0IsR0FFakIsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQixNQUFNLDBCQUEwQixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7QUFDaEYsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEtBQXlCLEVBQUUsRUFBRSxDQUM1RCxLQUFLLENBQUMsWUFBWSxDQUFDOztBQUNyQixNQUFNLHlCQUF5QixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQzlELEtBQUssQ0FBQyxjQUFjLENBQUM7O0FBQ3ZCLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxLQUF5QixFQUFFLEVBQUUsQ0FDNUQsS0FBSyxDQUFDLFlBQVksQ0FBQzs7QUFFckIsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBR3pCLHFCQUFxQixDQUFnQixnQkFBZ0IsQ0FBQyxDQUFDO1dBT3pELENBQUMsYUFBNEIsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUs7QUFMdkQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBRzlCLGNBQWMsQ0FDaEIsZ0JBQWdCLEtBRWpCLENBQUM7V0FLd0MsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNsRCxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0FBSnZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUd6QixjQUFjLENBQUMscUJBQXFCLEtBRXZDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLGdCQUFnQixFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQU14QixjQUFjLENBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztXQUsxQixDQUFDLFlBQVksRUFBRSxFQUFFO0lBQ25ELE9BQU8sQ0FDTCxZQUFZO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUNyQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDdkMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVZELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUdsQyxjQUFjLENBQUMsZUFBZSxLQU9oQyxDQUFDO1dBS2lDLENBQUMsWUFBWSxFQUFFLEVBQUU7SUFDbkQsT0FBTyxZQUFZLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQztBQUMvQyxDQUFDO0FBTEQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBR3BDLGNBQWMsQ0FBQyxlQUFlLEtBRWhDLENBQUM7V0FLaUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtJQUNuRCxJQUFJLFlBQVksQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO1FBQ2hDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0RDtBQUNILENBQUM7QUFWRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGVBQWUsS0FPaEMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQUMsZ0JBQWdCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLHVCQUF1QixDQUFDLENBQUM7V0FPNUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNSLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0FBUDVDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUdqQyxjQUFjLENBQ2hCLHFCQUFxQixLQUl0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY3JlYXRlRmVhdHVyZVNlbGVjdG9yLFxuICBjcmVhdGVTZWxlY3RvcixcbiAgTWVtb2l6ZWRTZWxlY3Rvcixcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FkZHJlc3MubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudERldGFpbHMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7IERlbGl2ZXJ5TW9kZSwgT3JkZXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7XG4gIENoZWNrb3V0U3RhdGUsXG4gIENoZWNrb3V0U3RlcHNTdGF0ZSxcbiAgQ0hFQ0tPVVRfRkVBVFVSRSxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG59IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuY29uc3QgZ2V0RGVsaXZlcnlBZGRyZXNzU2VsZWN0b3IgPSAoc3RhdGU6IENoZWNrb3V0U3RlcHNTdGF0ZSkgPT4gc3RhdGUuYWRkcmVzcztcbmNvbnN0IGdldERlbGl2ZXJ5TW9kZVNlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XG4gIHN0YXRlLmRlbGl2ZXJ5TW9kZTtcbmNvbnN0IGdldFBheW1lbnREZXRhaWxzU2VsZWN0b3IgPSAoc3RhdGU6IENoZWNrb3V0U3RlcHNTdGF0ZSkgPT5cbiAgc3RhdGUucGF5bWVudERldGFpbHM7XG5jb25zdCBnZXRPcmRlckRldGFpbHNTZWxlY3RvciA9IChzdGF0ZTogQ2hlY2tvdXRTdGVwc1N0YXRlKSA9PlxuICBzdGF0ZS5vcmRlckRldGFpbHM7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGVja291dFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgQ2hlY2tvdXRTdGF0ZVxuPiA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxDaGVja291dFN0YXRlPihDSEVDS09VVF9GRUFUVVJFKTtcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RlcHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIExvYWRlclN0YXRlPENoZWNrb3V0U3RlcHNTdGF0ZT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGF0ZSxcbiAgKGNoZWNrb3V0U3RhdGU6IENoZWNrb3V0U3RhdGUpID0+IGNoZWNrb3V0U3RhdGUuc3RlcHNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGVja291dFN0ZXBzOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgQ2hlY2tvdXRTdGVwc1N0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlLCAoc3RhdGUpID0+XG4gIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXREZWxpdmVyeUFkZHJlc3M6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBBZGRyZXNzXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q2hlY2tvdXRTdGVwcywgZ2V0RGVsaXZlcnlBZGRyZXNzU2VsZWN0b3IpO1xuXG5leHBvcnQgY29uc3QgZ2V0RGVsaXZlcnlNb2RlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAge1xuICAgIHN1cHBvcnRlZDogeyBbY29kZTogc3RyaW5nXTogRGVsaXZlcnlNb2RlIH07XG4gICAgc2VsZWN0ZWQ6IHN0cmluZztcbiAgfVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHMsIGdldERlbGl2ZXJ5TW9kZVNlbGVjdG9yKTtcblxuZXhwb3J0IGNvbnN0IGdldFN1cHBvcnRlZERlbGl2ZXJ5TW9kZXM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBEZWxpdmVyeU1vZGVbXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldERlbGl2ZXJ5TW9kZSwgKGRlbGl2ZXJ5TW9kZSkgPT4ge1xuICByZXR1cm4gKFxuICAgIGRlbGl2ZXJ5TW9kZSAmJlxuICAgIE9iamVjdC5rZXlzKGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWQpLm1hcChcbiAgICAgIChjb2RlKSA9PiBkZWxpdmVyeU1vZGUuc3VwcG9ydGVkW2NvZGVdXG4gICAgKVxuICApO1xufSk7XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZERlbGl2ZXJ5TW9kZUNvZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBzdHJpbmdcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXREZWxpdmVyeU1vZGUsIChkZWxpdmVyeU1vZGUpID0+IHtcbiAgcmV0dXJuIGRlbGl2ZXJ5TW9kZSAmJiBkZWxpdmVyeU1vZGUuc2VsZWN0ZWQ7XG59KTtcblxuZXhwb3J0IGNvbnN0IGdldFNlbGVjdGVkRGVsaXZlcnlNb2RlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgRGVsaXZlcnlNb2RlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0RGVsaXZlcnlNb2RlLCAoZGVsaXZlcnlNb2RlKSA9PiB7XG4gIGlmIChkZWxpdmVyeU1vZGUuc2VsZWN0ZWQgIT09ICcnKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkZWxpdmVyeU1vZGUuc3VwcG9ydGVkW2RlbGl2ZXJ5TW9kZS5zZWxlY3RlZF07XG4gIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0UGF5bWVudERldGFpbHM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBQYXltZW50RGV0YWlsc1xuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHMsIGdldFBheW1lbnREZXRhaWxzU2VsZWN0b3IpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tvdXRPcmRlckRldGFpbHM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBPcmRlclxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldENoZWNrb3V0U3RlcHMsIGdldE9yZGVyRGV0YWlsc1NlbGVjdG9yKTtcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0RGV0YWlsc0xvYWRlZDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlLFxuICAoc3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpICYmXG4gICAgIVN0YXRlVXRpbHMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==