/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { loaderLoadingSelector, loaderSuccessSelector, loaderValueSelector, } from '../../../state/utils/loader/loader.selectors';
import { getUserState } from './feature.selector';
var ɵ0 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return state.regions; };
/** @type {?} */
export var getRegionsLoaderState = createSelector(getUserState, (ɵ0));
var ɵ1 = /**
 * @param {?} state
 * @return {?}
 */
function (state) {
    return loaderValueSelector(state).entities;
};
/** @type {?} */
export var getAllRegions = createSelector(getRegionsLoaderState, (ɵ1));
var ɵ2 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return ({
    loaded: loaderSuccessSelector(state),
    loading: loaderLoadingSelector(state),
    regions: loaderValueSelector(state).entities,
    country: loaderValueSelector(state).country,
}); };
/** @type {?} */
export var getRegionsDataAndLoading = createSelector(getRegionsLoaderState, (ɵ2));
var ɵ3 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return loaderValueSelector(state).country; };
/** @type {?} */
export var getRegionsCountry = createSelector(getRegionsLoaderState, (ɵ3));
var ɵ4 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return loaderLoadingSelector(state); };
/** @type {?} */
export var getRegionsLoading = createSelector(getRegionsLoaderState, (ɵ4));
var ɵ5 = /**
 * @param {?} state
 * @return {?}
 */
function (state) { return loaderSuccessSelector(state); };
/** @type {?} */
export var getRegionsLoaded = createSelector(getRegionsLoaderState, (ɵ5));
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvcmVnaW9ucy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBRy9ELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG1CQUFtQixHQUNwQixNQUFNLDhDQUE4QyxDQUFDO0FBRXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7QUFPaEQsVUFBQyxLQUFnQixJQUFLLE9BQUEsS0FBSyxDQUFDLE9BQU8sRUFBYixDQUFhOztBQUxyQyxNQUFNLEtBQU8scUJBQXFCLEdBRzlCLGNBQWMsQ0FDaEIsWUFBWSxPQUViOzs7OztBQU9DLFVBQUMsS0FBZ0M7SUFDL0IsT0FBTyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsQ0FBQzs7QUFQSCxNQUFNLEtBQU8sYUFBYSxHQUd0QixjQUFjLENBQ2hCLHFCQUFxQixPQUl0Qjs7Ozs7QUFZQyxVQUFDLEtBQWdDLElBQUssT0FBQSxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDcEMsT0FBTyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUNyQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUM1QyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztDQUM1QyxDQUFDLEVBTG9DLENBS3BDOztBQWZKLE1BQU0sS0FBTyx3QkFBd0IsR0FRakMsY0FBYyxDQUNoQixxQkFBcUIsT0FPdEI7Ozs7O0FBT0MsVUFBQyxLQUFnQyxJQUFLLE9BQUEsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFsQyxDQUFrQzs7QUFMMUUsTUFBTSxLQUFPLGlCQUFpQixHQUcxQixjQUFjLENBQ2hCLHFCQUFxQixPQUV0Qjs7Ozs7QUFPQyxVQUFDLEtBQWdDLElBQUssT0FBQSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBNUIsQ0FBNEI7O0FBTHBFLE1BQU0sS0FBTyxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixxQkFBcUIsT0FFdEI7Ozs7O0FBT0MsVUFBQyxLQUFnQyxJQUFLLE9BQUEscUJBQXFCLENBQUMsS0FBSyxDQUFDLEVBQTVCLENBQTRCOztBQUxwRSxNQUFNLEtBQU8sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FDaEIscUJBQXFCLE9BRXRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBSZWdpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5pbXBvcnQge1xuICBsb2FkZXJMb2FkaW5nU2VsZWN0b3IsXG4gIGxvYWRlclN1Y2Nlc3NTZWxlY3RvcixcbiAgbG9hZGVyVmFsdWVTZWxlY3Rvcixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5zZWxlY3RvcnMnO1xuaW1wb3J0IHsgUmVnaW9uc1N0YXRlLCBTdGF0ZVdpdGhVc2VyLCBVc2VyU3RhdGUgfSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCB7IGdldFVzZXJTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVyU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0VXNlclN0YXRlLFxuICAoc3RhdGU6IFVzZXJTdGF0ZSkgPT4gc3RhdGUucmVnaW9uc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbFJlZ2lvbnM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIFJlZ2lvbltdXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiB7XG4gICAgcmV0dXJuIGxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0RhdGFBbmRMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICB7XG4gICAgbG9hZGVkOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgcmVnaW9uczogUmVnaW9uW107XG4gICAgY291bnRyeTogc3RyaW5nO1xuICB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiAoe1xuICAgIGxvYWRlZDogbG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSxcbiAgICBsb2FkaW5nOiBsb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpLFxuICAgIHJlZ2lvbnM6IGxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzLFxuICAgIGNvdW50cnk6IGxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmNvdW50cnksXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0NvdW50cnk6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIHN0cmluZ1xuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4gbG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSkuY291bnRyeVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiBsb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0xvYWRlZDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4gbG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==