{"version":3,"file":"checkout.effect.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/checkout/store/effects/checkout.effect.d.ts"],"sourcesContent":["import { Actions } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport * as DeprecatedCartActions from '../../../cart/store/actions/cart.action';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\nexport declare class CheckoutEffects {\n    private actions$;\n    private checkoutDeliveryConnector;\n    private checkoutPaymentConnector;\n    private checkoutConnector;\n    private contextChange$;\n    addDeliveryAddress$: Observable<UserActions.LoadUserAddresses | CheckoutActions.SetDeliveryAddress | CheckoutActions.AddDeliveryAddressFail>;\n    setDeliveryAddress$: Observable<CheckoutActions.SetDeliveryAddressSuccess | CheckoutActions.ClearSupportedDeliveryModes | CheckoutActions.ClearCheckoutDeliveryMode | CheckoutActions.ResetLoadSupportedDeliveryModesProcess | CheckoutActions.LoadSupportedDeliveryModes | CheckoutActions.SetDeliveryAddressFail>;\n    loadSupportedDeliveryModes$: Observable<CheckoutActions.LoadSupportedDeliveryModesSuccess | CheckoutActions.LoadSupportedDeliveryModesFail>;\n    clearCheckoutMiscsDataOnLanguageChange$: Observable<CheckoutActions.CheckoutClearMiscsData | CheckoutActions.ResetLoadSupportedDeliveryModesProcess>;\n    clearDeliveryModesOnCurrencyChange$: Observable<CheckoutActions.ClearSupportedDeliveryModes>;\n    clearCheckoutDataOnLogout$: Observable<CheckoutActions.ClearCheckoutData>;\n    clearCheckoutDataOnLogin$: Observable<CheckoutActions.ClearCheckoutData>;\n    setDeliveryMode$: Observable<CheckoutActions.SetDeliveryModeSuccess | CheckoutActions.SetDeliveryModeFail | DeprecatedCartActions.LoadCart>;\n    createPaymentDetails$: Observable<UserActions.LoadUserPaymentMethods | CheckoutActions.CreatePaymentDetailsSuccess | CheckoutActions.CreatePaymentDetailsFail>;\n    setPaymentDetails$: Observable<CheckoutActions.SetPaymentDetailsSuccess | CheckoutActions.SetPaymentDetailsFail>;\n    placeOrder$: Observable<CheckoutActions.PlaceOrderSuccess | GlobalMessageActions.AddMessage | CheckoutActions.PlaceOrderFail | CartActions.RemoveCart>;\n    loadCheckoutDetails$: Observable<CheckoutActions.LoadCheckoutDetailsSuccess | CheckoutActions.LoadCheckoutDetailsFail>;\n    reloadDetailsOnMergeCart$: Observable<CheckoutActions.LoadCheckoutDetails>;\n    clearCheckoutDeliveryAddress$: Observable<CheckoutActions.ClearCheckoutDeliveryAddressFail | CheckoutActions.ClearCheckoutDeliveryAddressSuccess>;\n    clearCheckoutDeliveryMode$: Observable<CheckoutActions.ClearCheckoutDeliveryModeFail | CheckoutActions.ClearCheckoutDeliveryModeSuccess | CartActions.CartProcessesDecrement | CartActions.LoadCart>;\n    constructor(actions$: Actions, checkoutDeliveryConnector: CheckoutDeliveryConnector, checkoutPaymentConnector: CheckoutPaymentConnector, checkoutConnector: CheckoutConnector);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;"}