import { inject, InjectionToken } from '@angular/core';
import { RoutingConfigService } from '../configurable-routes';
import { UrlMatcherService } from '../services/url-matcher.service';
export function getDefaultUrlMatcherFactory(routingConfigService, urlMatcherService) {
    var factory = function (route) {
        var routeName = route.data && route.data['cxRoute'];
        var routeConfig = routingConfigService.getRouteConfig(routeName);
        var paths = (routeConfig && routeConfig.paths) || [];
        return urlMatcherService.getFromPaths(paths);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.
 * The provided url matcher matches the configured `paths` from routing config.
 *
 * If this matcher doesn't fit the requirements, it can be replaced with custom matcher
 * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export var DEFAULT_URL_MATCHER = new InjectionToken('DEFAULT_URL_MATCHER', {
    providedIn: 'root',
    factory: function () {
        return getDefaultUrlMatcherFactory(inject(RoutingConfigService), inject(UrlMatcherService));
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC11cmwtbWF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9yb3V0aW5nL3VybC1tYXRjaGVyL2RlZmF1bHQtdXJsLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHcEUsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxvQkFBMEMsRUFDMUMsaUJBQW9DO0lBRXBDLElBQU0sT0FBTyxHQUFHLFVBQUMsS0FBWTtRQUMzQixJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQU0sS0FBSyxHQUFHLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkQsT0FBTyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQ25ELHFCQUFxQixFQUNyQjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRTtRQUNQLE9BQUEsMkJBQTJCLENBQ3pCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxFQUM1QixNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FDMUI7SUFIRCxDQUdDO0NBQ0osQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9jb25maWd1cmFibGUtcm91dGVzJztcbmltcG9ydCB7IFVybE1hdGNoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdXJsLW1hdGNoZXIuc2VydmljZSc7XG5pbXBvcnQgeyBVcmxNYXRjaGVyRmFjdG9yeSB9IGZyb20gJy4vdXJsLW1hdGNoZXItZmFjdG9yeSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VXJsTWF0Y2hlckZhY3RvcnkoXG4gIHJvdXRpbmdDb25maWdTZXJ2aWNlOiBSb3V0aW5nQ29uZmlnU2VydmljZSxcbiAgdXJsTWF0Y2hlclNlcnZpY2U6IFVybE1hdGNoZXJTZXJ2aWNlXG4pOiBVcmxNYXRjaGVyRmFjdG9yeSB7XG4gIGNvbnN0IGZhY3RvcnkgPSAocm91dGU6IFJvdXRlKSA9PiB7XG4gICAgY29uc3Qgcm91dGVOYW1lID0gcm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhWydjeFJvdXRlJ107XG4gICAgY29uc3Qgcm91dGVDb25maWcgPSByb3V0aW5nQ29uZmlnU2VydmljZS5nZXRSb3V0ZUNvbmZpZyhyb3V0ZU5hbWUpO1xuICAgIGNvbnN0IHBhdGhzID0gKHJvdXRlQ29uZmlnICYmIHJvdXRlQ29uZmlnLnBhdGhzKSB8fCBbXTtcbiAgICByZXR1cm4gdXJsTWF0Y2hlclNlcnZpY2UuZ2V0RnJvbVBhdGhzKHBhdGhzKTtcbiAgfTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIHdpdGggdXJsIG1hdGNoZXIgZmFjdG9yeSBmb3Igc3BhcnRhY3VzIHJvdXRlcyBjb250YWluaW5nIHByb3BlcnR5IGBkYXRhLmN4Um91dGVgLlxuICogVGhlIHByb3ZpZGVkIHVybCBtYXRjaGVyIG1hdGNoZXMgdGhlIGNvbmZpZ3VyZWQgYHBhdGhzYCBmcm9tIHJvdXRpbmcgY29uZmlnLlxuICpcbiAqIElmIHRoaXMgbWF0Y2hlciBkb2Vzbid0IGZpdCB0aGUgcmVxdWlyZW1lbnRzLCBpdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBjdXN0b20gbWF0Y2hlclxuICogb3IgYWRkaXRpb25hbCBtYXRjaGVycyBjYW4gYmUgYWRkZWQgZm9yIGEgc3BlY2lmaWMgcm91dGUuIFNlZSBmb3IgZXhhbXBsZSBQUk9EVUNUX0RFVEFJTFNfVVJMX01BVENIRVIuXG4gKlxuICogTm90ZTogTWF0Y2hlcnMgd2lsbCBcIm1hdGNoXCIgYSByb3V0ZSwgYnV0IGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgcm91dGUsIG5vciBkbyB0aGV5IGd1YXJkIHJvdXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVVJMX01BVENIRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48VXJsTWF0Y2hlckZhY3Rvcnk+KFxuICAnREVGQVVMVF9VUkxfTUFUQ0hFUicsXG4gIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogKCkgPT5cbiAgICAgIGdldERlZmF1bHRVcmxNYXRjaGVyRmFjdG9yeShcbiAgICAgICAgaW5qZWN0KFJvdXRpbmdDb25maWdTZXJ2aWNlKSxcbiAgICAgICAgaW5qZWN0KFVybE1hdGNoZXJTZXJ2aWNlKVxuICAgICAgKSxcbiAgfVxuKTtcbiJdfQ==