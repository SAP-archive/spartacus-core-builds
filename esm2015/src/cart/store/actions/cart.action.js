import { StateLoaderActions } from '../../../state/utils/index';
import { CART_DATA } from '../cart-state';
export const CREATE_CART = '[Cart] Create Cart';
export const CREATE_CART_FAIL = '[Cart] Create Cart Fail';
export const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
export const LOAD_CART = '[Cart] Load Cart';
export const LOAD_CART_FAIL = '[Cart] Load Cart Fail';
export const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
export const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
export const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
export const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
export const MERGE_CART = '[Cart] Merge Cart';
export const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
export const RESET_CART_DETAILS = '[Cart] Reset Cart Details';
export const CLEAR_EXPIRED_COUPONS = '[Cart] Clear Expired Coupon';
export const CLEAR_CART = '[Cart] Clear Cart';
export const DELETE_CART = '[Cart] Delete Cart';
export const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
export class CreateCart extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = CREATE_CART;
    }
}
export class CreateCartFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(CART_DATA, payload);
        this.payload = payload;
        this.type = CREATE_CART_FAIL;
    }
}
export class CreateCartSuccess extends StateLoaderActions.LoaderSuccessAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = CREATE_CART_SUCCESS;
    }
}
export class AddEmailToCart extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART;
    }
}
export class AddEmailToCartFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(CART_DATA, payload);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART_FAIL;
    }
}
export class AddEmailToCartSuccess extends StateLoaderActions.LoaderSuccessAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = ADD_EMAIL_TO_CART_SUCCESS;
    }
}
export class LoadCart extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = LOAD_CART;
    }
}
export class LoadCartFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(CART_DATA, payload);
        this.payload = payload;
        this.type = LOAD_CART_FAIL;
    }
}
export class LoadCartSuccess extends StateLoaderActions.LoaderSuccessAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = LOAD_CART_SUCCESS;
    }
}
export class MergeCart {
    constructor(payload) {
        this.payload = payload;
        this.type = MERGE_CART;
    }
}
export class MergeCartSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = MERGE_CART_SUCCESS;
    }
}
export class ResetCartDetails {
    constructor() {
        this.type = RESET_CART_DETAILS;
    }
}
export class ClearExpiredCoupons {
    constructor(payload) {
        this.payload = payload;
        this.type = CLEAR_EXPIRED_COUPONS;
    }
}
export class ClearCart extends StateLoaderActions.LoaderResetAction {
    constructor() {
        super(CART_DATA);
        this.type = CLEAR_CART;
    }
}
export class DeleteCart extends StateLoaderActions.LoaderLoadAction {
    constructor(payload) {
        super(CART_DATA);
        this.payload = payload;
        this.type = DELETE_CART;
    }
}
export class DeleteCartFail extends StateLoaderActions.LoaderFailAction {
    constructor(payload) {
        super(CART_DATA, payload);
        this.payload = payload;
        this.type = DELETE_CART_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,