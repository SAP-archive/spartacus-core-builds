import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getAnonymousConsentState } from './feature.selector';
const ɵ0 = state => state.templates;
export const getAnonymousConsentTemplatesState = createSelector(getAnonymousConsentState, ɵ0);
export const getAnonymousConsentTemplatesValue = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderValueSelector);
export const getAnonymousConsentTemplatesLoading = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderLoadingSelector);
export const getAnonymousConsentTemplatesSuccess = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderSuccessSelector);
export const getAnonymousConsentTemplatesError = createSelector(getAnonymousConsentTemplatesState, StateLoaderSelectors.loaderErrorSelector);
export const getAnonymousConsentTemplate = (templateCode) => {
    return createSelector(getAnonymousConsentTemplatesValue, templates => {
        return templates
            ? templates.find(template => template.id === templateCode)
            : null;
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtdGVtcGxhdGVzLnNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9hbm9ueW1vdXMtY29uc2VudHMvc3RvcmUvc2VsZWN0b3JzL2Fub255bW91cy1jb25zZW50LXRlbXBsYXRlcy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHbEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7V0FPNUQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUztBQUwxQixNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FHMUMsY0FBYyxDQUNoQix3QkFBd0IsS0FFekIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUcxQyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FDekMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUc1QyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FDM0MsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUc1QyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FDM0MsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUcxQyxjQUFjLENBQ2hCLGlDQUFpQyxFQUNqQyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FDekMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLFlBQW9CLEVBQzJDLEVBQUU7SUFDakUsT0FBTyxjQUFjLENBQ25CLGlDQUFpQyxFQUNqQyxTQUFTLENBQUMsRUFBRTtRQUNWLE9BQU8sU0FBUztZQUNkLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxZQUFZLENBQUM7WUFDMUQsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNYLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDb25zZW50VGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jb25zZW50Lm1vZGVsJztcbmltcG9ydCB7IFN0YXRlTG9hZGVyU2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7IFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlJztcbmltcG9ydCB7IGdldEFub255bW91c0NvbnNlbnRTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBMb2FkZXJTdGF0ZTxDb25zZW50VGVtcGxhdGVbXT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFN0YXRlLFxuICBzdGF0ZSA9PiBzdGF0ZS50ZW1wbGF0ZXNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzVmFsdWU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBDb25zZW50VGVtcGxhdGVbXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3RhdGUsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzU3VjY2VzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1N0YXRlLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbm9ueW1vdXNDb25zZW50VGVtcGxhdGVzRXJyb3I6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdGF0ZSxcbiAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyRXJyb3JTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldEFub255bW91c0NvbnNlbnRUZW1wbGF0ZSA9IChcbiAgdGVtcGxhdGVDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsIENvbnNlbnRUZW1wbGF0ZT4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0QW5vbnltb3VzQ29uc2VudFRlbXBsYXRlc1ZhbHVlLFxuICAgIHRlbXBsYXRlcyA9PiB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVzXG4gICAgICAgID8gdGVtcGxhdGVzLmZpbmQodGVtcGxhdGUgPT4gdGVtcGxhdGUuaWQgPT09IHRlbXBsYXRlQ29kZSlcbiAgICAgICAgOiBudWxsO1xuICAgIH1cbiAgKTtcbn07XG4iXX0=