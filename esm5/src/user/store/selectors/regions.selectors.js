import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
var ɵ0 = function (state) { return state.regions; };
export var getRegionsLoaderState = createSelector(getUserState, ɵ0);
var ɵ1 = function (state) {
    return StateLoaderSelectors.loaderValueSelector(state).entities;
};
export var getAllRegions = createSelector(getRegionsLoaderState, ɵ1);
var ɵ2 = function (state) { return ({
    loaded: StateLoaderSelectors.loaderSuccessSelector(state),
    loading: StateLoaderSelectors.loaderLoadingSelector(state),
    regions: StateLoaderSelectors.loaderValueSelector(state).entities,
    country: StateLoaderSelectors.loaderValueSelector(state).country,
}); };
export var getRegionsDataAndLoading = createSelector(getRegionsLoaderState, ɵ2);
var ɵ3 = function (state) {
    return StateLoaderSelectors.loaderValueSelector(state).country;
};
export var getRegionsCountry = createSelector(getRegionsLoaderState, ɵ3);
var ɵ4 = function (state) {
    return StateLoaderSelectors.loaderLoadingSelector(state);
};
export var getRegionsLoading = createSelector(getRegionsLoaderState, ɵ4);
var ɵ5 = function (state) {
    return StateLoaderSelectors.loaderSuccessSelector(state);
};
export var getRegionsLoaded = createSelector(getRegionsLoaderState, ɵ5);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvcmVnaW9ucy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO1NBT2hELFVBQUMsS0FBZ0IsSUFBSyxPQUFBLEtBQUssQ0FBQyxPQUFPLEVBQWIsQ0FBYTtBQUxyQyxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FHOUIsY0FBYyxDQUNoQixZQUFZLEtBRWIsQ0FBQztTQU9BLFVBQUMsS0FBZ0M7SUFDL0IsT0FBTyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbEUsQ0FBQztBQVBILE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FHdEIsY0FBYyxDQUNoQixxQkFBcUIsS0FJdEIsQ0FBQztTQVlBLFVBQUMsS0FBZ0MsSUFBSyxPQUFBLENBQUM7SUFDckMsTUFBTSxFQUFFLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUN6RCxPQUFPLEVBQUUsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQzFELE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0lBQ2pFLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPO0NBQ2pFLENBQUMsRUFMb0MsQ0FLcEM7QUFmSixNQUFNLENBQUMsSUFBTSx3QkFBd0IsR0FRakMsY0FBYyxDQUNoQixxQkFBcUIsS0FPdEIsQ0FBQztTQU9BLFVBQUMsS0FBZ0M7SUFDL0IsT0FBQSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPO0FBQXZELENBQXVEO0FBTjNELE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQ2hCLHFCQUFxQixLQUd0QixDQUFDO1NBT0EsVUFBQyxLQUFnQztJQUMvQixPQUFBLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQUFqRCxDQUFpRDtBQU5yRCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixxQkFBcUIsS0FHdEIsQ0FBQztTQU9BLFVBQUMsS0FBZ0M7SUFDL0IsT0FBQSxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFBakQsQ0FBaUQ7QUFOckQsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FDaEIscUJBQXFCLEtBR3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFJlZ2lvbiB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2FkZHJlc3MubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVMb2FkZXJTZWxlY3RvcnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHsgUmVnaW9uc1N0YXRlLCBTdGF0ZVdpdGhVc2VyLCBVc2VyU3RhdGUgfSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCB7IGdldFVzZXJTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVyU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0VXNlclN0YXRlLFxuICAoc3RhdGU6IFVzZXJTdGF0ZSkgPT4gc3RhdGUucmVnaW9uc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbFJlZ2lvbnM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIFJlZ2lvbltdXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiB7XG4gICAgcmV0dXJuIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0RhdGFBbmRMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICB7XG4gICAgbG9hZGVkOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgcmVnaW9uczogUmVnaW9uW107XG4gICAgY291bnRyeTogc3RyaW5nO1xuICB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PiAoe1xuICAgIGxvYWRlZDogU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSxcbiAgICBsb2FkaW5nOiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpLFxuICAgIHJlZ2lvbnM6IFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmVudGl0aWVzLFxuICAgIGNvdW50cnk6IFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLmNvdW50cnksXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0NvdW50cnk6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIHN0cmluZ1xuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0xvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNMb2FkZWQ6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKVxuKTtcbiJdfQ==