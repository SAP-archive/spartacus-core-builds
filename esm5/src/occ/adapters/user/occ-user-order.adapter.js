import { __decorate } from "tslib";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';
import { FeatureConfigService } from '../../../features-config/services/feature-config.service';
import { CONSIGNMENT_TRACKING_NORMALIZER, ORDER_HISTORY_NORMALIZER, ORDER_RETURNS_NORMALIZER, ORDER_RETURN_REQUEST_INPUT_SERIALIZER, ORDER_RETURN_REQUEST_NORMALIZER, } from '../../../user/connectors/order/converters';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { InterceptorUtil, USE_CLIENT_TOKEN, } from '../../utils/interceptor-util';
import { OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, } from '../../utils/occ-constants';
var OccUserOrderAdapter = /** @class */ (function () {
    function OccUserOrderAdapter(http, occEndpoints, converter, featureConfigService) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.featureConfigService = featureConfigService;
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccUserOrderAdapter.prototype.getOrderEndpoint = function (userId) {
        var orderEndpoint = 'users/' + userId + '/orders';
        return this.occEndpoints.getEndpoint(orderEndpoint);
    };
    OccUserOrderAdapter.prototype.load = function (userId, orderCode) {
        // TODO: Deprecated, remove Issue #4125
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyLoad(userId, orderCode);
        }
        var url = this.occEndpoints.getUrl('orderDetail', {
            userId: userId,
            orderId: orderCode,
        });
        var headers = new HttpHeaders();
        if (userId === OCC_USER_ID_ANONYMOUS) {
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        }
        return this.http
            .get(url, { headers: headers })
            .pipe(this.converter.pipeable(ORDER_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.loadHistory = function (userId, pageSize, currentPage, sort) {
        // TODO: Deprecated, remove Issue #4125
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyLoadHistory(userId, pageSize, currentPage, sort);
        }
        var params = {};
        if (pageSize) {
            params['pageSize'] = pageSize.toString();
        }
        if (currentPage) {
            params['currentPage'] = currentPage.toString();
        }
        if (sort) {
            params['sort'] = sort.toString();
        }
        var url = this.occEndpoints.getUrl('orderHistory', { userId: userId }, params);
        return this.http
            .get(url)
            .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
    };
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccUserOrderAdapter.prototype.legacyLoad = function (userId, orderCode) {
        var url = this.getOrderEndpoint(userId) + '/' + orderCode;
        var params = new HttpParams({
            fromString: 'fields=FULL',
        });
        return this.http
            .get(url, {
            params: params,
        })
            .pipe(this.converter.pipeable(ORDER_NORMALIZER));
    };
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccUserOrderAdapter.prototype.legacyLoadHistory = function (userId, pageSize, currentPage, sort) {
        var url = this.getOrderEndpoint(userId);
        var params = new HttpParams();
        if (pageSize) {
            params = params.set('pageSize', pageSize.toString());
        }
        if (currentPage) {
            params = params.set('currentPage', currentPage.toString());
        }
        if (sort) {
            params = params.set('sort', sort);
        }
        return this.http
            .get(url, { params: params })
            .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.getConsignmentTracking = function (orderCode, consignmentCode, userId) {
        if (userId === void 0) { userId = OCC_USER_ID_CURRENT; }
        var url = this.occEndpoints.getUrl('consignmentTracking', {
            userId: userId,
            orderCode: orderCode,
            consignmentCode: consignmentCode,
        });
        return this.http
            .get(url)
            .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.cancel = function (userId, orderCode, cancelRequestInput) {
        var url = this.occEndpoints.getUrl('cancelOrder', {
            userId: userId,
            orderId: orderCode,
        });
        var headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        return this.http
            .post(url, cancelRequestInput, { headers: headers })
            .pipe(catchError(function (error) { return throwError(error); }));
    };
    OccUserOrderAdapter.prototype.createReturnRequest = function (userId, returnRequestInput) {
        var url = this.occEndpoints.getUrl('returnOrder', {
            userId: userId,
        });
        var headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        returnRequestInput = this.converter.convert(returnRequestInput, ORDER_RETURN_REQUEST_INPUT_SERIALIZER);
        return this.http.post(url, returnRequestInput, { headers: headers }).pipe(catchError(function (error) { return throwError(error); }), this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.loadReturnRequestList = function (userId, pageSize, currentPage, sort) {
        var params = {};
        if (pageSize) {
            params['pageSize'] = pageSize.toString();
        }
        if (currentPage) {
            params['currentPage'] = currentPage.toString();
        }
        if (sort) {
            params['sort'] = sort.toString();
        }
        var url = this.occEndpoints.getUrl('orderReturns', { userId: userId }, params);
        return this.http
            .get(url)
            .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.loadReturnRequestDetail = function (userId, returnRequestCode) {
        var url = this.occEndpoints.getUrl('orderReturnDetail', {
            userId: userId,
            returnRequestCode: returnRequestCode,
        });
        return this.http
            .get(url)
            .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));
    };
    OccUserOrderAdapter.prototype.cancelReturnRequest = function (userId, returnRequestCode, returnRequestModification) {
        var url = this.occEndpoints.getUrl('cancelReturn', {
            userId: userId,
            returnRequestCode: returnRequestCode,
        });
        var headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        return this.http
            .patch(url, returnRequestModification, { headers: headers })
            .pipe(catchError(function (error) { return throwError(error); }));
    };
    OccUserOrderAdapter.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService },
        { type: FeatureConfigService }
    ]; };
    OccUserOrderAdapter = __decorate([
        Injectable()
    ], OccUserOrderAdapter);
    return OccUserOrderAdapter;
}());
export { OccUserOrderAdapter };
//# sourceMappingURL=data:application/json;base64,