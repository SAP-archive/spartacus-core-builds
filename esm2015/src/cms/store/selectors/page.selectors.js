/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { getCmsState } from './feature.selectors';
import { PageType } from '../../../model/cms.model';
/** @type {?} */
export const getPageEntitiesSelector = (state) => state.pageData.entities;
/** @type {?} */
export const getIndexByType = (index, type) => {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
/** @type {?} */
export const getPageComponentTypesSelector = (page) => {
    /** @type {?} */
    const componentTypes = new Set();
    if (page && page.slots) {
        for (const slot of Object.keys(page.slots)) {
            for (const component of page.slots[slot].components || []) {
                componentTypes.add(component.flexType);
            }
        }
    }
    return Array.from(componentTypes);
};
/** @type {?} */
export const getPageState = createSelector(getCmsState, (state) => state.page);
/** @type {?} */
export const getPageStateIndex = createSelector(getPageState, (page) => page.index);
/** @type {?} */
export const getIndex = (pageContext) => createSelector(getPageStateIndex, (index) => getIndexByType(index, pageContext.type));
/** @type {?} */
export const getIndexEntity = (pageContext) => createSelector(getIndex(pageContext), index => index.entities[pageContext.id] || {});
/** @type {?} */
export const getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
/** @type {?} */
export const getPageData = (pageContext) => createSelector(getPageEntities, getIndexEntity(pageContext), (entities, entity) => entities[entity.value]);
/** @type {?} */
export const getPageComponentTypes = (pageContext) => createSelector(getPageData(pageContext), pageData => getPageComponentTypesSelector(pageData));
/** @type {?} */
export const currentSlotSelectorFactory = (pageContext, position) => {
    return createSelector(getPageData(pageContext), entity => {
        if (entity) {
            return entity.slots[position];
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9wYWdlLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFRL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFcEQsTUFBTSxPQUFPLHVCQUF1QixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQzFELEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUTs7QUFDekIsTUFBTSxPQUFPLGNBQWMsR0FBRyxDQUM1QixLQUFnQixFQUNoQixJQUFjLEVBQ2EsRUFBRTtJQUM3QixRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUNELEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUNELEtBQUssUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQztTQUN2QjtRQUNELEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtLQUNGO0lBQ0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUMxQixDQUFDOztBQUVELE1BQU0sT0FBTyw2QkFBNkIsR0FBNkIsQ0FDckUsSUFBVSxFQUNWLEVBQUU7O1VBQ0ksY0FBYyxHQUFHLElBQUksR0FBRyxFQUFVO0lBQ3hDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDdEIsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxLQUFLLE1BQU0sU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLEVBQUUsRUFBRTtnQkFDekQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEM7U0FDRjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FHckIsY0FBYyxDQUNoQixXQUFXLEVBQ1gsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2hDOztBQUVELE1BQU0sT0FBTyxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixZQUFZLEVBQ1osQ0FBQyxJQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ2hDOztBQUVELE1BQU0sT0FBTyxRQUFRLEdBQUcsQ0FDdEIsV0FBd0IsRUFDbUMsRUFBRSxDQUM3RCxjQUFjLENBQ1osaUJBQWlCLEVBQ2pCLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQzlEOztBQUVILE1BQU0sT0FBTyxjQUFjLEdBQUcsQ0FDNUIsV0FBd0IsRUFDNkIsRUFBRSxDQUN2RCxjQUFjLENBQ1osUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUNyQixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FDOUM7O0FBRUgsTUFBTSxPQUFPLGVBQWUsR0FHeEIsY0FBYyxDQUNoQixZQUFZLEVBQ1osdUJBQXVCLENBQ3hCOztBQUVELE1BQU0sT0FBTyxXQUFXLEdBQUcsQ0FDekIsV0FBd0IsRUFDYyxFQUFFLENBQ3hDLGNBQWMsQ0FDWixlQUFlLEVBQ2YsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUMzQixDQUFDLFFBQWdDLEVBQUUsTUFBMkIsRUFBRSxFQUFFLENBQ2hFLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3pCOztBQUVILE1BQU0sT0FBTyxxQkFBcUIsR0FBRyxDQUNuQyxXQUF3QixFQUNrQixFQUFFLENBQzVDLGNBQWMsQ0FDWixXQUFXLENBQUMsV0FBVyxDQUFDLEVBQ3hCLFFBQVEsQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQ3BEOztBQUVILE1BQU0sT0FBTywwQkFBMEIsR0FBRyxDQUN4QyxXQUF3QixFQUN4QixRQUFnQixFQUNpQyxFQUFFO0lBQ25ELE9BQU8sY0FBYyxDQUNuQixXQUFXLENBQUMsV0FBVyxDQUFDLEVBQ3hCLE1BQU0sQ0FBQyxFQUFFO1FBQ1AsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuaW1wb3J0IHsgQ21zU3RhdGUsIFBhZ2VTdGF0ZSwgU3RhdGVXaXRoQ21zLCBJbmRleFR5cGUgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuaW1wb3J0IHsgUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9yb3V0aW5nJztcbmltcG9ydCB7IEVudGl0eUxvYWRlclN0YXRlLCBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlJztcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uLy4uL21vZGVsL2NvbnRlbnQtc2xvdC1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wYWdlLm1vZGVsJztcblxuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcbmltcG9ydCB7IFBhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VFbnRpdGllc1NlbGVjdG9yID0gKHN0YXRlOiBQYWdlU3RhdGUpID0+XG4gIHN0YXRlLnBhZ2VEYXRhLmVudGl0aWVzO1xuZXhwb3J0IGNvbnN0IGdldEluZGV4QnlUeXBlID0gKFxuICBpbmRleDogSW5kZXhUeXBlLFxuICB0eXBlOiBQYWdlVHlwZVxuKTogRW50aXR5TG9hZGVyU3RhdGU8c3RyaW5nPiA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUGFnZVR5cGUuQ09OVEVOVF9QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXguY29udGVudDtcbiAgICB9XG4gICAgY2FzZSBQYWdlVHlwZS5QUk9EVUNUX1BBR0U6IHtcbiAgICAgIHJldHVybiBpbmRleC5wcm9kdWN0O1xuICAgIH1cbiAgICBjYXNlIFBhZ2VUeXBlLkNBVEVHT1JZX1BBR0U6IHtcbiAgICAgIHJldHVybiBpbmRleC5jYXRlZ29yeTtcbiAgICB9XG4gICAgY2FzZSBQYWdlVHlwZS5DQVRBTE9HX1BBR0U6IHtcbiAgICAgIHJldHVybiBpbmRleC5jYXRhbG9nO1xuICAgIH1cbiAgfVxuICByZXR1cm4geyBlbnRpdGllczoge30gfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlQ29tcG9uZW50VHlwZXNTZWxlY3RvcjogKHBhZ2U6IFBhZ2UpID0+IHN0cmluZ1tdID0gKFxuICBwYWdlOiBQYWdlXG4pID0+IHtcbiAgY29uc3QgY29tcG9uZW50VHlwZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgaWYgKHBhZ2UgJiYgcGFnZS5zbG90cykge1xuICAgIGZvciAoY29uc3Qgc2xvdCBvZiBPYmplY3Qua2V5cyhwYWdlLnNsb3RzKSkge1xuICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgcGFnZS5zbG90c1tzbG90XS5jb21wb25lbnRzIHx8IFtdKSB7XG4gICAgICAgIGNvbXBvbmVudFR5cGVzLmFkZChjb21wb25lbnQuZmxleFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShjb21wb25lbnRUeXBlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFnZVN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDbXMsXG4gIFBhZ2VTdGF0ZVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDbXNTdGF0ZSxcbiAgKHN0YXRlOiBDbXNTdGF0ZSkgPT4gc3RhdGUucGFnZVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VTdGF0ZUluZGV4OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDbXMsXG4gIEluZGV4VHlwZVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRQYWdlU3RhdGUsXG4gIChwYWdlOiBQYWdlU3RhdGUpID0+IHBhZ2UuaW5kZXhcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRJbmRleCA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgRW50aXR5TG9hZGVyU3RhdGU8c3RyaW5nPj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0UGFnZVN0YXRlSW5kZXgsXG4gICAgKGluZGV4OiBJbmRleFR5cGUpID0+IGdldEluZGV4QnlUeXBlKGluZGV4LCBwYWdlQ29udGV4dC50eXBlKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0SW5kZXhFbnRpdHkgPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIExvYWRlclN0YXRlPHN0cmluZz4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldEluZGV4KHBhZ2VDb250ZXh0KSxcbiAgICBpbmRleCA9PiBpbmRleC5lbnRpdGllc1twYWdlQ29udGV4dC5pZF0gfHwge31cbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VFbnRpdGllczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICB7IFtpZDogc3RyaW5nXTogUGFnZSB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFBhZ2VTdGF0ZSxcbiAgZ2V0UGFnZUVudGl0aWVzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlRGF0YSA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgUGFnZT4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0UGFnZUVudGl0aWVzLFxuICAgIGdldEluZGV4RW50aXR5KHBhZ2VDb250ZXh0KSxcbiAgICAoZW50aXRpZXM6IHsgW2lkOiBzdHJpbmddOiBQYWdlIH0sIGVudGl0eTogTG9hZGVyU3RhdGU8c3RyaW5nPikgPT5cbiAgICAgIGVudGl0aWVzW2VudGl0eS52YWx1ZV1cbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VDb21wb25lbnRUeXBlcyA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0XG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgc3RyaW5nW10+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFBhZ2VEYXRhKHBhZ2VDb250ZXh0KSxcbiAgICBwYWdlRGF0YSA9PiBnZXRQYWdlQ29tcG9uZW50VHlwZXNTZWxlY3RvcihwYWdlRGF0YSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGN1cnJlbnRTbG90U2VsZWN0b3JGYWN0b3J5ID0gKFxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQsXG4gIHBvc2l0aW9uOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDb250ZW50U2xvdERhdGE+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFBhZ2VEYXRhKHBhZ2VDb250ZXh0KSxcbiAgICBlbnRpdHkgPT4ge1xuICAgICAgaWYgKGVudGl0eSkge1xuICAgICAgICByZXR1cm4gZW50aXR5LnNsb3RzW3Bvc2l0aW9uXTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuIl19