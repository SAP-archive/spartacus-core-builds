import { __decorate } from "tslib";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, pluck } from 'rxjs/operators';
import { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';
import { FeatureConfigService } from '../../../features-config/services/feature-config.service';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { InterceptorUtil, USE_CLIENT_TOKEN, } from '../../utils/interceptor-util';
import { OCC_USER_ID_ANONYMOUS, OCC_CART_ID_CURRENT, } from '../../utils/occ-constants';
// TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.
const DETAILS_PARAMS = 'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +
    'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +
    'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +
    'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +
    'appliedVouchers,productDiscounts(formattedValue),user';
let OccCartAdapter = class OccCartAdapter {
    constructor(http, occEndpointsService, converterService, featureConfigService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
        this.featureConfigService = featureConfigService;
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    getCartEndpoint(userId) {
        const cartEndpoint = `users/${userId}/carts/`;
        return this.occEndpointsService.getEndpoint(cartEndpoint);
    }
    loadAll(userId) {
        // TODO: Deprecated, remove Issue: #4125.
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyLoadAll(userId);
        }
        return this.http
            .get(this.occEndpointsService.getUrl('carts', { userId }))
            .pipe(pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
    }
    load(userId, cartId) {
        if (cartId === OCC_CART_ID_CURRENT) {
            return this.loadAll(userId).pipe(map((carts) => {
                if (carts) {
                    const activeCart = carts.find((cart) => {
                        return cart['saveTime'] === undefined;
                    });
                    return activeCart;
                }
                else {
                    return null;
                }
            }));
        }
        else {
            // TODO: Deprecated, remove Issue: #4125.
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyLoad(userId, cartId);
            }
            return this.http
                .get(this.occEndpointsService.getUrl('cart', { userId, cartId }))
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        }
    }
    create(userId, oldCartId, toMergeCartGuid) {
        const toAdd = JSON.stringify({});
        // TODO: Deprecated, remove Issue: #4125.
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);
        }
        let params = {};
        if (oldCartId) {
            params = { oldCartId: oldCartId };
        }
        if (toMergeCartGuid) {
            params['toMergeCartGuid'] = toMergeCartGuid;
        }
        return this.http
            .post(this.occEndpointsService.getUrl('createCart', { userId }, params), toAdd)
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    }
    delete(userId, cartId) {
        let headers = new HttpHeaders();
        if (userId === OCC_USER_ID_ANONYMOUS) {
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        }
        return this.http.delete(this.occEndpointsService.getUrl('deleteCart', { userId, cartId }), { headers });
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    legacyLoadAll(userId) {
        const url = this.getCartEndpoint(userId);
        const params = new HttpParams({
            fromString: `fields=carts(${DETAILS_PARAMS},saveTime)`,
        });
        return this.http
            .get(url, { params })
            .pipe(pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    legacyLoad(userId, cartId) {
        const url = this.getCartEndpoint(userId) + cartId;
        const params = new HttpParams({
            fromString: `fields=${DETAILS_PARAMS}`,
        });
        return this.http
            .get(url, { params })
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid) {
        const url = this.getCartEndpoint(userId);
        let queryString = `fields=${DETAILS_PARAMS}`;
        if (oldCartId) {
            queryString = `${queryString}&oldCartId=${oldCartId}`;
        }
        if (toMergeCartGuid) {
            queryString = `${queryString}&toMergeCartGuid=${toMergeCartGuid}`;
        }
        const params = new HttpParams({
            fromString: queryString,
        });
        return this.http
            .post(url, toAdd, { params })
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    }
    addEmail(userId, cartId, email) {
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        const httpParams = new HttpParams().set('email', email);
        const url = this.occEndpointsService.getUrl('addEmail', {
            userId,
            cartId,
        });
        return this.http.put(url, httpParams, { headers });
    }
};
OccCartAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService },
    { type: FeatureConfigService }
];
OccCartAdapter = __decorate([
    Injectable()
], OccCartAdapter);
export { OccCartAdapter };
//# sourceMappingURL=data:application/json;base64,