import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { combineLatest } from 'rxjs';
import { map, pluck, shareReplay, take, tap, withLatestFrom, } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { ActiveCartService } from '../../cart/facade/active-cart.service';
import { B2BPaymentTypeEnum } from '../../model/cart.model';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';
import { CheckoutActions } from '../store/actions/index';
import { GET_PAYMENT_TYPES_PROCESS_ID, } from '../store/checkout-state';
import { CheckoutSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/facade/auth.service";
import * as i3 from "../../cart/facade/active-cart.service";
let PaymentTypeService = class PaymentTypeService {
    constructor(checkoutStore, authService, activeCartService) {
        this.checkoutStore = checkoutStore;
        this.authService = authService;
        this.activeCartService = activeCartService;
    }
    /**
     * Get payment types
     */
    getPaymentTypes() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getAllPaymentTypes), withLatestFrom(this.checkoutStore.pipe(select(getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID)))), tap(([_, loadingState]) => {
            if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                this.loadPaymentTypes();
            }
        }), pluck(0), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * Load the supported payment types
     */
    loadPaymentTypes() {
        this.checkoutStore.dispatch(new CheckoutActions.LoadPaymentTypes());
    }
    /**
     * Set payment type to cart
     * @param typeCode
     * @param poNumber : purchase order number
     */
    setPaymentType(typeCode, poNumber) {
        let cartId;
        this.activeCartService
            .getActiveCartId()
            .pipe(take(1))
            .subscribe((activeCartId) => (cartId = activeCartId));
        this.authService.invokeWithUserId((userId) => {
            if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {
                this.checkoutStore.dispatch(new CheckoutActions.SetPaymentType({
                    userId: userId,
                    cartId: cartId,
                    typeCode: typeCode,
                    poNumber: poNumber,
                }));
            }
        });
    }
    /**
     * Get the selected payment type
     */
    getSelectedPaymentType() {
        return combineLatest([
            this.activeCartService.getActive(),
            this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedPaymentType)),
        ]).pipe(tap(([cart, selected]) => {
            if (selected === undefined) {
                // in b2b, cart always has paymentType (default value 'CARD')
                if (cart && cart.paymentType) {
                    this.checkoutStore.dispatch(new CheckoutActions.SetPaymentTypeSuccess(cart));
                }
            }
        }), map(([, selected]) => selected));
    }
    /**
     * Get whether the selected payment type is "ACCOUNT" payment
     */
    isAccountPayment() {
        return this.getSelectedPaymentType().pipe(map((selected) => selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT));
    }
    /**
     * Get PO Number
     */
    getPoNumber() {
        return combineLatest([
            this.activeCartService.getActive(),
            this.checkoutStore.pipe(select(CheckoutSelectors.getPoNumer)),
        ]).pipe(tap(([cart, po]) => {
            if (po === undefined && cart && cart.purchaseOrderNumber) {
                this.checkoutStore.dispatch(new CheckoutActions.SetPaymentTypeSuccess(cart));
            }
        }), map(([_, po]) => po));
    }
};
PaymentTypeService.ctorParameters = () => [
    { type: Store },
    { type: AuthService },
    { type: ActiveCartService }
];
PaymentTypeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaymentTypeService_Factory() { return new PaymentTypeService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.ActiveCartService)); }, token: PaymentTypeService, providedIn: "root" });
PaymentTypeService = __decorate([
    Injectable({
        providedIn: 'root',
    })
], PaymentTypeService);
export { PaymentTypeService };
//# sourceMappingURL=data:application/json;base64,