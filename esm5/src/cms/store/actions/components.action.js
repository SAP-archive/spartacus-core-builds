import { __extends } from "tslib";
import { StateEntityLoaderActions } from '../../../state/utils/index';
import { COMPONENT_ENTITY } from '../cms-state';
export var LOAD_CMS_COMPONENT = '[Cms] Load Component';
export var LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
export var LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
export var CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
var LoadCmsComponent = /** @class */ (function (_super) {
    __extends(LoadCmsComponent, _super);
    function LoadCmsComponent(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT;
        return _this;
    }
    return LoadCmsComponent;
}(StateEntityLoaderActions.EntityLoadAction));
export { LoadCmsComponent };
var LoadCmsComponentFail = /** @class */ (function (_super) {
    __extends(LoadCmsComponentFail, _super);
    function LoadCmsComponentFail(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid, payload.error) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT_FAIL;
        return _this;
    }
    return LoadCmsComponentFail;
}(StateEntityLoaderActions.EntityFailAction));
export { LoadCmsComponentFail };
var LoadCmsComponentSuccess = /** @class */ (function (_super) {
    __extends(LoadCmsComponentSuccess, _super);
    function LoadCmsComponentSuccess(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, payload.uid || payload.component.uid || '') || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_COMPONENT_SUCCESS;
        return _this;
    }
    return LoadCmsComponentSuccess;
}(StateEntityLoaderActions.EntitySuccessAction));
export { LoadCmsComponentSuccess };
var CmsGetComponentFromPage = /** @class */ (function (_super) {
    __extends(CmsGetComponentFromPage, _super);
    function CmsGetComponentFromPage(payload) {
        var _this = _super.call(this, COMPONENT_ENTITY, [].concat(payload).map(function (cmp) { return cmp.component.uid; })) || this;
        _this.payload = payload;
        _this.type = CMS_GET_COMPONENT_FROM_PAGE;
        return _this;
    }
    return CmsGetComponentFromPage;
}(StateEntityLoaderActions.EntitySuccessAction));
export { CmsGetComponentFromPage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL2FjdGlvbnMvY29tcG9uZW50cy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN6RCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRywyQkFBMkIsQ0FBQztBQUNuRSxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FBRyw4QkFBOEIsQ0FBQztBQUN6RSxNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRywrQkFBK0IsQ0FBQztBQUUzRTtJQUFzQyxvQ0FBeUM7SUFFN0UsMEJBQ1MsT0FHTjtRQUpILFlBTUUsa0JBQU0sZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUNyQztRQU5RLGFBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxVQUFJLEdBQUcsa0JBQWtCLENBQUM7O0lBUW5DLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFWRCxDQUFzQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsR0FVOUU7O0FBRUQ7SUFBMEMsd0NBQXlDO0lBRWpGLDhCQUNTLE9BQThEO1FBRHZFLFlBR0Usa0JBQU0sZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQ3BEO1FBSFEsYUFBTyxHQUFQLE9BQU8sQ0FBdUQ7UUFGOUQsVUFBSSxHQUFHLHVCQUF1QixDQUFDOztJQUt4QyxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBUEQsQ0FBMEMsd0JBQXdCLENBQUMsZ0JBQWdCLEdBT2xGOztBQUVEO0lBRVUsMkNBQTRDO0lBRXBELGlDQUNTLE9BSU47UUFMSCxZQU9FLGtCQUFNLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLFNBQ3BFO1FBUFEsYUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFVBQUksR0FBRywwQkFBMEIsQ0FBQzs7SUFTM0MsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQWJELENBRVUsd0JBQXdCLENBQUMsbUJBQW1CLEdBV3JEOztBQUVEO0lBRVUsMkNBQTRDO0lBRXBELGlDQUNTLE9BRXlDO1FBSGxELFlBS0Usa0JBQU0sZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDLFNBQzFFO1FBTFEsYUFBTyxHQUFQLE9BQU8sQ0FFa0M7UUFKekMsVUFBSSxHQUFHLDJCQUEyQixDQUFDOztJQU81QyxDQUFDO0lBQ0gsOEJBQUM7QUFBRCxDQUFDLEFBWEQsQ0FFVSx3QkFBd0IsQ0FBQyxtQkFBbUIsR0FTckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9yb3V0aW5nL2luZGV4JztcbmltcG9ydCB7IFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IENPTVBPTkVOVF9FTlRJVFkgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UID0gJ1tDbXNdIExvYWQgQ29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlRfRkFJTCA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUyA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0UgPSAnW0Ntc10gR2V0IENvbXBvbmVudCBmcm9tIFBhZ2UnO1xuXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudCBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX0NPTVBPTkVOVDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVpZDogc3RyaW5nO1xuICAgICAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgcGF5bG9hZC51aWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQ21zQ29tcG9uZW50RmFpbCBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX0NPTVBPTkVOVF9GQUlMO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1aWQ6IHN0cmluZzsgZXJyb3I6IGFueTsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgcGF5bG9hZC51aWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQ21zQ29tcG9uZW50U3VjY2VzczxcbiAgVCBleHRlbmRzIENtc0NvbXBvbmVudFxuPiBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX0NPTVBPTkVOVF9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgY29tcG9uZW50OiBUO1xuICAgICAgdWlkPzogc3RyaW5nO1xuICAgICAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgcGF5bG9hZC51aWQgfHwgcGF5bG9hZC5jb21wb25lbnQudWlkIHx8ICcnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ21zR2V0Q29tcG9uZW50RnJvbVBhZ2U8XG4gIFQgZXh0ZW5kcyBDbXNDb21wb25lbnRcbj4gZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0U7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOlxuICAgICAgfCB7IGNvbXBvbmVudDogVDsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1cbiAgICAgIHwgeyBjb21wb25lbnQ6IFQ7IHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCB9W11cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgW10uY29uY2F0KHBheWxvYWQpLm1hcChjbXAgPT4gY21wLmNvbXBvbmVudC51aWQpKTtcbiAgfVxufVxuXG4vLyBhY3Rpb24gdHlwZXNcbmV4cG9ydCB0eXBlIENtc0NvbXBvbmVudEFjdGlvbjxUIGV4dGVuZHMgQ21zQ29tcG9uZW50PiA9XG4gIHwgTG9hZENtc0NvbXBvbmVudFxuICB8IExvYWRDbXNDb21wb25lbnRGYWlsXG4gIHwgTG9hZENtc0NvbXBvbmVudFN1Y2Nlc3M8VD5cbiAgfCBDbXNHZXRDb21wb25lbnRGcm9tUGFnZTxUPjtcbiJdfQ==