import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { select, Store } from '@ngrx/store';
import { from, of } from 'rxjs';
import { catchError, concatMap, filter, groupBy, map, mergeMap, switchMap, withLatestFrom, } from 'rxjs/operators';
import { CheckoutActions } from '../../../checkout/store/actions';
import { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { makeErrorSerializable } from '../../../util/serialization-utils';
import { withdrawOn } from '../../../util/withdraw-on';
import { CartConnector } from '../../connectors/cart/cart.connector';
import { getCartIdByUserId } from '../../utils/utils';
import { CartActions } from '../actions/index';
import { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';
let CartEffects = class CartEffects {
    constructor(actions$, cartConnector, store) {
        this.actions$ = actions$;
        this.cartConnector = cartConnector;
        this.store = store;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.loadCart$ = this.actions$.pipe(ofType(CartActions.LOAD_CART), map((action) => action.payload), groupBy((payload) => payload.cartId), mergeMap((group$) => group$.pipe(switchMap((payload) => {
            return of(payload).pipe(withLatestFrom(this.store.pipe(select(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));
        }), filter(([_, hasPendingProcesses]) => !hasPendingProcesses), map(([payload]) => payload), switchMap((payload) => {
            return this.cartConnector.load(payload.userId, payload.cartId).pipe(mergeMap((cart) => {
                let actions = [];
                if (cart) {
                    actions.push(new CartActions.LoadCartSuccess(Object.assign(Object.assign({}, payload), { cart, cartId: getCartIdByUserId(cart, payload.userId) })));
                    if (payload.cartId === OCC_CART_ID_CURRENT) {
                        // Removing cart from entity object under `current` key as it is no longer needed.
                        // Current cart is loaded under it's code entity.
                        actions.push(new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT }));
                    }
                }
                else {
                    actions = [
                        new CartActions.LoadCartFail(Object.assign(Object.assign({}, payload), { error: {} })),
                    ];
                }
                return actions;
            }), catchError((error) => {
                var _a;
                if ((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors) {
                    const couponExpiredErrors = error.error.errors.filter((err) => err.reason === 'invalid');
                    if (couponExpiredErrors.length > 0) {
                        // Reload in case of expired coupon.
                        return of(new CartActions.LoadCart(Object.assign({}, payload)));
                    }
                    const cartNotFoundErrors = error.error.errors.filter((err) => err.reason === 'notFound' || 'UnknownResourceError');
                    if (cartNotFoundErrors.length > 0) {
                        // Remove cart as it doesn't exist on backend.
                        return of(new CartActions.RemoveCart({ cartId: payload.cartId }));
                    }
                }
                return of(new CartActions.LoadCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })));
            }));
        }))), withdrawOn(this.contextChange$));
        this.createCart$ = this.actions$.pipe(ofType(CartActions.CREATE_CART), map((action) => action.payload), mergeMap((payload) => {
            return this.cartConnector
                .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)
                .pipe(switchMap((cart) => {
                const conditionalActions = [];
                if (payload.oldCartId) {
                    conditionalActions.push(new CartActions.MergeCartSuccess({
                        extraData: payload.extraData,
                        userId: payload.userId,
                        tempCartId: payload.tempCartId,
                        cartId: getCartIdByUserId(cart, payload.userId),
                        oldCartId: payload.oldCartId,
                    }));
                }
                return [
                    new CartActions.CreateCartSuccess(Object.assign(Object.assign({}, payload), { cart, cartId: getCartIdByUserId(cart, payload.userId) })),
                    new CartActions.SetTempCart({
                        cart,
                        tempCartId: payload.tempCartId,
                    }),
                    ...conditionalActions,
                ];
            }), catchError((error) => of(new CartActions.CreateCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })))));
        }), withdrawOn(this.contextChange$));
        this.mergeCart$ = this.actions$.pipe(ofType(CartActions.MERGE_CART), map((action) => action.payload), mergeMap((payload) => {
            return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(mergeMap((currentCart) => {
                return [
                    new CartActions.CreateCart({
                        userId: payload.userId,
                        oldCartId: payload.cartId,
                        toMergeCartGuid: currentCart ? currentCart.guid : undefined,
                        extraData: payload.extraData,
                        tempCartId: payload.tempCartId,
                    }),
                ];
            }));
        }), withdrawOn(this.contextChange$));
        // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions
        this.refresh$ = this.actions$.pipe(ofType(CartActions.CART_ADD_VOUCHER_SUCCESS), map((action) => action.payload), concatMap((payload) => from([
            new CartActions.CartProcessesDecrement(payload.cartId),
            new CartActions.LoadCart({
                userId: payload.userId,
                cartId: payload.cartId,
            }),
        ])));
        // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity
        this.refreshWithoutProcesses$ = this.actions$.pipe(ofType(CartActions.CART_ADD_ENTRY_SUCCESS, CartActions.CART_REMOVE_ENTRY_SUCCESS, CartActions.CART_UPDATE_ENTRY_SUCCESS, CartActions.CART_REMOVE_VOUCHER_SUCCESS, CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS), map((action) => action.payload), map((payload) => new CartActions.LoadCart({
            userId: payload.userId,
            cartId: payload.cartId,
        })));
        this.resetCartDetailsOnSiteContextChange$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), mergeMap(() => {
            return [new CartActions.ResetCartDetails()];
        }));
        this.addEmail$ = this.actions$.pipe(ofType(CartActions.ADD_EMAIL_TO_CART), map((action) => action.payload), mergeMap((payload) => this.cartConnector
            .addEmail(payload.userId, payload.cartId, payload.email)
            .pipe(mergeMap(() => {
            return [
                new CartActions.AddEmailToCartSuccess(Object.assign({}, payload)),
                new CartActions.LoadCart({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
            ];
        }), catchError((error) => from([
            new CartActions.AddEmailToCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
            new CartActions.LoadCart({
                userId: payload.userId,
                cartId: payload.cartId,
            }),
        ])))), withdrawOn(this.contextChange$));
        this.deleteCart$ = this.actions$.pipe(ofType(CartActions.DELETE_CART), map((action) => action.payload), mergeMap((payload) => this.cartConnector.delete(payload.userId, payload.cartId).pipe(map(() => {
            return new CartActions.DeleteCartSuccess(Object.assign({}, payload));
        }), catchError((error) => from([
            new CartActions.DeleteCartFail(Object.assign(Object.assign({}, payload), { error: makeErrorSerializable(error) })),
            // Error might happen in higher backend layer and cart could still be removed.
            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.
            new CartActions.LoadCart(Object.assign({}, payload)),
        ])))));
    }
};
CartEffects.ctorParameters = () => [
    { type: Actions },
    { type: CartConnector },
    { type: Store }
];
__decorate([
    Effect()
], CartEffects.prototype, "loadCart$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "createCart$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "mergeCart$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "refresh$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "refreshWithoutProcesses$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "resetCartDetailsOnSiteContextChange$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "addEmail$", void 0);
__decorate([
    Effect()
], CartEffects.prototype, "deleteCart$", void 0);
CartEffects = __decorate([
    Injectable()
], CartEffects);
export { CartEffects };
//# sourceMappingURL=data:application/json;base64,