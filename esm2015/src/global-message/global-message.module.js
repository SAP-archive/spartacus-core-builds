var GlobalMessageModule_1;
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { EffectsModule } from '@ngrx/effects';
import { GlobalMessageService } from './facade/global-message.service';
import { errorHandlers, httpErrorInterceptors, } from './http-interceptors/index';
import { GlobalMessageStoreModule } from './store/global-message-store.module';
import { GlobalMessageEffect } from './store/effects/global-message.effect';
import { Config, provideDefaultConfigFactory } from '../config/config.module';
import { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';
import { GlobalMessageConfig } from './config/global-message-config';
let GlobalMessageModule = GlobalMessageModule_1 = class GlobalMessageModule {
    static forRoot() {
        return {
            ngModule: GlobalMessageModule_1,
            providers: [...errorHandlers, ...httpErrorInterceptors],
        };
    }
};
GlobalMessageModule = GlobalMessageModule_1 = __decorate([
    NgModule({
        imports: [
            GlobalMessageStoreModule,
            EffectsModule.forFeature([GlobalMessageEffect]),
        ],
        providers: [
            provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),
            GlobalMessageService,
            { provide: GlobalMessageConfig, useExisting: Config },
        ],
    })
], GlobalMessageModule);
export { GlobalMessageModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLW1lc3NhZ2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2dsb2JhbC1tZXNzYWdlL2dsb2JhbC1tZXNzYWdlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUNMLGFBQWEsRUFDYixxQkFBcUIsR0FDdEIsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFhckUsSUFBYSxtQkFBbUIsMkJBQWhDLE1BQWEsbUJBQW1CO0lBQzlCLE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxxQkFBbUI7WUFDN0IsU0FBUyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQztTQUN4RCxDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUFQWSxtQkFBbUI7SUFYL0IsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFO1lBQ1Asd0JBQXdCO1lBQ3hCLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsMkJBQTJCLENBQUMsaUNBQWlDLENBQUM7WUFDOUQsb0JBQW9CO1lBQ3BCLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7U0FDdEQ7S0FDRixDQUFDO0dBQ1csbUJBQW1CLENBTy9CO1NBUFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVmZmVjdHNNb2R1bGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcblxuaW1wb3J0IHsgR2xvYmFsTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL2ZhY2FkZS9nbG9iYWwtbWVzc2FnZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIGVycm9ySGFuZGxlcnMsXG4gIGh0dHBFcnJvckludGVyY2VwdG9ycyxcbn0gZnJvbSAnLi9odHRwLWludGVyY2VwdG9ycy9pbmRleCc7XG5pbXBvcnQgeyBHbG9iYWxNZXNzYWdlU3RvcmVNb2R1bGUgfSBmcm9tICcuL3N0b3JlL2dsb2JhbC1tZXNzYWdlLXN0b3JlLm1vZHVsZSc7XG5pbXBvcnQgeyBHbG9iYWxNZXNzYWdlRWZmZWN0IH0gZnJvbSAnLi9zdG9yZS9lZmZlY3RzL2dsb2JhbC1tZXNzYWdlLmVmZmVjdCc7XG5cbmltcG9ydCB7IENvbmZpZywgcHJvdmlkZURlZmF1bHRDb25maWdGYWN0b3J5IH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZy5tb2R1bGUnO1xuaW1wb3J0IHsgZGVmYXVsdEdsb2JhbE1lc3NhZ2VDb25maWdGYWN0b3J5IH0gZnJvbSAnLi9jb25maWcvZGVmYXVsdC1nbG9iYWwtbWVzc2FnZS1jb25maWcnO1xuaW1wb3J0IHsgR2xvYmFsTWVzc2FnZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL2dsb2JhbC1tZXNzYWdlLWNvbmZpZyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBHbG9iYWxNZXNzYWdlU3RvcmVNb2R1bGUsXG4gICAgRWZmZWN0c01vZHVsZS5mb3JGZWF0dXJlKFtHbG9iYWxNZXNzYWdlRWZmZWN0XSksXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHByb3ZpZGVEZWZhdWx0Q29uZmlnRmFjdG9yeShkZWZhdWx0R2xvYmFsTWVzc2FnZUNvbmZpZ0ZhY3RvcnkpLFxuICAgIEdsb2JhbE1lc3NhZ2VTZXJ2aWNlLFxuICAgIHsgcHJvdmlkZTogR2xvYmFsTWVzc2FnZUNvbmZpZywgdXNlRXhpc3Rpbmc6IENvbmZpZyB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBHbG9iYWxNZXNzYWdlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxHbG9iYWxNZXNzYWdlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBHbG9iYWxNZXNzYWdlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbLi4uZXJyb3JIYW5kbGVycywgLi4uaHR0cEVycm9ySW50ZXJjZXB0b3JzXSxcbiAgICB9O1xuICB9XG59XG4iXX0=