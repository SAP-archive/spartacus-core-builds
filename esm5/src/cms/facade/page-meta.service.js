import { __decorate, __param, __read, __spread } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import { resolveHandler } from '../../util';
import * as i0 from "@angular/core";
import * as i1 from "../page/page-meta.resolver";
import * as i2 from "./cms.service";
var PageMetaService = /** @class */ (function () {
    function PageMetaService(resolvers, cms) {
        this.resolvers = resolvers;
        this.cms = cms;
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.resolvers = this.resolvers || [];
    }
    PageMetaService.prototype.getMeta = function () {
        var _this = this;
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap(function (page) {
            var metaResolver = _this.getMetaResolver(page);
            if (metaResolver) {
                return _this.resolve(metaResolver);
            }
            else {
                // we do not have a page resolver
                return of(null);
            }
        }));
    };
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    PageMetaService.prototype.resolve = function (metaResolver) {
        var _this = this;
        var resolveMethods = Object.keys(this.resolverMethods)
            .filter(function (key) { return metaResolver[_this.resolverMethods[key]]; })
            .map(function (key) {
            return metaResolver[_this.resolverMethods[key]]().pipe(map(function (data) {
                var _a;
                return (_a = {},
                    _a[key] = data,
                    _a);
            }));
        });
        return combineLatest(resolveMethods).pipe(map(function (data) { return Object.assign.apply(Object, __spread([{}], data)); }));
    };
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    PageMetaService.prototype.getMetaResolver = function (page) {
        return resolveHandler(this.resolvers, [page], [page]);
    };
    PageMetaService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PageMetaResolver,] }] },
        { type: CmsService }
    ]; };
    PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.PageMetaResolver, 8), i0.ɵɵinject(i2.CmsService)); }, token: PageMetaService, providedIn: "root" });
    PageMetaService = __decorate([
        Injectable({
            providedIn: 'root',
        }),
        __param(0, Optional()),
        __param(0, Inject(PageMetaResolver))
    ], PageMetaService);
    return PageMetaService;
}());
export { PageMetaService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL2ZhY2FkZS9wYWdlLW1ldGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQzs7OztBQUs1QztJQUNFLHlCQUdZLFNBQTZCLEVBQzdCLEdBQWU7UUFEZixjQUFTLEdBQVQsU0FBUyxDQUFvQjtRQUM3QixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBSTNCOzs7Ozs7V0FNRztRQUNPLG9CQUFlLEdBQThCO1lBQ3JELEtBQUssRUFBRSxjQUFjO1lBQ3JCLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLEtBQUssRUFBRSxjQUFjO1lBQ3JCLE1BQU0sRUFBRSxlQUFlO1NBQ3hCLENBQUM7UUFoQkEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBaUJELGlDQUFPLEdBQVA7UUFBQSxpQkFjQztRQWJDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQ25DLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixTQUFTLENBQUMsVUFBQyxJQUFVO1lBQ25CLElBQU0sWUFBWSxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFaEQsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxpQ0FBaUM7Z0JBQ2pDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ08saUNBQU8sR0FBakIsVUFBa0IsWUFBOEI7UUFBaEQsaUJBY0M7UUFiQyxJQUFNLGNBQWMsR0FBVSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDNUQsTUFBTSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsWUFBWSxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQzthQUN4RCxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ1AsT0FBQSxZQUFZLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsVUFBQyxJQUFJOztnQkFBSyxPQUFBO29CQUNaLEdBQUMsR0FBRyxJQUFHLElBQUk7dUJBQ1g7WUFGWSxDQUVaLENBQUMsQ0FDSjtRQUpELENBSUMsQ0FDRixDQUFDO1FBRUosT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUN2QyxHQUFHLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxPQUFiLE1BQU0sWUFBUSxFQUFFLEdBQUssSUFBSSxJQUF6QixDQUEwQixDQUFDLENBQzFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDTyx5Q0FBZSxHQUF6QixVQUEwQixJQUFVO1FBQ2xDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7NENBcEVFLFFBQVEsWUFDUixNQUFNLFNBQUMsZ0JBQWdCO2dCQUVULFVBQVU7OztJQUxoQixlQUFlO1FBSDNCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7UUFHRyxXQUFBLFFBQVEsRUFBRSxDQUFBO1FBQ1YsV0FBQSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtPQUhoQixlQUFlLENBdUUzQjswQkFsRkQ7Q0FrRkMsQUF2RUQsSUF1RUM7U0F2RVksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZSwgUGFnZU1ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VNZXRhUmVzb2x2ZXIgfSBmcm9tICcuLi9wYWdlL3BhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyByZXNvbHZlSGFuZGxlciB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUGFnZU1ldGFTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KFBhZ2VNZXRhUmVzb2x2ZXIpXG4gICAgcHJvdGVjdGVkIHJlc29sdmVyczogUGFnZU1ldGFSZXNvbHZlcltdLFxuICAgIHByb3RlY3RlZCBjbXM6IENtc1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5yZXNvbHZlcnMgPSB0aGlzLnJlc29sdmVycyB8fCBbXTtcbiAgfVxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgcmVzb2x2ZXIgaW50ZXJmYWNlcyB3aWxsIGJlIGV2YWx1YXRlZCBmb3IgdGhlIHBhZ2VSZXNvbHZlcnMuXG4gICAqXG4gICAqIFRPT0Q6IG9wdGltaXplIGJyb3dzZXIgdnMgU1NSIHJlc29sdmVyczsgaW1hZ2UsIHJvYm90cyBhbmQgZGVzY3JpcHRpb25cbiAgICogICAgICAgYXJlbid0IG5lZWRlZCBkdXJpbmcgYnJvd3NpbmcuXG4gICAqIFRPRE86IHdlIGNhbiBtYWtlIHRoZSBsaXN0IG9mIHJlc29sdmVyIHR5cGVzIGNvbmZpZ3VyYWJsZVxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc29sdmVyTWV0aG9kczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICB0aXRsZTogJ3Jlc29sdmVUaXRsZScsXG4gICAgaGVhZGluZzogJ3Jlc29sdmVIZWFkaW5nJyxcbiAgICBkZXNjcmlwdGlvbjogJ3Jlc29sdmVEZXNjcmlwdGlvbicsXG4gICAgYnJlYWRjcnVtYnM6ICdyZXNvbHZlQnJlYWRjcnVtYnMnLFxuICAgIGltYWdlOiAncmVzb2x2ZUltYWdlJyxcbiAgICByb2JvdHM6ICdyZXNvbHZlUm9ib3RzJyxcbiAgfTtcblxuICBnZXRNZXRhKCk6IE9ic2VydmFibGU8UGFnZU1ldGE+IHtcbiAgICByZXR1cm4gdGhpcy5jbXMuZ2V0Q3VycmVudFBhZ2UoKS5waXBlKFxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgc3dpdGNoTWFwKChwYWdlOiBQYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IG1ldGFSZXNvbHZlciA9IHRoaXMuZ2V0TWV0YVJlc29sdmVyKHBhZ2UpO1xuXG4gICAgICAgIGlmIChtZXRhUmVzb2x2ZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlKG1ldGFSZXNvbHZlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2UgZG8gbm90IGhhdmUgYSBwYWdlIHJlc29sdmVyXG4gICAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWYgYSBgUGFnZVJlc29sdmVyYCBoYXMgaW1wbGVtZW50ZWQgYSByZXNvbHZlciBpbnRlcmZhY2UsIHRoZSByZXNvbHZlZCBkYXRhXG4gICAqIGlzIG1lcmdlZCBpbnRvIHRoZSBgUGFnZU1ldGFgIG9iamVjdC5cbiAgICogQHBhcmFtIG1ldGFSZXNvbHZlclxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc29sdmUobWV0YVJlc29sdmVyOiBQYWdlTWV0YVJlc29sdmVyKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT4ge1xuICAgIGNvbnN0IHJlc29sdmVNZXRob2RzOiBhbnlbXSA9IE9iamVjdC5rZXlzKHRoaXMucmVzb2x2ZXJNZXRob2RzKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBtZXRhUmVzb2x2ZXJbdGhpcy5yZXNvbHZlck1ldGhvZHNba2V5XV0pXG4gICAgICAubWFwKChrZXkpID0+XG4gICAgICAgIG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSgpLnBpcGUoXG4gICAgICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgW2tleV06IGRhdGEsXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChyZXNvbHZlTWV0aG9kcykucGlwZShcbiAgICAgIG1hcCgoZGF0YSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgLi4uZGF0YSkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHJlc29sdmVyIHdpdGggdGhlIGJlc3QgbWF0Y2gsIGJhc2VkIG9uIGEgc2NvcmVcbiAgICogZ2VuZXJhdGVkIGJ5IHRoZSByZXNvbHZlci5cbiAgICpcbiAgICogUmVzb2x2ZXJzIG1hdGNoIGJ5IGRlZmF1bHQgb24gYFBhZ2VUeXBlYCBhbmQgYHBhZ2UudGVtcGxhdGVgLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldE1ldGFSZXNvbHZlcihwYWdlOiBQYWdlKTogUGFnZU1ldGFSZXNvbHZlciB7XG4gICAgcmV0dXJuIHJlc29sdmVIYW5kbGVyKHRoaXMucmVzb2x2ZXJzLCBbcGFnZV0sIFtwYWdlXSk7XG4gIH1cbn1cbiJdfQ==