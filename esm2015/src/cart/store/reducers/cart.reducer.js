/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as fromAction from './../actions';
/** @type {?} */
export const initialState = {
    content: {},
    entries: {},
    refresh: false,
    cartMergeComplete: false,
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function reducer(state = initialState, action) {
    switch (action.type) {
        case fromAction.MERGE_CART: {
            return Object.assign({}, state, { cartMergeComplete: false });
        }
        case fromAction.MERGE_CART_SUCCESS: {
            return Object.assign({}, state, { cartMergeComplete: true, refresh: true });
        }
        case fromAction.LOAD_CART_SUCCESS:
        case fromAction.CREATE_CART_SUCCESS: {
            /** @type {?} */
            const content = Object.assign({}, action.payload);
            /** @type {?} */
            let entries = {};
            if (content.entries) {
                entries = content.entries.reduce((/**
                 * @param {?} entryMap
                 * @param {?} entry
                 * @return {?}
                 */
                (entryMap, entry) => {
                    return Object.assign({}, entryMap, { [entry.product.code]: state.entries[entry.product.code]
                            ? Object.assign({}, state.entries[entry.product.code], entry) : entry });
                }), Object.assign({}, entries));
                delete content['entries'];
            }
            return Object.assign({}, state, { content,
                entries, refresh: false });
        }
        case fromAction.REMOVE_ENTRY_SUCCESS:
        case fromAction.UPDATE_ENTRY_SUCCESS:
        case fromAction.ADD_ENTRY_SUCCESS: {
            return Object.assign({}, state, { refresh: true });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NhcnQvc3RvcmUvcmVkdWNlcnMvY2FydC5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssVUFBVSxNQUFNLGNBQWMsQ0FBQzs7QUFJM0MsTUFBTSxPQUFPLFlBQVksR0FBYztJQUNyQyxPQUFPLEVBQUUsRUFBRTtJQUNYLE9BQU8sRUFBRSxFQUFFO0lBQ1gsT0FBTyxFQUFFLEtBQUs7SUFDZCxpQkFBaUIsRUFBRSxLQUFLO0NBQ3pCOzs7Ozs7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUEwRDtJQUUxRCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUIseUJBQ0ssS0FBSyxJQUNSLGlCQUFpQixFQUFFLEtBQUssSUFDeEI7U0FDSDtRQUVELEtBQUssVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDbEMseUJBQ0ssS0FBSyxJQUNSLGlCQUFpQixFQUFFLElBQUksRUFDdkIsT0FBTyxFQUFFLElBQUksSUFDYjtTQUNIO1FBRUQsS0FBSyxVQUFVLENBQUMsaUJBQWlCLENBQUM7UUFDbEMsS0FBSyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7a0JBQzdCLE9BQU8scUJBQVEsTUFBTSxDQUFDLE9BQU8sQ0FBRTs7Z0JBQ2pDLE9BQU8sR0FBRyxFQUFFO1lBQ2hCLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTTs7Ozs7Z0JBQzlCLENBQUMsUUFBaUMsRUFBRSxLQUFpQixFQUFFLEVBQUU7b0JBQ3ZELHlCQUNLLFFBQVEsSUFPWCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzs0QkFDckQsQ0FBQyxtQkFDTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQ2pDLEtBQUssRUFFWixDQUFDLENBQUMsS0FBSyxJQUNUO2dCQUNKLENBQUMscUJBRUksT0FBTyxFQUViLENBQUM7Z0JBQ0YsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDM0I7WUFDRCx5QkFDSyxLQUFLLElBQ1IsT0FBTztnQkFDUCxPQUFPLEVBQ1AsT0FBTyxFQUFFLEtBQUssSUFDZDtTQUNIO1FBRUQsS0FBSyxVQUFVLENBQUMsb0JBQW9CLENBQUM7UUFDckMsS0FBSyxVQUFVLENBQUMsb0JBQW9CLENBQUM7UUFDckMsS0FBSyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNqQyx5QkFDSyxLQUFLLElBQ1IsT0FBTyxFQUFFLElBQUksSUFDYjtTQUNIO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcm9tQWN0aW9uIGZyb20gJy4vLi4vYWN0aW9ucyc7XG5pbXBvcnQgeyBDYXJ0U3RhdGUgfSBmcm9tICcuLi9jYXJ0LXN0YXRlJztcbmltcG9ydCB7IE9yZGVyRW50cnkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IENhcnRTdGF0ZSA9IHtcbiAgY29udGVudDoge30sXG4gIGVudHJpZXM6IHt9LFxuICByZWZyZXNoOiBmYWxzZSxcbiAgY2FydE1lcmdlQ29tcGxldGU6IGZhbHNlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IGZyb21BY3Rpb24uQ2FydEFjdGlvbiB8IGZyb21BY3Rpb24uQ2FydEVudHJ5QWN0aW9uXG4pOiBDYXJ0U3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBmcm9tQWN0aW9uLk1FUkdFX0NBUlQ6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjYXJ0TWVyZ2VDb21wbGV0ZTogZmFsc2UsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgZnJvbUFjdGlvbi5NRVJHRV9DQVJUX1NVQ0NFU1M6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjYXJ0TWVyZ2VDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgcmVmcmVzaDogdHJ1ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBmcm9tQWN0aW9uLkxPQURfQ0FSVF9TVUNDRVNTOlxuICAgIGNhc2UgZnJvbUFjdGlvbi5DUkVBVEVfQ0FSVF9TVUNDRVNTOiB7XG4gICAgICBjb25zdCBjb250ZW50ID0geyAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuICAgICAgbGV0IGVudHJpZXMgPSB7fTtcbiAgICAgIGlmIChjb250ZW50LmVudHJpZXMpIHtcbiAgICAgICAgZW50cmllcyA9IGNvbnRlbnQuZW50cmllcy5yZWR1Y2UoXG4gICAgICAgICAgKGVudHJ5TWFwOiB7IFtjb2RlOiBzdHJpbmddOiBhbnkgfSwgZW50cnk6IE9yZGVyRW50cnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmVudHJ5TWFwLFxuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICBJZiB3ZSByZWZyZXNoIHRoZSBwYWdlIGZyb20gY2FydCBkZXRhaWxzIHBhZ2UsIDIgbG9hZCBjYXJ0XG4gICAgICAgICAgICAgIEFjdGlvbnMgZ2V0cyBkaXNwYXRjaGVkLiBPbmUgaXMgbm9uLWRldGFpbCwgYW5kIHRoZSBzZWNvbmQgaXMgZGV0YWlsZWQuXG4gICAgICAgICAgICAgIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBkZXRhaWxlZCBvbmNlIGdldCByZXNvbHZlZCBmaXJzdCwgd2UgbWVyZ2UgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgICAgIGRhdGEgd2l0aCB0aGUgbmV3IGRhdGEgZnJvbSB0aGUgcmVzcG9uc2UgKHRvIG5vdCBkZWxldGUgZXhpc3RpbmcgZGV0YWlsZWQgZGF0YSkuXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIFtlbnRyeS5wcm9kdWN0LmNvZGVdOiBzdGF0ZS5lbnRyaWVzW2VudHJ5LnByb2R1Y3QuY29kZV1cbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUuZW50cmllc1tlbnRyeS5wcm9kdWN0LmNvZGVdLFxuICAgICAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IGVudHJ5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC4uLmVudHJpZXMsXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBkZWxldGUgY29udGVudFsnZW50cmllcyddO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGVudHJpZXMsXG4gICAgICAgIHJlZnJlc2g6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIGZyb21BY3Rpb24uUkVNT1ZFX0VOVFJZX1NVQ0NFU1M6XG4gICAgY2FzZSBmcm9tQWN0aW9uLlVQREFURV9FTlRSWV9TVUNDRVNTOlxuICAgIGNhc2UgZnJvbUFjdGlvbi5BRERfRU5UUllfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHJlZnJlc2g6IHRydWUsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiJdfQ==