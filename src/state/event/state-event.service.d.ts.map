{"version":3,"file":"state-event.service.d.ts","sources":["state-event.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n/**\n * Registers streams of ngrx actions as events source streams\n */\nexport declare class StateEventService {\n    protected actionsSubject: ActionsSubject;\n    protected eventService: EventService;\n    constructor(actionsSubject: ActionsSubject, eventService: EventService);\n    /**\n     * Registers an event source stream of specific events\n     * mapped from a given action type.\n     *\n     * @param mapping mapping from action to event\n     *\n     * @returns a teardown function that unregisters the event source\n     */\n    register<T>(mapping: ActionToEventMapping<T>): () => void;\n    /**\n     * Returns a stream of specific events mapped from a specific action.\n     * @param mapping mapping from action to event\n     */\n    protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T>;\n    /**\n     * Creates an event instance for given class out from the action object.\n     * Unless the `factory` parameter is given, the action's `payload` is used\n     * as the argument for the event's constructor.\n     *\n     * @param action instance of an Action\n     * @param mapping mapping from action to event\n     * @param factory optional function getting an action instance and returning an event instance\n     *\n     * @returns instance of an Event\n     */\n    protected createEvent<T>(action: {\n        type: string;\n        payload?: any;\n    }, eventType: Type<T>, factory?: (action: any) => T): T;\n}\n"]}