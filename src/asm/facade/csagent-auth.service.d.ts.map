{"version":3,"file":"csagent-auth.service.d.ts","sources":["csagent-auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { UserService } from '../../user/facade/user.service';\nimport { AsmAuthStorageService } from '../services/asm-auth-storage.service';\nimport { StateWithAsm } from '../store/asm-state';\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\nexport declare class CsAgentAuthService {\n    protected authService: AuthService;\n    protected authStorageService: AsmAuthStorageService;\n    protected userIdService: UserIdService;\n    protected oAuthLibWrapperService: OAuthLibWrapperService;\n    protected store: Store<StateWithAsm>;\n    protected userService: UserService;\n    constructor(authService: AuthService, authStorageService: AsmAuthStorageService, userIdService: UserIdService, oAuthLibWrapperService: OAuthLibWrapperService, store: Store<StateWithAsm>, userService: UserService);\n    /**\n     * Loads access token for a customer support agent.\n     * @param userId\n     * @param password\n     */\n    authorizeCustomerSupportAgent(userId: string, password: string): Promise<void>;\n    /**\n     * Starts an ASM customer emulation session.\n     * A customer emulation session is stopped by calling logout().\n     * @param customerId\n     */\n    startCustomerEmulationSession(customerId: string): void;\n    /**\n     * Check if CS agent is currently logged in.\n     *\n     * @returns observable emitting true when CS agent is logged in or false when not.\n     */\n    isCustomerSupportAgentLoggedIn(): Observable<boolean>;\n    /**\n     * Utility function to determine if customer is emulated.\n     *\n     * @returns observable emitting true when there is active emulation session or false when not.\n     */\n    isCustomerEmulated(): Observable<boolean>;\n    /**\n     * Returns the customer support agent's token loading status\n     */\n    getCustomerSupportAgentTokenLoading(): Observable<boolean>;\n    /**\n     * Logout a customer support agent.\n     */\n    logoutCustomerSupportAgent(): Promise<void>;\n}\n"]}