{"version":3,"file":"auth-http-header.service.d.ts","sources":["auth-http-header.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthToken } from '../models/auth-token.model';\nimport { AuthStorageService } from './auth-storage.service';\nimport { OAuthLibWrapperService } from './oauth-lib-wrapper.service';\n/**\n * Extendable service for `AuthInterceptor`.\n */\nexport declare class AuthHttpHeaderService {\n    protected authService: AuthService;\n    protected authStorageService: AuthStorageService;\n    protected oAuthLibWrapperService: OAuthLibWrapperService;\n    protected routingService: RoutingService;\n    protected occEndpoints: OccEndpointsService;\n    protected globalMessageService: GlobalMessageService;\n    constructor(authService: AuthService, authStorageService: AuthStorageService, oAuthLibWrapperService: OAuthLibWrapperService, routingService: RoutingService, occEndpoints: OccEndpointsService, globalMessageService: GlobalMessageService);\n    /**\n     * Checks if request should be handled by this service (if it's OCC call).\n     */\n    shouldCatchError(request: HttpRequest<any>): boolean;\n    /**\n     * Adds `Authorization` header for OCC calls.\n     */\n    alterRequest(request: HttpRequest<any>): HttpRequest<any>;\n    protected isOccUrl(url: string): boolean;\n    protected getAuthorizationHeader(request: HttpRequest<any>): string;\n    protected createAuthorizationHeader(): {\n        Authorization?: string;\n    };\n    /**\n     * Refreshes access_token and then retries the call with the new token.\n     */\n    handleExpiredAccessToken(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<AuthToken>>;\n    /**\n     * Logout user, redirected to login page and informs about expired session.\n     */\n    handleExpiredRefreshToken(): void;\n    /**\n     * Attempts to refresh token if possible.\n     * If it is not possible calls `handleExpiredRefreshToken`.\n     *\n     * @return observable which omits new access_token. (Warn: might never emit!).\n     */\n    protected handleExpiredToken(): Observable<AuthToken>;\n    protected createNewRequestWithNewToken(request: HttpRequest<any>, token: AuthToken): HttpRequest<any>;\n}\n"]}