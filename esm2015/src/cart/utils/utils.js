import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
/**
 * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.
 */
export function getCartIdByUserId(cart, userId) {
    if (userId === OCC_USER_ID_ANONYMOUS) {
        return cart.guid;
    }
    return cart.code;
}
/**
 * Check if cart is selective (save for later) based on id.
 */
export function isSelectiveCart(cartId = '') {
    return cartId.startsWith('selectivecart');
}
/**
 * Check if the returned error is of type notFound.
 *
 * We additionally check if the cart is not a selective cart.
 * For selective cart this error can happen only when extension is disabled.
 * It should never happen, because in that case, selective cart should also be disabled in our configuration.
 * However if that happens we want to handle these errors silently.
 */
export function isCartNotFoundError(error) {
    return (error.reason === 'notFound' &&
        error.subjectType === 'cart' &&
        !isSelectiveCart(error.subject));
}
/**
 * Compute wishlist cart name for customer.
 */
export function getWishlistName(customerId) {
    return `wishlist${customerId}`;
}
/**
 * What is a temporary cart?
 * - frontend only cart entity!
 * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)
 *
 * Why we need temporary carts?
 * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)
 * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)
 * - cart identifiers are created in the backend, so those are only known after cart is created
 *
 * Temporary cart life cycle
 * - create cart method invoked
 * - new `temp-${uuid}` cart is created with `loading=true` state
 * - backend returns created cart
 * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)
 * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)
 * - in next tick temporary cart is removed
 */
export function isTempCartId(cartId) {
    return cartId.startsWith('temp-');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC91dGlscy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFVLEVBQUUsTUFBYztJQUMxRCxJQUFJLE1BQU0sS0FBSyxxQkFBcUIsRUFBRTtRQUNwQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDbEI7SUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDbkIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFNLEdBQUcsRUFBRTtJQUN6QyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsS0FBaUI7SUFDbkQsT0FBTyxDQUNMLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBVTtRQUMzQixLQUFLLENBQUMsV0FBVyxLQUFLLE1BQU07UUFDNUIsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUNoQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxVQUFrQjtJQUNoRCxPQUFPLFdBQVcsVUFBVSxFQUFFLENBQUM7QUFDakMsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBYztJQUN6QyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9yTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQgeyBPQ0NfVVNFUl9JRF9BTk9OWU1PVVMgfSBmcm9tICcuLi8uLi9vY2MvdXRpbHMvb2NjLWNvbnN0YW50cyc7XG5cbi8qKlxuICogRXh0cmFjdCBjYXJ0IGlkZW50aWZpZXIgZm9yIGN1cnJlbnQgdXNlci4gQW5vbnltb3VzIGNhbGxzIHVzZSBgZ3VpZGAgYW5kIGZvciBsb2dnZWQgdXNlcnMgYGNvZGVgIGlzIHVzZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJ0SWRCeVVzZXJJZChjYXJ0OiBDYXJ0LCB1c2VySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICh1c2VySWQgPT09IE9DQ19VU0VSX0lEX0FOT05ZTU9VUykge1xuICAgIHJldHVybiBjYXJ0Lmd1aWQ7XG4gIH1cbiAgcmV0dXJuIGNhcnQuY29kZTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBjYXJ0IGlzIHNlbGVjdGl2ZSAoc2F2ZSBmb3IgbGF0ZXIpIGJhc2VkIG9uIGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTZWxlY3RpdmVDYXJ0KGNhcnRJZCA9ICcnKTogYm9vbGVhbiB7XG4gIHJldHVybiBjYXJ0SWQuc3RhcnRzV2l0aCgnc2VsZWN0aXZlY2FydCcpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSByZXR1cm5lZCBlcnJvciBpcyBvZiB0eXBlIG5vdEZvdW5kLlxuICpcbiAqIFdlIGFkZGl0aW9uYWxseSBjaGVjayBpZiB0aGUgY2FydCBpcyBub3QgYSBzZWxlY3RpdmUgY2FydC5cbiAqIEZvciBzZWxlY3RpdmUgY2FydCB0aGlzIGVycm9yIGNhbiBoYXBwZW4gb25seSB3aGVuIGV4dGVuc2lvbiBpcyBkaXNhYmxlZC5cbiAqIEl0IHNob3VsZCBuZXZlciBoYXBwZW4sIGJlY2F1c2UgaW4gdGhhdCBjYXNlLCBzZWxlY3RpdmUgY2FydCBzaG91bGQgYWxzbyBiZSBkaXNhYmxlZCBpbiBvdXIgY29uZmlndXJhdGlvbi5cbiAqIEhvd2V2ZXIgaWYgdGhhdCBoYXBwZW5zIHdlIHdhbnQgdG8gaGFuZGxlIHRoZXNlIGVycm9ycyBzaWxlbnRseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FydE5vdEZvdW5kRXJyb3IoZXJyb3I6IEVycm9yTW9kZWwpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBlcnJvci5yZWFzb24gPT09ICdub3RGb3VuZCcgJiZcbiAgICBlcnJvci5zdWJqZWN0VHlwZSA9PT0gJ2NhcnQnICYmXG4gICAgIWlzU2VsZWN0aXZlQ2FydChlcnJvci5zdWJqZWN0KVxuICApO1xufVxuXG4vKipcbiAqIENvbXB1dGUgd2lzaGxpc3QgY2FydCBuYW1lIGZvciBjdXN0b21lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdpc2hsaXN0TmFtZShjdXN0b21lcklkOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYHdpc2hsaXN0JHtjdXN0b21lcklkfWA7XG59XG5cbi8qKlxuICogV2hhdCBpcyBhIHRlbXBvcmFyeSBjYXJ0P1xuICogLSBmcm9udGVuZCBvbmx5IGNhcnQgZW50aXR5IVxuICogLSBjYW4gYmUgaWRlbnRpZmllZCBpbiBzdG9yZSBieSBgdGVtcC1gIHByZWZpeCB3aXRoIHNvbWUgdW5pcXVlIGlkIChtdWx0aXBsZSBjYXJ0cyBjYW4gYmUgY3JlYXRlZCBhdCB0aGUgc2FtZSB0aW1lIGVnLiBhY3RpdmUgY2FydCwgd2lzaGxpc3QpXG4gKlxuICogV2h5IHdlIG5lZWQgdGVtcG9yYXJ5IGNhcnRzP1xuICogLSB0byBoYXZlIGluZm9ybWF0aW9uIGFib3V0IGNhcnQgY3JlYXRpb24gcHJvY2VzcyAobWV0YSBmbGFnczogbG9hZGluZywgZXJyb3IgLSBmb3Igc2hvd2luZyBsb2FkZXIsIGVycm9yIG1lc3NhZ2UpXG4gKiAtIHRvIGtub3cgaWYgdGhlcmUgaXMgY3VycmVudGx5IGEgY2FydCBjcmVhdGlvbiBwcm9jZXNzIGluIHByb2dyZXNzIChlZy4gc28sIHdlIGRvbid0IGNyZWF0ZSBtb3JlIHRoYW4gb25lIGFjdGl2ZSBjYXJ0IGF0IHRoZSBzYW1lIHRpbWUpXG4gKiAtIGNhcnQgaWRlbnRpZmllcnMgYXJlIGNyZWF0ZWQgaW4gdGhlIGJhY2tlbmQsIHNvIHRob3NlIGFyZSBvbmx5IGtub3duIGFmdGVyIGNhcnQgaXMgY3JlYXRlZFxuICpcbiAqIFRlbXBvcmFyeSBjYXJ0IGxpZmUgY3ljbGVcbiAqIC0gY3JlYXRlIGNhcnQgbWV0aG9kIGludm9rZWRcbiAqIC0gbmV3IGB0ZW1wLSR7dXVpZH1gIGNhcnQgaXMgY3JlYXRlZCB3aXRoIGBsb2FkaW5nPXRydWVgIHN0YXRlXG4gKiAtIGJhY2tlbmQgcmV0dXJucyBjcmVhdGVkIGNhcnRcbiAqIC0gbm9ybWFsIGNhcnQgZW50aXR5IGlzIHNhdmVkIHVuZGVyIGNvcnJlY3QgaWQgKGVnLiBmb3IgbG9nZ2VkIHVzZXIgdW5kZXIgY2FydCBgY29kZWAga2V5KVxuICogLSB0ZW1wb3JhcnkgY2FydCB2YWx1ZSBpcyBzZXQgdG8gYmFja2VuZCByZXNwb25zZSAoYW55b25lIG9ic2VydmluZyB0aGlzIGNhcnQgY2FuIHJlYWQgY29kZS9ndWlkIGZyb20gaXQgYW5kIHN3aXRjaCBzZWxlY3RvciB0byBub3JtYWwgY2FydClcbiAqIC0gaW4gbmV4dCB0aWNrIHRlbXBvcmFyeSBjYXJ0IGlzIHJlbW92ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcENhcnRJZChjYXJ0SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gY2FydElkLnN0YXJ0c1dpdGgoJ3RlbXAtJyk7XG59XG4iXX0=