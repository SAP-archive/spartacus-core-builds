import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { filter, map, shareReplay, switchMap } from 'rxjs/operators';
import { resolveApplicable } from '../../util/applicable';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import { uniteLatest } from '../../util/rxjs/unite-latest';
import * as i0 from "@angular/core";
import * as i1 from "./cms.service";
import * as i2 from "../../lazy-loading/unified-injector";
export class PageMetaService {
    constructor(cms, unifiedInjector) {
        this.cms = cms;
        this.unifiedInjector = unifiedInjector;
        this.resolvers$ = this.unifiedInjector
            .getMulti(PageMetaResolver)
            .pipe(shareReplay({ bufferSize: 1, refCount: true }));
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * TOOD: optimize browser vs SSR resolvers; image, robots and description
         *       aren't needed during browsing.
         * TODO: we can make the list of resolver types configurable
         */
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
    }
    getMeta() {
        return this.cms.getCurrentPage().pipe(filter(Boolean), switchMap((page) => this.getMetaResolver(page)), switchMap((metaResolver) => metaResolver ? this.resolve(metaResolver) : of(null)));
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolveMethods = Object.keys(this.resolverMethods)
            .filter((key) => metaResolver[this.resolverMethods[key]])
            .map((key) => metaResolver[this.resolverMethods[key]]().pipe(map((data) => ({
            [key]: data,
        }))));
        return uniteLatest(resolveMethods).pipe(map((data) => Object.assign({}, ...data)));
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return this.resolvers$.pipe(map((resolvers) => resolveApplicable(resolvers, [page], [page])));
    }
}
PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.UnifiedInjector)); }, token: PageMetaService, providedIn: "root" });
PageMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PageMetaService.ctorParameters = () => [
    { type: CmsService },
    { type: UnifiedInjector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvZmFjYWRlL3BhZ2UtbWV0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7O0FBSzNELE1BQU0sT0FBTyxlQUFlO0lBUzFCLFlBQ1ksR0FBZSxFQUNmLGVBQWlDO1FBRGpDLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFWckMsZUFBVSxHQUVkLElBQUksQ0FBQyxlQUFlO2FBQ3JCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQzthQUMxQixJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FFckQsQ0FBQztRQU1GOzs7Ozs7V0FNRztRQUNPLG9CQUFlLEdBQThCO1lBQ3JELEtBQUssRUFBRSxjQUFjO1lBQ3JCLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLEtBQUssRUFBRSxjQUFjO1lBQ3JCLE1BQU0sRUFBRSxlQUFlO1NBQ3hCLENBQUM7SUFmQyxDQUFDO0lBaUJKLE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsU0FBUyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3JELFNBQVMsQ0FBQyxDQUFDLFlBQThCLEVBQUUsRUFBRSxDQUMzQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDckQsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxPQUFPLENBQUMsWUFBOEI7UUFDOUMsTUFBTSxjQUFjLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQ3hELElBQUksQ0FBQyxlQUFlLENBQ3JCO2FBQ0UsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3hELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDLENBQ0osQ0FDRixDQUFDO1FBRUosT0FBTyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUNyQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLGVBQWUsQ0FBQyxJQUFVO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2pFLENBQUM7SUFDSixDQUFDOzs7O1lBM0VGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBTlEsVUFBVTtZQUNWLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyByZXNvbHZlQXBwbGljYWJsZSB9IGZyb20gJy4uLy4uL3V0aWwvYXBwbGljYWJsZSc7XG5pbXBvcnQgeyBQYWdlLCBQYWdlTWV0YSB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xuaW1wb3J0IHsgUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4uL3BhZ2UvcGFnZS1tZXRhLnJlc29sdmVyJztcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICcuL2Ntcy5zZXJ2aWNlJztcbmltcG9ydCB7IFVuaWZpZWRJbmplY3RvciB9IGZyb20gJy4uLy4uL2xhenktbG9hZGluZy91bmlmaWVkLWluamVjdG9yJztcbmltcG9ydCB7IHVuaXRlTGF0ZXN0IH0gZnJvbSAnLi4vLi4vdXRpbC9yeGpzL3VuaXRlLWxhdGVzdCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdlTWV0YVNlcnZpY2Uge1xuICBwcml2YXRlIHJlc29sdmVycyQ6IE9ic2VydmFibGU8XG4gICAgUGFnZU1ldGFSZXNvbHZlcltdXG4gID4gPSB0aGlzLnVuaWZpZWRJbmplY3RvclxuICAgIC5nZXRNdWx0aShQYWdlTWV0YVJlc29sdmVyKVxuICAgIC5waXBlKHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSkpIGFzIE9ic2VydmFibGU8XG4gICAgUGFnZU1ldGFSZXNvbHZlcltdXG4gID47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdW5pZmllZEluamVjdG9yPzogVW5pZmllZEluamVjdG9yXG4gICkge31cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHJlc29sdmVyIGludGVyZmFjZXMgd2lsbCBiZSBldmFsdWF0ZWQgZm9yIHRoZSBwYWdlUmVzb2x2ZXJzLlxuICAgKlxuICAgKiBUT09EOiBvcHRpbWl6ZSBicm93c2VyIHZzIFNTUiByZXNvbHZlcnM7IGltYWdlLCByb2JvdHMgYW5kIGRlc2NyaXB0aW9uXG4gICAqICAgICAgIGFyZW4ndCBuZWVkZWQgZHVyaW5nIGJyb3dzaW5nLlxuICAgKiBUT0RPOiB3ZSBjYW4gbWFrZSB0aGUgbGlzdCBvZiByZXNvbHZlciB0eXBlcyBjb25maWd1cmFibGVcbiAgICovXG4gIHByb3RlY3RlZCByZXNvbHZlck1ldGhvZHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgdGl0bGU6ICdyZXNvbHZlVGl0bGUnLFxuICAgIGhlYWRpbmc6ICdyZXNvbHZlSGVhZGluZycsXG4gICAgZGVzY3JpcHRpb246ICdyZXNvbHZlRGVzY3JpcHRpb24nLFxuICAgIGJyZWFkY3J1bWJzOiAncmVzb2x2ZUJyZWFkY3J1bWJzJyxcbiAgICBpbWFnZTogJ3Jlc29sdmVJbWFnZScsXG4gICAgcm9ib3RzOiAncmVzb2x2ZVJvYm90cycsXG4gIH07XG5cbiAgZ2V0TWV0YSgpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmNtcy5nZXRDdXJyZW50UGFnZSgpLnBpcGUoXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICBzd2l0Y2hNYXAoKHBhZ2U6IFBhZ2UpID0+IHRoaXMuZ2V0TWV0YVJlc29sdmVyKHBhZ2UpKSxcbiAgICAgIHN3aXRjaE1hcCgobWV0YVJlc29sdmVyOiBQYWdlTWV0YVJlc29sdmVyKSA9PlxuICAgICAgICBtZXRhUmVzb2x2ZXIgPyB0aGlzLnJlc29sdmUobWV0YVJlc29sdmVyKSA6IG9mKG51bGwpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBhIGBQYWdlUmVzb2x2ZXJgIGhhcyBpbXBsZW1lbnRlZCBhIHJlc29sdmVyIGludGVyZmFjZSwgdGhlIHJlc29sdmVkIGRhdGFcbiAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxuICAgKiBAcGFyYW0gbWV0YVJlc29sdmVyXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPiB7XG4gICAgY29uc3QgcmVzb2x2ZU1ldGhvZHM6IE9ic2VydmFibGU8UGFnZU1ldGE+W10gPSBPYmplY3Qua2V5cyhcbiAgICAgIHRoaXMucmVzb2x2ZXJNZXRob2RzXG4gICAgKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBtZXRhUmVzb2x2ZXJbdGhpcy5yZXNvbHZlck1ldGhvZHNba2V5XV0pXG4gICAgICAubWFwKChrZXkpID0+XG4gICAgICAgIG1ldGFSZXNvbHZlclt0aGlzLnJlc29sdmVyTWV0aG9kc1trZXldXSgpLnBpcGUoXG4gICAgICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgW2tleV06IGRhdGEsXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICByZXR1cm4gdW5pdGVMYXRlc3QocmVzb2x2ZU1ldGhvZHMpLnBpcGUoXG4gICAgICBtYXAoKGRhdGEpID0+IE9iamVjdC5hc3NpZ24oe30sIC4uLmRhdGEpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSByZXNvbHZlciB3aXRoIHRoZSBiZXN0IG1hdGNoLCBiYXNlZCBvbiBhIHNjb3JlXG4gICAqIGdlbmVyYXRlZCBieSB0aGUgcmVzb2x2ZXIuXG4gICAqXG4gICAqIFJlc29sdmVycyBtYXRjaCBieSBkZWZhdWx0IG9uIGBQYWdlVHlwZWAgYW5kIGBwYWdlLnRlbXBsYXRlYC5cbiAgICovXG4gIHByb3RlY3RlZCBnZXRNZXRhUmVzb2x2ZXIocGFnZTogUGFnZSk6IE9ic2VydmFibGU8UGFnZU1ldGFSZXNvbHZlcj4ge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVycyQucGlwZShcbiAgICAgIG1hcCgocmVzb2x2ZXJzKSA9PiByZXNvbHZlQXBwbGljYWJsZShyZXNvbHZlcnMsIFtwYWdlXSwgW3BhZ2VdKSlcbiAgICApO1xuICB9XG59XG4iXX0=