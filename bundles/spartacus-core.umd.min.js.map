{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/base-event.model.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/state/utils/loader/loader.helpers.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","OccConfig","_super","SiteContextConfig","AnonymousConsentsConfig","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","AuthConfig","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","entityStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","LoadClientToken","_this","StateLoaderActions.LoaderLoadAction","LoadClientTokenFail","StateLoaderActions.LoaderFailAction","LoadClientTokenSuccess","StateLoaderActions.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","RoutingConfig","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","OccEndpointsService","baseSiteService","SCOPE_SUFFIX","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","encodeURIComponent","httpParamsOptions","fromString","httpParams_1","HttpParams","toString","endpointsConfig","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","useExisting","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateLoaderActions.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateLoaderSelectors.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateLoaderSelectors.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateLoaderSelectors.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateLoaderSelectors.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","decodeURIComponent","consentsUpdated","newConsents","previousConsents","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","substr","isFeatureEnabled","feature","featureConfig","DeferLoadingStrategy","FeatureConfigService","isLevel","isEnabled","FeaturesConfig","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","exports","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","featureConfigService","getCartEndpoint","cartEndpoint","cartId","productCode","quantity","toAdd","legacyAdd","code","qty","update","entryNumber","pickupStore","legacyUpdate","patch","remove","legacyRemove","queryString","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","DETAILS_PARAMS","OccCartAdapter","loadAll","pluck","legacyLoadAll","legacyLoad","oldCartId","toMergeCartGuid","legacyCreate","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","CustomEncoder","encodeKey","encodeValue","decodeKey","decodeValue","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","encoder","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","product_scopes","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","getOrderEndpoint","orderCode","orderId","loadHistory","legacyLoadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","BaseEvent","EventService","eventsMeta","eventType","source$","getEventMeta","sources$","unregister","newSources","s$","output$","getInputSubject","eventMeta","inputSubject$","Subject","validateEventType","createEventMeta","BehaviorSubject","merge","share","validateEventStream","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateEntityLoaderSelectors.entityStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateEntityLoaderActions.EntityLoadAction","CancelOrderFail","StateEntityLoaderActions.EntityFailAction","CancelOrderSuccess","StateEntityLoaderActions.EntitySuccessAction","ResetCancelOrderProcess","StateEntityLoaderActions.EntityResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","initializeContext","langService","currService","configInit","contextServiceProviders","APP_INITIALIZER","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","val","unsubscribe","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","replaceState","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","ngOnDestroy","initSiteContextRoutesHandler","siteContextRoutesHandler","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","activateLanguage$","SiteContextActions.SET_ACTIVE_LANGUAGE","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","activateCurrency$","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","ReactiveFormsModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","BadGatewayHandler","responseStatus","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","subject","subjectType","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","HttpErrorInterceptor","handlers","reverse","handleErrorResponse","handler","getResponseHandler","h","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","GlobalMessageConfig","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","customerId","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","getCartIdByUserId","isTempCartId","CREATE_CART","LOAD_CART","MERGE_CART","DELETE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","ClearExpiredCoupons","ClearCart","DeleteCart","DeleteCartFail","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","SET_TEMP_CART","REMOVE_CART","RemoveTempCart","SetTempCart","LoadMultiCart","LoadMultiCartFail","LoadMultiCartSuccess","MergeMultiCart","MergeMultiCartSuccess","ResetMultiCartDetails","RemoveCart","AddEmailToMultiCart","AddEmailToMultiCartFail","AddEmailToMultiCartSuccess","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearMultiCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","DeprecatedCartActions.MergeCart","loadCart","DeprecatedCartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","DeprecatedCartActions.AddEmailToCart","DeprecatedCartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","CartVoucherService","activeCartService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","SelectiveCartService","userService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","WishListService","createWishList","description","CartActions.CreateWishList","getWishList","wishListId","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","MultiCartSelectors.getWishListId","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateEntitySelectors.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","from","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","_launchInSmartEdit","isLaunchInSmartEdit","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","withdrawOn","notifier","switchMapTo","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","err","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","CartActions.LoadCart","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","DeprecatedCartActions.LOAD_CART","groupBy","group$","DeprecatedCartActions.LoadCartSuccess","CartActions.LoadMultiCartSuccess","CartActions.RemoveCart","DeprecatedCartActions.LoadCartFail","CartActions.LoadMultiCartFail","CartActions.ClearExpiredCoupons","DeprecatedCartActions.ClearCart","createCart$","DeprecatedCartActions.CREATE_CART","conditionalActions","DeprecatedCartActions.MergeCartSuccess","CartActions.MergeMultiCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","DeprecatedCartActions.MERGE_CART","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","DeprecatedCartActions.ResetCartDetails","CartActions.ResetMultiCartDetails","addEmail$","DeprecatedCartActions.AddEmailToCartSuccess","CartActions.AddEmailToMultiCartSuccess","DeprecatedCartActions.AddEmailToCartFail","CartActions.AddEmailToMultiCartFail","deleteCart$","DeprecatedCartActions.DELETE_CART","DeprecatedCartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.LoadCartFail","resetWishList$","activeCartReducer","CartActions.CREATE_CART","CartActions.REMOVE_CART","cartEntitiesReducer","CartActions.SET_TEMP_CART","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCart","CartActions.ClearMultiCartState","CartActions.SetActiveCartId","MultiCartEffects","loadCart2$","CartActions.LoadMultiCart","setTempCart$","CartActions.RemoveTempCart","mergeCart2$","CartActions.MergeMultiCart","addEmail2$","CartActions.AddEmailToMultiCart","removeCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","initialState$9","getDeliveryAddressSelector","getDeliveryModeSelector","deliveryMode","getPaymentDetailsSelector","getOrderDetailsSelector","orderDetails","getCheckoutState","checkoutState","steps","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","supported","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","initialState$a","cardTypesEntities","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cart_1","activeCart","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","CmsStructureConfig","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentLoader","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesConfig","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","cmsComponentConnector","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","matchingResolvers","resolver","DynamicAttributeService","addDynamicAttributes","element","renderer","groupProps","propName","propValue","classItem","classList","setAttribute","toLowerCase","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","debug","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","defaultI18nConfig","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","Observable","subscriber","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_enabled","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","PersonalizationConfig","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","cmsService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","codes","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","SmartEditService","zone","isPreviewPage","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","launchInSmartEdit","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","attr","classes","run","NgZone","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","StoreFinderConfig","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\n\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\n\nexport function entityStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityStateSelector(state, id);\n  return entityState.value;\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.loading;\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.error;\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return entityState.success;\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\n\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig =\n      this.config && this.config.routing && this.config.routing.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","export enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  private readonly SCOPE_SUFFIX = '_scopes';\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope = ''\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions;\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = { fromString: queryParamsFromEndpoint };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope: string): string {\n    const endpointsConfig =\n      this.config.backend &&\n      this.config.backend.occ &&\n      this.config.backend.occ.endpoints;\n\n    if (scope) {\n      const endpointConfig = endpointsConfig[`${endpoint}${this.SCOPE_SUFFIX}`];\n      if (endpointConfig && endpointConfig[scope]) {\n        return endpointConfig[scope];\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return endpointsConfig[endpoint] || endpoint;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(\n    config: AuthConfig,\n    http: HttpClient,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(config: AuthConfig, http: HttpClient);\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(\n    http: HttpClient,\n    config: AuthConfig,\n    // tslint:disable-next-line:unified-signatures\n    occEndpointsService: OccEndpointsService\n  );\n\n  /**\n   * @deprecated since version 1.1\n   * Use constructor(http: HttpClient, config: AuthConfig, occEndpointsService: OccEndpointsService) instead\n   */\n  constructor(http: HttpClient, config: AuthConfig);\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService?: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { StateConfig } from './config/state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n        { provide: StateConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AuthConfig } from './config/auth-config';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        ...AuthServices,\n        { provide: AuthConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { LoaderState } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","export abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n\nexport const ANONYMOUS_CONSENTS_FEATURE = 'anonymousConsents';\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [_: string]: CmsComponentMapping;\n}\n\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n        {\n          provide: FeaturesConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyAdd(userId, cartId, productCode, quantity);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyUpdate(userId, cartId, entryNumber, qty, pickupStore);\n    }\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    // TODO: Deprecated, remove Issue: #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyRemove(userId, cartId, entryNumber);\n    }\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyAdd(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const url = this.getCartEndpoint(userId) + cartId + '/entries';\n\n    const params = new HttpParams({\n      fromString: 'code=' + productCode + '&qty=' + quantity,\n    });\n\n    const toAdd = JSON.stringify({});\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyUpdate(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n    let queryString = 'qty=' + qty;\n\n    if (pickupStore) {\n      queryString = queryString + '&pickupStore=' + pickupStore;\n    }\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http\n      .patch<CartModification>(url, {}, { headers, params })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyRemove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const url =\n      this.getCartEndpoint(userId) + cartId + '/entries/' + entryNumber;\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_CART_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n// TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.\nconst DETAILS_PARAMS =\n  'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +\n  'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +\n  'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +\n  'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +\n  'appliedVouchers,productDiscounts(formattedValue),user';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = `users/${userId}/carts/`;\n    return this.occEndpointsService.getEndpoint(cartEndpoint);\n  }\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadAll(userId);\n    }\n\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      // TODO: Deprecated, remove Issue: #4125.\n      if (!this.featureConfigService.isLevel('1.1')) {\n        return this.legacyLoad(userId, cartId);\n      }\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n    // TODO: Deprecated, remove Issue: #4125.\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);\n    }\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadAll(userId: string): Observable<Cart[]> {\n    const url = this.getCartEndpoint(userId);\n    const params = new HttpParams({\n      fromString: `fields=carts(${DETAILS_PARAMS},saveTime)`,\n    });\n\n    return this.http\n      .get<Occ.CartList>(url, { params })\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, cartId: string): Observable<Cart> {\n    const url = this.getCartEndpoint(userId) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${DETAILS_PARAMS}`,\n    });\n\n    return this.http\n      .get<Occ.Cart>(url, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyCreate(\n    userId: string,\n    toAdd: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const url = this.getCartEndpoint(userId);\n    let queryString = `fields=${DETAILS_PARAMS}`;\n\n    if (oldCartId) {\n      queryString = `${queryString}&oldCartId=${oldCartId}`;\n    }\n    if (toMergeCartGuid) {\n      queryString = `${queryString}&toMergeCartGuid=${toMergeCartGuid}`;\n    }\n\n    const params = new HttpParams({\n      fromString: queryString,\n    });\n\n    return this.http\n      .post<Occ.Cart>(url, toAdd, { params })\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product:\n          'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n        product_scopes: {\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport {\n  getContextParameterValues,\n  getContextParameterDefault,\n} from '../config/context-config-utils';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(query, searchConfig, longitudeLatitude).pipe(\n      this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER)\n    );\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String('10000000');\n    } else {\n      params['query'] = query;\n    }\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { FeatureConfigService } from '../../../features-config/services/feature-config.service';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected featureConfigService?: FeatureConfigService\n  ) {}\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  protected getOrderEndpoint(userId: string): string {\n    const orderEndpoint = 'users/' + userId + '/orders';\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoad(userId, orderCode);\n    }\n\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    // TODO: Deprecated, remove Issue #4125\n    if (!this.featureConfigService.isLevel('1.1')) {\n      return this.legacyLoadHistory(userId, pageSize, currentPage, sort);\n    }\n\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoad(userId: string, orderCode: string): Observable<Order> {\n    const url = this.getOrderEndpoint(userId) + '/' + orderCode;\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<Occ.Order>(url, {\n        params,\n      })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  /**\n   * @deprecated Since 1.1\n   * Use configurable endpoints.\n   * Remove issue: #4125\n   */\n  private legacyLoadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const url = this.getOrderEndpoint(userId);\n    let params = new HttpParams();\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (sort) {\n      params = params.set('sort', sort);\n    }\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url, { params: params })\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { OccConfig } from './config/occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        { provide: OccConfig, useExisting: Config },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { iif, Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  ANONYMOUS_CONSENTS_FEATURE,\n  isFeatureEnabled,\n} from '../../features-config/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return iif(\n      () => isFeatureEnabled(this.config, ANONYMOUS_CONSENTS_FEATURE),\n      this.anonymousConsentsService.getConsents().pipe(\n        take(1),\n        withLatestFrom(this.authService.isUserLoggedIn()),\n        switchMap(([consents, isUserLoggedIn]) => {\n          if (!this.isOccUrl(request.url)) {\n            return next.handle(request);\n          }\n\n          const clonedRequest = this.handleRequest(consents, request);\n          return next.handle(clonedRequest).pipe(\n            tap((event) => {\n              if (event instanceof HttpResponse) {\n                this.handleResponse(\n                  isUserLoggedIn,\n                  event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                  consents\n                );\n              }\n            })\n          );\n        })\n      ),\n      next.handle(request)\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","/**\n * Base class for events.\n *\n * For convenience it copies all properties of the argument object into the properties of the class instance.\n *\n * Provides type safety both for the argument and the result class instance. For example:\n *\n * ```\n * export class CreateCartSuccess extends BaseEvent<CreateCartSuccess> {\n *   cart: Cart;\n * }\n * const event = new CreateCartSuccess({ cart: ... });\n * event.cart\n * ```\n */\nexport abstract class BaseEvent<T> {\n  constructor(data: T) {\n    Object.assign(this, data);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { share, switchMap, tap } from 'rxjs/operators';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * Observable with array of sources of the event\n   */\n  sources$: BehaviorSubject<Observable<T>[]>;\n\n  /**\n   * Output observable with merged all event sources\n   */\n  output$: Observable<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const event = this.getEventMeta(eventType);\n    const sources: Observable<T>[] = event.sources$.value;\n    if (sources.includes(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      event.sources$.next([...sources, source$]);\n    }\n\n    return () => this.unregister(eventType, source$);\n  }\n\n  /**\n   * Unregisters an event source for the given event type\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   */\n  private unregister<T>(eventType: Type<T>, source$: Observable<T>): void {\n    const event = this.getEventMeta(eventType);\n    const newSources: Observable<T>[] = event.sources$.value.filter(\n      (s$) => s$ !== source$\n    );\n    event.sources$.next(newSources);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    return this.getEventMeta(eventType).output$;\n  }\n\n  /**\n   * Dispatches a single event.\n   *\n   * However, it's recommended to use method `register` instead, whenever the event can come from some stream.\n   *  It allows for lazy computations in the event source stream -\n   *  if no one subscribes to the event, the logic of the event source stream won't be evaluated.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    const sources$ = new BehaviorSubject<Observable<T>[]>([]);\n    let output$ = sources$.pipe(\n      switchMap((sources: Observable<T>[]) => merge(...sources)),\n      share() // share the result observable to avoid merging sources for each subscriber\n    );\n\n    if (isDevMode()) {\n      output$ = this.validateEventStream(output$, eventType);\n    }\n\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      sources$,\n      output$,\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/index';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory ? factory(action) : new eventType(action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateEntityLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateEntityLoaderSelectors.entityStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { LoaderState } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: LoaderState<Address[]>;\n  consents: LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: LoaderState<PaymentDetails[]>;\n  orders: LoaderState<OrderHistoryList>;\n  order: LoaderState<Order>;\n  orderReturn: LoaderState<ReturnRequest>;\n  orderReturnList: LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: LoaderState<NotificationPreference[]>;\n  productInterests: LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateLoaderActions.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateLoaderActions.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateLoaderActions.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateLoaderSelectors.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateLoaderSelectors.loaderSuccessSelector(state),\n    loading: StateLoaderSelectors.loaderLoadingSelector(state),\n    regions: StateLoaderSelectors.loaderValueSelector(state).entities,\n    country: StateLoaderSelectors.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateLoaderSelectors.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getConsentsState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateLoaderSelectors.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport {\n  ANONYMOUS_CONSENTS_FEATURE,\n  isFeatureEnabled,\n} from '../../../features-config/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(() =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      () =>\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ) && Boolean(this.anonymousConsentsConfig.anonymousConsents)\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ) &&\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      baseSiteService.initialize();\n      langService.initialize();\n      currService.initialize();\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n  private isNavigating = false;\n\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.router.url);\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport function initSiteContextRoutesHandler(\n  siteContextRoutesHandler: SiteContextRoutesHandler,\n  configInit: ConfigInitializerService\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init();\n    });\n  };\n}\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initSiteContextRoutesHandler,\n    deps: [SiteContextRoutesHandler, ConfigInitializerService],\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.LanguageChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    map(() => new SiteContextActions.CurrencyChange())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { SiteContextConfig } from './config/site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        { provide: SiteContextConfig, useExisting: Config },\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AnonymousConsentsConfig } from './config/anonymous-consents-config';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        { provide: AnonymousConsentsConfig, useExisting: Config },\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateLoaderActions.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateLoaderActions.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  abstract responseStatus: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.subjectType === 'cart' && e.reason === 'notFound')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpResponseStatus } from '../models/response-status.model';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {\n    // We reverse the handlers to allow for custom handlers\n    // that replace standard handlers\n    this.handlers.reverse();\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    const status = response.status;\n    let handler = this.handlers.find((h) => h.responseStatus === status);\n    if (!handler) {\n      handler = this.handlers.find(\n        (h) => h.responseStatus === HttpResponseStatus.UNKNOWN\n      );\n    }\n    return handler;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { Config, provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { GlobalMessageConfig } from './config/global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),\n    GlobalMessageService,\n    { provide: GlobalMessageConfig, useExisting: Config },\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/loader/loader-group.selectors';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { AsmConfig } from './config/asm-config';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [\n        { provide: AsmConfig, useExisting: Config },\n        ...interceptors,\n        provideDefaultConfig(defaultAsmConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi) {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart lifecycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const CLEAR_EXPIRED_COUPONS = '[Cart] Clear Expired Coupon';\n\nexport const CLEAR_CART = '[Cart] Clear Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {}\n}\n\nexport class AddEmailToCartFail {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddEmailToCartSuccess {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class LoadCart {\n  readonly type = LOAD_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; extraData?: any }\n  ) {}\n}\n\nexport class LoadCartFail {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCartSuccess {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeCartSuccess implements Action {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: { cartId: string; userId: string }) {}\n}\n\nexport class ResetCartDetails implements Action {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {}\n}\n\nexport class ClearExpiredCoupons implements Action {\n  readonly type = CLEAR_EXPIRED_COUPONS;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCart {\n  readonly type = CLEAR_CART;\n  constructor() {}\n}\n\nexport class DeleteCart {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartFail {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartFail\n  | ClearExpiredCoupons\n  | ClearCart;\n","import {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; [key: string]: any }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entry: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(public payload: { error: any; cartId: string; userId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entry: string;\n      qty: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(public payload: { error: any; userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartResetAddVoucher extends EntityResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n  EntityProcessesLoaderResetAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const REMOVE_TEMP_CART = '[Multi Cart] Remove Temp Cart';\n\nexport const LOAD_MULTI_CART = '[Multi Cart] Load Cart';\nexport const LOAD_MULTI_CART_FAIL = '[Multi Cart] Load Cart Fail';\nexport const LOAD_MULTI_CART_SUCCESS = '[Multi Cart] Load Cart Success';\n\nexport const MERGE_MULTI_CART = '[Multi Cart] Merge Cart';\nexport const MERGE_MULTI_CART_SUCCESS = '[Multi Cart] Merge Cart Success';\n\nexport const RESET_MULTI_CART_DETAILS = '[Multi Cart] Reset Cart Details';\n\nexport const SET_TEMP_CART = '[Multi Cart] Set Temp Cart';\n\nexport const REMOVE_CART = '[Multi Cart] Remove Cart';\n\nexport const ADD_EMAIL_TO_MULTI_CART = '[Multi Cart] Add Email';\nexport const ADD_EMAIL_TO_MULTI_CART_FAIL = '[Multi Cart] Add Email Fail';\nexport const ADD_EMAIL_TO_MULTI_CART_SUCCESS = '[Multi Cart] Add Email Success';\n\nexport const CART_PROCESSES_INCREMENT = '[Multi Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Multi Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Multi Cart] Set Active Cart Id';\n\nexport const CLEAR_MULTI_CART_STATE = '[Multi Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class RemoveTempCart extends EntityRemoveAction {\n  readonly type = REMOVE_TEMP_CART;\n  constructor(public payload: { tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\nexport class LoadMultiCart extends EntityLoadAction {\n  readonly type = LOAD_MULTI_CART;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadMultiCartFail extends EntityFailAction {\n  readonly type = LOAD_MULTI_CART_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class LoadMultiCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_MULTI_CART_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string; extraData?: any }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class MergeMultiCart implements Action {\n  readonly type = MERGE_MULTI_CART;\n  constructor(public payload: any) {}\n}\n\nexport class MergeMultiCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_MULTI_CART_SUCCESS;\n  constructor(\n    public payload: { oldCartId: string; cartId: string; userId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\nexport class ResetMultiCartDetails extends EntityProcessesLoaderResetAction {\n  readonly type = RESET_MULTI_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA, undefined);\n  }\n}\n\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class AddEmailToMultiCart extends EntityLoadAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToMultiCartFail extends EntityFailAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class AddEmailToMultiCartSuccess extends EntitySuccessAction {\n  readonly type = ADD_EMAIL_TO_MULTI_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\nexport class ClearMultiCartState extends EntityRemoveAction {\n  readonly type = CLEAR_MULTI_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA, null);\n  }\n}\n\nexport type MultiCartActions =\n  | RemoveTempCart\n  | SetTempCart\n  | LoadMultiCart\n  | LoadMultiCartFail\n  | LoadMultiCartSuccess\n  | MergeMultiCart\n  | MergeMultiCartSuccess\n  | ResetMultiCartDetails\n  | RemoveCart\n  | AddEmailToMultiCart\n  | AddEmailToMultiCartFail\n  | AddEmailToMultiCartSuccess\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearMultiCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport class LoadWishList implements Action {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: { userId: string; customerId: string }) {}\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string; extraData?: any }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport * as DeprecatedCartActions from '../store/actions/cart.action';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: any;\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({ userId, cartId, extraData }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new DeprecatedCartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new DeprecatedCartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entry: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entry: `${entryNumber}`,\n          qty: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new DeprecatedCartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new DeprecatedCartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable()\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\nimport { UserService } from '../../user/facade/user.service';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport { Cart } from '../../model/cart.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { map, filter, tap, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { OrderEntry } from '../../model/order.model';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\n\n@Injectable()\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(new CartActions.LoadWishList({ userId, customerId }));\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsComponent } from '../../model';\nimport { EntityState, LoaderState } from '../../state/index';\nimport { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: EntityLoaderState<string>;\n  product: EntityLoaderState<string>;\n  category: EntityLoaderState<string>;\n  catalog: EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateEntityLoaderActions } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport {\n  initialLoaderState,\n  LoaderState,\n  StateEntitySelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateEntitySelectors.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      initialLoaderState\n  );\n};\n\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) =>\n      StateLoaderSelectors.loaderValueSelector(loaderState) || false\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      if (componentState && exists) {\n        return componentState;\n      } else {\n        return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateEntityLoaderSelectors.entityStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateLoaderSelectors.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateEntityLoaderSelectors.entityStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateLoaderSelectors.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private _launchInSmartEdit = false;\n\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Set _launchInSmartEdit value\n   */\n  set launchInSmartEdit(value: boolean) {\n    this._launchInSmartEdit = value;\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchInSmartEdit(): boolean {\n    return this._launchInSmartEdit;\n  }\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      // TODO(issue:6431) - this `filter` should be removed.\n      // The reason for removal: with `filter` in place, when moving to a page that has restrictions, the component data will still emit the previous value.\n      // Removing it causes some components to fail, because they are not checking\n      // if the data is actually there. I noticed these that this component is failing, but there are possibly more:\n      // - `tab-paragraph-container.component.ts` when visiting any PDP page\n      filter((component) => !!component)\n    ) as Observable<T>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (entry: any) =>\n              new CartActions.CartAddEntrySuccess({\n                ...entry,\n                userId: payload.userId,\n                cartId: payload.cartId,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entry)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(payload.userId, payload.cartId, payload.entry, payload.qty)\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n              new DeprecatedCartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            });\n          }),\n          catchError((error) => {\n            if (error?.error?.errors) {\n              error.error.errors.forEach((err) => {\n                if (err.message) {\n                  this.messageService.add(\n                    err.message,\n                    GlobalMessageType.MSG_TYPE_ERROR\n                  );\n                }\n              });\n            }\n            return from([\n              new CartActions.CartAddVoucherFail(makeErrorSerializable(error)),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ]);\n          })\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  StateEntityLoaderActions,\n  StateLoaderActions,\n} from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateEntityLoaderActions.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateEntityLoaderActions.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateEntityLoaderActions.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateEntityLoaderActions.EntityResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryModeSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryModeFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport {\n  getActiveCartId,\n  getCartHasPendingProcessesSelectorFactory,\n} from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | DeprecatedCartActions.LoadCartFail\n    | CartActions.LoadMultiCartFail\n    | DeprecatedCartActions.LoadCartSuccess\n    | CartActions.LoadMultiCartSuccess\n    | CartActions.ClearExpiredCoupons\n    | DeprecatedCartActions.ClearCart\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.LOAD_CART),\n    map((action: DeprecatedCartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            // TODO: remove with the `cart` store feature\n            withLatestFrom(this.store.pipe(select(getActiveCartId))),\n            mergeMap(([cart, activeCartId]: [Cart, string]) => {\n              let actions = [];\n              if (cart) {\n                // `cart` store branch should only be updated for active cart\n                // avoid dispatching LoadCartSuccess action on different cart loads\n                if (\n                  payload.cartId === activeCartId ||\n                  payload.cartId === OCC_CART_ID_CURRENT\n                ) {\n                  actions.push(new DeprecatedCartActions.LoadCartSuccess(cart));\n                }\n                actions.push(\n                  new CartActions.LoadMultiCartSuccess({\n                    cart,\n                    userId: payload.userId,\n                    extraData: payload.extraData,\n                  })\n                );\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(new CartActions.RemoveCart(OCC_CART_ID_CURRENT));\n                }\n              } else {\n                actions = [\n                  new DeprecatedCartActions.LoadCartFail({}),\n                  new CartActions.LoadMultiCartFail({\n                    cartId: payload.cartId,\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // clear coupons actions just wanted to reload cart again\n                  // no need to do it in refresh or keep that action\n                  // however removing this action will be a breaking change\n                  // remove that action in 2.0 release\n                  // @deprecated since 1.4\n                  return from([\n                    new CartActions.LoadCart({ ...payload }),\n                    new CartActions.ClearExpiredCoupons({}),\n                  ]);\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) => err.reason === 'notFound' || 'UnknownResourceError'\n                );\n                if (\n                  cartNotFoundErrors.length > 0 &&\n                  payload.extraData &&\n                  payload.extraData.active\n                ) {\n                  // Clear cart is responsible for removing cart in `cart` store feature.\n                  // Remove cart does the same thing, but in `multi-cart` store feature.\n                  return from([\n                    new DeprecatedCartActions.ClearCart(),\n                    new CartActions.RemoveCart(payload.cartId),\n                  ]);\n                }\n              }\n              return from([\n                new DeprecatedCartActions.LoadCartFail(\n                  makeErrorSerializable(error)\n                ),\n                new CartActions.LoadMultiCartFail({\n                  cartId: payload.cartId,\n                  error: makeErrorSerializable(error),\n                }),\n              ]);\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | DeprecatedCartActions.MergeCartSuccess\n    | CartActions.MergeMultiCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new DeprecatedCartActions.MergeCartSuccess({\n                  userId: payload.userId,\n                  cartId: cart.code,\n                })\n              );\n              conditionalActions.push(\n                new CartActions.MergeMultiCartSuccess({\n                  userId: payload.userId,\n                  cartId: cart.code,\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                cart,\n                userId: payload.userId,\n                extraData: payload.extraData,\n                cartId: getCartIdByUserId(cart, payload.userId),\n                tempCartId: payload.tempCartId,\n                oldCartId: payload.oldCartId,\n                toMergeCartGuid: payload.toMergeCartGuid,\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                tempCartId: payload.tempCartId,\n                error: makeErrorSerializable(error),\n                userId: payload.userId,\n                oldCartId: payload.oldCartId,\n                toMergeCartGuid: payload.toMergeCartGuid,\n                extraData: payload.extraData,\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART),\n    map((action: DeprecatedCartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  refresh$: Observable<\n    DeprecatedCartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.ADD_EMAIL_TO_CART_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,\n      CartActions.CART_ADD_VOUCHER_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | DeprecatedCartActions.AddEmailToCartSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n          | CartActions.CartAddVoucherSuccess\n      ) => action.payload\n    ),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new DeprecatedCartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.MERGE_CART_SUCCESS,\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | DeprecatedCartActions.MergeCartSuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new DeprecatedCartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    DeprecatedCartActions.ResetCartDetails | CartActions.ResetMultiCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [\n        new DeprecatedCartActions.ResetCartDetails(),\n        new CartActions.ResetMultiCartDetails(),\n      ];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | DeprecatedCartActions.AddEmailToCartSuccess\n    | DeprecatedCartActions.AddEmailToCartFail\n    | CartActions.AddEmailToMultiCartFail\n    | CartActions.AddEmailToMultiCartSuccess\n    | CartActions.CartProcessesDecrement\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART),\n    map((action: DeprecatedCartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new DeprecatedCartActions.AddEmailToCartSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CartActions.AddEmailToMultiCartSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new DeprecatedCartActions.AddEmailToCartFail(\n                makeErrorSerializable(error)\n              ),\n              new CartActions.AddEmailToMultiCartFail({\n                error: makeErrorSerializable(error),\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new DeprecatedCartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<any> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.DELETE_CART),\n    map((action: DeprecatedCartActions.DeleteCart) => action.payload),\n    exhaustMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new DeprecatedCartActions.ClearCart();\n        }),\n        catchError((error) =>\n          of(\n            new DeprecatedCartActions.DeleteCartFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.CreateWishList\n    | CartActions.LoadCartFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === `wishlist${customerId}`\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: `wishlist${customerId}`,\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([new CartActions.LoadCartFail(makeErrorSerializable(error))])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadCartFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({ cart: wishList, userId }),\n          ]),\n          catchError((error) =>\n            from([new CartActions.LoadCartFail(makeErrorSerializable(error))])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_MULTI_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n      if (action.payload === state) {\n        return activeCartInitialState;\n      } else {\n        return state;\n      }\n    case CartActions.CLEAR_MULTI_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_MULTI_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearMultiCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_MULTI_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCart());\n    this.store.dispatch(new CartActions.ClearMultiCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport * as DeprecatedCartActions from '../actions/cart.action';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  loadCart2$: Observable<CartActions.LoadMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.LOAD_CART),\n    map(\n      (action: DeprecatedCartActions.LoadCart) =>\n        new CartActions.LoadMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveTempCart(action.payload);\n    })\n  );\n\n  @Effect()\n  mergeCart2$: Observable<CartActions.MergeMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART),\n    map(\n      (action: DeprecatedCartActions.MergeCart) =>\n        new CartActions.MergeMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  addEmail2$: Observable<CartActions.AddEmailToMultiCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.ADD_EMAIL_TO_CART),\n    map(\n      (action: CartActions.AddEmailToCart) =>\n        new CartActions.AddEmailToMultiCart(action.payload)\n    )\n  );\n\n  @Effect()\n  removeCart$: Observable<CartActions.RemoveCart> = this.actions$.pipe(\n    ofType(DeprecatedCartActions.DELETE_CART),\n    map((action: DeprecatedCartActions.DeleteCart) => action.payload),\n    map((payload) => new CartActions.RemoveCart(payload.cartId))\n  );\n\n  // TODO: Change actions to extend Increment action instead of doing extra dispatch in this effect\n  // Change for 2.0 release\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(\n      DeprecatedCartActions.ADD_EMAIL_TO_CART,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE,\n      CartActions.CART_ADD_VOUCHER\n    ),\n    map(\n      (\n        action:\n          | DeprecatedCartActions.AddEmailToCart\n          | CheckoutActions.ClearCheckoutDeliveryMode\n          | CartActions.CartAddVoucher\n      ) => action.payload\n    ),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { ActiveCartService } from './facade/active-cart.service';\nimport {\n  CartVoucherService,\n  SelectiveCartService,\n  WishListService,\n} from './facade/index';\nimport { MultiCartService } from './facade/multi-cart.service';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartVoucherService,\n        MultiCartService,\n        WishListService,\n        ActiveCartService,\n        SelectiveCartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateLoaderSelectors.loaderSuccessSelector(state) &&\n    !StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport * as DeprecatedCartActions from '../../../cart/store/actions/cart.action';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | DeprecatedCartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new DeprecatedCartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart(payload.cartId),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(DeprecatedCartActions.MERGE_CART_SUCCESS),\n    map((action: DeprecatedCartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId ? payload.cartId : OCC_CART_ID_CURRENT,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.CartProcessesDecrement\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail(\n                makeErrorSerializable(error)\n              ),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (cart && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId: cart.code,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentLoader: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentLoader.getList(componentUids, pageContext).pipe(\n      switchMap((components) =>\n        from(\n          components.map(\n            (component) =>\n              new CmsActions.LoadCmsComponentSuccess({\n                component,\n                uid: component.uid,\n                pageContext,\n              })\n          )\n        )\n      ),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","export abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable()\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        ExternalRoutesService,\n        { provide: ExternalRoutesConfig, useExisting: Config },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { Config } from '../config/config.module';\nimport { RoutingConfig } from './configurable-routes/config/routing-config';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n        { provide: RoutingConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state = false,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { CmsConfig } from './config/cms-config';\nimport { CmsStructureConfig } from './config/cms-structure.config';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [\n        CmsService,\n        { provide: CmsConfig, useExisting: Config },\n        { provide: CmsStructureConfig, useExisting: Config },\n        provideDefaultConfig(defaultCmsModuleConfig),\n      ],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: any[] = Object.keys(this.resolverMethods)\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    const matchingResolvers = this.resolvers.filter(\n      (resolver) => resolver.getScore(page) > 0\n    );\n    matchingResolvers.sort(function (a, b) {\n      return b.getScore(page) - a.getScore(page);\n    });\n    return matchingResolvers[0];\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smaredit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param properties: properties in each cms item response data\n   * @param element: slot or cms component element\n   * @param renderer\n   */\n  addDynamicAttributes(\n    properties: any,\n    element: Element,\n    renderer: Renderer2\n  ): void {\n    if (properties) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\n\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport i18next from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: i18next.InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport i18next from 'i18next';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\n\n@Injectable()\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslatePipe } from './translate.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { I18nConfig } from './config/i18n-config';\nimport { TranslationService } from './translation.service';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { CxDatePipe } from './date.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: I18nConfig, useExisting: Config },\n        { provide: TranslationService, useClass: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\n\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    /**\n     * If set to `true`, the integration with kyma will be enabled, and Open ID token will be retrieved when registering/logging in,\n     */\n    kyma_enabled?: boolean;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateLoaderActions.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderValueSelector\n);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderLoadingSelector\n);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderSuccessSelector\n);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(\n  getOpenIdTokenState,\n  StateLoaderSelectors.loaderErrorSelector\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_enabled: false,\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { iif, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<KymaActions.LoadOpenIdToken> = iif<\n    KymaActions.LoadOpenIdToken,\n    KymaActions.LoadOpenIdToken\n  >(\n    () => this.config.authentication && this.config.authentication.kyma_enabled,\n    this.actions$.pipe(\n      ofType<KymaActions.LoadOpenIdTokenSuccess>(\n        AuthActions.LOAD_USER_TOKEN_SUCCESS\n      ),\n      withLatestFrom(\n        this.actions$.pipe(\n          ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n        )\n      ),\n      map(\n        ([, loginAction]) =>\n          new KymaActions.LoadOpenIdToken({\n            username: loginAction.payload.userId,\n            password: loginAction.payload.password,\n          })\n      )\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService,\n    private config: KymaConfig\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaConfig } from './config/kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [\n    provideDefaultConfig(defaultKymaConfig),\n    ...KymaServices,\n    { provide: KymaConfig, useExisting: Config },\n  ],\n})\nexport class KymaModule {}\n","export abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { PersonalizationConfig } from './config/personalization-config';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  providers: [{ provide: PersonalizationConfig, useExisting: Config }],\n})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport {\n  initialLoaderState,\n  StateEntityLoaderSelectors,\n  StateLoaderSelectors,\n} from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductsFactory = (\n  codes: string[]\n): MemoizedSelector<StateWithProduct, Product[]> => {\n  return createSelector(\n    getProductState,\n    (details: EntityLoaderState<Product>) => {\n      return codes\n        .map((code) =>\n          details.entities[code] ? details.entities[code].value : undefined\n        )\n        .filter((product) => product !== undefined);\n    }\n  );\n};\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, LoaderState<Product>> => {\n  return createSelector(getProductState, (details) =>\n    scope\n      ? StateEntityLoaderSelectors.entityStateSelector(details, code)[scope] ||\n        initialLoaderState\n      : StateEntityLoaderSelectors.entityStateSelector(details, code)\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope?: string\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateLoaderSelectors.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = ''\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY).zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { LoaderState } from '../loader/loader-state';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * For backward compatibility, we accommodate scopes alongside current\n * loading/error/success/value flags, thus those names can't be used as scope\n * names.\n *\n * TODO: Improve, issue #5445\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T> | LoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> | LoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> | LoaderState<T> = initialLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> | LoaderState<T> => {\n    if (\n      action &&\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.scope\n    ) {\n      return {\n        ...state,\n        [action.meta.scope]: loader(state[action.meta.scope], action),\n      };\n    } else {\n      return loader(state, action);\n    }\n  };\n}\n","import { ScopedLoaderState } from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from '../entity-loader/entity-loader-state';\nimport { EntityLoaderAction } from '../entity-loader/entity-loader.action';\nimport { LoaderState } from '../loader/loader-state';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T> | LoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this.cmsService.launchInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","export abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl: string;\n    apiKey: string;\n    scale: number;\n    selectedMarkerScale: number;\n  };\n}\n","import { LoaderState } from '../../state';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: LoaderState<FindStoresState>;\n  viewAllStores: LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateLoaderActions.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateLoaderActions } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateLoaderActions.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateLoaderActions.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateLoaderActions.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateLoaderSelectors } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateLoaderSelectors.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderConfig } from './config/store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n    { provide: StoreFinderConfig, useExisting: Config },\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) =>\n            of(new UserActions.CancelOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateLoaderActions } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateLoaderActions.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { filter } from 'rxjs/operators';\n\nimport { EntityLoadAction } from '../entity-loader/entity-loader.action';\nimport { MonoTypeOperatorFunction } from 'rxjs';\n\nexport function ofLoaderLoad(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.load\n  );\n}\n\nexport function ofLoaderFail(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      action.meta.loader.error\n  );\n}\n\nexport function ofLoaderSuccess(\n  entityType: string\n): MonoTypeOperatorFunction<EntityLoadAction> {\n  return filter(\n    (action: EntityLoadAction) =>\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType &&\n      !action.meta.loader.load &&\n      !action.meta.loader.error\n  );\n}\n","export const testestsd = 'sare';\n"]}