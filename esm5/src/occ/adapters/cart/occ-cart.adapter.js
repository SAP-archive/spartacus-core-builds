import { __decorate } from "tslib";
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, pluck } from 'rxjs/operators';
import { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';
import { FeatureConfigService } from '../../../features-config/services/feature-config.service';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
import { InterceptorUtil, USE_CLIENT_TOKEN, } from '../../utils/interceptor-util';
import { OCC_USER_ID_ANONYMOUS, OCC_CART_ID_CURRENT, } from '../../utils/occ-constants';
// TODO: Deprecated, remove Issue: #4125. Use configurable endpoints.
var DETAILS_PARAMS = 'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,' +
    'entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue),updateable),' +
    'totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),' +
    'deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue),pickupItemsQuantity,net,' +
    'appliedVouchers,productDiscounts(formattedValue),user';
var OccCartAdapter = /** @class */ (function () {
    function OccCartAdapter(http, occEndpointsService, converterService, featureConfigService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
        this.featureConfigService = featureConfigService;
    }
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccCartAdapter.prototype.getCartEndpoint = function (userId) {
        var cartEndpoint = "users/" + userId + "/carts/";
        return this.occEndpointsService.getEndpoint(cartEndpoint);
    };
    OccCartAdapter.prototype.loadAll = function (userId) {
        // TODO: Deprecated, remove Issue: #4125.
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyLoadAll(userId);
        }
        return this.http
            .get(this.occEndpointsService.getUrl('carts', { userId: userId }))
            .pipe(pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
    };
    OccCartAdapter.prototype.load = function (userId, cartId) {
        if (cartId === OCC_CART_ID_CURRENT) {
            return this.loadAll(userId).pipe(map(function (carts) {
                if (carts) {
                    var activeCart = carts.find(function (cart) {
                        return cart['saveTime'] === undefined;
                    });
                    return activeCart;
                }
                else {
                    return null;
                }
            }));
        }
        else {
            // TODO: Deprecated, remove Issue: #4125.
            if (!this.featureConfigService.isLevel('1.1')) {
                return this.legacyLoad(userId, cartId);
            }
            return this.http
                .get(this.occEndpointsService.getUrl('cart', { userId: userId, cartId: cartId }))
                .pipe(this.converterService.pipeable(CART_NORMALIZER));
        }
    };
    OccCartAdapter.prototype.create = function (userId, oldCartId, toMergeCartGuid) {
        var toAdd = JSON.stringify({});
        // TODO: Deprecated, remove Issue: #4125.
        if (!this.featureConfigService.isLevel('1.1')) {
            return this.legacyCreate(userId, toAdd, oldCartId, toMergeCartGuid);
        }
        var params = {};
        if (oldCartId) {
            params = { oldCartId: oldCartId };
        }
        if (toMergeCartGuid) {
            params['toMergeCartGuid'] = toMergeCartGuid;
        }
        return this.http
            .post(this.occEndpointsService.getUrl('createCart', { userId: userId }, params), toAdd)
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    };
    OccCartAdapter.prototype.delete = function (userId, cartId) {
        var headers = new HttpHeaders();
        if (userId === OCC_USER_ID_ANONYMOUS) {
            headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        }
        return this.http.delete(this.occEndpointsService.getUrl('deleteCart', { userId: userId, cartId: cartId }), { headers: headers });
    };
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccCartAdapter.prototype.legacyLoadAll = function (userId) {
        var url = this.getCartEndpoint(userId);
        var params = new HttpParams({
            fromString: "fields=carts(" + DETAILS_PARAMS + ",saveTime)",
        });
        return this.http
            .get(url, { params: params })
            .pipe(pluck('carts'), this.converterService.pipeableMany(CART_NORMALIZER));
    };
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccCartAdapter.prototype.legacyLoad = function (userId, cartId) {
        var url = this.getCartEndpoint(userId) + cartId;
        var params = new HttpParams({
            fromString: "fields=" + DETAILS_PARAMS,
        });
        return this.http
            .get(url, { params: params })
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    };
    /**
     * @deprecated Since 1.1
     * Use configurable endpoints.
     * Remove issue: #4125
     */
    OccCartAdapter.prototype.legacyCreate = function (userId, toAdd, oldCartId, toMergeCartGuid) {
        var url = this.getCartEndpoint(userId);
        var queryString = "fields=" + DETAILS_PARAMS;
        if (oldCartId) {
            queryString = queryString + "&oldCartId=" + oldCartId;
        }
        if (toMergeCartGuid) {
            queryString = queryString + "&toMergeCartGuid=" + toMergeCartGuid;
        }
        var params = new HttpParams({
            fromString: queryString,
        });
        return this.http
            .post(url, toAdd, { params: params })
            .pipe(this.converterService.pipeable(CART_NORMALIZER));
    };
    OccCartAdapter.prototype.addEmail = function (userId, cartId, email) {
        var headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        var httpParams = new HttpParams().set('email', email);
        var url = this.occEndpointsService.getUrl('addEmail', {
            userId: userId,
            cartId: cartId,
        });
        return this.http.put(url, httpParams, { headers: headers });
    };
    OccCartAdapter.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OccEndpointsService },
        { type: ConverterService },
        { type: FeatureConfigService }
    ]; };
    OccCartAdapter = __decorate([
        Injectable()
    ], OccCartAdapter);
    return OccCartAdapter;
}());
export { OccCartAdapter };
//# sourceMappingURL=data:application/json;base64,