import { StateUtils } from '../../../state/utils/index';
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { EntityFailAction, EntityLoadAction, EntityLoaderResetAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, NOTIFICATION_PREFERENCES, } from '../user-state';
export const LOAD_NOTIFICATION_PREFERENCES = '[User] Load Notification Preferences';
export const LOAD_NOTIFICATION_PREFERENCES_FAIL = '[User] Load Notification Preferences Fail';
export const LOAD_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Load Notification Preferences Success';
export const UPDATE_NOTIFICATION_PREFERENCES = '[User] Update Notification Preferences';
export const UPDATE_NOTIFICATION_PREFERENCES_FAIL = '[User] Update Notification Preferences Fail';
export const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS = '[User] Update Notification Preferences Success';
export const RESET_NOTIFICATION_PREFERENCES = '[User] Reset Notification Preferences';
export const CLEAR_NOTIFICATION_PREFERENCES = '[User] Clear Notification Preferences';
export class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES;
    }
}
export class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES, payload);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(NOTIFICATION_PREFERENCES);
        this.payload = payload;
        this.type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class UpdateNotificationPreferences extends EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES;
    }
}
export class UpdateNotificationPreferencesFail extends EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;
    }
}
export class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.payload = payload;
        this.type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;
    }
}
export class ResetNotificationPreferences extends EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);
        this.type = RESET_NOTIFICATION_PREFERENCES;
    }
}
export class ClearNotificationPreferences extends StateUtils.LoaderResetAction {
    constructor() {
        super(NOTIFICATION_PREFERENCES);
        this.type = CLEAR_NOTIFICATION_PREFERENCES;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByZWZlcmVuY2UuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvYWN0aW9ucy9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQix1QkFBdUIsRUFDdkIsbUJBQW1CLEdBQ3BCLE1BQU0seURBQXlELENBQUM7QUFDakUsT0FBTyxFQUNMLDBDQUEwQyxFQUMxQyx3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7QUFHdkIsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQ3hDLHNDQUFzQyxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUM3QywyQ0FBMkMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FDaEQsOENBQThDLENBQUM7QUFDakQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQzFDLHdDQUF3QyxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUMvQyw2Q0FBNkMsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FDbEQsZ0RBQWdELENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUUxQyxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUUxRSxZQUFtQixPQUFlO1FBQ2hDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRGYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUR6QixTQUFJLEdBQUcsNkJBQTZCLENBQUM7SUFHOUMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFOUUsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEeEIsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsa0NBQWtDLENBQUM7SUFHbkQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFcEYsWUFBbUIsT0FBaUM7UUFDbEQsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFEZixZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcscUNBQXFDLENBQUM7SUFHdEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLGdCQUFnQjtJQUVqRSxZQUNTLE9BQWtFO1FBRXpFLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUY1RCxZQUFPLEdBQVAsT0FBTyxDQUEyRDtRQUZsRSxTQUFJLEdBQUcsK0JBQStCLENBQUM7SUFLaEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlDQUFrQyxTQUFRLGdCQUFnQjtJQUVyRSxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxlQUFlLEVBQUUsMENBQTBDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEM0QsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsb0NBQW9DLENBQUM7SUFHckQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9DQUFxQyxTQUFRLG1CQUFtQjtJQUUzRSxZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFEbEQsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFEM0MsU0FBSSxHQUFHLHVDQUF1QyxDQUFDO0lBR3hELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSx1QkFBdUI7SUFFdkU7UUFDRSxLQUFLLENBQUMsZUFBZSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFGNUQsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFGekIsU0FBSSxHQUFHLDhCQUE4QixDQUFDO0lBRy9DLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBQUk9DRVNTX0ZFQVRVUkUgfSBmcm9tICcuLi8uLi8uLi9wcm9jZXNzL3N0b3JlL3Byb2Nlc3Mtc3RhdGUnO1xuaW1wb3J0IHtcbiAgRW50aXR5RmFpbEFjdGlvbixcbiAgRW50aXR5TG9hZEFjdGlvbixcbiAgRW50aXR5TG9hZGVyUmVzZXRBY3Rpb24sXG4gIEVudGl0eVN1Y2Nlc3NBY3Rpb24sXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1sb2FkZXIvZW50aXR5LWxvYWRlci5hY3Rpb24nO1xuaW1wb3J0IHtcbiAgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lELFxuICBOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMsXG59IGZyb20gJy4uL3VzZXItc3RhdGUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJlZmVyZW5jZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL25vdGlmaWNhdGlvbi1wcmVmZXJlbmNlLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBMb2FkIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTCA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gTG9hZCBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFUyA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMID1cbiAgJ1tVc2VyXSBVcGRhdGUgTm90aWZpY2F0aW9uIFByZWZlcmVuY2VzIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gVXBkYXRlIE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVNFVF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVMgPVxuICAnW1VzZXJdIFJlc2V0IE5vdGlmaWNhdGlvbiBQcmVmZXJlbmNlcyc7XG5leHBvcnQgY29uc3QgQ0xFQVJfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTID1cbiAgJ1tVc2VyXSBDbGVhciBOb3RpZmljYXRpb24gUHJlZmVyZW5jZXMnO1xuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdKSB7XG4gICAgc3VwZXIoTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBFbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBwcmVmZXJlbmNlczogTm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdIH1cbiAgKSB7XG4gICAgc3VwZXIoUFJPQ0VTU19GRUFUVVJFLCBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWwgZXh0ZW5kcyBFbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lELCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzIGV4dGVuZHMgRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBOb3RpZmljYXRpb25QcmVmZXJlbmNlW10pIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIFVQREFURV9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0Tm90aWZpY2F0aW9uUHJlZmVyZW5jZXMgZXh0ZW5kcyBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVNFVF9OT1RJRklDQVRJT05fUFJFRkVSRU5DRVM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgVVBEQVRFX05PVElGSUNBVElPTl9QUkVGRVJFTkNFU19QUk9DRVNTX0lEKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xlYXJOb3RpZmljYXRpb25QcmVmZXJlbmNlcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ0xFQVJfTk9USUZJQ0FUSU9OX1BSRUZFUkVOQ0VTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihOT1RJRklDQVRJT05fUFJFRkVSRU5DRVMpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvblByZWZlcmVuY2VBY3Rpb24gPVxuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc1xuICB8IExvYWROb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBMb2FkTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNTdWNjZXNzXG4gIHwgVXBkYXRlTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc0ZhaWxcbiAgfCBVcGRhdGVOb3RpZmljYXRpb25QcmVmZXJlbmNlc1N1Y2Nlc3NcbiAgfCBSZXNldE5vdGlmaWNhdGlvblByZWZlcmVuY2VzXG4gIHwgQ2xlYXJOb3RpZmljYXRpb25QcmVmZXJlbmNlcztcbiJdfQ==