{"version":3,"file":"asm-auth.service.d.ts","sources":["asm-auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { StateWithClientAuth } from '../../auth/client-auth/store/client-auth-state';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { AuthRedirectService } from '../../auth/user-auth/services/auth-redirect.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { GlobalMessageService } from '../../global-message/index';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AsmAuthStorageService } from './asm-auth-storage.service';\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\nexport declare class AsmAuthService extends AuthService {\n    protected store: Store<StateWithClientAuth>;\n    protected userIdService: UserIdService;\n    protected oAuthLibWrapperService: OAuthLibWrapperService;\n    protected authStorageService: AsmAuthStorageService;\n    protected authRedirectService: AuthRedirectService;\n    protected globalMessageService: GlobalMessageService;\n    protected routingService: RoutingService;\n    constructor(store: Store<StateWithClientAuth>, userIdService: UserIdService, oAuthLibWrapperService: OAuthLibWrapperService, authStorageService: AsmAuthStorageService, authRedirectService: AuthRedirectService, globalMessageService: GlobalMessageService, routingService: RoutingService);\n    protected canUserLogin(): boolean;\n    protected warnAboutLoggedCSAgent(): void;\n    /**\n     * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n     * @param userId\n     * @param password\n     */\n    authorize(userId: string, password: string): Promise<void>;\n    /**\n     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n     */\n    loginWithRedirect(): boolean;\n    /**\n     * Logout a storefront customer.\n     */\n    logout(): Promise<any>;\n    /**\n     * Returns `true` if user is logged in or being emulated.\n     */\n    isUserLoggedIn(): Observable<boolean>;\n}\n"]}