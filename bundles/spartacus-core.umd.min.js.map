{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/org-unit.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment-type/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment-type.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-cost-center.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment-type/payment-type.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/default-occ-checkout-config.ts","ng://@spartacus/core/src/checkout/connectors/cost-center/checkout-cost-center.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/anonymous-consents/connectors/converters.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/cost-center/user-cost-center.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/organization/connectors/cost-center/converters.ts","ng://@spartacus/core/src/organization/connectors/budget/converters.ts","ng://@spartacus/core/src/occ/adapters/organization/occ-cost-center.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/organization/connectors/cost-center/cost-center.adapter.ts","ng://@spartacus/core/src/occ/adapters/organization/converters/occ-cost-center-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/organization/default-occ-organization-config.ts","ng://@spartacus/core/src/occ/adapters/organization/organization-occ.module.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/actions/user-cost-center.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-cost-center.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/checkout/store/actions/payment-types.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/checkout/events/checkout.events.ts","ng://@spartacus/core/src/checkout/events/checkout-event.builder.ts","ng://@spartacus/core/src/checkout/events/checkout-event.module.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/payment-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/cost-center/checkout-cost-center.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment-type/payment-type.connector.ts","ng://@spartacus/core/src/checkout/store/effects/payment-types.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/payment-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/checkout/facade/payment-type.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-cost-center.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/organization/connectors/cost-center/cost-center.connector.ts","ng://@spartacus/core/src/organization/organization.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/connectors/cost-center/user-cost-center.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/facade/user-cost-center.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-cost-center.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/user-cost-center.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/util/normalize-http-error.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","configurationFactoryProvidedInRoot","configurationFactory","inject","ConfigChunk","InjectFlags","Optional","DefaultConfigChunk","Config","InjectionToken","providedIn","factory","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","getRouteName","routeNamesByPath","initRouteNamesByPath","_d","paths","forEach","_e","entries","_f","_g","SemanticPathService","routingConfigService","urlParser","ROOT_URL","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","semanticRoute","getSemanticRoute","ɵ1$1","context","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","_activeBaseSite","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","B2BPaymentTypeEnum","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","ImageType","B2BUserGroup","VariantType","PriceType","VariantQualifier","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","AnonymousConsentCheckUpdatedVersions","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","checkConsentVersions","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","PAYMENT_TYPE_NORMALIZER","OccCheckoutPaymentTypeAdapter","loadPaymentTypes","paymentTypeList","paymentTypes","setPaymentType","paymentType","purchaseOrderNumber","OccCheckoutCostCenterAdapter","setCostCenter","costCenterId","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","defaultOccCheckoutConfig","setDeliveryAddress","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","PaymentTypeAdapter","CheckoutCostCenterAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","component","e_3","comp","flexType","e_5","CmsOccModule","CmsPageAdapter","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","ANONYMOUS_CONSENT_NORMALIZER","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","loadAnonymousConsents","head","observe","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","PRODUCT_INTERESTS_NORMALIZER","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","AnonymousConsentNormalizer","anonymousConsentsService","OccReturnRequestNormalizer","returnEntries","OccUserInterestsNormalizer","results","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","OccUserInterestsAdapter","getInterests","notificationType","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","COST_CENTER_NORMALIZER","COST_CENTERS_NORMALIZER","BUDGET_NORMALIZER","BUDGETS_NORMALIZER","OccCostCenterAdapter","costCenterCode","getCostCenterEndpoint","loadList","getAllCostCentersEndpoint","loadActiveList","getCostCentersEndpoint","costCenter","loadBudgets","getBudgetsEndpoint","assignBudget","budgetCode","unassignBudget","getBudgetEndpoint","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","headers$1","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","UserCostCenterAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","Period","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccCostCenterListNormalizer","costCenters","defaultOccOrganizationConfig","budgets","budget","orgUnitsAvailable","orgUnitsTree","orgUnitsApprovalProcesses","orgUnits","orgUnit","orgUnitUsers","orgUnitApprovers","orgUnitApprover","orgUnitUserRoles","orgUnitUserRole","orgUnitsAddresses","orgUnitsAddress","userGroups","userGroup","userGroupAvailableOrderApprovalPermissions","userGroupAvailableOrgCustomers","userGroupMembers","userGroupMember","userGroupOrderApprovalPermissions","userGroupOrderApprovalPermission","costCentersAll","costCenterBudgets","costCenterBudget","permissions","permission","orderApprovalPermissionTypes","b2bUsers","b2bUser","b2bUserApprovers","b2bUserApprover","b2bUserUserGroups","b2bUserUserGroup","b2bUserPermissions","b2bUserPermission","OrganizationOccModule","CostCenterAdapter","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","LoadActiveCostCenters","LoadActiveCostCentersFail","LoadActiveCostCentersSuccess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4$1","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","getCostCentersState","getCostCenters","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","checkConsentVersions$","concatMap","currentConsents","currentConsentVersions","templateVersion","newConsentVersions","detectUpdatedVersion","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","loadAnonymousConsentTemplates$","currentConsentTemplates","newConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","currentVersions","newVersions","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$s","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$t","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$m","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$w","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$o","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","initActiveCart","isJustLoggedIn","loadOrMerge","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","SetCostCenter","SetCostCenterFail","SetCostCenterSuccess","ResetSetCostCenterProcess","LoadPaymentTypes","LoadPaymentTypesFail","LoadPaymentTypesSuccess","ResetLoadPaymentTypesProcess","SetPaymentType","SetPaymentTypeFail","SetPaymentTypeSuccess","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$x","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$3","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutEventBuilder","stateEventService","orderPlacedEvent","OrderPlacedEvent","CheckoutEventModule","_checkoutEventBuilder","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","poNumber","po","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","initialState$c","paymentTypesEntities","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","fromPaymentTypes.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutCostCenterConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutCostCenterConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.ResetLoadPaymentTypesProcess","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","setCostCenter$","CheckoutActions.SetCostCenterSuccess","CheckoutActions.ClearCheckoutDeliveryAddress","CheckoutActions.SetCostCenterFail","PaymentTypeConnector","getPaymentTypes","PaymentTypesEffects","paymentTypeConnector","loadPaymentTypes$","CheckoutActions.LoadPaymentTypesSuccess","CheckoutActions.LoadPaymentTypesFail","setPaymentType$","CheckoutActions.SetPaymentTypeSuccess","CheckoutActions.SetPaymentTypeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$4","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getPoNumer","ɵ10","getCostCenter","ɵ11","getAddressVerificationResultsState","ɵ0$B","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$r","getPaymentTypesState","getPaymentTypesEntites","getAllPaymentTypes","getSelectedPaymentType","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","PaymentTypeService","CheckoutSelectors.getAllPaymentTypes","CheckoutActions.LoadPaymentTypes","CheckoutActions.SetPaymentType","CheckoutSelectors.getSelectedPaymentType","isAccountPayment","ACCOUNT_PAYMENT","getPoNumber","CheckoutSelectors.getPoNumer","CheckoutCostCenterService","CheckoutActions.SetCostCenter","CheckoutSelectors.getCostCenter","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$d","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","urlString","firstChild","urlSegment","x","guardName","lookupSemanticRoute","pageLabel","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$e","pageContextReducer","newItem","compItems","initialState$g","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","configInitializerFactory","configInitializer","ConfigInitializerModule","ConfigInitializerModule_1","configValidatorFactory","validators","ConfigValidatorModule","ConfigValidatorModule_1","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$E","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$F","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","CostCenterConnector","getBudgets","OrganizationModule","OrganizationModule_1","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$G","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$i","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$t","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$j","productReference","initialState$k","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$K","getFindStoresEntities","ɵ1$u","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","errorCallback","createElement","parseParams","async","addEventListener","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","UserCostCenterConnector","getActiveList","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","UserCostCenterService","loadActiveCostCenters","UserActions.LoadActiveCostCenters","UsersSelectors.getCostCentersState","getActiveCostCenters","process","getCostCenterAddresses","cc","unit","initialState$l","countryEntities","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$r","initialState$t","titleEntities","initialState$u","initialState$v","updatedConsentTemplate_1","initialState$w","updatedDetails","sorts","initialState$x","coupons","initialState$y","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$z","returnRequests","initialState$A","initialState$B","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","fromCostCenterReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserCostCenterEffects","userCostCenterConnector","loadActiveCostCenters$","UserActions.LoadActiveCostCentersSuccess","UserActions.LoadActiveCostCentersFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","normalizedError","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  inject,\n  InjectFlags,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n// separate function needed for production build:\nexport function configurationFactoryProvidedInRoot() {\n  return configurationFactory(\n    inject(ConfigChunk, InjectFlags.Optional),\n    inject(DefaultConfigChunk, InjectFlags.Optional)\n  );\n}\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration', {\n  providedIn: 'root',\n  factory: configurationFactoryProvidedInRoot,\n});\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken<object[]>('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken<object[]>(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\nimport { RouteConfig } from './routes-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  /**\n   * Reversed routing config for quick lookup of the route name by the configured path.\n   */\n  protected routeNamesByPath: { [path: string]: string };\n\n  constructor(protected config: RoutingConfig) {}\n\n  /**\n   * Returns the route config for the given route name.\n   */\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  /**\n   * Returns the configured route loading strategy.\n   */\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n\n  /**\n   * Returns the route name of the configured path.\n   *\n   * For example, when the config is:\n   * ```\n   * routing: {\n   *   routes: {\n   *      addressBook: { paths: ['my-account/address-book'] }\n   *   }\n   * }\n   * ```\n   *\n   * the `getRouteName('my-account/address-book')` returns `'addressBook'`.\n   */\n  getRouteName(path: string) {\n    if (!this.routeNamesByPath) {\n      this.initRouteNamesByPath();\n    }\n    return this.routeNamesByPath[path];\n  }\n\n  /**\n   * Initializes the property `routeNamesByPath`.\n   *\n   * The original config allows for reading configured path by the route name.\n   * But this method builds up a structure with a 'reversed config'\n   * to read quickly the route name by the path.\n   */\n  protected initRouteNamesByPath() {\n    this.routeNamesByPath = {};\n\n    for (const [routeName, routeConfig] of Object.entries(\n      this.config?.routing?.routes\n    )) {\n      routeConfig?.paths?.forEach((path) => {\n        if (isDevMode() && this.routeNamesByPath[path]) {\n          console.error(\n            `The same path '${path}' is configured for two different route names: '${this.routeNamesByPath[path]}' and '${routeName}`\n          );\n        }\n        this.routeNamesByPath[path] = routeName;\n      });\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n  /**\n   * Endpoint for set delivery address to cart\n   */\n  setDeliveryAddress?: string | OccEndpoint;\n  /**\n   * Endpoint for place order\n   */\n  placeOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for budget\n   *\n   * @member {string}\n   */\n  budget?: string | OccEndpoint;\n  /**\n   * Endpoint for budgets list\n   *\n   * @member {string}\n   */\n  budgets?: string | OccEndpoint;\n  /**\n   * Endpoint for organizations\n   *\n   * @member {string}\n   */\n  orgUnits?: string | OccEndpoint;\n  /**\n   * Endpoint for organizations list\n   *\n   * @member {string}\n   */\n  orgUnitsAvailable?: string | OccEndpoint;\n  /**\n   * Endpoint for organization units tree\n   *\n   * @member {string}\n   */\n  orgUnitsTree?: string | OccEndpoint;\n  /**\n   * Endpoint for approval processes for organization units\n   *\n   * @member {string}\n   */\n  orgUnitsApprovalProcesses?: string | OccEndpoint;\n  /**\n   * Endpoint for organization\n   *\n   * @member {string}\n   */\n  orgUnit?: string | OccEndpoint;\n  /**\n   * Endpoint for orgUnitUsers:\n   *\n   * @member {string}\n   */\n  orgUnitUsers?: string | OccEndpoint;\n  /**\n   * Endpoint for add orgUnitUserRoles (except approver):\n   *\n   * @member {string}\n   */\n  orgUnitUserRoles?: string | OccEndpoint;\n  /**\n   * Endpoint for remove orgUnitUserRole (except approver):\n   *\n   * @member {string}\n   */\n  orgUnitUserRole?: string | OccEndpoint;\n  /**\n   * Endpoint for add orgUnitApprovers:\n   *\n   * @member {string}\n   */\n  orgUnitApprovers?: string | OccEndpoint;\n  /**\n   * Endpoint for delete orgUnitApprover:\n   *\n   * @member {string}\n   */\n  orgUnitApprover?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit addresses\n   *\n   * @member {string}\n   */\n  orgUnitsAddresses?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit address\n   *\n   * @member {string}\n   */\n  orgUnitsAddress?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit user groups list\n   *\n   * @member {string}\n   */\n  userGroups?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit user group\n   *\n   * @member {string}\n   */\n  userGroup?: string | OccEndpoint;\n  /**\n   * Endpoint for costCenter list\n   *\n   * @member {string}\n   */\n  userGroupAvailableOrderApprovalPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupAvailableOrderApprovalPermissions list\n   *\n   * @member {string}\n   */\n  userGroupAvailableOrgCustomers?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupAvailableOrgCustomers list\n   *\n   * @member {string}\n   */\n  userGroupMembers?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupMembers list\n   *\n   * @member {string}\n   */\n  userGroupMember?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupMember\n   *\n   * @member {string}\n   */\n  userGroupOrderApprovalPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupOrderApprovalPermissions list\n   *\n   * @member {string}\n   */\n  userGroupOrderApprovalPermission?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupOrderApprovalPermission\n   *\n   * @member {string}\n   */\n  costCenters?: string | OccEndpoint;\n  /**\n   * Endpoint for all costCenters\n   *\n   * @member {string}\n   */\n  costCentersAll?: string | OccEndpoint;\n  /**\n   * Endpoint for costCenter\n   *\n   * @member {string}\n   */\n  costCenter?: string | OccEndpoint;\n  /**\n   * Endpoint for budgets assigned to costCenter\n   *\n   * @member {string}\n   */\n  costCenterBudgets?: string | OccEndpoint;\n  /**\n   * Endpoint for budget assigned to costCenter\n   *\n   * @member {string}\n   */\n  costCenterBudget?: string | OccEndpoint;\n  /**\n   * Endpoint for permission list\n   *\n   * @member {string}\n   */\n  permissions?: string | OccEndpoint;\n  /**\n   * Endpoint for permission\n   *\n   * @member {string}\n   */\n  permission?: string | OccEndpoint;\n  /**\n   * Endpoint for order approval permission types\n   *\n   * @member {string}\n   */\n  orderApprovalPermissionTypes?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customers\n   *\n   * @member {string}\n   */\n  b2bUsers?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer\n   *\n   * @member {string}\n   */\n  b2bUser?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer approvers\n   *\n   * @member {string}\n   */\n  b2bUserApprovers?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer approver\n   *\n   * @member {string}\n   */\n  b2bUserApprover?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer user groups\n   *\n   * @member {string}\n   */\n  b2bUserUserGroups?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer user group\n   *\n   * @member {string}\n   */\n  b2bUserUserGroup?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer permissions\n   *\n   * @member {string}\n   */\n  b2bUserPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer permission\n   *\n   * @member {string}\n   */\n  b2bUserPermission?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\nimport { CostCenter } from './org-unit.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport enum B2BPaymentTypeEnum {\n  ACCOUNT_PAYMENT = 'ACCOUNT',\n  CARD_PAYMENT = 'CARD',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentType {\n  code?: string;\n  displayName?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface B2BPaymentType {\n  code?: string;\n  displayName?: string;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  costCenter?: CostCenter;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  paymentType?: B2BPaymentType;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  purchaseOrderNumber?: string;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Currency, User } from './misc.model';\n\nexport interface CostCenter {\n  active?: string;\n  activeFlag?: boolean;\n  code?: string;\n  name?: string;\n  originalCode?: string;\n  unit?: B2BUnit;\n  currency?: Currency;\n}\n\nexport interface B2BUnitNode {\n  active?: boolean;\n  children?: B2BUnitNode[];\n  id?: string;\n  name?: string;\n  parent?: string;\n}\n\nexport interface B2BUnit {\n  active?: boolean;\n  addresses?: B2BAddress[];\n  uid?: string;\n  name?: string;\n  parentOrgUnit?: Partial<B2BUnit>;\n  approvalProcess?: B2BApprovalProcess;\n  administrators?: B2BUser[];\n  approvers?: B2BUser[];\n  customers?: B2BUser[];\n  costCenters?: CostCenter[];\n  managers?: B2BUser[];\n}\n\nexport interface B2BAddress {\n  cellphone?: string;\n  companyName?: string;\n  country?: {\n    isocode?: string;\n    name?: string;\n  };\n  defaultAddress?: true;\n  district?: string;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: {\n    countryIso?: string;\n    isocode?: string;\n    isocodeShort?: string;\n    name?: string;\n  };\n  shippingAddress?: true;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: true;\n}\n\nexport interface B2BUser extends User {\n  active?: boolean;\n  approvers?: [];\n  orgUnit?: B2BUnit;\n  roles?: string[];\n  selected?: boolean;\n}\n\nexport interface B2BApprovalProcess {\n  code?: string;\n  name?: string;\n}\n\nexport enum B2BUserGroup {\n  B2B_ADMIN_GROUP = 'b2badmingroup',\n  B2B_CUSTOMER_GROUP = 'b2bcustomergroup',\n  B2B_MANAGER_GROUP = 'b2bmanagergroup',\n  B2B_APPROVER_GROUP = 'b2bapprovergroup',\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\nexport interface FeatureModuleConfig {\n  /**\n   * Lazy resolved feature module\n   */\n  module?: () => Promise<any>;\n  /**\n   * Lazy resolved dependency modules\n   */\n  dependencies?: (() => Promise<any>)[];\n  /**\n   * Cms components covered by this feature\n   */\n  cmsComponents?: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n  featureModules?: { [featureName: string]: FeatureModuleConfig };\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(\n        this.occEndpoints.getUrl('placeOrder', { userId }),\n        {},\n        { headers, params }\n      )\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.occEndpoints.getUrl('setDeliveryAddress', { userId, cartId }),\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { PaymentType } from '../../../model/cart.model';\n\nexport const PAYMENT_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentType>\n>('PaymentTypeNormalizer');\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PaymentTypeAdapter } from '../../../checkout/connectors/payment-type/payment-type.adapter';\nimport { PAYMENT_TYPE_NORMALIZER } from '../../../checkout/connectors/payment-type/converters';\nimport { PaymentType, Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\n\nconst ENDPOINT_PAYMENT_TYPES = 'paymenttypes';\n\n@Injectable()\nexport class OccCheckoutPaymentTypeAdapter implements PaymentTypeAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadPaymentTypes(): Observable<PaymentType[]> {\n    return this.http\n      .get<Occ.PaymentTypeList>(\n        this.occEndpoints.getEndpoint(ENDPOINT_PAYMENT_TYPES)\n      )\n      .pipe(\n        map((paymentTypeList) => paymentTypeList.paymentTypes),\n        this.converter.pipeableMany(PAYMENT_TYPE_NORMALIZER)\n      );\n  }\n\n  setPaymentType(\n    userId: string,\n    cartId: string,\n    paymentType: string,\n    purchaseOrderNumber?: string\n  ): Observable<Cart> {\n    let httpParams = new HttpParams().set('paymentType', paymentType);\n    if (purchaseOrderNumber !== undefined) {\n      httpParams = httpParams.set('purchaseOrderNumber', purchaseOrderNumber);\n    }\n    /* tslint:disable:max-line-length */\n    httpParams = httpParams.set(\n      'fields',\n      'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user'\n    );\n\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/paymenttype',\n        {},\n        {\n          params: httpParams,\n        }\n      )\n      .pipe(this.converter.pipeable(CART_NORMALIZER));\n  }\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CheckoutCostCenterAdapter } from '../../../checkout/connectors/cost-center/checkout-cost-center.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\n\n@Injectable()\nexport class OccCheckoutCostCenterAdapter implements CheckoutCostCenterAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart> {\n    let httpParams = new HttpParams().set('costCenterId', costCenterId);\n    /* tslint:disable:max-line-length */\n    httpParams = httpParams.set(\n      'fields',\n      'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user'\n    );\n\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/costcenter',\n        {},\n        {\n          params: httpParams,\n        }\n      )\n      .pipe(this.converter.pipeable(CART_NORMALIZER));\n  }\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentType } from '../../../model/cart.model';\n\nexport abstract class PaymentTypeAdapter {\n  /**\n   * Abstract method used to get available payment types\n   */\n  abstract loadPaymentTypes(): Observable<PaymentType[]>;\n\n  /**\n   * Abstract method used to set payment type to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param typeCode\n   * @param poNumber: purchase order number\n   */\n  abstract setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    poNumber?: string\n  ): Observable<any>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCheckoutConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        setDeliveryAddress:\n          'users/${userId}/carts/${cartId}/addresses/delivery',\n        placeOrder: 'users/${userId}/orders',\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CheckoutCostCenterAdapter {\n  /**\n   * Abstract method used to set cost center to cart\n   *\n   * @param userId: user id\n   * @param cartId: cart id\n   * @param costCenterId: cost center id\n   */\n  abstract setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\nimport { PaymentTypeAdapter } from '../../../checkout/connectors/payment-type/payment-type.adapter';\nimport { OccCheckoutPaymentTypeAdapter } from './occ-checkout-payment-type.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccCheckoutConfig } from './default-occ-checkout-config';\nimport { CheckoutCostCenterAdapter } from '../../../checkout/connectors/cost-center/checkout-cost-center.adapter';\nimport { OccCheckoutCostCenterAdapter } from './occ-checkout-cost-center.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCheckoutConfig),\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n    {\n      provide: PaymentTypeAdapter,\n      useClass: OccCheckoutPaymentTypeAdapter,\n    },\n    {\n      provide: CheckoutCostCenterAdapter,\n      useClass: OccCheckoutCostCenterAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behavior, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount =\n          topValues?.length > 0 ? topValues.length : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  // TODO{#8158} - make this method required by removing the the `?` after the method name\n  abstract loadAnonymousConsents?(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\n\nexport abstract class UserCostCenterAdapter {\n  /**\n   * Returns the list of all active cost centers of the login user\n   * @param userId\n   */\n  abstract loadActiveList(\n    userId: string\n  ): Observable<EntitiesModel<CostCenter>>;\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\n\nexport const COST_CENTER_NORMALIZER = new InjectionToken<\n  Converter<any, CostCenter>\n>('CostCenterNormalizer');\nexport const COST_CENTERS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<CostCenter>>\n>('CostCentersListNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Budget } from '../../../model/budget.model';\nimport { EntitiesModel } from '../../../model/misc.model';\n\nexport const BUDGET_NORMALIZER = new InjectionToken<Converter<any, Budget>>(\n  'BudgetNormalizer'\n);\nexport const BUDGETS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<Budget>>\n>('BudgetsListNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { CostCenterAdapter } from '../../../organization/connectors/cost-center/cost-center.adapter';\nimport { UserCostCenterAdapter } from '../../../user/connectors/cost-center/user-cost-center.adapter';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  COST_CENTER_NORMALIZER,\n  COST_CENTERS_NORMALIZER,\n} from '../../../organization/connectors/cost-center/converters';\nimport { BUDGETS_NORMALIZER } from '../../../organization/connectors/budget/converters';\nimport { B2BSearchConfig } from '../../../organization/model/search-config';\nimport { Occ } from '../../occ-models/occ.models';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { Budget } from '../../../model/budget.model';\n\n@Injectable()\nexport class OccCostCenterAdapter\n  implements CostCenterAdapter, UserCostCenterAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string, costCenterCode: string): Observable<CostCenter> {\n    return this.http\n      .get<Occ.CostCenter>(this.getCostCenterEndpoint(userId, costCenterCode))\n      .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));\n  }\n\n  loadList(\n    userId: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<CostCenter>> {\n    return this.http\n      .get<Occ.CostCentersList>(this.getAllCostCentersEndpoint(userId, params))\n      .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));\n  }\n\n  loadActiveList(userId: string): Observable<EntitiesModel<CostCenter>> {\n    const params = new HttpParams().set(\n      'fields',\n      'DEFAULT,unit(BASIC,addresses(DEFAULT))'\n    );\n    return this.http\n      .get<Occ.CostCentersList>(this.getCostCentersEndpoint(userId), { params })\n      .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));\n  }\n\n  create(userId: string, costCenter: CostCenter): Observable<CostCenter> {\n    return this.http\n      .post<Occ.CostCenter>(this.getCostCentersEndpoint(userId), costCenter)\n      .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));\n  }\n\n  update(\n    userId: string,\n    costCenterCode: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter> {\n    return this.http\n      .patch<Occ.CostCenter>(\n        this.getCostCenterEndpoint(userId, costCenterCode),\n        costCenter\n      )\n      .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));\n  }\n\n  loadBudgets(\n    userId: string,\n    costCenterCode: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<Budget>> {\n    return this.http\n      .get<Occ.BudgetsList>(\n        this.getBudgetsEndpoint(userId, costCenterCode, params)\n      )\n      .pipe(this.converter.pipeable(BUDGETS_NORMALIZER));\n  }\n\n  assignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.http.post<any>(\n      this.getBudgetsEndpoint(userId, costCenterCode, { budgetCode }),\n      null\n    );\n  }\n\n  unassignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.http.delete<any>(\n      this.getBudgetEndpoint(userId, costCenterCode, budgetCode)\n    );\n  }\n\n  protected getCostCenterEndpoint(\n    userId: string,\n    costCenterCode: string\n  ): string {\n    return this.occEndpoints.getUrl('costCenter', { userId, costCenterCode });\n  }\n\n  protected getCostCentersEndpoint(\n    userId: string,\n    params?: B2BSearchConfig\n  ): string {\n    return this.occEndpoints.getUrl('costCenters', { userId }, params);\n  }\n\n  protected getAllCostCentersEndpoint(\n    userId: string,\n    params?: B2BSearchConfig\n  ): string {\n    return this.occEndpoints.getUrl('costCentersAll', { userId }, params);\n  }\n\n  protected getBudgetsEndpoint(\n    userId: string,\n    costCenterCode: string,\n    params?: B2BSearchConfig | { budgetCode: string }\n  ): string {\n    return this.occEndpoints.getUrl(\n      'costCenterBudgets',\n      { userId, costCenterCode },\n      params\n    );\n  }\n\n  protected getBudgetEndpoint(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): string {\n    return this.occEndpoints.getUrl('costCenterBudget', {\n      userId,\n      costCenterCode,\n      budgetCode,\n    });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserCostCenterAdapter } from '../../../user/connectors/cost-center/user-cost-center.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccCostCenterAdapter } from '../organization/occ-cost-center.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    { provide: UserCostCenterAdapter, useClass: OccCostCenterAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PaymentType.\n   */\n  export interface PaymentType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n  }\n\n  /**\n   *\n   * An interface representing PaymentTypeList.\n   */\n  export interface PaymentTypeList {\n    /**\n     * @member {PaymentType[]} [paymentTypes]\n     */\n    paymentTypes?: PaymentType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n\n  export interface Budget {\n    active?: boolean;\n    budget?: number;\n    code?: string;\n    currency?: Currency;\n    endDate?: string;\n    startDate?: string;\n    name?: string;\n    orgUnit?: B2BUnit;\n    costCenters?: CostCenter[];\n  }\n\n  export interface BudgetsList {\n    budgets?: Budget[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface CostCenter {\n    active?: string;\n    activeFlag?: boolean;\n    code?: string;\n    currency?: Currency;\n    name?: string;\n    originalCode?: string;\n    unit?: B2BUnit;\n  }\n\n  export interface CostCentersList {\n    costCenters: CostCenter[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface OrgUnitUserGroup {\n    members?: B2BUser[];\n    membersCoun?: number;\n    name?: string;\n    orgUnit?: B2BUnit;\n    permissions?: Permission[];\n    roles?: any;\n    selected?: boolean;\n    subGroups?: any;\n    uid?: string;\n  }\n\n  export interface OrgUnitUserGroupList {\n    orgUnitUserGroups: OrgUnitUserGroup[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface B2BAddress {\n    cellphone?: string;\n    companyName?: string;\n    country?: {\n      isocode?: string;\n      name?: string;\n    };\n    defaultAddress?: true;\n    district?: string;\n    email?: string;\n    firstName?: string;\n    formattedAddress?: string;\n    id?: string;\n    lastName?: string;\n    line1?: string;\n    line2?: string;\n    phone?: string;\n    postalCode?: string;\n    region?: {\n      countryIso?: string;\n      isocode?: string;\n      isocodeShort?: string;\n      name?: string;\n    };\n    shippingAddress?: true;\n    title?: string;\n    titleCode?: string;\n    town?: string;\n    visibleInAddressBook?: true;\n  }\n\n  export interface B2BAddressList {\n    addresses?: B2BAddress[];\n  }\n\n  export interface B2BUnitNode {\n    active?: boolean;\n    children?: B2BUnitNode[];\n    id?: string;\n    name?: string;\n    parent?: string;\n  }\n\n  export interface B2BUnitNodeList {\n    unitNodes?: B2BUnitNode[];\n  }\n\n  export interface B2BUser extends User {\n    active?: boolean;\n    approvers?: [];\n    orgUnit?: B2BUnit;\n    roles?: string[];\n    selected?: boolean;\n  }\n\n  export interface OrgUnitUserList {\n    users: B2BUser[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface B2BApprovalProcess {\n    code?: string;\n    name?: string;\n  }\n\n  export interface B2BApprovalProcessList {\n    approvalProcesses?: B2BApprovalProcess[];\n  }\n\n  export interface B2BUnit {\n    active?: boolean;\n    addresses?: B2BAddress[];\n    uid?: string;\n    name?: string;\n    parentOrgUnit?: string;\n    approvalProcess?: B2BApprovalProcess;\n    administrators?: B2BUser[];\n    approvers?: B2BUser[];\n    customers?: B2BUser[];\n    managers?: B2BUser[];\n  }\n  export interface OrderApprovalPermissionType {\n    code?: string;\n    name?: string;\n  }\n\n  export interface OrderApprovalPermissionTypeList {\n    orderApprovalPermissionTypes?: OrderApprovalPermissionType[];\n  }\n\n  export enum Period {\n    DAY = 'DAY',\n    WEEK = 'WEEK',\n    MONTH = 'MONTH',\n    QUARTER = 'QUARTER',\n    YEAR = 'YEAR',\n  }\n\n  export interface Permission {\n    active?: boolean;\n    code?: string;\n    currency?: Currency;\n    orderApprovalPermissionType?: OrderApprovalPermissionType;\n    orgUnit?: B2BUnitNode;\n    periodRange?: Period;\n    selected?: boolean;\n    treshold?: number;\n  }\n\n  export interface PermissionsList {\n    orderApprovalPermissions?: Permission[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { B2BSearchConfig } from '../../model/search-config';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { Budget } from '../../../model/budget.model';\n\nexport abstract class CostCenterAdapter {\n  /**\n   * Abstract method used to load costCenterManagement's details data.\n   * CostCenter's data can be loaded from alternative sources, as long as the structure\n   * converts to the `CostCenter`.\n   *\n   * @param userId The `userId` for given costCenterManagement\n   * @param costCenterCode The `costCenterCode` for given costCenterManagement\n   */\n  abstract load(userId: string, costCenterCode: string): Observable<CostCenter>;\n\n  abstract loadList(\n    userId: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<CostCenter>>;\n\n  abstract create(\n    userId: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter>;\n\n  abstract update(\n    userId: string,\n    costCenterCode: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter>;\n\n  abstract loadBudgets(\n    userId: string,\n    costCenterCode: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<Budget>>;\n\n  abstract assignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any>;\n\n  abstract unassignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { COST_CENTER_NORMALIZER } from '../../../../organization/connectors/cost-center/converters';\nimport { EntitiesModel } from '../../../../model/misc.model';\nimport { CostCenter } from '../../../../model/org-unit.model';\n\n@Injectable()\nexport class OccCostCenterListNormalizer\n  implements Converter<Occ.CostCentersList, EntitiesModel<CostCenter>> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.CostCentersList,\n    target?: EntitiesModel<CostCenter>\n  ): EntitiesModel<CostCenter> {\n    if (target === undefined) {\n      target = {\n        ...(source as any),\n        values: source.costCenters.map((costCenter) => ({\n          ...this.converter.convert(costCenter, COST_CENTER_NORMALIZER),\n        })),\n      };\n    }\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccOrganizationConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        budgets: '/users/${userId}/budgets',\n        budget: '/users/${userId}/budgets/${budgetCode}',\n        orgUnitsAvailable: '/users/${userId}/availableOrgUnitNodes',\n        orgUnitsTree: '/users/${userId}/orgUnitsRootNodeTree',\n        orgUnitsApprovalProcesses:\n          '/users/${userId}/orgUnitsAvailableApprovalProcesses',\n        orgUnits: '/users/${userId}/orgUnits',\n        orgUnit: '/users/${userId}/orgUnits/${orgUnitId}',\n        orgUnitUsers:\n          '/users/${userId}/orgUnits/${orgUnitId}/availableUsers/${roleId}',\n        orgUnitApprovers:\n          '/users/${userId}/orgUnits/${orgUnitId}/orgCustomers/${orgCustomerId}/roles',\n        orgUnitApprover:\n          '/users/${userId}/orgUnits/${orgUnitId}/orgCustomers/${orgCustomerId}/roles/${roleId}',\n        orgUnitUserRoles:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/roles',\n        orgUnitUserRole:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/roles/${roleId}',\n        orgUnitsAddresses: '/users/${userId}/orgUnits/${orgUnitId}/addresses',\n        orgUnitsAddress:\n          '/users/${userId}/orgUnits/${orgUnitId}/addresses/${addressId}',\n        userGroups: '/users/${userId}/orgUnitUserGroups',\n        userGroup: '/users/${userId}/orgUnitUserGroups/${userGroupId}',\n        userGroupAvailableOrderApprovalPermissions:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/availableOrderApprovalPermissions',\n        userGroupAvailableOrgCustomers:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/availableOrgCustomers',\n        userGroupMembers:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/members',\n        userGroupMember:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/members/${orgCustomerId}',\n        userGroupOrderApprovalPermissions:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/orderApprovalPermissions',\n        userGroupOrderApprovalPermission:\n          '/users/${userId}/orgUnitUserGroups/${userGroupId}/orderApprovalPermissions/${orderApprovalPermissionCode}',\n        costCenters: '/costcenters',\n        costCenter: '/costcenters/${costCenterCode}',\n        costCentersAll: '/costcentersall',\n        costCenterBudgets: '/costcenters/${costCenterCode}/budgets',\n        costCenterBudget:\n          '/costcenters/${costCenterCode}/budgets/${budgetCode}',\n        permissions: '/users/${userId}/orderApprovalPermissions',\n        permission:\n          '/users/${userId}/orderApprovalPermissions/${orderApprovalPermissionCode}',\n        orderApprovalPermissionTypes: '/orderApprovalPermissionTypes',\n        b2bUsers: '/users/${userId}/orgCustomers',\n        b2bUser: '/users/${userId}/orgCustomers/${orgCustomerId}',\n        b2bUserApprovers:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/approvers',\n        b2bUserApprover:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/approvers/${approverId}',\n        b2bUserUserGroups:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/orgUserGroups',\n        b2bUserUserGroup:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/orgUserGroups/${userGroupId}',\n        b2bUserPermissions:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/permissions',\n        b2bUserPermission:\n          '/users/${userId}/orgCustomers/${orgCustomerId}/permissions/${permissionId}',\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ConfigModule } from '../../../config/config.module';\nimport { COST_CENTERS_NORMALIZER } from '../../../organization/connectors/cost-center/converters';\nimport { CostCenterAdapter } from '../../../organization/connectors/cost-center/cost-center.adapter';\nimport { OccCostCenterListNormalizer } from './converters/occ-cost-center-list-normalizer';\nimport { defaultOccOrganizationConfig } from './default-occ-organization-config';\nimport { OccCostCenterAdapter } from './occ-cost-center.adapter';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(defaultOccOrganizationConfig),\n  ],\n  providers: [\n    {\n      provide: CostCenterAdapter,\n      useClass: OccCostCenterAdapter,\n    },\n    {\n      provide: COST_CENTERS_NORMALIZER,\n      useClass: OccCostCenterListNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class OrganizationOccModule {}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { OrganizationOccModule } from './adapters/organization/organization-occ.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n    OrganizationOccModule,\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { CostCenter } from '../../model/org-unit.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const USER_COST_CENTERS = '[User] User Cost Centers';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n  costCenters: StateUtils.LoaderState<CostCenter[]>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { CostCenter } from '../../../model/org-unit.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_COST_CENTERS } from '../user-state';\n\nexport const LOAD_ACTIVE_COST_CENTERS = '[User] Load Active CostCenters';\nexport const LOAD_ACTIVE_COST_CENTERS_FAIL =\n  '[User] Load Active CostCenters Fail';\nexport const LOAD_ACTIVE_COST_CENTERS_SUCCESS =\n  '[User] Load Active CostCenters Success';\n\nexport class LoadActiveCostCenters extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS;\n  constructor(public payload: string) {\n    super(USER_COST_CENTERS);\n  }\n}\n\nexport class LoadActiveCostCentersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_COST_CENTERS, payload);\n  }\n}\n\nexport class LoadActiveCostCentersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS_SUCCESS;\n  constructor(public payload: CostCenter[]) {\n    super(USER_COST_CENTERS);\n  }\n}\n\nexport type UserCostCenterAction =\n  | LoadActiveCostCenters\n  | LoadActiveCostCentersFail\n  | LoadActiveCostCentersSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getCostCentersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CostCenter[]>\n> = createSelector(getUserState, (state: UserState) => state.costCenters);\n\nexport const getCostCenters: MemoizedSelector<\n  StateWithUser,\n  CostCenter[]\n> = createSelector(getCostCentersState, (state: LoaderState<CostCenter[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> | null {\n    // TODO{#8158} - remove the conditional check, and just `return this.adapter.loadAnonymousConsents()`\n    return this.adapter.loadAnonymousConsents\n      ? this.adapter.loadAnonymousConsents()\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      // TODO{#8158} - remove this if block\n      if (!this.anonymousConsentTemplatesConnector.loadAnonymousConsents()) {\n        return of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates());\n      }\n\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = (applicables ?? []).filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, Subscription, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService implements OnDestroy {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n  protected subscription = new Subscription();\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.initActiveCart();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected initActiveCart() {\n    this.subscription.add(\n      this.authService.getOccUserId().subscribe((userId) => {\n        this.userId = userId;\n        if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n          if (this.isJustLoggedIn(userId)) {\n            this.loadOrMerge(this.cartId);\n          }\n        }\n        this.previousUserId = userId;\n      })\n    );\n\n    this.subscription.add(\n      this.activeCartId$.subscribe((cartId) => {\n        this.cartId = cartId;\n      })\n    );\n\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails, PaymentType } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\nexport const GET_PAYMENT_TYPES_PROCESS_ID = 'getPaymentTypes';\nexport const SET_COST_CENTER_PROCESS_ID = 'setCostCenter';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  poNumber: {\n    po: string;\n    costCenter: string;\n  };\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface PaymentTypesState {\n  entities: { [code: string]: PaymentType };\n  selected: string;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n  paymentTypes: PaymentTypesState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  SET_COST_CENTER_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport const SET_COST_CENTER = '[Checkout] Set Cost Center';\nexport const SET_COST_CENTER_FAIL = '[Checkout] Set Cost Center Fail';\nexport const SET_COST_CENTER_SUCCESS = '[Checkout] Set Cost Center Success';\nexport const RESET_SET_COST_CENTER_PROCESS =\n  '[Checkout] Reset Set Cost Center Process';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class SetCostCenter extends StateUtils.EntityLoadAction {\n  readonly type = SET_COST_CENTER;\n  constructor(\n    public payload: { userId: string; cartId: string; costCenterId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport class SetCostCenterFail extends StateUtils.EntityFailAction {\n  readonly type = SET_COST_CENTER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID, payload);\n  }\n}\n\nexport class SetCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_COST_CENTER_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport class ResetSetCostCenterProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_COST_CENTER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData\n  | SetCostCenter\n  | SetCostCenterFail\n  | SetCostCenterSuccess\n  | ResetSetCostCenterProcess;\n","import { Action } from '@ngrx/store';\nimport { PaymentType, Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';\n\nexport const LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';\nexport const LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';\nexport const LOAD_PAYMENT_TYPES_SUCCESS =\n  '[Checkout] Load Payment Types Success';\nexport const RESET_LOAD_PAYMENT_TYPES_PROCESS_ID =\n  '[Checkout] Reset Load Payment Type Process';\n\nexport const SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';\nexport const SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';\nexport const SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';\n\nexport class LoadPaymentTypes extends EntityLoadAction {\n  readonly type = LOAD_PAYMENT_TYPES;\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class LoadPaymentTypesFail extends EntityFailAction {\n  readonly type = LOAD_PAYMENT_TYPES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class LoadPaymentTypesSuccess extends EntitySuccessAction {\n  readonly type = LOAD_PAYMENT_TYPES_SUCCESS;\n  constructor(public payload: PaymentType[]) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadPaymentTypesProcess extends EntityLoaderResetAction {\n  readonly type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentType implements Action {\n  readonly type = SET_PAYMENT_TYPE;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      typeCode: string;\n      poNumber?: string;\n    }\n  ) {}\n}\n\nexport class SetPaymentTypeFail implements Action {\n  readonly type = SET_PAYMENT_TYPE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetPaymentTypeSuccess implements Action {\n  readonly type = SET_PAYMENT_TYPE_SUCCESS;\n  constructor(public payload: Cart) {}\n}\n\nexport type PaymentTypesAction =\n  | LoadPaymentTypes\n  | LoadPaymentTypesFail\n  | LoadPaymentTypesSuccess\n  | ResetLoadPaymentTypesProcess\n  | SetPaymentType\n  | SetPaymentTypeFail\n  | SetPaymentTypeSuccess;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","/**\n * Indicates that a user has successfully placed an order\n */\nexport class OrderPlacedEvent {\n  code: string;\n}\n","import { Injectable } from '@angular/core';\nimport { StateEventService } from '../../state/event/state-event.service';\nimport { CheckoutActions } from '../store/actions/index';\nimport { OrderPlacedEvent } from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutEventBuilder {\n  constructor(protected stateEventService: StateEventService) {\n    this.register();\n  }\n\n  /**\n   * Registers checkout events\n   */\n  protected register(): void {\n    this.orderPlacedEvent();\n  }\n\n  /**\n   * Register an order successfully placed event\n   */\n  protected orderPlacedEvent(): void {\n    this.stateEventService.register({\n      action: CheckoutActions.PLACE_ORDER_SUCCESS,\n      event: OrderPlacedEvent,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CheckoutEventBuilder } from './checkout-event.builder';\n\n@NgModule({})\nexport class CheckoutEventModule {\n  constructor(_checkoutEventBuilder: CheckoutEventBuilder) {}\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { Cart } from '../../../model/cart.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  poNumber: { po: undefined, costCenter: undefined },\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.SetPaymentTypeSuccess\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {\n      const cart: Cart = action.payload;\n      return {\n        ...state,\n        poNumber: {\n          ...state.poNumber,\n          po: cart.purchaseOrderNumber,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_COST_CENTER_SUCCESS: {\n      return {\n        ...state,\n        poNumber: {\n          ...state.poNumber,\n          costCenter: action.payload,\n        },\n      };\n    }\n\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { PaymentType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { PaymentTypesState } from '../checkout-state';\n\nexport const initialState: PaymentTypesState = {\n  entities: {},\n  selected: undefined,\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.PaymentTypesAction\n    | CheckoutActions.ClearCheckoutData\n    | CheckoutActions.CheckoutClearMiscsData\n): PaymentTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_PAYMENT_TYPES_SUCCESS: {\n      const paymentTypes: PaymentType[] = action.payload;\n      const entities = paymentTypes.reduce(\n        (\n          paymentTypesEntities: { [code: string]: PaymentType },\n          name: PaymentType\n        ) => {\n          return {\n            ...paymentTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {\n      return {\n        ...state,\n        selected: action.payload.paymentType.code,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return {\n        ...state,\n        selected: undefined,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getPaymentTypesEntites = (state: PaymentTypesState) =>\n  state.entities;\nexport const getSelectedPaymentType = (state: PaymentTypesState) =>\n  state.selected;\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport * as fromPaymentTypes from './payment-types.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n    paymentTypes: fromPaymentTypes.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutCostCenterAdapter } from './checkout-cost-center.adapter';\nimport { Cart } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutCostCenterConnector {\n  constructor(protected adapter: CheckoutCostCenterAdapter) {}\n\n  setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart> {\n    return this.adapter.setCostCenter(userId, cartId, costCenterId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutCostCenterConnector } from '../../connectors/cost-center/checkout-cost-center.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.ResetLoadPaymentTypesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n      new CheckoutActions.ResetLoadPaymentTypesProcess(),\n      new CheckoutActions.CheckoutClearMiscsData(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setCostCenter$: Observable<\n    | CheckoutActions.SetCostCenterSuccess\n    | CheckoutActions.SetCostCenterFail\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ClearCheckoutDeliveryAddress\n    | CartActions.LoadCartSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_COST_CENTER),\n    map((action: CheckoutActions.SetCostCenter) => action.payload),\n    switchMap((payload) => {\n      return this.checkoutCostCenterConnector\n        .setCostCenter(payload.userId, payload.cartId, payload.costCenterId)\n        .pipe(\n          mergeMap((data) => [\n            new CartActions.LoadCartSuccess({\n              cart: data,\n              cartId: payload.cartId,\n              userId: payload.userId,\n            }),\n            new CheckoutActions.SetCostCenterSuccess(payload.costCenterId),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearCheckoutDeliveryAddress({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetCostCenterFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutCostCenterConnector: CheckoutCostCenterConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { PaymentTypeAdapter } from './payment-type.adapter';\nimport { PaymentType } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeConnector {\n  constructor(protected adapter: PaymentTypeAdapter) {}\n\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.adapter.loadPaymentTypes();\n  }\n\n  setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    poNumber?: string\n  ): Observable<any> {\n    return this.adapter.setPaymentType(userId, cartId, typeCode, poNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { PaymentTypeConnector } from '../../connectors/payment-type/payment-type.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class PaymentTypesEffects {\n  @Effect()\n  loadPaymentTypes$: Observable<\n    | CheckoutActions.LoadPaymentTypesSuccess\n    | CheckoutActions.LoadPaymentTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_PAYMENT_TYPES),\n    switchMap(() => {\n      return this.paymentTypeConnector.getPaymentTypes().pipe(\n        map(\n          (paymentTypes) =>\n            new CheckoutActions.LoadPaymentTypesSuccess(paymentTypes)\n        ),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadPaymentTypesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setPaymentType$: Observable<\n    | CheckoutActions.SetPaymentTypeSuccess\n    | CheckoutActions.SetPaymentTypeFail\n    | CartActions.LoadCartSuccess\n    | CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_TYPE),\n    map((action: CheckoutActions.SetPaymentType) => action.payload),\n    switchMap((payload) => {\n      return this.paymentTypeConnector\n        .setPaymentType(\n          payload.userId,\n          payload.cartId,\n          payload.typeCode,\n          payload.poNumber\n        )\n        .pipe(\n          mergeMap((data) => {\n            return [\n              new CartActions.LoadCartSuccess({\n                cart: data,\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CheckoutActions.ClearCheckoutData(),\n              new CheckoutActions.SetPaymentTypeSuccess(data),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentTypeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private paymentTypeConnector: PaymentTypeConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\nimport { PaymentTypesEffects } from './payment-types.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n  PaymentTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\nexport * from './payment-types.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutEventModule } from './events/checkout-event.module';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule, CheckoutEventModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPoNumer: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(\n  getCheckoutSteps,\n  (state: CheckoutStepsState) => state.poNumber.po\n);\n\nexport const getCostCenter: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(\n  getCheckoutSteps,\n  (state: CheckoutStepsState) => state.poNumber.costCenter\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentType } from '../../../model/cart.model';\nimport {\n  PaymentTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/payment-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getPaymentTypesState: MemoizedSelector<\n  StateWithCheckout,\n  PaymentTypesState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.paymentTypes\n);\n\nexport const getPaymentTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: PaymentType }\n> = createSelector(getPaymentTypesState, fromReducer.getPaymentTypesEntites);\n\nexport const getAllPaymentTypes: MemoizedSelector<\n  StateWithCheckout,\n  PaymentType[]\n> = createSelector(getPaymentTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n\nexport const getSelectedPaymentType: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getPaymentTypesState, fromReducer.getSelectedPaymentType);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  map,\n  pluck,\n  shareReplay,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { B2BPaymentTypeEnum, PaymentType } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  GET_PAYMENT_TYPES_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get payment types\n   */\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAllPaymentTypes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID))\n        )\n      ),\n      tap(([_, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadPaymentTypes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Load the supported payment types\n   */\n  loadPaymentTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadPaymentTypes());\n  }\n\n  /**\n   * Set payment type to cart\n   * @param typeCode\n   * @param poNumber : purchase order number\n   */\n  setPaymentType(typeCode: string, poNumber?: string): void {\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .pipe(take(1))\n      .subscribe((activeCartId) => (cartId = activeCartId));\n\n    this.authService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentType({\n            userId: userId,\n            cartId: cartId,\n            typeCode: typeCode,\n            poNumber: poNumber,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Get the selected payment type\n   */\n  getSelectedPaymentType(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedPaymentType)),\n    ]).pipe(\n      tap(([cart, selected]) => {\n        if (selected === undefined) {\n          // in b2b, cart always has paymentType (default value 'CARD')\n          if (cart && cart.paymentType) {\n            this.checkoutStore.dispatch(\n              new CheckoutActions.SetPaymentTypeSuccess(cart)\n            );\n          }\n        }\n      }),\n      map(([, selected]) => selected)\n    );\n  }\n\n  /**\n   * Get whether the selected payment type is \"ACCOUNT\" payment\n   */\n  isAccountPayment(): Observable<boolean> {\n    return this.getSelectedPaymentType().pipe(\n      map((selected) => selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT)\n    );\n  }\n\n  /**\n   * Get PO Number\n   */\n  getPoNumber(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getPoNumer)),\n    ]).pipe(\n      tap(([cart, po]) => {\n        if (po === undefined && cart && cart.purchaseOrderNumber) {\n          this.checkoutStore.dispatch(\n            new CheckoutActions.SetPaymentTypeSuccess(cart)\n          );\n        }\n      }),\n      map(([_, po]) => po)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, combineLatest } from 'rxjs';\nimport { take, map, filter } from 'rxjs/operators';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutCostCenterService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Set cost center to cart\n   * @param costCenterId : cost center id\n   */\n  setCostCenter(costCenterId: string): void {\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .pipe(take(1))\n      .subscribe((activeCartId) => (cartId = activeCartId));\n\n    this.authService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetCostCenter({\n            userId: userId,\n            cartId: cartId,\n            costCenterId: costCenterId,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Get cost center id from cart\n   */\n  getCostCenter(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getCostCenter)),\n    ]).pipe(\n      filter(([cart]) => Boolean(cart)),\n      map(([cart, costCenterId]) => {\n        if (costCenterId === undefined && cart.costCenter) {\n          costCenterId = cart.costCenter.code;\n          this.checkoutStore.dispatch(\n            new CheckoutActions.SetCostCenterSuccess(cart.costCenter.code)\n          );\n        }\n        return costCenterId;\n      })\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { Injectable, InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { RoutingConfigService } from '../../configurable-routes/routing-config.service';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: undefined,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\n@Injectable()\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n    let urlString = '';\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      urlString +=\n        '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n\n      // we use semantic route information embedded from any parent route\n      if (state.data?.cxRoute) {\n        semanticRoute = state.data?.cxRoute;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n\n    // If `semanticRoute` couldn't be already recognized using `data.cxRoute` property\n    // let's lookup the routing configuration to find the semantic route that has exactly the same configured path as the current URL.\n    // This will work only for simple URLs without any dynamic routing parameters.\n    semanticRoute = semanticRoute || this.lookupSemanticRoute(urlString);\n\n    const { params } = state;\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url: routerState.url,\n      queryParams: routerState.root.queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n\n  /**\n   * Returns the semantic route name for given page label.\n   *\n   * *NOTE*: It works only for simple static urls that are equal to the page label\n   * of cms-driven content page. For example: `/my-account/address-book`.\n   *\n   * It doesn't work for URLs with dynamic parameters. But such case can be handled\n   * by reading the defined `data.cxRoute` from the Angular Routes.\n   *\n   * @param path path to be found in the routing config\n   */\n  private lookupSemanticRoute(path: string): string {\n    // Page label is assumed to start with `/`, but Spartacus configured paths\n    // don't start with slash. So we remove the leading slash:\n    return this.routingConfig.getRouteName(path.substr(1));\n  }\n\n  constructor(private routingConfig: RoutingConfigService) {}\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { CostCenterAdapter } from './cost-center.adapter';\nimport { B2BSearchConfig } from '../../model/search-config';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { Budget } from '../../../model/budget.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CostCenterConnector {\n  constructor(protected adapter: CostCenterAdapter) {}\n\n  get(userId: string, costCenterCode: string): Observable<CostCenter> {\n    return this.adapter.load(userId, costCenterCode);\n  }\n\n  getList(\n    userId: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<CostCenter>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  create(userId: string, costCenter: CostCenter): Observable<CostCenter> {\n    return this.adapter.create(userId, costCenter);\n  }\n\n  update(\n    userId: string,\n    costCenterCode: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter> {\n    return this.adapter.update(userId, costCenterCode, costCenter);\n  }\n\n  getBudgets(\n    userId: string,\n    costCenterCode: string,\n    params?: B2BSearchConfig\n  ): Observable<EntitiesModel<Budget>> {\n    return this.adapter.loadBudgets(userId, costCenterCode, params);\n  }\n\n  assignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.adapter.assignBudget(userId, costCenterCode, budgetCode);\n  }\n\n  unassignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\n@NgModule({})\nexport class OrganizationModule {\n  static forRoot(): ModuleWithProviders<OrganizationModule> {\n    return {\n      ngModule: OrganizationModule,\n      providers: [],\n    };\n  }\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   * @param errorCallback function to be invoked after error during script loading\n   */\n  public load(\n    src: string,\n    params?: Object,\n    callback?: EventListener,\n    errorCallback?: EventListener\n  ): void {\n    const script: HTMLScriptElement = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n    if (errorCallback) {\n      script.addEventListener('error', errorCallback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { UserCostCenterAdapter } from './user-cost-center.adapter';\nimport { EntitiesModel } from '../../../model/misc.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserCostCenterConnector {\n  constructor(protected adapter: UserCostCenterAdapter) {}\n\n  getActiveList(userId: string): Observable<EntitiesModel<CostCenter>> {\n    return this.adapter.loadActiveList(userId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, queueScheduler } from 'rxjs';\nimport { filter, map, observeOn, tap } from 'rxjs/operators';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CostCenter, B2BAddress } from '../../model/org-unit.model';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserCostCenterService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Load all visible active cost centers for the currently login user\n   */\n  loadActiveCostCenters(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadActiveCostCenters(userId));\n      }\n    });\n  }\n\n  private getCostCentersState(): Observable<LoaderState<CostCenter[]>> {\n    return this.store.select(UsersSelectors.getCostCentersState);\n  }\n\n  /**\n   * Get all visible active cost centers\n   */\n  getActiveCostCenters(): Observable<CostCenter[]> {\n    return this.getCostCentersState().pipe(\n      observeOn(queueScheduler),\n      tap((process: LoaderState<CostCenter[]>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadActiveCostCenters();\n        }\n      }),\n      filter(\n        (process: LoaderState<CostCenter[]>) => process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  /**\n   * Get the addresses of the cost center's unit based on cost center id\n   * @param costCenterId cost center id\n   */\n  getCostCenterAddresses(costCenterId: string): Observable<B2BAddress[]> {\n    return this.getActiveCostCenters().pipe(\n      map((costCenters) => {\n        const costCenter = costCenters.find((cc) => cc.code === costCenterId);\n        if (costCenter && costCenter.unit) {\n          return costCenter.unit.addresses;\n        } else {\n          return [];\n        }\n      })\n    );\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { CostCenter } from '../../../model/org-unit.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: CostCenter[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserCostCenterAction\n): CostCenter[] {\n  switch (action.type) {\n    case UserActions.LOAD_ACTIVE_COST_CENTERS_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_ACTIVE_COST_CENTERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n  USER_COST_CENTERS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\nimport * as fromCostCenterReducer from './user-cost-center.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n    costCenters: loaderReducer<CostCenter[]>(\n      USER_COST_CENTERS,\n      fromCostCenterReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { UserCostCenterConnector } from '../../connectors/cost-center/user-cost-center.connector';\n\n@Injectable()\nexport class UserCostCenterEffects {\n  @Effect()\n  loadActiveCostCenters$: Observable<\n    UserActions.UserCostCenterAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ACTIVE_COST_CENTERS),\n    map((action: UserActions.LoadActiveCostCenters) => action.payload),\n    switchMap((payload) =>\n      this.userCostCenterConnector.getActiveList(payload).pipe(\n        map(\n          (data: EntitiesModel<CostCenter>) =>\n            new UserActions.LoadActiveCostCentersSuccess(data.values)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadActiveCostCentersFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userCostCenterConnector: UserCostCenterConnector\n  ) {}\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\nimport { UserCostCenterEffects } from './user-cost-center.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n  UserCostCenterEffects,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\nexport * from './user-consents.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorModel } from '../model/misc.model';\nimport { isDevMode } from '@angular/core';\n\n/**\n * Normalizes HttpErrorResponse to HttpErrorModel.\n *\n * Can be used as a safe and generic way for embodying http errors into\n * NgRx Action payload, as it will strip potentially unserializable parts from\n * it and warn in debug mode if passed error is not instance of HttpErrorModel\n * (which usually happens when logic in NgRx Effect is not sealed correctly)\n */\nexport function normalizeHttpError(\n  error: HttpErrorResponse | any\n): HttpErrorModel | undefined {\n  if (error instanceof HttpErrorResponse) {\n    const normalizedError: HttpErrorModel = {\n      message: error.message,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    };\n\n    // include backend's error details\n    if (Array.isArray(error.error.errors)) {\n      normalizedError.details = error.error.errors;\n    } else if (typeof error.error.error === 'string') {\n      normalizedError.details = [\n        {\n          type: error.error.error,\n          message: error.error.error_description,\n        },\n      ];\n    }\n\n    return normalizedError;\n  }\n\n  if (isDevMode()) {\n    console.error(\n      'Error passed to normalizeHttpError is not HttpErrorResponse instance',\n      error\n    );\n  }\n\n  return undefined;\n}\n","export const testestsd = 'sare';\n"]}