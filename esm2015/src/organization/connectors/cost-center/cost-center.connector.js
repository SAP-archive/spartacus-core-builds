import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { CostCenterAdapter } from './cost-center.adapter';
import * as i0 from "@angular/core";
import * as i1 from "./cost-center.adapter";
let CostCenterConnector = class CostCenterConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, costCenterCode) {
        return this.adapter.load(userId, costCenterCode);
    }
    getList(userId, params) {
        return this.adapter.loadList(userId, params);
    }
    create(userId, costCenter) {
        return this.adapter.create(userId, costCenter);
    }
    update(userId, costCenterCode, costCenter) {
        return this.adapter.update(userId, costCenterCode, costCenter);
    }
    getBudgets(userId, costCenterCode, params) {
        return this.adapter.loadBudgets(userId, costCenterCode, params);
    }
    assignBudget(userId, costCenterCode, budgetCode) {
        return this.adapter.assignBudget(userId, costCenterCode, budgetCode);
    }
    unassignBudget(userId, costCenterCode, budgetCode) {
        return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);
    }
};
CostCenterConnector.ctorParameters = () => [
    { type: CostCenterAdapter }
];
CostCenterConnector.ɵprov = i0.ɵɵdefineInjectable({ factory: function CostCenterConnector_Factory() { return new CostCenterConnector(i0.ɵɵinject(i1.CostCenterAdapter)); }, token: CostCenterConnector, providedIn: "root" });
CostCenterConnector = __decorate([
    Injectable({
        providedIn: 'root',
    })
], CostCenterConnector);
export { CostCenterConnector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL29yZ2FuaXphdGlvbi9jb25uZWN0b3JzL2Nvc3QtY2VudGVyL2Nvc3QtY2VudGVyLmNvbm5lY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBUTFELElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBQzlCLFlBQXNCLE9BQTBCO1FBQTFCLFlBQU8sR0FBUCxPQUFPLENBQW1CO0lBQUcsQ0FBQztJQUVwRCxHQUFHLENBQUMsTUFBYyxFQUFFLGNBQXNCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxPQUFPLENBQ0wsTUFBYyxFQUNkLE1BQXdCO1FBRXhCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYyxFQUFFLFVBQXNCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQ0osTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLFVBQXNCO1FBRXRCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsVUFBVSxDQUNSLE1BQWMsRUFDZCxjQUFzQixFQUN0QixNQUF3QjtRQUV4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFlBQVksQ0FDVixNQUFjLEVBQ2QsY0FBc0IsRUFDdEIsVUFBa0I7UUFFbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxjQUFjLENBQ1osTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN6RSxDQUFDO0NBQ0YsQ0FBQTs7WUFoRGdDLGlCQUFpQjs7O0FBRHJDLG1CQUFtQjtJQUgvQixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csbUJBQW1CLENBaUQvQjtTQWpEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb3N0Q2VudGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JnLXVuaXQubW9kZWwnO1xuaW1wb3J0IHsgQ29zdENlbnRlckFkYXB0ZXIgfSBmcm9tICcuL2Nvc3QtY2VudGVyLmFkYXB0ZXInO1xuaW1wb3J0IHsgQjJCU2VhcmNoQ29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWwvc2VhcmNoLWNvbmZpZyc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvbWlzYy5tb2RlbCc7XG5pbXBvcnQgeyBCdWRnZXQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9idWRnZXQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ29zdENlbnRlckNvbm5lY3RvciB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBhZGFwdGVyOiBDb3N0Q2VudGVyQWRhcHRlcikge31cblxuICBnZXQodXNlcklkOiBzdHJpbmcsIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPENvc3RDZW50ZXI+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWQodXNlcklkLCBjb3N0Q2VudGVyQ29kZSk7XG4gIH1cblxuICBnZXRMaXN0KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IEIyQlNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8Q29zdENlbnRlcj4+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRMaXN0KHVzZXJJZCwgcGFyYW1zKTtcbiAgfVxuXG4gIGNyZWF0ZSh1c2VySWQ6IHN0cmluZywgY29zdENlbnRlcjogQ29zdENlbnRlcik6IE9ic2VydmFibGU8Q29zdENlbnRlcj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuY3JlYXRlKHVzZXJJZCwgY29zdENlbnRlcik7XG4gIH1cblxuICB1cGRhdGUoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgY29zdENlbnRlckNvZGU6IHN0cmluZyxcbiAgICBjb3N0Q2VudGVyOiBDb3N0Q2VudGVyXG4gICk6IE9ic2VydmFibGU8Q29zdENlbnRlcj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudXBkYXRlKHVzZXJJZCwgY29zdENlbnRlckNvZGUsIGNvc3RDZW50ZXIpO1xuICB9XG5cbiAgZ2V0QnVkZ2V0cyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nLFxuICAgIHBhcmFtcz86IEIyQlNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QnVkZ2V0Pj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZEJ1ZGdldHModXNlcklkLCBjb3N0Q2VudGVyQ29kZSwgcGFyYW1zKTtcbiAgfVxuXG4gIGFzc2lnbkJ1ZGdldChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nLFxuICAgIGJ1ZGdldENvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuYXNzaWduQnVkZ2V0KHVzZXJJZCwgY29zdENlbnRlckNvZGUsIGJ1ZGdldENvZGUpO1xuICB9XG5cbiAgdW5hc3NpZ25CdWRnZXQoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgY29zdENlbnRlckNvZGU6IHN0cmluZyxcbiAgICBidWRnZXRDb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVuYXNzaWduQnVkZ2V0KHVzZXJJZCwgY29zdENlbnRlckNvZGUsIGJ1ZGdldENvZGUpO1xuICB9XG59XG4iXX0=