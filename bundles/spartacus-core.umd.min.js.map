{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/core/src/config/utils/deep-merge.ts","../../../projects/core/src/config/config-tokens.ts","../../../projects/core/src/config/config-providers.ts","../../../projects/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","../../../projects/core/src/occ/utils/occ-constants.ts","../../../projects/core/src/window/window-ref.ts","../../../projects/core/src/routing/configurable-routes/config/routing-config.ts","../../../projects/core/src/routing/configurable-routes/routing-config.service.ts","../../../projects/core/src/routing/configurable-routes/url-translation/path-utils.ts","../../../projects/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","../../../projects/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","../../../projects/core/src/routing/store/actions/router.action.ts","../../../projects/core/src/routing/store/routing-state.ts","../../../projects/core/src/routing/store/selectors/routing.selector.ts","../../../projects/core/src/routing/services/activated-routes.service.ts","../../../projects/core/src/routing/facade/routing-params.service.ts","../../../projects/core/src/routing/facade/routing.service.ts","../../../projects/core/src/auth/user-auth/services/auth-redirect-storage.service.ts","../../../projects/core/src/auth/user-auth/services/auth-redirect.service.ts","../../../projects/core/src/auth/user-auth/services/auth-storage.service.ts","../../../projects/core/src/site-context/config/site-context-config.ts","../../../projects/core/src/occ/config/occ-config.ts","../../../projects/core/src/auth/user-auth/models/oauth-flow.ts","../../../projects/core/src/auth/user-auth/config/auth-config.ts","../../../projects/core/src/auth/user-auth/services/auth-config.service.ts","../../../projects/core/src/auth/user-auth/services/oauth-lib-wrapper.service.ts","../../../projects/core/src/auth/user-auth/store/actions/login-logout.action.ts","../../../projects/core/src/auth/user-auth/facade/user-id.service.ts","../../../projects/core/src/model/address.model.ts","../../../projects/core/src/model/cart.model.ts","../../../projects/core/src/model/cms.model.ts","../../../projects/core/src/model/consent.model.ts","../../../projects/core/src/auth/user-auth/facade/auth.service.ts","../../../projects/core/src/model/image.model.ts","../../../projects/core/src/model/org-unit.model.ts","../../../projects/core/src/model/product.model.ts","../../../projects/core/src/model/replenishment-order.model.ts","../../../projects/core/src/model/product-interest.model.ts","../../../projects/core/src/state/utils/entity/entity.action.ts","../../../projects/core/src/state/utils/loader/loader.action.ts","../../../projects/core/src/state/utils/entity-loader/entity-loader.action.ts","../../../projects/core/src/state/utils/loader/loader.reducer.ts","../../../projects/core/src/state/utils/loader/loader.selectors.ts","../../../projects/core/src/state/utils/entity-loader/entity-loader.selectors.ts","../../../projects/core/src/state/utils/entity/entity.reducer.ts","../../../projects/core/src/state/utils/entity-loader/entity-loader.reducer.ts","../../../projects/core/src/state/utils/processes-loader/processes-loader.action.ts","../../../projects/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","../../../projects/core/src/state/utils/processes-loader/processes-loader.selectors.ts","../../../projects/core/src/state/utils/processes-loader/processes-loader.reducer.ts","../../../projects/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","../../../projects/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","../../../projects/core/src/state/utils/entity/entity.selectors.ts","../../../projects/core/src/state/utils/get-state-slice.ts","../../../projects/core/src/state/utils/serializer.ts","../../../projects/core/src/anonymous-consents/store/anonymous-consents-state.ts","../../../projects/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","../../../projects/core/src/anonymous-consents/store/selectors/feature.selector.ts","../../../projects/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","../../../projects/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","../../../projects/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","../../../projects/core/src/anonymous-consents/facade/anonymous-consents.service.ts","../../../projects/core/src/config/utils/dynamic-template.ts","../../../projects/core/src/site-context/config/context-config-utils.ts","../../../projects/core/src/site-context/providers/context-ids.ts","../../../projects/core/src/site-context/store/actions/base-site.action.ts","../../../projects/core/src/site-context/store/actions/currencies.action.ts","../../../projects/core/src/site-context/store/actions/languages.action.ts","../../../projects/core/src/site-context/store/state.ts","../../../projects/core/src/site-context/store/selectors/site-context.selector.ts","../../../projects/core/src/site-context/store/selectors/base-site.selectors.ts","../../../projects/core/src/site-context/store/selectors/currencies.selectors.ts","../../../projects/core/src/site-context/store/selectors/languages.selectors.ts","../../../projects/core/src/site-context/facade/base-site.service.ts","../../../projects/core/src/util/http-params-uri.encoder.ts","../../../projects/core/src/occ/occ-models/occ-endpoints.model.ts","../../../projects/core/src/occ/services/occ-endpoints.service.ts","../../../projects/core/src/occ/utils/interceptor-util.ts","../../../projects/core/src/auth/client-auth/store/client-auth-state.ts","../../../projects/core/src/auth/client-auth/store/actions/client-token.action.ts","../../../projects/core/src/auth/client-auth/store/selectors/feature.selector.ts","../../../projects/core/src/auth/client-auth/store/selectors/client-token.selectors.ts","../../../projects/core/src/auth/client-auth/services/client-token.service.ts","../../../projects/core/src/auth/client-auth/services/client-error-handling.service.ts","../../../projects/core/src/auth/client-auth/http-interceptors/client-token.interceptor.ts","../../../projects/core/src/state/config/state-config.ts","../../../projects/core/src/auth/client-auth/http-interceptors/index.ts","../../../projects/core/src/state/config/default-state-config.ts","../../../projects/core/src/state/reducers/storage-sync.reducer.ts","../../../projects/core/src/state/services/state-persistence.service.ts","../../../projects/core/src/auth/user-auth/services/auth-state-persistence.service.ts","../../../projects/core/src/state/reducers/transfer-state.reducer.ts","../../../projects/core/src/state/reducers/index.ts","../../../projects/core/src/state/state.module.ts","../../../projects/core/src/util/normalize-http-error.ts","../../../projects/core/src/auth/client-auth/services/client-authentication-token.service.ts","../../../projects/core/src/auth/client-auth/store/effects/client-token.effect.ts","../../../projects/core/src/auth/client-auth/store/effects/index.ts","../../../projects/core/src/auth/client-auth/store/reducers/index.ts","../../../projects/core/src/auth/client-auth/store/client-auth-store.module.ts","../../../projects/core/src/auth/client-auth/client-auth.module.ts","../../../projects/core/src/config/config-initializer/config-initializer.ts","../../../projects/core/src/config/config-initializer/config-initializer.service.ts","../../../projects/core/src/global-message/models/global-message.model.ts","../../../projects/core/src/auth/user-auth/config/default-auth-config.ts","../../../projects/core/src/global-message/store/actions/global-message.actions.ts","../../../projects/core/src/global-message/store/global-message-state.ts","../../../projects/core/src/global-message/store/selectors/feature.selector.ts","../../../projects/core/src/global-message/store/selectors/global-message.selectors.ts","../../../projects/core/src/global-message/facade/global-message.service.ts","../../../projects/core/src/auth/user-auth/services/auth-http-header.service.ts","../../../projects/core/src/auth/user-auth/http-interceptors/auth.interceptor.ts","../../../projects/core/src/auth/user-auth/http-interceptors/token-revocation.interceptor.ts","../../../projects/core/src/auth/user-auth/http-interceptors/index.ts","../../../projects/core/src/auth/user-auth/user-auth.module.ts","../../../projects/core/src/auth/auth.module.ts","../../../projects/core/src/auth/user-auth/guards/auth.guard.ts","../../../projects/core/src/auth/user-auth/guards/not-auth.guard.ts","../../../projects/core/src/asm/connectors/asm.adapter.ts","../../../projects/core/src/occ/adapters/asm/default-occ-asm-config.ts","../../../projects/core/src/asm/config/asm-config.ts","../../../projects/core/src/asm/connectors/converters.ts","../../../projects/core/src/util/create-from.ts","../../../projects/core/src/lazy-loading/events/module-initialized-event.ts","../../../projects/core/src/event/utils/merging-subject.ts","../../../projects/core/src/event/event.service.ts","../../../projects/core/src/util/combined-injector.ts","../../../projects/core/src/lazy-loading/lazy-modules.service.ts","../../../projects/core/src/lazy-loading/unified-injector.ts","../../../projects/core/src/util/rxjs/get-last-value-sync.ts","../../../projects/core/src/util/converter.service.ts","../../../projects/core/src/occ/adapters/asm/occ-asm.adapter.ts","../../../projects/core/src/occ/adapters/asm/asm-occ.module.ts","../../../projects/core/src/cart/connectors/cart/cart.adapter.ts","../../../projects/core/src/cart/connectors/cart/converters.ts","../../../projects/core/src/cart/connectors/entry/cart-entry.adapter.ts","../../../projects/core/src/cart/connectors/save-cart/save-cart.adapter.ts","../../../projects/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","../../../projects/core/src/product/connectors/product/converters.ts","../../../projects/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","../../../projects/core/src/occ/adapters/cart/default-occ-cart-config.ts","../../../projects/core/src/cart/connectors/entry/converters.ts","../../../projects/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","../../../projects/core/src/cart/connectors/voucher/converters.ts","../../../projects/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","../../../projects/core/src/occ/adapters/cart/occ-cart.adapter.ts","../../../projects/core/src/cart/connectors/save-cart/converters.ts","../../../projects/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","../../../projects/core/src/occ/adapters/cart/cart-occ.module.ts","../../../projects/core/src/checkout/connectors/checkout/checkout.adapter.ts","../../../projects/core/src/checkout/connectors/checkout/converters.ts","../../../projects/core/src/checkout/connectors/cost-center/checkout-cost-center.adapter.ts","../../../projects/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","../../../projects/core/src/checkout/connectors/checkout/checkout.connector.ts","../../../projects/core/src/checkout/connectors/cost-center/checkout-cost-center.connector.ts","../../../projects/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","../../../projects/core/src/checkout/connectors/delivery/converters.ts","../../../projects/core/src/checkout/connectors/payment-type/payment-type.adapter.ts","../../../projects/core/src/checkout/connectors/payment-type/payment-type.connector.ts","../../../projects/core/src/checkout/connectors/payment-type/converters.ts","../../../projects/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","../../../projects/core/src/checkout/connectors/payment/checkout-payment.connector.ts","../../../projects/core/src/checkout/connectors/payment/converters.ts","../../../projects/core/src/checkout/connectors/replenishment-order/checkout-replenishment-order.adapter.ts","../../../projects/core/src/checkout/connectors/replenishment-order/checkout-replenishment-order.connector.ts","../../../projects/core/src/checkout/connectors/replenishment-order/converters.ts","../../../projects/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","../../../projects/core/src/util/time-utils.ts","../../../projects/core/src/occ/adapters/checkout/converters/occ-replenishment-order-form-serializer.ts","../../../projects/core/src/occ/adapters/checkout/converters/occ-replenishment-order-normalizer.ts","../../../projects/core/src/occ/adapters/checkout/default-occ-checkout-config.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout-cost-center.adapter.ts","../../../projects/core/src/user/connectors/address/converters.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout-payment-type.adapter.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","../../../projects/core/src/cms/page/page-meta.resolver.ts","../../../projects/core/src/state/event/state-event.service.ts","../../../projects/core/src/checkout/store/actions/address-verification.action.ts","../../../projects/core/src/checkout/store/actions/card-types.action.ts","../../../projects/core/src/cart/store/multi-cart-state.ts","../../../projects/core/src/process/store/process-state.ts","../../../projects/core/src/checkout/store/checkout-state.ts","../../../projects/core/src/checkout/store/actions/checkout.action.ts","../../../projects/core/src/checkout/store/actions/order-types.action.ts","../../../projects/core/src/checkout/store/actions/payment-types.action.ts","../../../projects/core/src/checkout/store/actions/replenishment-order.action.ts","../../../projects/core/src/checkout/events/checkout.events.ts","../../../projects/core/src/checkout/events/checkout-event.builder.ts","../../../projects/core/src/checkout/events/checkout-event.module.ts","../../../projects/core/src/cart/store/actions/cart-entry.action.ts","../../../projects/core/src/cart/store/actions/cart-voucher.action.ts","../../../projects/core/src/cart/store/actions/cart.action.ts","../../../projects/core/src/cart/store/actions/multi-cart.action.ts","../../../projects/core/src/cart/utils/utils.ts","../../../projects/core/src/cart/store/actions/wish-list.action.ts","../../../projects/core/src/cart/store/selectors/multi-cart.selector.ts","../../../projects/core/src/cart/facade/multi-cart.service.ts","../../../projects/core/src/util/glob-utils.ts","../../../projects/core/src/util/glob.service.ts","../../../projects/core/src/routing/services/url-matcher.service.ts","../../../projects/core/src/routing/configurable-routes/configurable-routes.service.ts","../../../projects/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","../../../projects/core/src/routing/configurable-routes/url-translation/url.pipe.ts","../../../projects/core/src/routing/configurable-routes/url-translation/url.module.ts","../../../projects/core/src/routing/external-routes/external-routes-config.ts","../../../projects/core/src/routing/external-routes/external-routes.guard.ts","../../../projects/core/src/routing/external-routes/external-routes.providers.ts","../../../projects/core/src/routing/external-routes/external-routes.service.ts","../../../projects/core/src/routing/external-routes/external-routes.module.ts","../../../projects/core/src/routing/models/page-context.model.ts","../../../projects/core/src/routing/protected-routes/protected-routes.service.ts","../../../projects/core/src/routing/protected-routes/protected-routes.guard.ts","../../../projects/core/src/routing/store/effects/router.effect.ts","../../../projects/core/src/routing/store/effects/index.ts","../../../projects/core/src/routing/store/reducers/router.reducer.ts","../../../projects/core/src/routing/routing.module.ts","../../../projects/core/src/routing/url-matcher/default-url-matcher.ts","../../../projects/core/src/checkout/http-interceptors/checkout-cart.interceptor.ts","../../../projects/core/src/checkout/http-interceptors/index.ts","../../../projects/core/src/util/regex-pattern.ts","../../../projects/core/src/cart/store/reducers/multi-cart.reducer.ts","../../../projects/core/src/cms/model/page.model.ts","../../../projects/core/src/cart/facade/active-cart.service.ts","../../../projects/core/src/i18n/translation.service.ts","../../../projects/core/src/checkout/services/checkout-page-meta.resolver.ts","../../../projects/core/src/user/connectors/address/user-address.adapter.ts","../../../projects/core/src/user/connectors/address/user-address.connector.ts","../../../projects/core/src/checkout/store/effects/address-verification.effect.ts","../../../projects/core/src/checkout/store/effects/card-types.effect.ts","../../../projects/core/src/user/store/actions/billing-countries.action.ts","../../../projects/core/src/user/store/actions/consignment-tracking.action.ts","../../../projects/core/src/user/store/user-state.ts","../../../projects/core/src/process/store/selectors/process.selectors.ts","../../../projects/core/src/process/store/selectors/feature.selector.ts","../../../projects/core/src/user/store/actions/customer-coupon.action.ts","../../../projects/core/src/user/store/actions/delivery-countries.action.ts","../../../projects/core/src/user/store/actions/forgot-password.action.ts","../../../projects/core/src/user/store/actions/notification-preference.action.ts","../../../projects/core/src/user/store/actions/order-details.action.ts","../../../projects/core/src/user/store/actions/order-return-request.action.ts","../../../projects/core/src/user/store/actions/payment-methods.action.ts","../../../projects/core/src/user/store/actions/product-interests.actions.ts","../../../projects/core/src/user/store/actions/regions.action.ts","../../../projects/core/src/user/store/actions/replenishment-order-details.action.ts","../../../projects/core/src/user/store/actions/reset-password.action.ts","../../../projects/core/src/user/store/actions/titles.action.ts","../../../projects/core/src/user/store/actions/update-email.action.ts","../../../projects/core/src/user/store/actions/update-password.action.ts","../../../projects/core/src/user/store/actions/user-addresses.action.ts","../../../projects/core/src/user/store/actions/user-consents.action.ts","../../../projects/core/src/user/store/actions/user-cost-center.action.ts","../../../projects/core/src/user/store/actions/user-details.action.ts","../../../projects/core/src/user/store/actions/user-misc.action.ts","../../../projects/core/src/user/store/actions/user-orders.action.ts","../../../projects/core/src/user/store/actions/user-register.action.ts","../../../projects/core/src/user/store/actions/user-replenishment-orders.action.ts","../../../projects/core/src/util/rxjs/withdraw-on.ts","../../../projects/core/src/checkout/store/effects/checkout.effect.ts","../../../projects/core/src/checkout/store/effects/payment-types.effect.ts","../../../projects/core/src/checkout/store/effects/replenishment-order.effect.ts","../../../projects/core/src/checkout/store/effects/index.ts","../../../projects/core/src/checkout/store/reducers/address-verification.reducer.ts","../../../projects/core/src/checkout/store/reducers/card-types.reducer.ts","../../../projects/core/src/checkout/store/reducers/checkout.reducer.ts","../../../projects/core/src/checkout/store/reducers/order-types.reducer.ts","../../../projects/core/src/checkout/store/reducers/payment-types.reducer.ts","../../../projects/core/src/checkout/store/reducers/index.ts","../../../projects/core/src/checkout/store/checkout-store.module.ts","../../../projects/core/src/checkout/checkout.module.ts","../../../projects/core/src/checkout/store/selectors/checkout.selectors.ts","../../../projects/core/src/checkout/store/selectors/address-verification.selectors.ts","../../../projects/core/src/checkout/store/selectors/card-types.selectors.ts","../../../projects/core/src/checkout/store/selectors/order-types.selectors.ts","../../../projects/core/src/checkout/store/selectors/payment-types.selectors.ts","../../../projects/core/src/checkout/facade/checkout-cost-center.service.ts","../../../projects/core/src/checkout/facade/checkout-delivery.service.ts","../../../projects/core/src/checkout/facade/checkout-payment.service.ts","../../../projects/core/src/checkout/facade/checkout.service.ts","../../../projects/core/src/checkout/facade/payment-type.service.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout-replenishment-order.adapter.ts","../../../projects/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","../../../projects/core/src/occ/adapters/checkout/checkout-occ.module.ts","../../../projects/core/src/cms/connectors/page/cms-page.adapter.ts","../../../projects/core/src/cms/connectors/component/converters.ts","../../../projects/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","../../../projects/core/src/cms/config/cms-config.ts","../../../projects/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","../../../projects/core/src/cms/connectors/page/converters.ts","../../../projects/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","../../../projects/core/src/cms/connectors/component/cms-component.adapter.ts","../../../projects/core/src/occ/adapters/cms/cms-occ.module.ts","../../../projects/core/src/occ/adapters/cms/legacy-occ-cms-component.adapter.ts","../../../projects/core/src/occ/adapters/cost-center/converters/occ-cost-center-normalizer.ts","../../../projects/core/src/occ/adapters/cost-center/converters/occ-cost-center-serializer.ts","../../../projects/core/src/cost-center/connectors/cost-center/converters.ts","../../../projects/core/src/occ/adapters/cost-center/converters/occ-cost-center-list-normalizer.ts","../../../projects/core/src/features-config/config/features-config.ts","../../../projects/core/src/features-config/utils/feature-config-utils.ts","../../../projects/core/src/features-config/services/feature-config.service.ts","../../../projects/core/src/features-config/directives/feature-level.directive.ts","../../../projects/core/src/features-config/directives/feature.directive.ts","../../../projects/core/src/features-config/features-config.module.ts","../../../projects/core/src/config/services/configuration.service.ts","../../../projects/core/src/config/config.module.ts","../../../projects/core/src/occ/adapters/cost-center/default-occ-cost-centers-config.ts","../../../projects/core/src/occ/adapters/cost-center/cost-center-occ.module.ts","../../../projects/core/src/occ/adapters/product/converters/product-image-normalizer.ts","../../../projects/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","../../../projects/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","../../../projects/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","../../../projects/core/src/occ/adapters/product/converters/product-name-normalizer.ts","../../../projects/core/src/product/connectors/references/converters.ts","../../../projects/core/src/occ/adapters/product/occ-product-references.adapter.ts","../../../projects/core/src/product/connectors/reviews/converters.ts","../../../projects/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","../../../projects/core/src/product/connectors/search/converters.ts","../../../projects/core/src/occ/adapters/product/occ-product-search.adapter.ts","../../../projects/core/src/occ/utils/occ-fields.ts","../../../projects/core/src/occ/services/occ-fields.service.ts","../../../projects/core/src/occ/services/occ-requests-optimizer.service.ts","../../../projects/core/src/occ/adapters/product/occ-product.adapter.ts","../../../projects/core/src/product/model/product-scope.ts","../../../projects/core/src/product/connectors/product/product.adapter.ts","../../../projects/core/src/product/connectors/references/product-references.adapter.ts","../../../projects/core/src/product/connectors/reviews/product-reviews.adapter.ts","../../../projects/core/src/product/connectors/search/product-search.adapter.ts","../../../projects/core/src/occ/adapters/product/default-occ-product-config.ts","../../../projects/core/src/occ/adapters/product/product-occ.module.ts","../../../projects/core/src/site-context/connectors/converters.ts","../../../projects/core/src/occ/adapters/site-context/occ-site.adapter.ts","../../../projects/core/src/site-context/connectors/site.adapter.ts","../../../projects/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","../../../projects/core/src/site-context/facade/currency.service.ts","../../../projects/core/src/site-context/facade/language.service.ts","../../../projects/core/src/occ/adapters/site-context/site-context.interceptor.ts","../../../projects/core/src/occ/adapters/site-context/site-context-occ.module.ts","../../../projects/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","../../../projects/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","../../../projects/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","../../../projects/core/src/anonymous-consents/connectors/converters.ts","../../../projects/core/src/user/connectors/consent/converters.ts","../../../projects/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","../../../projects/core/src/user/connectors/customer-coupon/converters.ts","../../../projects/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","../../../projects/core/src/occ/adapters/user/occ-user-address.adapter.ts","../../../projects/core/src/occ/adapters/user/occ-user-consent.adapter.ts","../../../projects/core/src/user/connectors/interests/converters.ts","../../../projects/core/src/occ/adapters/user/occ-user-interests.adapter.ts","../../../projects/core/src/user/connectors/notification-preference/converters.ts","../../../projects/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","../../../projects/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","../../../projects/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","../../../projects/core/src/user/connectors/order/converters.ts","../../../projects/core/src/occ/adapters/user/occ-user-order.adapter.ts","../../../projects/core/src/occ/adapters/user/occ-user-payment.adapter.ts","../../../projects/core/src/user/connectors/replenishment-order/converters.ts","../../../projects/core/src/occ/adapters/user/occ-user-replenishment-order.adapter.ts","../../../projects/core/src/user/connectors/user/converters.ts","../../../projects/core/src/occ/adapters/user/occ-user.adapter.ts","../../../projects/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","../../../projects/core/src/user/connectors/consent/user-consent.adapter.ts","../../../projects/core/src/user/connectors/cost-center/user-cost-center.adapter.ts","../../../projects/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","../../../projects/core/src/user/connectors/interests/user-interests.adapter.ts","../../../projects/core/src/user/connectors/order/user-order.adapter.ts","../../../projects/core/src/user/connectors/payment/user-payment.adapter.ts","../../../projects/core/src/user/connectors/replenishment-order/user-replenishment-order.adapter.ts","../../../projects/core/src/user/connectors/replenishment-order/user-replenishment-order.connector.ts","../../../projects/core/src/user/connectors/user/user.adapter.ts","../../../projects/core/src/occ/adapters/user/converters/occ-address-list-normalizer.ts","../../../projects/core/src/occ/adapters/user/default-occ-user-config.ts","../../../projects/core/src/occ/adapters/user/occ-user-cost-centers.adapter.ts","../../../projects/core/src/occ/adapters/user/user-occ.module.ts","../../../projects/core/src/occ/config-loader/java-reg-exp-converter.ts","../../../projects/core/src/util/ssr.tokens.ts","../../../projects/core/src/occ/config-loader/occ-loaded-config-converter.ts","../../../projects/core/src/occ/config-loader/occ-sites-config-loader.ts","../../../projects/core/src/occ/config-loader/occ-config-loader.service.ts","../../../projects/core/src/occ/config-loader/occ-config-loader.module.ts","../../../projects/core/src/occ/config/config-from-meta-tag-factory.ts","../../../projects/core/src/occ/config/default-occ-config.ts","../../../projects/core/src/occ/config/occ-config-validator.ts","../../../projects/core/src/occ/occ-models/occ.models.ts","../../../projects/core/src/occ/interceptors/with-credentials.interceptor.ts","../../../projects/core/src/config/config-validator/config-validator.ts","../../../projects/core/src/occ/occ.module.ts","../../../projects/core/src/occ/services/loading-scopes.service.ts","../../../projects/core/src/anonymous-consents/config/anonymous-consents-config.ts","../../../projects/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","../../../projects/core/src/anonymous-consents/http-interceptors/index.ts","../../../projects/core/src/user/store/selectors/feature.selector.ts","../../../projects/core/src/user/store/selectors/billing-countries.selectors.ts","../../../projects/core/src/user/store/selectors/consignment-tracking.selectors.ts","../../../projects/core/src/user/store/selectors/customer-coupons.selectors.ts","../../../projects/core/src/user/store/selectors/delivery-countries.selectors.ts","../../../projects/core/src/user/store/selectors/notification-preference.selectors.ts","../../../projects/core/src/user/store/selectors/order-details.selectors.ts","../../../projects/core/src/user/store/selectors/order-return-request.selectors.ts","../../../projects/core/src/user/store/selectors/payment-methods.selectors.ts","../../../projects/core/src/user/store/selectors/product-interests.selectors.ts","../../../projects/core/src/user/store/selectors/regions.selectors.ts","../../../projects/core/src/user/store/selectors/replenishment-order-details.selectors.ts","../../../projects/core/src/user/store/selectors/reset-password.selectors.ts","../../../projects/core/src/user/store/selectors/titles.selectors.ts","../../../projects/core/src/user/store/selectors/user-addresses.selectors.ts","../../../projects/core/src/user/store/selectors/user-consents.selectors.ts","../../../projects/core/src/user/store/selectors/user-cost-center.selectors.ts","../../../projects/core/src/user/store/selectors/user-details.selectors.ts","../../../projects/core/src/user/store/selectors/user-orders.selectors.ts","../../../projects/core/src/user/store/selectors/user-replenishment-orders.selectors.ts","../../../projects/core/src/user/facade/user-consent.service.ts","../../../projects/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","../../../projects/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","../../../projects/core/src/anonymous-consents/store/effects/index.ts","../../../projects/core/src/site-context/connectors/site.connector.ts","../../../projects/core/src/site-context/providers/context-service-map.ts","../../../projects/core/src/site-context/config/base-site-config-validator.ts","../../../projects/core/src/site-context/config/default-site-context-config.ts","../../../projects/core/src/site-context/services/site-context-params.service.ts","../../../projects/core/src/site-context/services/site-context-url-serializer.ts","../../../projects/core/src/site-context/services/site-context-routes-handler.ts","../../../projects/core/src/site-context/providers/context-service-providers.ts","../../../projects/core/src/site-context/providers/site-context-params-providers.ts","../../../projects/core/src/site-context/store/effects/base-site.effect.ts","../../../projects/core/src/site-context/store/effects/currencies.effect.ts","../../../projects/core/src/site-context/store/effects/languages.effect.ts","../../../projects/core/src/site-context/store/effects/index.ts","../../../projects/core/src/site-context/store/reducers/base-site.reducer.ts","../../../projects/core/src/site-context/store/reducers/currencies.reducer.ts","../../../projects/core/src/site-context/store/reducers/languages.reducer.ts","../../../projects/core/src/site-context/store/reducers/index.ts","../../../projects/core/src/site-context/store/site-context-store.module.ts","../../../projects/core/src/site-context/site-context.module.ts","../../../projects/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","../../../projects/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","../../../projects/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","../../../projects/core/src/anonymous-consents/store/reducers/index.ts","../../../projects/core/src/anonymous-consents/services/anonymous-consents-state-persistence.service.ts","../../../projects/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","../../../projects/core/src/anonymous-consents/anonymous-consents.module.ts","../../../projects/core/src/asm/services/asm-auth-storage.service.ts","../../../projects/core/src/asm/config/default-asm-config.ts","../../../projects/core/src/user/facade/user.service.ts","../../../projects/core/src/asm/store/actions/asm-ui.action.ts","../../../projects/core/src/asm/store/asm-state.ts","../../../projects/core/src/asm/store/actions/customer.action.ts","../../../projects/core/src/asm/store/actions/logout-agent.action.ts","../../../projects/core/src/asm/facade/csagent-auth.service.ts","../../../projects/core/src/asm/services/asm-auth-http-header.service.ts","../../../projects/core/src/global-message/models/response-status.model.ts","../../../projects/core/src/global-message/config/global-message-config.ts","../../../projects/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","../../../projects/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","../../../projects/core/src/util/applicable.ts","../../../projects/core/src/global-message/http-interceptors/http-error.interceptor.ts","../../../projects/core/src/global-message/http-interceptors/index.ts","../../../projects/core/src/global-message/store/reducers/global-message.reducer.ts","../../../projects/core/src/global-message/store/reducers/index.ts","../../../projects/core/src/global-message/store/global-message-store.module.ts","../../../projects/core/src/util/compare-equal-objects.ts","../../../projects/core/src/global-message/store/effects/global-message.effect.ts","../../../projects/core/src/global-message/config/default-global-message-config.ts","../../../projects/core/src/global-message/global-message.module.ts","../../../projects/core/src/asm/services/asm-auth.service.ts","../../../projects/core/src/asm/connectors/asm.connector.ts","../../../projects/core/src/asm/store/effects/customer.effect.ts","../../../projects/core/src/asm/store/effects/index.ts","../../../projects/core/src/asm/store/reducers/asm-ui.reducer.ts","../../../projects/core/src/asm/store/reducers/index.ts","../../../projects/core/src/asm/store/selectors/feature.selector.ts","../../../projects/core/src/asm/store/selectors/asm-ui.selectors.ts","../../../projects/core/src/asm/store/selectors/customer-search.selectors.ts","../../../projects/core/src/asm/services/asm-state-persistence.service.ts","../../../projects/core/src/asm/store/asm-store.module.ts","../../../projects/core/src/asm/asm.module.ts","../../../projects/core/src/asm/facade/asm.service.ts","../../../projects/core/src/cart/connectors/entry/cart-entry.connector.ts","../../../projects/core/src/cart/store/effects/cart-entry.effect.ts","../../../projects/core/src/cart/connectors/voucher/cart-voucher.connector.ts","../../../projects/core/src/cart/store/effects/cart-voucher.effect.ts","../../../projects/core/src/cart/connectors/cart/cart.connector.ts","../../../projects/core/src/cart/store/effects/cart.effect.ts","../../../projects/core/src/cart/connectors/save-cart/save-cart.connecter.ts","../../../projects/core/src/cart/store/effects/wish-list.effect.ts","../../../projects/core/src/cart/store/reducers/index.ts","../../../projects/core/src/cart/services/multi-cart-state-persistence.service.ts","../../../projects/core/src/cart/cart-persistence.module.ts","../../../projects/core/src/cart/event/cart.events.ts","../../../projects/core/src/cart/event/cart-event.builder.ts","../../../projects/core/src/cart/event/cart-event.module.ts","../../../projects/core/src/cms/store/cms-state.ts","../../../projects/core/src/cms/store/actions/components.action.ts","../../../projects/core/src/cms/store/actions/navigation-entry-item.action.ts","../../../projects/core/src/cms/store/actions/page.action.ts","../../../projects/core/src/cms/store/selectors/feature.selectors.ts","../../../projects/core/src/cms/store/selectors/components.selectors.ts","../../../projects/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","../../../projects/core/src/cms/store/selectors/page.selectors.ts","../../../projects/core/src/cms/utils/cms-utils.ts","../../../projects/core/src/cms/facade/cms.service.ts","../../../projects/core/src/cart/services/cart-page-meta.resolver.ts","../../../projects/core/src/cart/store/effects/multi-cart.effect.ts","../../../projects/core/src/cart/store/multi-cart-store.module.ts","../../../projects/core/src/cart/cart.module.ts","../../../projects/core/src/cart/config/cart-config.ts","../../../projects/core/src/cart/facade/cart-voucher.service.ts","../../../projects/core/src/cart/services/cart-config.service.ts","../../../projects/core/src/cart/facade/selective-cart.service.ts","../../../projects/core/src/cart/facade/wish-list.service.ts","../../../projects/core/src/cms/config/default-cms-config.ts","../../../projects/core/src/cms/page/routing/default-route-page-meta.resolver.ts","../../../projects/core/src/cms/page/routing/routing-page-meta.resolver.ts","../../../projects/core/src/cms/page/content-page-meta.resolver.ts","../../../projects/core/src/cms/page/page.module.ts","../../../projects/core/src/util/rxjs/buffer-debounce-time.ts","../../../projects/core/src/cms/config/cms-structure.config.ts","../../../projects/core/src/cms/services/cms-structure-config.service.ts","../../../projects/core/src/cms/connectors/component/cms-component.connector.ts","../../../projects/core/src/cms/store/effects/components.effect.ts","../../../projects/core/src/cms/store/effects/navigation-entry-item.effect.ts","../../../projects/core/src/cms/connectors/page/cms-page.connector.ts","../../../projects/core/src/cms/store/effects/page.effect.ts","../../../projects/core/src/cms/store/effects/index.ts","../../../projects/core/src/cms/store/reducers/components.reducer.ts","../../../projects/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","../../../projects/core/src/cms/store/reducers/page-data.reducer.ts","../../../projects/core/src/cms/store/reducers/page-index.reducer.ts","../../../projects/core/src/cms/store/reducers/index.ts","../../../projects/core/src/cms/store/cms-store.module.ts","../../../projects/core/src/cms/cms.module.ts","../../../projects/core/src/util/rxjs/unite-latest.ts","../../../projects/core/src/cms/facade/page-meta.service.ts","../../../projects/core/src/smart-edit/services/smart-edit.service.ts","../../../projects/core/src/cms/services/dynamic-attribute.service.ts","../../../projects/core/src/config/config-initializer/config-initializer.module.ts","../../../projects/core/src/config/config-validator/config-validator.module.ts","../../../projects/core/src/config/test-config.module.ts","../../../projects/core/src/config/utils/get-cookie.ts","../../../projects/core/src/i18n/date.pipe.ts","../../../projects/core/src/i18n/translate.pipe.ts","../../../projects/core/src/i18n/config/i18n-config.ts","../../../projects/core/src/i18n/translation-chunk.service.ts","../../../projects/core/src/i18n/config/default-i18n-config.ts","../../../projects/core/src/i18n/i18next/i18next-init.ts","../../../projects/core/src/i18n/i18next/i18next-providers.ts","../../../projects/core/src/i18n/i18next/i18next-translation.service.ts","../../../projects/core/src/i18n/i18n.module.ts","../../../projects/core/src/i18n/testing/mock-translate.ts","../../../projects/core/src/i18n/testing/mock-translate.pipe.ts","../../../projects/core/src/i18n/testing/mock-translation.service.ts","../../../projects/core/src/i18n/testing/mock-date.pipe.ts","../../../projects/core/src/i18n/testing/i18n-testing.module.ts","../../../projects/core/src/cost-center/cost-center.module.ts","../../../projects/core/src/personalization/config/default-personalization-config.ts","../../../projects/core/src/personalization/config/personalization-config.ts","../../../projects/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","../../../projects/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","../../../projects/core/src/personalization/http-interceptors/index.ts","../../../projects/core/src/personalization/personalization.module.ts","../../../projects/core/src/personalization/services/personalization-context.service.ts","../../../projects/core/src/process/store/reducers/index.ts","../../../projects/core/src/process/store/process-store.module.ts","../../../projects/core/src/process/process.module.ts","../../../projects/core/src/product/connectors/product/product.connector.ts","../../../projects/core/src/product/connectors/references/product-references.connector.ts","../../../projects/core/src/product/connectors/reviews/product-reviews.connector.ts","../../../projects/core/src/product/connectors/search/product-search.connector.ts","../../../projects/core/src/product/store/actions/product-references.action.ts","../../../projects/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","../../../projects/core/src/product/store/actions/product-reviews.action.ts","../../../projects/core/src/product/store/actions/product-search.action.ts","../../../projects/core/src/product/store/product-state.ts","../../../projects/core/src/product/store/actions/product.action.ts","../../../projects/core/src/product/store/effects/product-references.effect.ts","../../../projects/core/src/product/store/effects/product-reviews.effect.ts","../../../projects/core/src/product/store/effects/product-search.effect.ts","../../../projects/core/src/product/store/effects/product.effect.ts","../../../projects/core/src/product/store/effects/index.ts","../../../projects/core/src/product/store/reducers/product-references.reducer.ts","../../../projects/core/src/product/store/reducers/product-reviews.reducer.ts","../../../projects/core/src/product/store/reducers/product-search.reducer.ts","../../../projects/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","../../../projects/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","../../../projects/core/src/product/store/reducers/index.ts","../../../projects/core/src/product/store/selectors/feature.selector.ts","../../../projects/core/src/product/store/selectors/product-references.selectors.ts","../../../projects/core/src/product/store/selectors/product-reviews.selectors.ts","../../../projects/core/src/product/store/selectors/product-search.selectors.ts","../../../projects/core/src/product/store/selectors/product.selectors.ts","../../../projects/core/src/product/facade/product-reference.service.ts","../../../projects/core/src/product/facade/product-review.service.ts","../../../projects/core/src/product/facade/product-search.service.ts","../../../projects/core/src/product/services/product-loading.service.ts","../../../projects/core/src/product/facade/product.service.ts","../../../projects/core/src/product/facade/searchbox.service.ts","../../../projects/core/src/product/services/category-page-meta.resolver.ts","../../../projects/core/src/product/services/coupon-search-page-meta.resolver.ts","../../../projects/core/src/product/services/product-page-meta.resolver.ts","../../../projects/core/src/product/services/search-page-meta.resolver.ts","../../../projects/core/src/product/store/product-store.module.ts","../../../projects/core/src/product/product.module.ts","../../../projects/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","../../../projects/core/src/smart-edit/http-interceptors/index.ts","../../../projects/core/src/smart-edit/smart-edit.module.ts","../../../projects/core/src/user/connectors/consent/user-consent.connector.ts","../../../projects/core/src/user/connectors/cost-center/user-cost-center.connector.ts","../../../projects/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","../../../projects/core/src/user/connectors/interests/user-interests.connector.ts","../../../projects/core/src/user/connectors/order/user-order.connector.ts","../../../projects/core/src/user/connectors/payment/user-payment.connector.ts","../../../projects/core/src/user/connectors/user/user.connector.ts","../../../projects/core/src/user/facade/consent.service.ts","../../../projects/core/src/user/facade/customer-coupon.service.ts","../../../projects/core/src/user/facade/order-return-request.service.ts","../../../projects/core/src/user/facade/user-address.service.ts","../../../projects/core/src/user/facade/user-cost-center.service.ts","../../../projects/core/src/user/facade/user-interests.service.ts","../../../projects/core/src/user/facade/user-notification-preference.service.ts","../../../projects/core/src/user/facade/user-order.service.ts","../../../projects/core/src/user/facade/user-payment.service.ts","../../../projects/core/src/user/facade/user-replenishment-order.service.ts","../../../projects/core/src/user/store/reducers/billing-countries.reducer.ts","../../../projects/core/src/user/store/reducers/consignment-tracking.reducer.ts","../../../projects/core/src/user/store/reducers/customer-coupon.reducer.ts","../../../projects/core/src/user/store/reducers/delivery-countries.reducer.ts","../../../projects/core/src/user/store/reducers/notification-preference.reducer.ts","../../../projects/core/src/user/store/reducers/order-details.reducer.ts","../../../projects/core/src/user/store/reducers/order-return-request.reducer.ts","../../../projects/core/src/user/store/reducers/payment-methods.reducer.ts","../../../projects/core/src/user/store/reducers/product-interests.reducer.ts","../../../projects/core/src/user/store/reducers/regions.reducer.ts","../../../projects/core/src/user/store/reducers/replenishment-order-details.reducer.ts","../../../projects/core/src/user/store/reducers/reset-password.reducer.ts","../../../projects/core/src/user/store/reducers/titles.reducer.ts","../../../projects/core/src/user/store/reducers/user-addresses.reducer.ts","../../../projects/core/src/user/store/reducers/user-consents.reducer.ts","../../../projects/core/src/user/store/reducers/user-cost-center.reducer.ts","../../../projects/core/src/user/store/reducers/user-details.reducer.ts","../../../projects/core/src/user/store/reducers/user-orders.reducer.ts","../../../projects/core/src/user/store/reducers/user-replenishment-orders.reducer.ts","../../../projects/core/src/user/store/reducers/index.ts","../../../projects/core/src/user/store/effects/billing-countries.effect.ts","../../../projects/core/src/user/store/effects/clear-miscs-data.effect.ts","../../../projects/core/src/user/store/effects/consignment-tracking.effect.ts","../../../projects/core/src/user/store/effects/customer-coupon.effect.ts","../../../projects/core/src/user/store/effects/delivery-countries.effect.ts","../../../projects/core/src/user/store/effects/forgot-password.effect.ts","../../../projects/core/src/user/store/effects/notification-preference.effect.ts","../../../projects/core/src/user/store/effects/order-details.effect.ts","../../../projects/core/src/user/store/effects/order-return-request.effect.ts","../../../projects/core/src/user/store/effects/payment-methods.effect.ts","../../../projects/core/src/user/store/effects/product-interests.effect.ts","../../../projects/core/src/user/store/effects/regions.effect.ts","../../../projects/core/src/user/store/effects/replenishment-order-details.effect.ts","../../../projects/core/src/user/store/effects/reset-password.effect.ts","../../../projects/core/src/user/store/effects/titles.effect.ts","../../../projects/core/src/user/store/effects/update-email.effect.ts","../../../projects/core/src/user/store/effects/update-password.effect.ts","../../../projects/core/src/user/store/effects/user-addresses.effect.ts","../../../projects/core/src/user/store/effects/user-consents.effect.ts","../../../projects/core/src/user/store/effects/user-cost-center.effect.ts","../../../projects/core/src/user/store/effects/user-details.effect.ts","../../../projects/core/src/user/store/effects/user-orders.effect.ts","../../../projects/core/src/user/store/effects/user-register.effect.ts","../../../projects/core/src/user/store/effects/user-replenishment-orders.effect.ts","../../../projects/core/src/user/store/effects/index.ts","../../../projects/core/src/user/store/user-store.module.ts","../../../projects/core/src/user/user.module.ts","../../../projects/core/src/util/external-js-file-loader/external-js-file-loader.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__values","o","s","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","assign","_a","_b","_c","Config","InjectionToken","providedIn","factory","inject","DefaultConfig","RootConfig","DefaultConfigChunk","InjectFlags","Optional","ConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","OCC_USER_ID_CURRENT","OCC_USER_ID_ANONYMOUS","OCC_USER_ID_GUEST","OCC_CART_ID_CURRENT","WindowRef","document","window","undefined","nativeWindow","sessionStorage","localStorage","fromEvent","pipe","debounceTime","startWith","distinctUntilChanged","of","Injectable","args","Inject","DOCUMENT","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","isDevMode","console","getLoadStrategy","loadStrategy","getRouteName","path","routeNamesByPath","initRouteNamesByPath","_this","paths","forEach","_e","entries","_f","_g","RoutingConfig","isParam","segment","startsWith","getParamName","slice","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","map","childrenSegments","children","PRIMARY_OUTLET","Router","SemanticPathService","routingConfigService","urlParser","ROOT_URL","get","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","Boolean","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","filter","ROUTER_GO","ROUTER_GO_BY_URL","ROUTER_BACK","ROUTER_FORWARD","CHANGE_NEXT_PAGE_CONTEXT","RouteGoAction","payload","type","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","ChangeNextPageContext","ROUTING_FEATURE","getRouterFeatureState","createFeatureSelector","state","getRouterState","createSelector","ɵ0","routingState","semanticRoute","getSemanticRoute","ɵ1","context","id","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","routes$","events","event","NavigationEnd","route","routerState","snapshot","firstChild","shareReplay","bufferSize","refCount","RoutingParamsService","activatedRoutesService","params$","findAllParam","ActivatedRoutesService","RoutingService","store","winRef","semanticPathService","routingParamsService","select","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","changeNextPageContext","pageContext","dispatch","RoutingActions.ChangeNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","includes","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","Store","AuthRedirectStorageService","redirectUrl$","BehaviorSubject","getRedirectUrl","setRedirectUrl","redirectUrl","AuthRedirectService","authRedirectStorageService","ignoredUrls","Set","redirect","take","subscribe","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","add","has","navigation","serializeUrl","finalUrl","AuthStorageService","_super","_token$","decode","nonStringifiedOAuthLibKeys","JSON","stringify","encode","parse","getToken","setToken","token","getItem","currentToken","unsubscribe","removeItem","val","setItem","data","OAuthStorage","OccConfig","SiteContextConfig","OAuthFlow","AuthConfigService","authConfig","occConfig","getClientId","authentication","client_id","getClientSecret","client_secret","getBaseUrl","baseUrl","backend","occ","getTokenEndpoint","tokenEndpoint","prefixEndpoint","getLoginUrl","loginUrl","getRevokeEndpoint","revokeEndpoint","getLogoutUrl","logoutUrl","getUserinfoEndpoint","userinfoEndpoint","getOAuthLibConfig","OAuthLibConfig","endpoint","getOAuthFlow","responseType","types","split","AuthorizationCode","ImplicitFlow","ResourceOwnerPasswordFlow","AuthConfig","OAuthLibWrapperService","oAuthService","authConfigService","platformId","initialize","isSSR","isPlatformServer","configure","clientId","dummyClientSecret","revocationEndpoint","issuer","redirectUri","_d","authorizeWithPasswordFlow","userId","password","fetchTokenUsingPasswordFlow","refreshToken","revokeAndLogout","revokeTokenAndLogout","catch","logOut","finally","logout","getIdToken","initLoginFlow","tryLogin","disableOAuth2StateCheck","OAuthService","PLATFORM_ID","LOGIN","LOGOUT","Login","Logout","UserIdService","_userId","ReplaySubject","setUserId","getUserId","invokeWithUserId","cb","takeUserId","loggedIn","Error","clearUserId","isEmulated","CountryType","PromotionLocation","B2BPaymentTypeEnum","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","AuthService","userIdService","oAuthLibWrapperService","authStorageService","authRedirectService","routingService","checkOAuthParamsInUrl","AuthActions.Login","loginWithRedirect","loginWithCredentials","coreLogout","AuthActions.Logout","isUserLoggedIn","userToken","access_token","ImageType","B2BUserRole","VariantType","PriceType","VariantQualifier","DaysOfWeek","ANONYMOUS_CONSENTS_HEADER","NotificationType","ORDER_TYPE","ENTITY_REMOVE_ACTION","ENTITY_REMOVE_ALL_ACTION","entityMeta","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","LOADER_LOAD_ACTION","LOADER_FAIL_ACTION","LOADER_SUCCESS_ACTION","LOADER_RESET_ACTION","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","ENTITY_LOAD_ACTION","ENTITY_FAIL_ACTION","ENTITY_SUCCESS_ACTION","ENTITY_RESET_ACTION","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","EntityLoaderResetAction","initialLoaderState","loading","loaderReducer","reducer","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","entityUpdates","subAction","newState","entityLoaderReducer","PROCESSES_INCREMENT_ACTION","PROCESSES_DECREMENT_ACTION","PROCESSES_LOADER_RESET_ACTION","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","ENTITY_PROCESSES_LOADER_RESET_ACTION","ENTITY_PROCESSES_INCREMENT_ACTION","ENTITY_PROCESSES_DECREMENT_ACTION","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","OBJECT_SEPARATOR","getStateSliceValue","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","serializeSearchConfig","pageSize","currentPage","sort","denormalizeCustomB2BSearch","list","serializedList","res","values","code","pagination","sorts","page","searchConfig","toString","ANONYMOUS_CONSENTS_STORE_FEATURE","ANONYMOUS_CONSENTS","LOAD_ANONYMOUS_CONSENT_TEMPLATES","LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS","LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL","RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES","GET_ALL_ANONYMOUS_CONSENTS","GET_ANONYMOUS_CONSENT","SET_ANONYMOUS_CONSENTS","GIVE_ANONYMOUS_CONSENT","WITHDRAW_ANONYMOUS_CONSENT","TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED","TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED","ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS","LoadAnonymousConsentTemplates","StateUtils.LoaderLoadAction","LoadAnonymousConsentTemplatesSuccess","StateUtils.LoaderSuccessAction","LoadAnonymousConsentTemplatesFail","StateUtils.LoaderFailAction","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","AnonymousConsentCheckUpdatedVersions","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$1","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$1","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","authService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","tap","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","switchMap","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","checkConsentVersions","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","encodeURIComponent","decodeAndDeserialize","rawConsents","decoded","decodeURIComponent","consentsUpdated","newConsents","previousConsents","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","BASE_SITE_CONTEXT_ID","LOAD_BASE_SITE","LOAD_BASE_SITE_FAIL","LOAD_BASE_SITE_SUCCESS","LOAD_BASE_SITES","LOAD_BASE_SITES_FAIL","LOAD_BASE_SITES_SUCCESS","SET_ACTIVE_BASE_SITE","BASE_SITE_CHANGE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","LoadBaseSites","LoadBaseSitesFail","LoadBaseSitesSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","LOAD_CURRENCIES_FAIL","LOAD_CURRENCIES_SUCCESS","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","LOAD_LANGUAGES_FAIL","LOAD_LANGUAGES_SUCCESS","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","SITE_CONTEXT_FEATURE","getSiteContextState","sitesEntitiesSelector","baseSite","getBaseSiteState","ɵ1$2","activeSite","getActiveBaseSite","ɵ2$1","details","getBaseSiteData","ɵ3$1","getBaseSitesEntities","uid","getAllBaseSites","ɵ4$1","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","getCurrenciesState","currencies","getCurrenciesEntities","getActiveCurrency","getAllCurrencies","isocode","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","SiteContextSelectors.getAllBaseSites","sites","SiteContextActions.LoadBaseSites","siteUid","site","activeSiteUid","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","HttpParamsURIEncoder","encodeKey","encodeValue","decodeKey","decodeValue","DEFAULT_SCOPE","OccEndpointsService","baseSiteService","_activeBaseSite","getRawEndpoint","endpoints","getOccEndpoint","prefix","endsWith","getBaseEndpoint","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","delete","set","endpointConfig","USE_CLIENT_TOKEN","USE_CUSTOMER_SUPPORT_AGENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","HttpHeaders","removeHeader","request","updatedHeaders","clone","getInterceptorParam","rawValue","CLIENT_AUTH_FEATURE","CLIENT_TOKEN_DATA","LOAD_CLIENT_TOKEN","LOAD_CLIENT_TOKEN_FAIL","LOAD_CLIENT_TOKEN_SUCCESS","LoadClientToken","LoadClientTokenFail","LoadClientTokenSuccess","getClientAuthState","clientToken","getClientTokenState","ɵ0$7","ClientTokenService","getClientToken","ClientAuthSelectors.getClientTokenState","observeOn","queueScheduler","isClientTokenLoaded","ClientAuthActions.LoadClientToken","refreshClientToken","ClientErrorHandlingService","clientTokenService","handleExpiredClientToken","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","ClientTokenInterceptor","clientErrorHandlingService","occEndpoints","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","StorageSyncType","interceptors","HTTP_INTERCEPTORS","DEFAULT_LOCAL_STORAGE_KEY","DEFAULT_SESSION_STORAGE_KEY","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","StateTransferType","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","getStorage","storageType","storage","NO_STORAGE","configKey","isSsr","storageValue","StatePersistenceService","syncWithStorage","state$","context$","onRead","subscriptions","Subscription","generateKeyWithContext","readStateFromStorage","join","AuthStatePersistenceService","statePersistenceService","subscription","initSync","getAuthState","authToken","refresh_token","ngOnDestroy","CX_KEY","makeStateKey","getTransferStateReducer","transferState","authStatePersistenceService","ssrTransfer","isPlatformBrowser","isLoggedIn","transferStateKeys","TRANSFER_STATE","hasKey","cxKey","getBrowserTransferStateReducer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","TransferState","META_REDUCERS","StateModule","forRoot","ngModule","providers","normalizeHttpError","normalizedError","message","statusText","error_description","NgModule","ClientAuthenticationTokenService","http","loadClientAuthenticationToken","Content-Type","post","HttpClient","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","ClientAuthActions.LOAD_CLIENT_TOKEN","exhaustMap","ClientAuthActions.LoadClientTokenSuccess","ClientAuthActions.LoadClientTokenFail","Actions","Effect","effects","ClientTokenEffect","getReducers","reducerToken","reducerProvider","imports","CommonModule","HttpClientModule","StoreModule","forFeature","EffectsModule","ClientAuthModule","ClientAuthStoreModule","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","ConfigInitializerService","initializerGuard","rootConfig","ongoingScopes$","getStableConfig","scopes","isStable","ongoingScopes","areReady","mapTo","toPromise","finishScopes","newScopes","scopes_1","scopes_1_1","splice","indexOf","scopes_2","scopes_2_1","ongoingScopes_1","e_3","ongoingScopes_1_1","ongoingScope","scopesOverlap","a","initializers","asyncConfigs","initializer","this_1","initializerConfig","all","GlobalMessageType","defaultAuthConfig","customTokenParameters","strictDiscoveryDocumentValidation","skipIssuerCheck","disablePKCE","oidc","clearHashAfterLogin","ADD_MESSAGE","REMOVE_MESSAGE","REMOVE_MESSAGES_BY_TYPE","AddMessage","RemoveMessage","RemoveMessagesByType","GLOBAL_MESSAGE_FEATURE","getGlobalMessageState","getGlobalMessageEntities","ɵ0$9","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","remove","index","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","AuthHttpHeaderService","globalMessageService","shouldCatchError","isOccUrl","alterRequest","hasAuthorizationHeader","getAuthorizationHeader","createAuthorizationHeader","tok","handleExpiredAccessToken","handleExpiredToken","handleExpiredRefreshToken","MSG_TYPE_ERROR","oldToken","AuthInterceptor","authHttpHeaderService","TokenRevocationInterceptor","isTokenRevocationRequest","configInit","authStatePersistenceFactory","UserAuthModule","APP_INITIALIZER","OAuthModule","AuthModule","AuthGuard","canActivate","NotAuthGuard","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","createFrom","MergingSubject","subscriptionsToSources","Map","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","findIndex","EventService","eventsMeta","register","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","name","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","notFoundValue","flags","Self","service","LazyModulesService","compiler","injector","modules$","ModuleInitializedEvent","moduleRef","publishReplay","dependencyModules","eventSubscription","connect","resolveModuleInstance","moduleFunc","feature","dependencyModuleRefs","parentInjector","resolveModuleFactory","resolveDependencyModuleInstance","moduleFactory","module","from","NgModuleFactory","compileModuleAsync","dependency","destroy","Compiler","Injector","UnifiedInjector","rootInjector","lazyModules","injectors$","instance","getMulti","instances","scan","services","getLastValueSync","emission","ConverterService","unifiedInjector","converters","cacheResetLogic","clear","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","OccAsmAdapter","occEndpointsService","converterService","customerSearch","options","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","el","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","qty","update","entryNumber","pickupStore","patch","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","POINT_OF_SERVICE_NORMALIZER","CheckoutConnector","adapter","placeOrder","termsChecked","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","CheckoutAdapter","CheckoutCostCenterConnector","setCostCenter","costCenterId","CheckoutCostCenterAdapter","CheckoutDeliveryConnector","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","CheckoutDeliveryAdapter","DELIVERY_MODE_NORMALIZER","PaymentTypeConnector","getPaymentTypes","loadPaymentTypes","setPaymentType","typeCode","poNumber","PaymentTypeAdapter","PAYMENT_TYPE_NORMALIZER","CheckoutPaymentConnector","paymentDetails","paymentDetailsId","getCardTypes","loadCardTypes","CheckoutPaymentAdapter","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","CheckoutReplenishmentOrderConnector","scheduleReplenishmentOrder","scheduleReplenishmentForm","CheckoutReplenishmentOrderAdapter","REPLENISHMENT_ORDER_NORMALIZER","REPLENISHMENT_ORDER_FORM_SERIALIZER","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","TimeUtils","getLocalTimezoneOffset","invert","offset","getTimezoneOffset","Math","abs","floor","padStart","convertDateToDatetime","date","endOfDay","convertDatetimeToDate","datetime","substring","toISOString","OccReplenishmentOrderFormSerializer","replenishmentStartDate","convertDate","toLocaleTimeString","hour","minute","hour12","OccReplenishmentOrderNormalizer","defaultOccCheckoutConfig","setDeliveryAddress","OccCheckoutCostCenterAdapter","getCartEndpoint","cartEndpoint","ADDRESS_NORMALIZER","ADDRESS_LIST_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","OccCheckoutPaymentTypeAdapter","paymentTypeList","paymentTypes","paymentType","purchaseOrderNumber","OccCheckoutPaymentAdapter","DOMParser","domparser","getProviderSubInfo","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","mergeMap","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","cardTypeList","cardTypes","Accept","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","input","getAttribute","paramList","PageMetaResolver","getScore","score","pageType","pageTemplate","hasMatch","getPriority","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","ActionsSubject","VERIFY_ADDRESS","VERIFY_ADDRESS_FAIL","VERIFY_ADDRESS_SUCCESS","CLEAR_ADDRESS_VERIFICATION_RESULTS","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LOAD_CARD_TYPES","LOAD_CARD_TYPES_FAIL","LOAD_CARD_TYPES_SUCCESS","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","MULTI_CART_FEATURE","MULTI_CART_DATA","ADD_VOUCHER_PROCESS_ID","PROCESS_FEATURE","CHECKOUT_FEATURE","CHECKOUT_DETAILS","SET_DELIVERY_ADDRESS_PROCESS_ID","SET_DELIVERY_MODE_PROCESS_ID","SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID","SET_PAYMENT_DETAILS_PROCESS_ID","GET_PAYMENT_TYPES_PROCESS_ID","SET_COST_CENTER_PROCESS_ID","PLACED_ORDER_PROCESS_ID","CLEAR_CHECKOUT_DELIVERY_ADDRESS","CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS","CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL","CLEAR_CHECKOUT_DELIVERY_MODE","CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS","CLEAR_CHECKOUT_DELIVERY_MODE_FAIL","ADD_DELIVERY_ADDRESS","ADD_DELIVERY_ADDRESS_FAIL","ADD_DELIVERY_ADDRESS_SUCCESS","SET_DELIVERY_ADDRESS","SET_DELIVERY_ADDRESS_FAIL","SET_DELIVERY_ADDRESS_SUCCESS","RESET_SET_DELIVERY_ADDRESS_PROCESS","LOAD_SUPPORTED_DELIVERY_MODES","LOAD_SUPPORTED_DELIVERY_MODES_FAIL","LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","CLEAR_SUPPORTED_DELIVERY_MODES","SET_DELIVERY_MODE","SET_DELIVERY_MODE_FAIL","SET_DELIVERY_MODE_SUCCESS","RESET_SET_DELIVERY_MODE_PROCESS","RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS","CREATE_PAYMENT_DETAILS","CREATE_PAYMENT_DETAILS_FAIL","CREATE_PAYMENT_DETAILS_SUCCESS","SET_PAYMENT_DETAILS","SET_PAYMENT_DETAILS_FAIL","SET_PAYMENT_DETAILS_SUCCESS","RESET_SET_PAYMENT_DETAILS_PROCESS","PLACE_ORDER","PLACE_ORDER_FAIL","PLACE_ORDER_SUCCESS","CLEAR_PLACE_ORDER","CLEAR_CHECKOUT_STEP","CLEAR_CHECKOUT_DATA","LOAD_CHECKOUT_DETAILS","LOAD_CHECKOUT_DETAILS_FAIL","LOAD_CHECKOUT_DETAILS_SUCCESS","CHECKOUT_CLEAR_MISCS_DATA","PAYMENT_PROCESS_SUCCESS","SET_COST_CENTER","SET_COST_CENTER_FAIL","SET_COST_CENTER_SUCCESS","RESET_SET_COST_CENTER_PROCESS","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","StateUtils.EntityLoadAction","SetDeliveryAddressFail","StateUtils.EntityFailAction","SetDeliveryAddressSuccess","StateUtils.EntitySuccessAction","ResetSetDeliveryAddressProcess","StateUtils.EntityLoaderResetAction","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearPlaceOrder","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","SetCostCenter","SetCostCenterFail","SetCostCenterSuccess","ResetSetCostCenterProcess","SET_ORDER_TYPE","SetOrderType","LOAD_PAYMENT_TYPES","LOAD_PAYMENT_TYPES_FAIL","LOAD_PAYMENT_TYPES_SUCCESS","RESET_LOAD_PAYMENT_TYPES_PROCESS_ID","SET_PAYMENT_TYPE","SET_PAYMENT_TYPE_FAIL","SET_PAYMENT_TYPE_SUCCESS","LoadPaymentTypes","LoadPaymentTypesFail","LoadPaymentTypesSuccess","ResetLoadPaymentTypesProcess","SetPaymentType","SetPaymentTypeFail","SetPaymentTypeSuccess","SCHEDULE_REPLENISHMENT_ORDER","SCHEDULE_REPLENISHMENT_ORDER_SUCCESS","SCHEDULE_REPLENISHMENT_ORDER_FAIL","CLEAR_SCHEDULE_REPLENISHMENT_ORDER","ScheduleReplenishmentOrder","ScheduleReplenishmentOrderSuccess","ScheduleReplenishmentOrderFail","ClearScheduleReplenishmentOrderAction","CheckoutEventBuilder","stateEventService","orderPlacedEvent","CheckoutActions.PLACE_ORDER_SUCCESS","OrderPlacedEvent","_checkoutEventBuilder","CART_ADD_ENTRY","CART_ADD_ENTRY_SUCCESS","CART_ADD_ENTRY_FAIL","CART_REMOVE_ENTRY","CART_REMOVE_ENTRY_SUCCESS","CART_REMOVE_ENTRY_FAIL","CART_UPDATE_ENTRY","CART_UPDATE_ENTRY_SUCCESS","CART_UPDATE_ENTRY_FAIL","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CART_ADD_VOUCHER_FAIL","CART_ADD_VOUCHER_SUCCESS","CART_RESET_ADD_VOUCHER","CART_REMOVE_VOUCHER","CART_REMOVE_VOUCHER_FAIL","CART_REMOVE_VOUCHER_SUCCESS","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CREATE_CART_FAIL","CREATE_CART_SUCCESS","LOAD_CART","LOAD_CART_FAIL","LOAD_CART_SUCCESS","ADD_EMAIL_TO_CART","ADD_EMAIL_TO_CART_FAIL","ADD_EMAIL_TO_CART_SUCCESS","MERGE_CART","MERGE_CART_SUCCESS","RESET_CART_DETAILS","REMOVE_CART","DELETE_CART","DELETE_CART_SUCCESS","DELETE_CART_FAIL","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SET_TEMP_CART","CART_PROCESSES_INCREMENT","CART_PROCESSES_DECREMENT","SET_ACTIVE_CART_ID","CLEAR_CART_STATE","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","getCartIdByUserId","guid","isCartNotFoundError","reason","subjectType","subject","getWishlistName","customerId","isTempCartId","CREATE_WISH_LIST","CREATE_WISH_LIST_FAIL","CREATE_WISH_LIST_SUCCESS","LOAD_WISH_LIST","LOAD_WISH_LIST_SUCCESS","LOAD_WISH_LIST_FAIL","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","getMultiCartState","getMultiCartEntities","ɵ0$a","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$6","wishList","getWishListId","ɵ2$4","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","EMPTY","generateTempCartId","random","substr","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","getLastEntry","filteredEntries","addEntry","CartActions.CartAddEntry","products","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","reloadCart","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","test","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","pathMatch","hasChildren","consumed","posParams","parts","part","getOpposite","originalMatcher","group","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","init","resetConfig","configureRoutes","configuredRoute","configureRoute","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","ProductURLPipe","semanticPath","Pipe","UrlPipe","urlService","declarations","exports","ExternalRoutesGuard","href","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","component","ExternalRoutesConfig","ExternalRoutesModule","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","navigate$","RoutingActions.ROUTER_GO","navigateByUrl$","RoutingActions.ROUTER_GO_BY_URL","navigateByUrl","clearCmsRoutes$","SiteContextActions.LANGUAGE_CHANGE","AuthActions.LOGOUT","AuthActions.LOGIN","filteredConfig","cxCmsRouteContext","navigateBack$","RoutingActions.ROUTER_BACK","navigateForward$","RoutingActions.ROUTER_FORWARD","Location","RouterEffects","initialState","cmsRequired","fromNgrxRouter.ROUTER_NAVIGATION","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","serialize","urlString","urlSegment","x","guardName","lookupSemanticRoute","CONTENT_PAGE","PRODUCT_PAGE","CATEGORY_PAGE","pageLabel","initConfigurableRoutes","RoutingModule","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","CheckoutCartInterceptor","multiCartService","isUserInCheckoutRoute","cartCode","getCartIdFromError","toLowerCase","EMAIL_PATTERN","activeCartInitialState","activeCartReducer","CartActions.LOAD_CART_SUCCESS","CartActions.CREATE_CART_SUCCESS","CartActions.CREATE_CART","CartActions.SET_ACTIVE_CART_ID","CartActions.REMOVE_CART","CartActions.DELETE_CART_SUCCESS","CartActions.CLEAR_CART_STATE","cartEntitiesReducer","CartActions.CREATE_WISH_LIST_SUCCESS","CartActions.LOAD_WISH_LIST_SUCCESS","CartActions.SET_TEMP_CART","wishListReducer","PageRobotsMeta","ActiveCartService","activeCartId$","switchMapTo","MultiCartSelectors.getActiveCartId","cartSelector$","initActiveCart","pairwise","previousUserId","isJustLoggedIn","loadOrMerge","activeCartValue$","cartEntity","loaded","isEmpty","activeCartLoading$","activeCart$","using","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","user","activeCart","cartUser","isEmail","str","match","CheckoutPageMetaResolver","translation","activeCartService","cart$","resolveTitle","translate","count","totalItems","resolveRobots","NOFOLLOW","NOINDEX","TranslationService","UserAddressConnector","verify","UserAddressAdapter","userAddressConnector","verifyAddress$","CheckoutActions.VERIFY_ADDRESS","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LOAD_CARD_TYPES","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","LOAD_BILLING_COUNTRIES","LOAD_BILLING_COUNTRIES_FAIL","LOAD_BILLING_COUNTRIES_SUCCESS","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LOAD_CONSIGNMENT_TRACKING","LOAD_CONSIGNMENT_TRACKING_FAIL","LOAD_CONSIGNMENT_TRACKING_SUCCESS","CLEAR_CONSIGNMENT_TRACKING","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","USER_FEATURE","UPDATE_EMAIL_PROCESS_ID","UPDATE_PASSWORD_PROCESS_ID","UPDATE_USER_DETAILS_PROCESS_ID","REGISTER_USER_PROCESS_ID","REMOVE_USER_PROCESS_ID","GIVE_CONSENT_PROCESS_ID","WITHDRAW_CONSENT_PROCESS_ID","UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID","ADD_PRODUCT_INTEREST_PROCESS_ID","REMOVE_PRODUCT_INTERESTS_PROCESS_ID","CANCEL_ORDER_PROCESS_ID","CANCEL_RETURN_PROCESS_ID","CANCEL_REPLENISHMENT_ORDER_PROCESS_ID","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_RETURN_REQUEST_DETAILS","USER_ORDER_DETAILS","USER_COST_CENTERS","USER_REPLENISHMENT_ORDERS","USER_REPLENISHMENT_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID","UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID","CLAIM_CUSTOMER_COUPON_PROCESS_ID","NOTIFICATION_PREFERENCES","PRODUCT_INTERESTS","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LOAD_CUSTOMER_COUPONS","LOAD_CUSTOMER_COUPONS_FAIL","LOAD_CUSTOMER_COUPONS_SUCCESS","RESET_LOAD_CUSTOMER_COUPONS","SUBSCRIBE_CUSTOMER_COUPON","SUBSCRIBE_CUSTOMER_COUPON_FAIL","SUBSCRIBE_CUSTOMER_COUPON_SUCCESS","RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS","UNSUBSCRIBE_CUSTOMER_COUPON","UNSUBSCRIBE_CUSTOMER_COUPON_FAIL","UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS","RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS","CLAIM_CUSTOMER_COUPON","CLAIM_CUSTOMER_COUPON_FAIL","CLAIM_CUSTOMER_COUPON_SUCCESS","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LOAD_DELIVERY_COUNTRIES","LOAD_DELIVERY_COUNTRIES_FAIL","LOAD_DELIVERY_COUNTRIES_SUCCESS","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","FORGOT_PASSWORD_EMAIL_REQUEST","FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS","FORGOT_PASSWORD_EMAIL_REQUEST_FAIL","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","LOAD_NOTIFICATION_PREFERENCES","LOAD_NOTIFICATION_PREFERENCES_FAIL","LOAD_NOTIFICATION_PREFERENCES_SUCCESS","UPDATE_NOTIFICATION_PREFERENCES","UPDATE_NOTIFICATION_PREFERENCES_FAIL","UPDATE_NOTIFICATION_PREFERENCES_SUCCESS","RESET_NOTIFICATION_PREFERENCES","CLEAR_NOTIFICATION_PREFERENCES","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LOAD_ORDER_DETAILS","LOAD_ORDER_DETAILS_FAIL","LOAD_ORDER_DETAILS_SUCCESS","CLEAR_ORDER_DETAILS","CANCEL_ORDER","CANCEL_ORDER_FAIL","CANCEL_ORDER_SUCCESS","RESET_CANCEL_ORDER_PROCESS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","CancelOrderFail","CancelOrderSuccess","ResetCancelOrderProcess","CREATE_ORDER_RETURN_REQUEST","CREATE_ORDER_RETURN_REQUEST_FAIL","CREATE_ORDER_RETURN_REQUEST_SUCCESS","LOAD_ORDER_RETURN_REQUEST","LOAD_ORDER_RETURN_REQUEST_FAIL","LOAD_ORDER_RETURN_REQUEST_SUCCESS","CANCEL_ORDER_RETURN_REQUEST","CANCEL_ORDER_RETURN_REQUEST_FAIL","CANCEL_ORDER_RETURN_REQUEST_SUCCESS","LOAD_ORDER_RETURN_REQUEST_LIST","LOAD_ORDER_RETURN_REQUEST_LIST_FAIL","LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","CLEAR_ORDER_RETURN_REQUEST","CLEAR_ORDER_RETURN_REQUEST_LIST","RESET_CANCEL_RETURN_PROCESS","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","LOAD_USER_PAYMENT_METHODS","LOAD_USER_PAYMENT_METHODS_FAIL","LOAD_USER_PAYMENT_METHODS_SUCCESS","SET_DEFAULT_USER_PAYMENT_METHOD","SET_DEFAULT_USER_PAYMENT_METHOD_FAIL","SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS","DELETE_USER_PAYMENT_METHOD","DELETE_USER_PAYMENT_METHOD_FAIL","DELETE_USER_PAYMENT_METHOD_SUCCESS","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LOAD_PRODUCT_INTERESTS","LOAD_PRODUCT_INTERESTS_FAIL","LOAD_PRODUCT_INTERESTS_SUCCESS","REMOVE_PRODUCT_INTEREST","REMOVE_PRODUCT_INTEREST_SUCCESS","REMOVE_PRODUCT_INTEREST_FAIL","ADD_PRODUCT_INTEREST","ADD_PRODUCT_INTEREST_FAIL","ADD_PRODUCT_INTEREST_SUCCESS","ADD_PRODUCT_INTEREST_RESET","REMOVE_PRODUCT_INTEREST_RESET","CLEAR_PRODUCT_INTERESTS","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","LOAD_REGIONS","LOAD_REGIONS_SUCCESS","LOAD_REGIONS_FAIL","CLEAR_REGIONS","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","LOAD_REPLENISHMENT_ORDER_DETAILS","LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS","LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL","ClEAR_REPLENISHMENT_ORDER_DETAILS","CANCEL_REPLENISHMENT_ORDER","CANCEL_REPLENISHMENT_ORDER_SUCCESS","CANCEL_REPLENISHMENT_ORDER_FAIL","CLEAR_CANCEL_REPLENISHMENT_ORDER","LoadReplenishmentOrderDetails","LoadReplenishmentOrderDetailsSuccess","LoadReplenishmentOrderDetailsFail","ClearReplenishmentOrderDetails","CancelReplenishmentOrder","CancelReplenishmentOrderSuccess","CancelReplenishmentOrderFail","ClearCancelReplenishmentOrder","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LOAD_TITLES","LOAD_TITLES_FAIL","LOAD_TITLES_SUCCESS","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UPDATE_EMAIL","UPDATE_EMAIL_ERROR","UPDATE_EMAIL_SUCCESS","RESET_EMAIL","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UPDATE_PASSWORD","UPDATE_PASSWORD_FAIL","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_RESET","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LOAD_USER_ADDRESSES","LOAD_USER_ADDRESSES_FAIL","LOAD_USER_ADDRESSES_SUCCESS","ADD_USER_ADDRESS","ADD_USER_ADDRESS_FAIL","ADD_USER_ADDRESS_SUCCESS","UPDATE_USER_ADDRESS","UPDATE_USER_ADDRESS_FAIL","UPDATE_USER_ADDRESS_SUCCESS","DELETE_USER_ADDRESS","DELETE_USER_ADDRESS_FAIL","DELETE_USER_ADDRESS_SUCCESS","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LOAD_USER_CONSENTS","LOAD_USER_CONSENTS_SUCCESS","LOAD_USER_CONSENTS_FAIL","RESET_LOAD_USER_CONSENTS","GIVE_USER_CONSENT","GIVE_USER_CONSENT_FAIL","GIVE_USER_CONSENT_SUCCESS","RESET_GIVE_USER_CONSENT_PROCESS","TRANSFER_ANONYMOUS_CONSENT","WITHDRAW_USER_CONSENT","WITHDRAW_USER_CONSENT_FAIL","WITHDRAW_USER_CONSENT_SUCCESS","RESET_WITHDRAW_USER_CONSENT_PROCESS","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LOAD_ACTIVE_COST_CENTERS","LOAD_ACTIVE_COST_CENTERS_FAIL","LOAD_ACTIVE_COST_CENTERS_SUCCESS","LoadActiveCostCenters","LoadActiveCostCentersFail","LoadActiveCostCentersSuccess","LOAD_USER_DETAILS","LOAD_USER_DETAILS_FAIL","LOAD_USER_DETAILS_SUCCESS","UPDATE_USER_DETAILS","UPDATE_USER_DETAILS_FAIL","UPDATE_USER_DETAILS_SUCCESS","RESET_USER_DETAILS","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","CLEAR_USER_MISCS_DATA","ClearUserMiscsData","LOAD_USER_ORDERS","LOAD_USER_ORDERS_FAIL","LOAD_USER_ORDERS_SUCCESS","CLEAR_USER_ORDERS","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","REGISTER_USER","REGISTER_USER_FAIL","REGISTER_USER_SUCCESS","RESET_REGISTER_USER_PROCESS","REGISTER_GUEST","REGISTER_GUEST_FAIL","REGISTER_GUEST_SUCCESS","REMOVE_USER","REMOVE_USER_FAIL","REMOVE_USER_SUCCESS","REMOVE_USER_RESET","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LOAD_USER_REPLENISHMENT_ORDERS","LOAD_USER_REPLENISHMENT_ORDERS_FAIL","LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS","CLEAR_USER_REPLENISHMENT_ORDERS","LoadUserReplenishmentOrders","LoadUserReplenishmentOrdersFail","LoadUserReplenishmentOrdersSuccess","ClearUserReplenishmentOrders","withdrawOn","notifier","checkoutDeliveryConnector","checkoutCostCenterConnector","checkoutConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addDeliveryAddress$","CheckoutActions.ADD_DELIVERY_ADDRESS","titleCode","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SET_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.ResetLoadPaymentTypesProcess","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","setDeliveryMode$","CheckoutActions.SET_DELIVERY_MODE","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CREATE_PAYMENT_DETAILS","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SET_PAYMENT_DETAILS","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CartActions.RemoveCart","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LOAD_CHECKOUT_DETAILS","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CartActions.MERGE_CART_SUCCESS","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE","concatMap","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","setCostCenter$","CheckoutActions.SET_COST_CENTER","_data","CheckoutActions.SetCostCenterSuccess","CheckoutActions.ClearCheckoutDeliveryAddress","CheckoutActions.SetCostCenterFail","paymentTypeConnector","loadPaymentTypes$","CheckoutActions.LOAD_PAYMENT_TYPES","CheckoutActions.LoadPaymentTypesSuccess","CheckoutActions.LoadPaymentTypesFail","setPaymentType$","CheckoutActions.SET_PAYMENT_TYPE","CartActions.LoadCartSuccess","CheckoutActions.SetPaymentTypeSuccess","CheckoutActions.SetPaymentTypeFail","checkoutReplOrderConnector","scheduleReplenishmentOrder$","CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER","CheckoutActions.ScheduleReplenishmentOrderSuccess","CheckoutActions.ScheduleReplenishmentOrderFail","CheckoutEffects","AddressVerificationEffect","CardTypesEffects","PaymentTypesEffects","ReplenishmentOrderEffects","results","initialState$1","CheckoutActions.VERIFY_ADDRESS_SUCCESS","CheckoutActions.VERIFY_ADDRESS_FAIL","CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS","initialState$2","CheckoutActions.LOAD_CARD_TYPES_SUCCESS","cardTypesEntities","CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA","po","costCenter","deliveryMode","supported","selected","orderDetails","initialState$3","CheckoutActions.SET_PAYMENT_TYPE_SUCCESS","CheckoutActions.SET_COST_CENTER_SUCCESS","CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","supportedModes","modes","mode","CheckoutActions.SET_DELIVERY_MODE_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS","CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL","CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DATA","CheckoutActions.CLEAR_CHECKOUT_STEP","CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES","CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS","deliveryAddress","paymentInfo","initialState$4","CheckoutActions.SET_ORDER_TYPE","initialState$5","CheckoutActions.LOAD_PAYMENT_TYPES_SUCCESS","paymentTypesEntities","steps","fromCheckout.reducer","fromCardTypes.reducer","addressVerification","fromAddressVerification.reducer","fromPaymentTypes.reducer","orderType","fromOrderTypes.reducer","CheckoutModule","CheckoutStoreModule","CheckoutEventModule","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$2","getCheckoutSteps","ɵ5","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getPoNumer","ɵ10","getCostCenter","ɵ11","getAddressVerificationResultsState","ɵ0$c","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","entites","getAllCardTypes","ɵ1$8","getSelectedOrderTypeSelector","getOrderTypesState","getSelectedOrderType","getPaymentTypesState","getPaymentTypesEntites","getAllPaymentTypes","getSelectedPaymentType","CheckoutCostCenterService","checkoutStore","activeCartId","CheckoutActions.SetCostCenter","CheckoutSelectors.getCostCenter","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadingState","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","userId_1","cartId_1","actionAllowed","occUserId","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","CheckoutService","CheckoutActions.PlaceOrder","CheckoutActions.ScheduleReplenishmentOrder","getPlaceOrderLoading","getPlaceOrderSuccess","getPlaceOrderError","clearPlaceOrderState","CheckoutActions.ClearPlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","getOrderDetails","CheckoutSelectors.getCheckoutOrderDetails","setOrderType","CheckoutActions.SetOrderType","getCurrentOrderType","CheckoutSelectors.getSelectedOrderType","PaymentTypeService","CheckoutSelectors.getAllPaymentTypes","CheckoutActions.LoadPaymentTypes","CheckoutActions.SetPaymentType","CheckoutSelectors.getSelectedPaymentType","isAccountPayment","ACCOUNT_PAYMENT","getPoNumber","CheckoutSelectors.getPoNumer","OccCheckoutReplenishmentOrderAdapter","CARTS_ENDPOINT","OccCheckoutAdapter","subEndpoint","orderEndpoint","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","fields","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","categoryCode","CATALOG_PAGE","catalogCode","DeferLoadingStrategy","JSP_INCLUDE_CMS_COMPONENT_TYPE","CMS_FLEX_COMPONENT_TYPE","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","pageId","title","properties","contentSlots","contentSlot","slots","slot","position","components","_h","comp","flexType","e_5","modifiedtime","modifiedTime","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","getPagesRequestParams","getPagesEndpoint","CmsPageAdapter","CmsComponentAdapter","LegacyOccCmsComponentAdapter","idList","OccCostCenterNormalizer","normalizeBoolean","property","OccCostCenterSerializer","activeFlag","COST_CENTER_NORMALIZER","COST_CENTERS_NORMALIZER","COST_CENTER_SERIALIZER","OccCostCenterListNormalizer","costCenters","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","featureConfig","FeatureConfigService","isLevel","isEnabled","FeaturesConfig","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","Directive","selector","TemplateRef","ViewContainerRef","Input","FeatureDirective","FeaturesConfigModule","defaultLevel","ConfigurationService","ambientDefaultConfig","ambientConfig","unifiedConfig$","feedUnifiedConfig","configChunks$","defaultConfigChunks$","zip","skip","configChunks","defaultConfigChunks","processConfig","emitUnifiedConfig","newConfig","complete","ConfigModule","_configurationService","withConfig","withConfigFactory","defaultOccCostCentersConfig","getActiveCostCenters","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","normalizeFacetValues","normalizeUselessFacets","facets","facet","totalResults","visible","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","max","mergeFields","parsedFields","parseFields","stringifyFields","optimizeFields","startIndex","subFields","extractFields","getObjectPart","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","models_1","models_1_1","splitFields","urlPart","scopedData","mergedUrls","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","ProductScope","defaultOccProductConfig","default","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","BASE_SITE_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","loadBaseSites","baseSiteList","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteAdapter","AnonymousConsentNormalizer","anonymousConsentsService","OccReturnRequestNormalizer","returnEntries","OccUserInterestsNormalizer","ANONYMOUS_CONSENT_NORMALIZER","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","loadAnonymousConsents","head","observe","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","OccUserAddressAdapter","addressList","addresses","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","headers$1","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","REPLENISHMENT_ORDER_HISTORY_NORMALIZER","OccUserReplenishmentOrderAdapter","replenishmentOrderCode","loadReplenishmentDetailsHistory","cancelReplenishmentOrder","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","registerGuest","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","UserReplenishmentOrderConnector","UserReplenishmentOrderAdapter","OccAddressListNormalizer","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","OccUserCostCenterAdapter","loadActiveList","getCostCentersEndpoint","UserAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","UserCostCenterAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","modifiers","jsSyntax","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","stores","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","loadConfig","externalConfig","transfer","getConfigChunks","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","OccConfigLoaderModule","OCC_BASE_URL_META_TAG_NAME","OCC_BASE_URL_META_TAG_PLACEHOLDER","MEDIA_BASE_URL_META_TAG_NAME","MEDIA_BASE_URL_META_TAG_PLACEHOLDER","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","OrderApprovalDecisionValue","Period","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","AsmOccModule","CmsOccModule","CartOccModule","CheckoutOccModule","ProductOccModule","SiteContextOccModule","UserOccModule","CostCenterOccModule","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","clonedRequest","handleRequest","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","getUserState","billingCountries","getBillingCountriesState","ɵ0$g","getBillingCountriesEntites","ɵ1$a","getAllBillingCountries","ɵ2$6","getConsignmentTrackingState","tracking","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","ɵ3$5","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getOrderState","order","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","orderReturnList","getOrderReturnRequestListState","ɵ4$3","getOrderReturnRequestList","ɵ5$1","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getInterestsState","getInterestsLoading","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getReplenishmentOrderState","replenishmentOrder","getReplenishmentOrderDetailsValue","getReplenishmentOrderDetailsLoading","getReplenishmentOrderDetailsSuccess","getReplenishmentOrderDetailsError","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getCostCentersState","getCostCenters","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getReplenishmentOrdersState","replenishmentOrders","getReplenishmentOrders","getReplenishmentOrdersLoading","getReplenishmentOrdersError","getReplenishmentOrdersSuccess","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","checkConsentVersions$","AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS","currentConsents","currentConsentVersions","templateVersion","newConsentVersions","detectUpdatedVersion","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","loadAnonymousConsentTemplates$","AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES","currentConsentTemplates","newConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","transferAnonymousConsentsToUser$","UserActions.REGISTER_USER_SUCCESS","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","currentVersions","newVersions","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","getBaseSites","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","contextValues","routingParams","setContextParamsFromRoute","subscribeChanges","subscribeRouting","replaceState","NavigationStart","NavigationError","NavigationCancel","initializeContext","langService","currService","siteContextRoutesHandler","contextServiceProviders","siteContextParamsProviders","UrlSerializer","siteConnector","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","loadBaseSites$","SiteContextActions.LOAD_BASE_SITES","SiteContextActions.LoadBaseSitesSuccess","SiteContextActions.LoadBaseSitesFail","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","persist$","SiteContextActions.SET_ACTIVE_CURRENCY","NEVER","activateCurrency$","bufferCount","SiteContextActions.CurrencyChange","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","SiteContextActions.SET_ACTIVE_LANGUAGE","activateLanguage$","SiteContextActions.LanguageChange","LanguagesEffects","CurrenciesEffects","BaseSiteEffects","initialState$6","SiteContextActions.LOAD_BASE_SITE_SUCCESS","SiteContextActions.SET_ACTIVE_BASE_SITE","SiteContextActions.LOAD_BASE_SITES_SUCCESS","siteEntities","initialState$7","SiteContextActions.LOAD_CURRENCIES_SUCCESS","currEntities","currency","initialState$8","SiteContextActions.LOAD_LANGUAGES_SUCCESS","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextModule","SiteContextStoreModule","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED","toggleConsentStatus","initialState$b","AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT","AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT","AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS","fromAnonymousConsents.reducer","combineReducers","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","metaReducers","AnonymousConsentsStatePersistenceService","anonymousConsentsStatePersistenceFactory","anonymousConsentsStatePersistenceService","AnonymousConsentsModule","AnonymousConsentsStoreModule","TokenTarget","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","AsmAuthStorageService","_tokenTarget$","User","getTokenTarget","setTokenTarget","tokenTarget","getEmulatedUserToken","emulatedUserToken","setEmulatedUserToken","switchTokenTargetToCSAgent","CSAgent","switchTokenTargetToUser","clearEmulatedUserToken","ASM_UI_UPDATE","AsmUiUpdate","ASM_FEATURE","CUSTOMER_SEARCH_DATA","CUSTOMER_SEARCH","CUSTOMER_SEARCH_FAIL","CUSTOMER_SEARCH_SUCCESS","CUSTOMER_SEARCH_RESET","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LOGOUT_CUSTOMER_SUPPORT_AGENT","LogoutCustomerSupportAgent","CsAgentAuthService","userService","authorizeCustomerSupportAgent","customerId_1","startCustomerEmulationSession","isCustomerSupportAgentLoggedIn","isCustomerEmulated","getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","emulatedToken","emulated","AsmActions.LogoutCustomerSupportAgent","AsmAuthHttpHeaderService","csAgentAuthService","isCSAgentTokenRequest","isCSAgentRequest","req","isRequestWithCSAgentToken","csAgentLoggedIn","HttpResponseStatus","HttpErrorHandler","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$c","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE","fromGlobalMessage.reducer","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageConfig","GlobalMessageModule","GlobalMessageStoreModule","GlobalMessageEffect","AsmAuthService","_super_1","canUserLogin","tokTarget","warnAboutLoggedCSAgent","AsmConnector","asmAdapter","asmConnector","customerSearch$","AsmActions.CUSTOMER_SEARCH","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerEffects","collapsed","initialState$d","AsmActions.ASM_UI_UPDATE","customerSearchResult","asmUi","fromAsmUiReducer.reducer","clearCustomerSupportAgentAsmState","AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT","getAsmState","getAsmUi","ɵ0$z","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$r","getCustomerSearchResultsLoading","ɵ2$j","AsmStatePersistenceService","AsmSelectors.getAsmUi","AsmActions.AsmUiUpdate","asmStatePersistenceFactory","asmStatePersistenceService","metaReducers$1","AsmModule","AsmStoreModule","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","getAsmUiState","CartEntryConnector","cartEntryConnector","addEntry$","CartActions.CART_ADD_ENTRY","cartModification","CartActions.CartAddEntrySuccess","CartActions.CartAddEntryFail","removeEntry$","CartActions.CART_REMOVE_ENTRY","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CART_UPDATE_ENTRY","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CART_REMOVE_VOUCHER","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","CartConnector","cartConnector","loadCart$","CartActions.LOAD_CART","groupBy","group$","CartActions.LoadCartFail","err","createCart$","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","CartActions.MERGE_CART","currentCart","refresh$","CartActions.CART_ADD_VOUCHER_SUCCESS","refreshWithoutProcesses$","CartActions.CART_ADD_ENTRY_SUCCESS","CartActions.CART_REMOVE_ENTRY_SUCCESS","CartActions.CART_UPDATE_ENTRY_SUCCESS","CartActions.CART_REMOVE_VOUCHER_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.ADD_EMAIL_TO_CART","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DELETE_CART","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","saveCartConnector","createWishList$","CartActions.CREATE_WISH_LIST","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LOAD_WISH_LIST","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","MultiCartStatePersistenceService","siteContextParamsService","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","cartStatePersistenceFactory","cartStatePersistenceService","uninitializeActiveCartMetaReducerFactory","CartPersistenceModule","CartEventBuilder","registerAddEntry","registerRemoveEntry","registerUpdateEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartActions.CART_ADD_ENTRY_FAIL","CartAddEntryFailEvent","CartRemoveEntrySuccessEvent","CartUpdateEntrySuccessEvent","eventStream$","getAction","actionType","_CartEventBuilder","CMS_FEATURE","NAVIGATION_DETAIL_ENTITY","COMPONENT_ENTITY","LOAD_CMS_COMPONENT","LOAD_CMS_COMPONENT_FAIL","LOAD_CMS_COMPONENT_SUCCESS","CMS_GET_COMPONENT_FROM_PAGE","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LOAD_CMS_NAVIGATION_ITEMS","LOAD_CMS_NAVIGATION_ITEMS_FAIL","LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LOAD_CMS_PAGE_DATA","LOAD_CMS_PAGE_DATA_FAIL","LOAD_CMS_PAGE_DATA_SUCCESS","CMS_SET_PAGE_SUCCESS_INDEX","CMS_SET_PAGE_FAIL_INDEX","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$B","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$d","getPageStateIndex","ɵ4$7","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","nextContext","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","CartEffects","CartEntryEffects","WishListEffects","MultiCartEffects","CartModule","MultiCartStoreModule","CartEventModule","CartVoucherService","addVoucher","combineUserAndCartId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","CartConfigService","isSelectiveCartEnabled","selectiveCart","CartConfig","SelectiveCartService","cartConfigService","cartId$","PREVIOUS_USER_ID_INITIAL_VALUE","selectiveCart$","getLoaded","loadAttempted","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","defaultCmsModuleConfig","pages","cmsComponents","DefaultRoutePageMetaResolver","resolveBreadcrumbs","pageMetaConfig","breadcrumbConfig","breadcrumb","link","translateBreadcrumbLabel","i18nKey","RoutingPageMetaResolver","routesWithExtras$","parent","resolver","getResolver","getUrlPart","routesWithExtras","includeCurrentRoute","trimCurrentRoute","routeWithExtras","resolveRouteBreadcrumb","breadcrumbArrays","flat","getPageMetaConfig","breadcrumbResolver","cxPageMeta","ContentPageMetaResolver","routingPageMetaResolver","homeBreadcrumb$","breadcrumbs$","defer","breadcrumbs","bufferDebounceTime","time","scheduler","bufferedValues","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","cmsComponentAdapter","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","CmsActions.LOAD_CMS_COMPONENT","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","NavigationEntryItemEffects","loadNavigationItems$","CmsActions.LOAD_CMS_NAVIGATION_ITEMS","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.LOAD_CMS_PAGE_DATA","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","PageEffects","componentExistsReducer","CmsActions.LOAD_CMS_COMPONENT_FAIL","CmsActions.CMS_GET_COMPONENT_FROM_PAGE","CmsActions.LOAD_CMS_COMPONENT_SUCCESS","initialState$e","pageContextReducer","CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","newItem","compItems","initialState$g","CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS","initialState$h","CmsActions.LOAD_CMS_PAGE_DATA_FAIL","CmsActions.CMS_SET_PAGE_FAIL_INDEX","CmsActions.CMS_SET_PAGE_SUCCESS_INDEX","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","metaReducers$2","CmsModule","uniteLatest","subNo","trigger","subscriber","asapScheduler","schedule","audit","CmsStoreModule","CmsPageTitleModule","PageMetaService","resolvers$","resolverMethods","heading","robots","getMeta","getMetaResolver","metaResolver","resolvers","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","configInitializerFactory","configInitializer","locationInitializedFactory","ConfigInitializerModule","LOCATION_INITIALIZED","configValidatorFactory","validators","ConfigValidatorModule","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","pure","ChangeDetectorRef","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","I18nConfig","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","i18nextProviders","ɵ0$E","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","String","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","_chunks","MockDatePipe","CostCenterModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PERSONALIZATION_ID_KEY","OccPersonalizationIdInterceptor","requestHeader","personalizationId","receivedId","PersonalizationConfig","PERSONALIZATION_TIME_KEY","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","ProcessModule","ProcessStoreModule","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","EntityScopedLoaderActions","LOAD_PRODUCT_REFERENCES","LOAD_PRODUCT_REFERENCES_FAIL","LOAD_PRODUCT_REFERENCES_SUCCESS","CLEAN_PRODUCT_REFERENCES","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LOAD_PRODUCT_REVIEWS","LOAD_PRODUCT_REVIEWS_FAIL","LOAD_PRODUCT_REVIEWS_SUCCESS","POST_PRODUCT_REVIEW","POST_PRODUCT_REVIEW_FAIL","POST_PRODUCT_REVIEW_SUCCESS","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SEARCH_PRODUCTS","SEARCH_PRODUCTS_FAIL","SEARCH_PRODUCTS_SUCCESS","GET_PRODUCT_SUGGESTIONS","GET_PRODUCT_SUGGESTIONS_SUCCESS","GET_PRODUCT_SUGGESTIONS_FAIL","CLEAR_PRODUCT_SEARCH_RESULT","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","PRODUCT_FEATURE","PRODUCT_DETAIL_ENTITY","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LOAD_PRODUCT_FAIL","LOAD_PRODUCT_SUCCESS","LoadProduct","LoadProductFail","LoadProductSuccess","productReferencesConnector","loadProductReferences$","ProductActions.LOAD_PRODUCT_REFERENCES","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","productReviewsConnector","loadProductReviews$","ProductActions.LOAD_PRODUCT_REVIEWS","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","ProductActions.POST_PRODUCT_REVIEW","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductActions.POST_PRODUCT_REVIEW_SUCCESS","productSearchConnector","searchProducts$","ProductActions.SEARCH_PRODUCTS","queryText","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GET_PRODUCT_SUGGESTIONS","suggestions","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","ProductActions.LOAD_PRODUCT","merge","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","ProductsSearchEffects","ProductReviewsEffects","ProductReferencesEffects","initialState$i","ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS","productReference","ProductActions.CLEAN_PRODUCT_REFERENCES","initialState$j","ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS","auxResults","initialState$k","ProductActions.SEARCH_PRODUCTS_SUCCESS","ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS","ProductActions.CLEAR_PRODUCT_SEARCH_RESULT","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","reviews","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","getProductsState","getProductReferencesState","ɵ0$F","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","getSelectedProductReviewsFactory","reviewData","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$t","ProductReferenceService","loadProductReferences","ProductActions.LoadProductReferences","getProductReferences","ProductSelectors.getSelectedProductReferencesFactory","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","ProductActions.LOAD_PRODUCT_SUCCESS","ProductActions.LOAD_PRODUCT_FAIL","loadStart$","getMaxAgeTrigger","now","timestamp$","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","_j","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","productStoreConfigFactory","metaReducers$3","pageTitleResolvers","ProductModule","ProductStoreModule","CmsTicketInterceptor","cmsTicketId","SmartEditModule","UserConsentConnector","UserCostCenterConnector","getActiveList","CustomerCouponConnector","UserInterestsConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","UserPaymentConnector","UserConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserCostCenterService","loadActiveCostCenters","UserActions.LoadActiveCostCenters","UsersSelectors.getCostCentersState","process","getCostCenterAddresses","cc","unit","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","replenishmentOrderCode_1","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","UserReplenishmentOrderService","loadReplenishmentOrderDetails","UserActions.LoadReplenishmentOrderDetails","getReplenishmentOrderDetails","UsersSelectors.getReplenishmentOrderDetailsValue","UsersSelectors.getReplenishmentOrderDetailsLoading","UsersSelectors.getReplenishmentOrderDetailsSuccess","UsersSelectors.getReplenishmentOrderDetailsError","clearReplenishmentOrderDetails","UserActions.ClearReplenishmentOrderDetails","UserActions.CancelReplenishmentOrder","getCancelReplenishmentOrderLoading","getCancelReplenishmentOrderSuccess","getCancelReplenishmentOrderError","clearCancelReplenishmentOrderProcessState","UserActions.ClearCancelReplenishmentOrder","getReplenishmentOrderHistoryList","UsersSelectors.getReplenishmentOrdersState","replenishmentOrderListState","loadReplenishmentOrderList","getReplenishmentOrderHistoryListLoading","UsersSelectors.getReplenishmentOrdersLoading","getReplenishmentOrderHistoryListError","UsersSelectors.getReplenishmentOrdersError","getReplenishmentOrderHistoryListSuccess","UsersSelectors.getReplenishmentOrdersSuccess","UserActions.LoadUserReplenishmentOrders","clearReplenishmentOrderList","UserActions.ClearUserReplenishmentOrders","initialState$l","UserActions.LOAD_BILLING_COUNTRIES_SUCCESS","countryEntities","UserActions.CLEAR_USER_MISCS_DATA","initialState$m","UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS","UserActions.CLEAR_CONSIGNMENT_TRACKING","coupons","initialState$n","fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS","fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$o","UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS","initialState$p","UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL","UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS","UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS","initialState$q","UserActions.LOAD_ORDER_DETAILS_SUCCESS","returnRequests","initialState$r","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","initialState$s","UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_FAIL","initialState$t","UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS","UserActions.LOAD_PRODUCT_INTERESTS_FAIL","initialState$u","UserActions.LOAD_REGIONS_SUCCESS","initialState$v","UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS","UserActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS","UserActions.RESET_PASSWORD_SUCCESS","initialState$x","UserActions.LOAD_TITLES_SUCCESS","titleEntities","initialState$y","UserActions.LOAD_USER_ADDRESSES_FAIL","UserActions.LOAD_USER_ADDRESSES_SUCCESS","initialState$z","UserActions.LOAD_USER_CONSENTS_SUCCESS","UserActions.GIVE_USER_CONSENT_SUCCESS","updatedConsentTemplate_1","initialState$A","UserActions.LOAD_ACTIVE_COST_CENTERS_FAIL","UserActions.LOAD_ACTIVE_COST_CENTERS_SUCCESS","initialState$B","UserActions.LOAD_USER_DETAILS_SUCCESS","UserActions.UPDATE_USER_DETAILS_SUCCESS","updatedDetails","initialState$C","UserActions.LOAD_USER_ORDERS_SUCCESS","UserActions.LOAD_USER_ORDERS_FAIL","initialState$D","UserActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS","cancelledReplenishmentOrder_1","userReplenishmentOrders","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromUserReplenishmentOrdersReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","fromCostCenterReducer.reducer","fromReplenishmentOrderDetailsReducer.reducer","clearUserState","loadBillingCountries$","UserActions.LOAD_BILLING_COUNTRIES","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","clearMiscsData$","UserActions.ClearUserMiscsData","userOrderConnector","loadConsignmentTracking$","UserActions.LOAD_CONSIGNMENT_TRACKING","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","loadDeliveryCountries$","UserActions.LOAD_DELIVERY_COUNTRIES","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","userAccountConnector","requestForgotPasswordEmail$","UserActions.FORGOT_PASSWORD_EMAIL_REQUEST","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","connector","loadPreferences$","UserActions.LOAD_NOTIFICATION_PREFERENCES","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UPDATE_NOTIFICATION_PREFERENCES","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","orderConnector","loadOrderDetails$","UserActions.LOAD_ORDER_DETAILS","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CANCEL_ORDER","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","createReturnRequest$","UserActions.CREATE_ORDER_RETURN_REQUEST","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LOAD_ORDER_RETURN_REQUEST","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CANCEL_ORDER_RETURN_REQUEST","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LOAD_USER_PAYMENT_METHODS","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SET_DEFAULT_USER_PAYMENT_METHOD","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DELETE_USER_PAYMENT_METHOD","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","userInterestsConnector","loadProductInteres$","UserActions.LOAD_PRODUCT_INTERESTS","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.REMOVE_PRODUCT_INTEREST","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.ADD_PRODUCT_INTEREST","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","loadRegions$","UserActions.LOAD_REGIONS","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","UserActions.CLEAR_REGIONS","replenishmentOrderConnector","loadReplenishmentOrderDetails$","UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS","UserActions.LoadReplenishmentOrderDetailsSuccess","UserActions.LoadReplenishmentOrderDetailsFail","cancelReplenishmentOrder$","UserActions.CANCEL_REPLENISHMENT_ORDER","UserActions.CancelReplenishmentOrderSuccess","UserActions.CancelReplenishmentOrderFail","resetPassword$","UserActions.RESET_PASSWORD","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","loadTitles$","UserActions.LOAD_TITLES","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","updateEmail$","UserActions.UPDATE_EMAIL","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","updatePassword$","UserActions.UPDATE_PASSWORD","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LOAD_USER_ADDRESSES","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.ADD_USER_ADDRESS","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UPDATE_USER_ADDRESS","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DELETE_USER_ADDRESS","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","UserActions.ADD_USER_ADDRESS_SUCCESS","showGlobalMessageOnUpdateSuccess$","UserActions.UPDATE_USER_ADDRESS_SUCCESS","showGlobalMessageOnDeleteSuccess$","UserActions.DELETE_USER_ADDRESS_SUCCESS","userConsentConnector","resetConsents$","getConsents$","UserActions.LOAD_USER_CONSENTS","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GIVE_USER_CONSENT","UserActions.TRANSFER_ANONYMOUS_CONSENT","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WITHDRAW_USER_CONSENT","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","userCostCenterConnector","loadActiveCostCenters$","UserActions.LOAD_ACTIVE_COST_CENTERS","UserActions.LoadActiveCostCentersSuccess","UserActions.LoadActiveCostCentersFail","userConnector","loadUserDetails$","UserActions.LOAD_USER_DETAILS","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UPDATE_USER_DETAILS","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","loadUserOrders$","UserActions.LOAD_USER_ORDERS","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","registerUser$","UserActions.REGISTER_USER","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.REGISTER_GUEST","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.REMOVE_USER","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","loadUserReplenishmentOrders$","UserActions.LOAD_USER_REPLENISHMENT_ORDERS","UserActions.LoadUserReplenishmentOrdersSuccess","UserActions.LoadUserReplenishmentOrdersFail","ClearMiscsDataEffect","DeliveryCountriesEffects","RegionsEffects","TitlesEffects","UserDetailsEffects","UserPaymentMethodsEffects","UserRegisterEffects","UserOrdersEffect","OrderDetailsEffect","BillingCountriesEffect","ResetPasswordEffects","ForgotPasswordEffects","UpdateEmailEffects","UpdatePasswordEffects","UserConsentsEffect","ConsignmentTrackingEffects","CustomerCouponEffects","NotificationPreferenceEffects","ProductInterestsEffect","OrderReturnRequestEffect","UserCostCenterEffects","ReplenishmentOrderDetailsEffect","UserReplenishmentOrdersEffect","metaReducers$4","RouterModule","UserModule","UserStoreModule","ExternalJsFileLoader","src","errorCallback","createElement","parseParams","async","addEventListener","appendChild","keysArray","encodeURI","Meta","DAILY","WEEKLY","MONTHLY"],"mappings":"opCAgBIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,aAGZO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,YA0BnEK,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HlB,EAAvHmB,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOhB,OAAOqB,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAAS1B,EAAIe,EAAWW,MAAIJ,GAAKH,EAAI,EAAInB,EAAEsB,GAAKH,EAAI,EAAInB,EAAEgB,EAAQC,EAAKK,GAAKtB,EAAEgB,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKpB,OAAOyB,eAAeX,EAAQC,EAAKK,GAAIA,WAWhDM,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,oBAItDO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOnD,OAAUyC,EACvJ,SAASM,EAAKK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOb,OACH,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,OAAIe,EAAG,GAAKf,EAAS,SAAOC,EAAID,EAAU,SAAMC,EAAEgB,KAAKjB,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAEgB,KAAKjB,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEb,QACzB2B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEhB,MAAO2B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIW,MAAOf,EAAEG,KAAKY,MAAO,SACxC,QACI,KAAMjB,EAAIE,EAAEG,MAAML,EAAIA,EAAE7B,OAAS,GAAK6B,EAAEA,EAAE7B,OAAS,KAAkB,IAAV2C,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIY,KAAKJ,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIW,MAChBf,EAAEG,KAAKY,MAAO,SAEtBH,EAAKjB,EAAKmB,KAAKrC,EAASuB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,UAAeD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE3B,MAAO2B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BL,CAAK,CAACwB,EAAGC,MAyBhC7D,OAAOW,gBAYpBwD,EAASC,GACrB,IAAIC,EAAsB,mBAAXX,QAAyBA,OAAOC,SAAUW,EAAID,GAAKD,EAAEC,GAAI7C,EAAI,EAC5E,GAAI8C,EAAG,OAAOA,EAAEN,KAAKI,GACrB,GAAIA,GAAyB,iBAAbA,EAAEjD,OAAqB,MAAO,CAC1CkB,KAAM,WAEF,OADI+B,GAAK5C,GAAK4C,EAAEjD,SAAQiD,OAAI,GACrB,CAAEjC,MAAOiC,GAAKA,EAAE5C,KAAMiB,MAAO2B,KAG5C,MAAM,IAAIL,UAAUM,EAAI,0BAA4B,4CAGxCE,EAAOH,EAAGR,GACtB,IAAIU,EAAsB,mBAAXZ,QAAyBU,EAAEV,OAAOC,UACjD,IAAKW,EAAG,OAAOF,EACf,IAAmBhD,EAAYkB,EAA3Bd,EAAI8C,EAAEN,KAAKI,GAAOI,EAAK,GAC3B,IACI,WAAc,IAANZ,GAAgBA,KAAM,MAAQxC,EAAII,EAAEa,QAAQI,MAAM+B,EAAGN,KAAK9C,EAAEe,OAExE,MAAOsC,GAASnC,EAAI,CAAEmC,MAAOA,WAEzB,IACQrD,IAAMA,EAAEqB,OAAS6B,EAAI9C,EAAU,SAAI8C,EAAEN,KAAKxC,WAExC,GAAIc,EAAG,MAAMA,EAAEmC,OAE7B,OAAOD,WAGKE,IACZ,IAAK,IAAIF,EAAK,GAAIhD,EAAI,EAAGA,EAAIN,UAAUC,OAAQK,IAC3CgD,EAAKA,EAAGG,OAAOJ,EAAOrD,UAAUM,KACpC,OAAOgD,EA8CcxE,OAAOW,gBCnMhBiE,EAASC,GACvB,OAAOA,GAAwB,iBAATA,IAAsB1E,MAAM2E,QAAQD,YAG5CE,EAAUjE,kBAAA,IAAAA,IAAAA,EAAA,QAAa,IAAAkE,EAAA,GAAAC,EAAA,EAAAA,EAAA/D,UAAAC,OAAA8D,IAAAD,EAAAC,EAAA,GAAA/D,UAAA+D,GACrC,IAAKD,EAAQ7D,OACX,OAAOL,EAET,IAAMoE,EAASF,EAAQG,SAAW,GAElC,GAAIP,EAAS9D,IAAW8D,EAASM,GAC/B,IAAK,IAAMnE,KAAOmE,EACZA,EAAOnE,aAAgBqE,KACzBpF,OAAOqF,OAAOvE,IAAMwE,EAAA,IAAKvE,GAAMmE,EAAOnE,GAAIuE,IACjCV,EAASM,EAAOnE,KACpBD,EAAOC,IACVf,OAAOqF,OAAOvE,IAAMyE,EAAA,IAAKxE,GAAM,GAAEwE,IAEnCR,EAAUjE,EAAOC,GAAMmE,EAAOnE,KAE9Bf,OAAOqF,OAAOvE,IAAM0E,EAAA,IAAKzE,GAAMmE,EAAOnE,GAAIyE,IAKhD,OAAOT,EAASpC,WAAA,EAAA+B,EAAA,CAAC5D,GAAWkE,QCnBjBS,EAAS,IAAIC,EAAAA,eAAe,gBAAiB,CACxDC,WAAY,OACZC,QAAS,WAAM,OAAAb,EAAU,GAAIc,EAAAA,OAAOC,GAAgBD,EAAAA,OAAOE,OAMhDD,EAAgB,IAAIJ,EAAAA,eAAe,uBAAwB,CACtEC,WAAY,OACZC,QAAS,WAAA,IAAAN,EACP,OAAAP,EAASpC,WAAA,EAAA+B,EAAA,CAAC,IAAwD,QAAtDY,EAAMO,EAAAA,OAAOG,EAAoBC,EAAAA,YAAYC,iBAAS,IAAAZ,EAAAA,EAAI,QAM7DS,EAAa,IAAIL,EAAAA,eAAe,oBAAqB,CAChEC,WAAY,OACZC,QAAS,WAAA,IAAAN,EACP,OAAAP,EAASpC,WAAA,EAAA+B,EAAA,CAAC,IAAiD,QAA/CY,EAAMO,EAAAA,OAAOM,EAAaF,EAAAA,YAAYC,iBAAS,IAAAZ,EAAAA,EAAI,QAOtDa,EAAc,IAAIT,EAAAA,eAAyB,sBAO3CM,EAAqB,IAAIN,EAAAA,eACpC,sCC/BcU,EACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,GAAA,GAEO,CACLC,QAASD,EAAgBN,EAAqBG,EAC9CK,SAAUH,EACVI,OAAO,YAYKC,EACdC,EACAC,EACAN,GAEA,YAFA,IAAAA,IAAAA,GAAA,GAEO,CACLC,QAASD,EAAgBN,EAAqBG,EAC9CU,WAAYF,EACZF,OAAO,EACPG,KAAMA,YASME,EAAqBT,GACnC,YADmC,IAAAA,IAAAA,EAAA,IAC5B,CACLE,QAASP,EACTQ,SAAUH,EACVI,OAAO,YAUKM,EACdJ,EACAC,GAEA,MAAO,CACLL,QAASP,EACTa,WAAYF,EACZF,OAAO,EACPG,KAAMA,OCnEGI,EAA0D,CACrEC,kBAAmB,CACjBC,gBAAiB,uBACjBC,8BAA8B,EAC9BC,iBAAkB,GAClBC,sBAAuB,CACrBC,uBAAuB,EACvBC,aAAc,MCTPC,EAAsB,UACtBC,EAAwB,YACxBC,EAAoB,QAEpBC,EAAsB,uBCOjC,SAAAC,EAA8BC,GAG5BrH,KAAKqH,SAAWA,SAGlB7H,OAAAyB,eAAImG,EAAAlH,UAAA,eAAY,KAAhB,WACE,MAAyB,oBAAXoH,OAAyBA,YAASC,mCAGlD/H,OAAAyB,eAAImG,EAAAlH,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKwH,aAAexH,KAAKwH,aAAaC,oBAAiBF,mCAGhE/H,OAAAyB,eAAImG,EAAAlH,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKwH,aAAexH,KAAKwH,aAAaE,kBAAeH,mCAS9D/H,OAAAyB,eAAImG,EAAAlH,UAAA,UAAO,KAAX,WACE,OAAKF,KAAKwH,aAGDG,EAAAA,UAAU3H,KAAKwH,aAAc,UAAUI,KAC5CC,EAAAA,aAAa,KACbC,EAAAA,UAAU,CAAExH,OAAQN,KAAKwH,eACzBO,EAAAA,wBALKC,EAAAA,GAAG,mLAhCfC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,6EAKCgD,EAAAA,OAAMD,KAAA,CAACE,EAAAA,qBCQtB,oIAJCH,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,uBCNb,SAAAqD,EAAsBzC,GAAA7F,KAAA6F,OAAAA,SAKtByC,EAAApI,UAAAqI,eAAA,SAAeC,WACPC,EAAkC,QAAvB1D,EAAc,QAAdD,EAAG9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAE4D,eAAO,IAAA3D,OAAA,EAAAA,EAAE4D,OAEpC3G,EAASyG,GAAeA,EAAYD,GAI1C,OAHKC,QAA0BlB,IAAXvF,GAClBhC,KAAK4I,KAAK,+CAA+CJ,EAAS,MAE7DxG,GAGDsG,EAAApI,UAAA0I,KAAA,eAAK,IAAAV,EAAA,GAAAzD,EAAA,EAAAA,EAAA/D,UAAAC,OAAA8D,IAAAyD,EAAAzD,GAAA/D,UAAA+D,GACPoE,EAAAA,aACFC,QAAQF,KAAIzG,MAAZ2G,QAAO5E,EAASgE,KAOpBI,EAAApI,UAAA6I,gBAAA,qBACE,OAAyC,QAAzC/D,EAA2B,QAA3BD,EAAkB,QAAlBD,EAAO9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAE4D,eAAO,IAAA3D,OAAA,EAAAA,EAAEiE,oBAAY,IAAAhE,EAAAA,EAAA,UAiB3CsD,EAAApI,UAAA+I,aAAA,SAAaC,GAIX,OAHKlJ,KAAKmJ,kBACRnJ,KAAKoJ,uBAEApJ,KAAKmJ,iBAAiBD,IAUrBZ,EAAApI,UAAAkJ,qBAAA,yBAAAC,EAAArJ,KACRA,KAAKmJ,iBAAmB,kBAEZX,EAAWC,GAGH,QAAlBzD,EAAAyD,MAAAA,OAAW,EAAXA,EAAaa,aAAK,IAAAtE,GAAAA,EAAEuE,SAAQ,SAACL,GACvBL,EAAAA,aAAeQ,EAAKF,iBAAiBD,IACvCJ,QAAQ7E,MACN,kBAAkBiF,EAAI,mDAAmDG,EAAKF,iBAAiBD,GAAK,UAAUV,GAGlHa,EAAKF,iBAAiBD,GAAQV,UATlC,IAAuC,IAAAgB,EAAA7F,EAAAnE,OAAOiK,QACxB,QAD+B1E,EACxC,QADwCD,EACnD9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAE4D,eAAO,IAAA3D,OAAA,EAAAA,EAAE4D,SACvBe,EAAAF,EAAA3H,QAAA6H,EAAAzH,KAAAyH,EAAAF,EAAA3H,OAAA,CAFU,IAAA8H,EAAA5F,EAAA2F,EAAA/H,MAAA,KAAUgI,EAAA,GAAaA,EAAA,2OAlErC1B,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,oDAHEyE,KCDrB,IAAMC,EAAU,SAACC,GAA6B,OAAAA,EAAQC,WAAW,MAE3DC,EAAe,SAACF,GAA4B,OAAAA,EAAQG,MAAM,iBCIrE,SAAAC,EAAoBC,GAAAnK,KAAAmK,OAAAA,SAEpBD,EAAAhK,UAAAkK,mBAAA,SAAmBC,GACjB,IAAMC,EAAUtK,KAAKmK,OAAOI,SAASF,GACrC,OAAOrK,KAAKwK,+BAA+BF,EAAQG,OAG7CP,EAAAhK,UAAAsK,+BAAA,SAA+BE,GACrC,IAAMC,EAAWD,EAAKC,SAASC,KAAI,SAAC/G,GAAM,OAAAA,EAAEqF,QACtC2B,EAAmBH,EAAKI,SAASC,EAAAA,gBACnC/K,KAAKwK,+BAA+BE,EAAKI,SAASC,EAAAA,iBAClD,GACJ,OAAOJ,EAASxG,OAAO0G,8IAd1B5C,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,oDAHjB6F,EAAAA,2BCUP,SAAAC,EACYC,EACAC,GADAnL,KAAAkL,qBAAAA,EACAlL,KAAAmL,UAAAA,EAJHnL,KAAAoL,SAAW,CAAC,YAUrBH,EAAA/K,UAAAmL,IAAA,SAAI7C,GACF,IAAMC,EAAczI,KAAKkL,qBAAqB3C,eAAeC,GAC7D,OAAOC,GAAe9I,MAAM2E,QAAQmE,EAAYa,OAC5C,IAAMb,EAAYa,MAAM,QACxB/B,GAWN0D,EAAA/K,UAAAoL,UAAA,SAAUC,WACH5L,MAAM2E,QAAQiH,KACjBA,EAAW,CAACA,IAGd,IAAMvJ,EAAmB,OACzB,IAAsB,IAAAwJ,EAAA7H,EAAA4H,GAAQE,EAAAD,EAAA3J,QAAA4J,EAAAxJ,KAAAwJ,EAAAD,EAAA3J,OAAE,CAA3B,IAAM6J,EAAOD,EAAA9J,MAChB,GAAK3B,KAAK2L,eAAeD,GAGlB,CAEL,IAAME,EAAgB5L,KAAK6L,gBAAgBH,GAE3C,GAAsB,OAAlBE,EACF,OAAO5L,KAAKoL,SAGdpJ,EAAO0B,KAAIvB,MAAXH,EAAMkC,EAAS0H,SATf5J,EAAO0B,KAAKgI,qGAiBhB,OAJI1L,KAAK8L,qBAAqBP,IAC5BvJ,EAAO+J,QAAQ,KAGV/J,GAGDiJ,EAAA/K,UAAAyL,eAAA,SAAeD,GACrB,OAAOA,GAAWM,QAAQN,EAAQO,UAG5BhB,EAAA/K,UAAA4L,qBAAA,SAAqBP,GAC3B,OAAOvL,KAAK2L,eAAeJ,EAAS,KAG9BN,EAAA/K,UAAA2L,gBAAA,SAAgBH,GAGtB,GAFA1L,KAAKkM,uBAAuBR,IAEvBA,EAAQO,QACX,OAAO,KAGT,IAAMxD,EAAczI,KAAKkL,qBAAqB3C,eAC5CmD,EAAQO,SAIV,IAAKxD,IAAgBA,EAAYa,MAC/B,OAAO,KAIT,IAAMJ,EAAOlJ,KAAKmM,2BAA2B1D,EAAaiD,EAAQU,QAGlE,OAAKlD,EAIUlJ,KAAKqM,oBAClBnD,EACAwC,EAAQU,OACR3D,EAAY6D,eANL,MAYHrB,EAAA/K,UAAAgM,uBAAA,SAAuBR,GAC7BA,EAAQU,OAASV,EAAQU,QAAU,IAG7BnB,EAAA/K,UAAAmM,oBAAA,SACNnD,EACAkD,EACAE,GAHM,IAAAjD,EAAArJ,KAKN,OAAOA,KAAKmL,UAAUf,mBAAmBlB,GAAM0B,KAAI,SAACd,GAClD,GAAID,EAAQC,GAAU,CACpB,IAAMyC,EAAYvC,EAAaF,GACzB0C,EAAkBnD,EAAKoD,mBAC3BF,EACAD,GAEF,OAAOF,EAAOI,GAEhB,OAAO1C,MAIHmB,EAAA/K,UAAAiM,2BAAA,SACN1D,EACA2D,GAFM,IAAA/C,EAAArJ,KAIA0M,EAAYjE,EAAYa,MAAMqD,MAAK,SAACzD,GACxC,OAAAG,EAAKuD,UAAU1D,GAAM2D,OAAM,SAACN,GAC1B,IAAMC,EAAkBnD,EAAKoD,mBAC3BF,EACA9D,EAAY6D,eAGd,YAAmC/E,IAA5B6E,EAAOI,SAIlB,OAAIE,MAAAA,EACK,KAEFA,GAGDzB,EAAA/K,UAAA0M,UAAA,SAAU1D,GAChB,OAAOlJ,KAAKmL,UACTf,mBAAmBlB,GACnB4D,OAAOjD,GACPe,IAAIZ,IAGDiB,EAAA/K,UAAAuM,mBAAA,SAAmBF,EAAmBD,GAC5C,OAAIA,GACKA,EAAcC,IAEhBA,oJAvJVtE,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,oDALjBmD,SAGA4B,KCDF,IAAM6C,EAAY,cACZC,EAAmB,qBACnBC,EAAc,gBACdC,EAAiB,mBACjBC,EAA2B,mCAExCC,EAEE,SACSC,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOP,GAUlBQ,GAEE,SAAmBF,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAON,GAIlBQ,GAAA,WACWxN,KAAAsN,KAAOL,GAGlBQ,GAAA,WACWzN,KAAAsN,KAAOJ,GAGlBQ,GAEE,SAAmBL,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOH,uOC/BLQ,GAAkB,SCIlBC,GAGTC,EAAAA,sBAA6BF,OAKS,SAACG,GAAU,OAAAA,EAAM3D,QAH9C4D,GAGTC,EAAAA,eAAeJ,GAAqBK,OAItC,SAACC,GACC,OAACA,EAAaJ,OAASI,EAAaJ,MAAMK,eAAkB,IAHnDC,GAAkDJ,EAAAA,eAC7DD,GAAcM,OAUd,SAACH,GACC,OAACA,EAAaJ,OAASI,EAAaJ,MAAMQ,SAAY,CAAEC,GAAI,KANnDC,GAGTR,EAAAA,eACFD,GAAcU,OAUd,SAACP,GACC,OAAAA,EAAaQ,WAAaR,EAAaQ,UAAUJ,SANxCK,GAGTX,EAAAA,eACFD,GAAca,OAOd,SAACN,GAAY,QAAEA,GAFJO,GAA+Cb,EAAAA,eAC1DW,GAAkBG,yMCjClB,SAAsB3E,GAAtB,IAAAd,EAAArJ,KAAsBA,KAAAmK,OAAAA,EAKbnK,KAAA+O,QAEL/O,KAAKmK,OAAO6E,OAAOpH,KACrBkF,EAAAA,QAAO,SAACmC,GAAU,OAAAA,aAAiBC,EAAAA,iBAEnCpH,EAAAA,eAAUP,GACVqD,EAAAA,KAAI,WAKF,IAJA,IAAIuE,EAAQ9F,EAAKc,OAAOiF,YAAYC,SAAS5E,KACvC9B,EAAmC,CAACwG,GAGlCA,EAAQA,EAAMG,YACpB3G,EAAOjF,KAAKyL,GAGd,OAAOxG,KAET4G,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,+IAxB1CxH,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAPsB6F,EAAAA,4BCmB9C,SAAA0E,EACYvF,EACAwF,GAFZ,IAAAtG,EAAArJ,KACYA,KAAAmK,OAAAA,EACAnK,KAAA2P,uBAAAA,EATO3P,KAAA4P,QAEd5P,KAAK2P,uBAAuBZ,QAAQnH,KACvCgD,EAAAA,KAAI,SAACjC,GAAW,OAAAU,EAAKwG,aAAalH,MAClC4G,EAAAA,YAAY,CAAEE,UAAU,EAAMD,WAAY,YAY5CE,EAAAxP,UAAA0M,UAAA,WACE,OAAO5M,KAAK4P,SAGJF,EAAAxP,UAAA2P,aAAA,SACRlH,GAEA,OAAOnJ,OAAOqF,OAAM1C,MAAb3C,OAAM0E,EAAA,CAAQ,IAAOyE,EAAOiC,KAAI,SAACuE,GAAU,OAAAA,EAAM/C,0KAzB3DnE,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAVO6F,EAAAA,cAGxB8E,wBCaP,SAAAC,EACYC,EACAC,EACAC,EACAC,GAHAnQ,KAAAgQ,MAAAA,EACAhQ,KAAAiQ,OAAAA,EACAjQ,KAAAkQ,oBAAAA,EACAlQ,KAAAmQ,qBAAAA,SAOZJ,EAAA7P,UAAA0M,UAAA,iBACE,OAAgC,QAAhC9H,EAAO9E,KAAKmQ,4BAAoB,IAAArL,OAAA,EAAAA,EAAE8H,aAMpCmD,EAAA7P,UAAA6N,eAAA,WACE,OAAO/N,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOC,MAMhCN,EAAA7P,UAAAsO,eAAA,WACE,OAAOxO,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOE,MAMhCP,EAAA7P,UAAAyO,mBAAA,WACE,OAAO3O,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOG,MAQhCR,EAAA7P,UAAAsQ,sBAAA,SAAsBC,GACpBzQ,KAAKgQ,MAAMU,SAAS,IAAIC,GAAqCF,KAM/DV,EAAA7P,UAAA2O,aAAA,WACE,OAAO7O,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOQ,MAShCb,EAAA7P,UAAA2Q,GAAA,SAAGtF,EAAuBuF,EAAgBC,GACxC,IAAM7H,EAAOlJ,KAAKkQ,oBAAoB5E,UAAUC,GAEhD,OAAOvL,KAAKgR,SAAS9H,EAAM4H,EAAOC,IAOpChB,EAAA7P,UAAA+Q,QAAA,SAAQ5G,GACNrK,KAAKgQ,MAAMU,SAAS,IAAIQ,GAAkC7G,KAM5D0F,EAAA7P,UAAAiR,KAAA,WAC0BnR,KAAKiQ,OAAO5I,SAAS+J,SAASC,SACpDrR,KAAKiQ,OAAOzI,aAAa8J,SAASC,QAGlCvR,KAAKgQ,MAAMU,SAAS,IAAIc,IAG1BxR,KAAK6Q,GAAG,CAAC,OAOXd,EAAA7P,UAAAuR,QAAA,WACEzR,KAAKgQ,MAAMU,SAAS,IAAIgB,KAShB3B,EAAA7P,UAAA8Q,SAAA,SACR9H,EACA4H,EACAC,GAEA/Q,KAAKgQ,MAAMU,SACT,IAAIiB,EAA6B,CAC/BzI,KAAIA,EACJ4H,MAAKA,EACLC,OAAMA,8LAjHb9I,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZGyM,EAAAA,aAERxK,SACA6D,SAMAyE,wBCAP,SAAAmC,IAEQ7R,KAAA8R,aAAmC,IAAIC,EAAAA,qBAC7CxK,UAQFsK,EAAA3R,UAAA8R,eAAA,WACE,OAAOhS,KAAK8R,cAQdD,EAAA3R,UAAA+R,eAAA,SAAeC,GACZlS,KAAK8R,aAAyCjQ,KAAKqQ,4HAzBvDjK,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,oECiBZ,SAAAgN,EACYzJ,EACAyB,EACAiI,GAFApS,KAAA0I,QAAAA,EACA1I,KAAAmK,OAAAA,EACAnK,KAAAoS,2BAAAA,EAGJpS,KAAAqS,YAAc,IAAIC,WAS1BH,EAAAjS,UAAAqS,SAAA,WAAA,IAAAlJ,EAAArJ,KACEA,KAAKoS,2BACFJ,iBACApK,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAACP,QACU3K,IAAhB2K,EACF7I,EAAKX,QAAQmI,GAAG,KAEhBxH,EAAKX,QAAQuI,QAAQiB,GAEvB7I,EAAK+I,2BAA2BH,oBAAe1K,GAE/C8B,EAAKqJ,6BAA0BnL,MAOrC4K,EAAAjS,UAAAyS,gBAAA,WACQ,IAAA7N,EAAwB9E,KAAK4S,uBAA3BvI,EAAGvF,EAAAuF,IAAEwI,EAAY/N,EAAA+N,aACzB7S,KAAK0S,wBAA0B,CAAErI,IAAGA,EAAEwI,aAAYA,GAClD7S,KAAKoS,2BAA2BH,eAAe5H,IAMjD8H,EAAAjS,UAAA4S,mBAAA,WACQ,IAAAhO,EAAoC9E,KAAK4S,uBAAvCvI,EAAGvF,EAAAuF,IAAE0I,EAAUjO,EAAAiO,WAAEF,EAAY/N,EAAA+N,aAErC7S,KAAKqS,YAAYW,IAAI3I,GAGhBrK,KAAKqS,YAAYY,IAAIF,MAIrB/S,KAAK0S,yBACN1S,KAAK0S,wBAAwBG,aAAeA,EAAe,KAE3D7S,KAAKoS,2BAA2BH,eAAec,GAE/C/S,KAAK0S,6BAA0BnL,IAK7B4K,EAAAjS,UAAA0S,qBAAA,WAKN,IAAMG,EAAa/S,KAAKmK,OAAOE,IACzB6I,EAAalT,KAAKmK,OAAOyI,uBACzBvI,EAAMrK,KAAKmK,OAAOgJ,aAAaD,EAAWE,UAChD,MAAO,CACLP,aAAcK,EAAW3E,GACzBlE,IAAGA,EACH0I,WAAUA,gLA1Ff9K,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAPL4K,UAFA/E,EAAAA,cAGA6G,yBCIT,SAAAwB,IAAA,IAAAhK,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAoBYqJ,EAAAkK,QAAiC,IAAIxB,EAAAA,gBAC7C,aAlBoCjS,EAAAuT,EAAAC,GAqB5BD,EAAAnT,UAAAsT,OAAA,SAAOjT,EAAaoB,GAC5B,OAAI0R,EAAmBI,2BAA2BpC,SAAS9Q,GAClDoB,EAEF+R,KAAKC,UAAUhS,IAGd0R,EAAAnT,UAAA0T,OAAA,SAAOrT,EAAaoB,GAC5B,GAAI0R,EAAmBI,2BAA2BpC,SAAS9Q,GACzD,OAAOoB,EAEP,IACE,OAAO+R,KAAKG,MAAMlS,GAClB,MAAAmD,GACA,OAAOnD,IAYb0R,EAAAnT,UAAA4T,SAAA,WACE,OAAO9T,KAAKuT,SAQdF,EAAAnT,UAAA6T,SAAA,SAASC,GACNhU,KAAKuT,QAAuC1R,KAAKmS,IAUpDX,EAAAnT,UAAA+T,QAAA,SAAQ1T,GACN,IAAIyT,EAIJ,OAHAhU,KAAK8T,WACFrB,WAAU,SAACyB,GAAiB,OAACF,EAAQE,KACrCC,cACInU,KAAKwT,OAAOjT,EAAKyT,MAAAA,OAAK,EAALA,EAAQzT,KAQlC8S,EAAAnT,UAAAkU,WAAA,SAAW7T,GACT,IAAM8T,EAAG7U,OAAAqF,OAAA,GAAS7E,KAAKuT,QAAuC5R,cACvD0S,EAAI9T,GACVP,KAAKuT,QAAuC1R,KAAIrC,OAAAqF,OAAA,GAC5CwP,KASPhB,EAAAnT,UAAAoU,QAAA,SAAQ/T,EAAagU,SACfhU,GACDP,KAAKuT,QAAuC1R,KAAIrC,OAAAqF,OAAArF,OAAAqF,OAAA,GAC3C7E,KAAKuT,QAAuC5R,SAAKoD,EAAA,IACpDxE,GAAMP,KAAK4T,OAAOrT,EAAKgU,GAAKxP,SAjGGyP,EAAAA,cAIZnB,GAAAI,2BAA6B,CACrD,gBACA,eACA,gBACA,aACA,yBACA,WACA,sBACA,qBACA,gBACA,4HAjBHxL,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,kBCFd,uIAJC8C,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,yBCKf,SAAAwP,0DAAwC3U,EAAA2U,EAAAnB,MAAAoB,8HAJvCzM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,UCLH0P,MC0BZ,uIAJC1M,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,ODxBH0P,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KAInBA,GAAA,0BAAA,GAAA,4BAIAA,GAAAA,GAAA,aAAA,GAAA,eAIAA,GAAAA,GAAA,kBAAA,GAAA,sCEDA,SAAAC,EACYC,EACAC,GADA9U,KAAA6U,WAAAA,EACA7U,KAAA8U,UAAAA,SAQLF,EAAA1U,UAAA6U,YAAA,iBACL,OAA+C,QAA/CjQ,EAAO9E,KAAK6U,WAAWG,eAAeC,iBAAS,IAAAnQ,EAAAA,EAAI,IAQ9C8P,EAAA1U,UAAAgV,gBAAA,iBACL,OAAmD,QAAnDpQ,EAAO9E,KAAK6U,WAAWG,eAAeG,qBAAa,IAAArQ,EAAAA,EAAI,IAMlD8P,EAAA1U,UAAAkV,WAAA,iBACL,OACwC,QADxCtQ,EACE9E,KAAK6U,WAAWG,eAAeK,eAAO,IAAAvQ,EAAAA,EACtC9E,KAAK8U,UAAUQ,QAAQC,IAAIF,QAAU,wBAOlCT,EAAA1U,UAAAsV,iBAAA,iBACCC,EAA4D,QAA/C3Q,EAAG9E,KAAK6U,WAAWG,eAAeS,qBAAa,IAAA3Q,EAAAA,EAAI,GACtE,OAAO9E,KAAK0V,eAAeD,IAMtBb,EAAA1U,UAAAyV,YAAA,iBACCC,EAAkD,QAA1C9Q,EAAG9E,KAAK6U,WAAWG,eAAeY,gBAAQ,IAAA9Q,EAAAA,EAAI,GAC5D,OAAO9E,KAAK0V,eAAeE,IAMtBhB,EAAA1U,UAAA2V,kBAAA,iBACCC,EAA8D,QAAhDhR,EAAG9E,KAAK6U,WAAWG,eAAec,sBAAc,IAAAhR,EAAAA,EAAI,GACxE,OAAO9E,KAAK0V,eAAeI,IAMtBlB,EAAA1U,UAAA6V,aAAA,iBACCC,EAAoD,QAA3ClR,EAAG9E,KAAK6U,WAAWG,eAAegB,iBAAS,IAAAlR,EAAAA,EAAI,GAC9D,OAAO9E,KAAK0V,eAAeM,IAMtBpB,EAAA1U,UAAA+V,oBAAA,iBACCC,EAC2C,QAD3BpR,EACpB9E,KAAK6U,WAAWG,eAAekB,wBAAgB,IAAApR,EAAAA,EAAI,GACrD,OAAO9E,KAAK0V,eAAeQ,IAMtBtB,EAAA1U,UAAAiW,kBAAA,mBACL,OAAqD,QAArDpR,EAAqC,QAArCD,EAAO9E,KAAK6U,WAAWG,sBAAc,IAAAlQ,OAAA,EAAAA,EAAEsR,sBAAc,IAAArR,EAAAA,EAAI,IAGjD6P,EAAA1U,UAAAwV,eAAA,SAAeW,GACvB,IAAIhM,EAAMgM,EAIV,OAHKhM,EAAIN,WAAW,OAClBM,EAAM,IAAMA,GAEP,GAAGrK,KAAKoV,aAAe/K,GAOzBuK,EAAA1U,UAAAoW,aAAA,mBACCC,EAA6D,QAAjDxR,EAAiC,QAAjCD,EAAG9E,KAAK6U,WAAWG,sBAAc,IAAAlQ,OAAA,EAAAA,EAAEsR,sBAAc,IAAArR,OAAA,EAAAA,EAC/DwR,aACJ,GAAIA,EAAc,CAChB,IAAMC,EAAQD,EAAaE,MAAM,KACjC,OAAID,EAAMnF,SAAS,QACVsD,EAAAA,UAAU+B,kBACRF,EAAMnF,SAAS,SACjBsD,EAAAA,UAAUgC,aAEVhC,EAAAA,UAAUiC,0BAGrB,OAAOjC,EAAAA,UAAUiC,kLA9GpB3O,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATL0R,UADApC,wBCaP,SAAAqC,EACYC,EACAC,EACqBC,EACrBhH,GAHAjQ,KAAA+W,aAAAA,EACA/W,KAAAgX,kBAAAA,EACqBhX,KAAAiX,WAAAA,EACrBjX,KAAAiQ,OAAAA,EAEVjQ,KAAKkX,oBAGGJ,EAAA5W,UAAAgX,WAAA,uBACFC,EAAQC,EAAAA,iBAAiBpX,KAAKiX,YACpCjX,KAAK+W,aAAaM,UAAS7X,OAAAqF,OAAA,CACzB4Q,cAAezV,KAAKgX,kBAAkBxB,mBACtCI,SAAU5V,KAAKgX,kBAAkBrB,cACjC2B,SAAUtX,KAAKgX,kBAAkBjC,cACjCwC,kBAAmBvX,KAAKgX,kBAAkB9B,kBAC1CsC,mBAAoBxX,KAAKgX,kBAAkBnB,oBAC3CG,UAAWhW,KAAKgX,kBAAkBjB,eAClCG,iBAAkBlW,KAAKgX,kBAAkBf,sBACzCwB,OACoD,QAD9C1S,EACsC,QADtCD,EACJ9E,KAAKgX,kBAAkBb,2BAAmB,IAAArR,OAAA,EAAAA,EAAE2S,cAAM,IAAA1S,EAAAA,EAClD/E,KAAKgX,kBAAkB5B,aACzBsC,aACyD,QAAvDC,EAA0C,QAA1C3S,EAAAhF,KAAKgX,kBAAkBb,2BAAmB,IAAAnR,OAAA,EAAAA,EAAE0S,mBAAW,IAAAC,EAAAA,GAAKR,GACxDnX,KAAKiQ,OAAOzI,aAAa8J,SAASC,OAClC,IACHvR,KAAKgX,kBAAkBb,uBAY9BW,EAAA5W,UAAA0X,0BAAA,SACEC,EACAC,GAEA,OAAO9X,KAAK+W,aAAagB,4BAA4BF,EAAQC,IAM/DhB,EAAA5W,UAAA8X,aAAA,WACEhY,KAAK+W,aAAaiB,gBAMpBlB,EAAA5W,UAAA+X,gBAAA,WAAA,IAAA5O,EAAArJ,KACE,OAAO,IAAIuB,SAAQ,SAACC,GAClB6H,EAAK0N,aACFmB,uBACAC,OAAM,WAEL9O,EAAK0N,aAAaqB,YAEnBC,SAAQ,WACP7W,WAQRsV,EAAA5W,UAAAoY,OAAA,WACEtY,KAAK+W,aAAaqB,UAQpBtB,EAAA5W,UAAAqY,WAAA,WACE,OAAOvY,KAAK+W,aAAawB,cAM3BzB,EAAA5W,UAAAsY,cAAA,WACE,OAAOxY,KAAK+W,aAAayB,iBAM3B1B,EAAA5W,UAAAuY,SAAA,WACE,OAAOzY,KAAK+W,aAAa0B,SAAS,CAEhCC,yBAAyB,gNAtG9BzQ,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATLwT,EAAAA,oBAEA/D,UAasCpV,OAAMa,WAAA,CAAA,CAAAiN,KAAhDnF,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,sBAdHxR,KCDF,IAAMyR,GAAQ,eACRC,GAAS,gBAEtBC,GAAA,WACW/Y,KAAAsN,KAAOuL,IAGlBG,GAAA,WACWhZ,KAAAsN,KAAOwL,2FCIlB,SAAAG,IAIUjZ,KAAAkZ,QAA8B,IAAIC,EAAAA,cAAsB,UAOzDF,EAAA/Y,UAAAkZ,UAAA,SAAUvB,GACd7X,KAAKkZ,QAAkCrX,KAAKgW,IAaxCoB,EAAA/Y,UAAAmZ,UAAA,WACL,OAAOrZ,KAAKkZ,SAUPD,EAAA/Y,UAAAoZ,iBAAA,SAAiBC,GACtB,OAAOvZ,KAAKqZ,YACTzR,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAAClE,GAAO,OAAAgL,EAAGhL,OAUnB0K,EAAA/Y,UAAAsZ,WAAA,SAAWC,GAChB,YADgB,IAAAA,IAAAA,GAAA,GACTzZ,KAAKqZ,YAAYzR,KACtB4K,EAAAA,KAAK,GACL5H,EAAAA,KAAI,SAACiN,GACH,GAAI4B,GAAY5B,IAAW5Q,EACzB,MAAM,IAAIyS,MACR,kEAGJ,OAAO7B,OAQNoB,EAAA/Y,UAAAyZ,YAAA,WACL3Z,KAAKoZ,UAAUnS,IAMVgS,EAAA/Y,UAAA0Z,WAAA,WACL,OAAO5Z,KAAKqZ,YAAYzR,KACtBgD,EAAAA,KACE,SAACiN,GACC,OAAAA,IAAW5Q,GAAyB4Q,IAAW7Q,+HA7ExDiB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,eCRF0U,GCUAC,GAMAC,GCfAC,GAmFAC,GCvEAC,iBCCV,SAAAC,EACYnK,EACAoK,EACAC,EACAC,EACAC,EACAC,GALAxa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,EACApa,KAAAqa,uBAAAA,EACAra,KAAAsa,mBAAAA,EACAta,KAAAua,oBAAAA,EACAva,KAAAwa,eAAAA,SAMNL,EAAAja,UAAAua,sBAAA,6GAEa,6BAAA,CAAA,EAAMza,KAAKqa,uBAAuB5B,0BAA3CzW,EAAS+C,EAAAnC,OACToR,EAAQhU,KAAKsa,mBAAmBrG,QAAQ,gBAE1CjS,GAAUgS,IACZhU,KAAKoa,cAAchB,UAAUpS,GAC7BhH,KAAKgQ,MAAMU,SAAS,IAAIgK,IACxB1a,KAAKua,oBAAoBhI,wEAQ/B4H,EAAAja,UAAAya,kBAAA,WAEE,OADA3a,KAAKqa,uBAAuB7B,iBACrB,GAQH2B,EAAAja,UAAA0a,qBAAA,SAAqB/C,EAAgBC,6FAEvC,6BAAA,CAAA,EAAM9X,KAAKqa,uBAAuBzC,0BAChCC,EACAC,kBAFF/S,EAAAnC,OAKA5C,KAAKoa,cAAchB,UAAUpS,GAE7BhH,KAAKgQ,MAAMU,SAAS,IAAIgK,IAExB1a,KAAKua,oBAAoBhI,uEAQ7B4H,EAAAja,UAAA2a,WAAA,WAAA,IAAAxR,EAAArJ,KAEE,OADAA,KAAKoa,cAAcT,cACZ,IAAIpY,SAAQ,SAACC,GAClB6H,EAAKgR,uBAAuBpC,kBAAkBI,SAAQ,WACpDhP,EAAK2G,MAAMU,SAAS,IAAIoK,IACxBtZ,WAQN2Y,EAAAja,UAAA6a,eAAA,WACE,OAAO/a,KAAKsa,mBAAmBxG,WAAWlM,KACxCgD,EAAAA,KAAI,SAACoQ,GAAc,OAAAhP,QAAQgP,MAAAA,OAAS,EAATA,EAAWC,iBACtClT,EAAAA,yBAOJoS,EAAAja,UAAAoY,OAAA,WACEtY,KAAKwa,eAAe3J,GAAG,CAAE5E,QAAS,oOArFrChE,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAjBLyM,EAAAA,aAUAqH,UAFAnC,UADAzD,UADAlB,UAFApC,OJEG8J,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,QAAA,UACAA,GAAA,SAAA,YCQUC,GAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,WAAA,OACAA,GAAA,SAAA,WACAA,GAAA,MAAA,SAGUC,GAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAC5B,gBAAA,UACAA,GAAA,aAAA,QCjBUC,GAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAClB,aAAA,cACAA,GAAA,aAAA,cACAA,GAAA,cAAA,eACAA,GAAA,aAAA,eA+EUC,GAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KACjC,KAAA,OACAA,GAAA,KAAA,OACAA,GAAA,QAAA,WACAA,GAAA,SAAA,YC3EUC,GAAAA,EAAAA,2BAAAA,EAAAA,yBAAwB,KAClC,MAAA,QACAA,GAAA,UAAA,gBEVUgB,GCDAC,GCqCAC,GAMAC,GAuIAC,GC7GAC,GLvDCC,GAA4B,wBEb7BN,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,QAAA,UACAA,GAAA,QAAA,WCHUC,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,MAAA,gBACAA,GAAA,SAAA,mBACAA,GAAA,QAAA,kBACAA,GAAA,SAAA,oBGKUM,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,cAAA,iBF2BUL,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,KAAA,4BACAA,GAAA,MAAA,6BACAA,GAAA,MAAA,kCAGUC,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,IAAA,MACAA,GAAA,KAAA,QAqIUC,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,MAAA,QACAA,GAAA,UAAA,YACAA,GAAA,QAAA,UACAA,GAAA,gBAAA,kBCnHUC,GAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,OAAA,SACAA,GAAA,QAAA,UACAA,GAAA,UAAA,YACAA,GAAA,SAAA,WACAA,GAAA,OAAA,SACAA,GAAA,SAAA,WACAA,GAAA,OAAA,aASUG,IAAAA,GAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,YAAA,cACAA,GAAA,6BAAA,+BEhGK,IAAMC,GAAuB,kBACvBC,GAA2B,+BAQxBC,GAAWvO,EAAciB,GACvC,MAAO,CACLuN,WAAYxO,EACZyO,SAAUxN,YAIEyN,GACd1O,EACAiB,GAEA,MAAO,CACLwN,SAAUxN,EACVuN,WAAYxO,EACZ2O,cAAc,YAIFC,GAAoB5O,GAClC,MAAO,CACLyO,SAAU,KACVD,WAAYxO,EACZ2O,cAAc,GASlB,IAAAE,GAGE,SAAYL,EAAoBvN,GAFhCvO,KAAAsN,KAAOqO,GAGL3b,KAAKoc,KAAOJ,GAAiBF,EAAYvN,IAI7C8N,GAGE,SAAYP,GAFZ9b,KAAAsN,KAAOsO,GAGL5b,KAAKoc,KAAOF,GAAoBJ,ICpDvBQ,GAAqB,gBACrBC,GAAqB,gBACrBC,GAAwB,mBACxBC,GAAsB,0BAgBnBC,GAASZ,GACvB,MAAO,CACLA,WAAYA,EACZa,OAAQ,CACNC,MAAM,aAKIC,GAASf,EAAoB7X,GAC3C,MAAO,CACL6X,WAAYA,EACZa,OAAQ,CACN1Y,MAAOA,IAAgB,aAKb6Y,GAAYhB,GAC1B,MAAO,CACLA,WAAYA,EACZa,OAAQ,CACNI,SAAS,aAKCC,GAAUlB,GACxB,MAAO,CACLA,WAAYA,EACZa,OAAQ,IAGZ,IAAAM,GAGE,SAAYnB,GAFZ9b,KAAAsN,KAAOgP,GAGLtc,KAAKoc,KAAOM,GAASZ,IAIzBoB,GAGE,SAAYpB,EAAoB7X,GAFhCjE,KAAAsN,KAAOiP,GAGLvc,KAAKoc,KAAOS,GAASf,EAAY7X,IAIrCkZ,GAGE,SAAYrB,GAFZ9b,KAAAsN,KAAOkP,GAGLxc,KAAKoc,KAAOU,GAAYhB,IAI5BsB,GAGE,SAAYtB,GAFZ9b,KAAAsN,KAAOmP,GAGLzc,KAAKoc,KAAOY,GAAUlB,ICxEbuB,GAAqB,gBACrBC,GAAqB,qBACrBC,GAAwB,wBACxBC,GAAsB,0BASnBC,GACd3B,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACK6X,GAASZ,IACTD,GAAWC,EAAYvN,aAIdmP,GACd5B,EACAvN,EACAtK,GAEA,OAAAzE,OAAAqF,OAAArF,OAAAqF,OAAA,GACKgY,GAASf,EAAY7X,IACrB4X,GAAWC,EAAYvN,aAIdoP,GACd7B,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiY,GAAYhB,IACZD,GAAWC,EAAYvN,aAIdqP,GACd9B,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACKmY,GAAUlB,IACVD,GAAWC,EAAYvN,IAI9B,IAAAsP,GAGE,SAAY/B,EAAoBvN,GAFhCvO,KAAAsN,KAAO+P,GAGLrd,KAAKoc,KAAOqB,GAAe3B,EAAYvN,IAI3CuP,GAGE,SAAYhC,EAAoBvN,EAAuBtK,GAFvDjE,KAAAsN,KAAOgQ,GAGLtd,KAAKoc,KAAOsB,GAAe5B,EAAYvN,EAAItK,IAI/C8Z,GAGE,SAAYjC,EAAoBvN,EAA8BlB,GAAArN,KAAAqN,QAAAA,EAF9DrN,KAAAsN,KAAOiQ,GAGLvd,KAAKoc,KAAOuB,GAAkB7B,EAAYvN,IAI9CyP,GAGE,SAAYlC,EAAoBvN,GAFhCvO,KAAAsN,KAAOkQ,GAGLxd,KAAKoc,KAAOwB,GAAgB9B,EAAYvN,ICvF/B0P,GAAuC,CAClDC,SAAS,EACTja,OAAO,EACP8Y,SAAS,EACTpb,WAAO4F,YASO4W,GACdrC,EACAsC,GAEA,OAAO,SACLtQ,EACAuQ,GAEA,QAHA,IAAAvQ,IAAAA,EAAAmQ,IAIEI,EAAOjC,MACPiC,EAAOjC,KAAKO,QACZ0B,EAAOjC,KAAKN,aAAeA,EAC3B,CACA,IAAMwC,EAASD,EAAOjC,KAAKO,OAE3B,OAAI2B,EAAO1B,KACTpd,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRoQ,SAAS,EACTvc,MAAOyc,EAAUA,EAAQtQ,EAAMnM,MAAO0c,GAAUvQ,EAAMnM,QAE/C2c,EAAOra,MAChBzE,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRoQ,SAAS,EACTja,OAAO,EACP8Y,SAAS,EACTpb,MAAOyc,EAAUA,EAAQtQ,EAAMnM,MAAO0c,QAAU9W,IAEzC+W,EAAOvB,QAChBvd,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRnM,MAAOyc,EAAUA,EAAQtQ,EAAMnM,MAAO0c,GAAUA,EAAOhR,QACvD6Q,SAAS,EACTja,OAAO,EACP8Y,SAAS,IAIXvd,OAAAqF,OAAArF,OAAAqF,OAAA,GACKoZ,IAAkB,CACrBtc,MAAOyc,EACHA,EAAQH,GAAmBtc,MAAO0c,GAClCJ,GAAmBtc,QAK7B,GAAIyc,EAAS,CACX,IAAMG,EAAWH,EAAQtQ,EAAMnM,MAAO0c,GACtC,GAAIE,IAAazQ,EAAMnM,MACrB,OAAAnC,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYiJ,GAAK,CAAEnM,MAAO4c,IAG9B,OAAOzQ,YCrEK0Q,GAAuB1Q,GACrC,OAAOA,EAAMnM,eAGC8c,GAAyB3Q,GACvC,OAAOA,EAAMoQ,iBAGCQ,GAAuB5Q,GACrC,OAAOA,EAAM7J,eAGC0a,GAAyB7Q,GACvC,OAAOA,EAAMiP,iBCLC6B,GACd9Q,EACAS,GAEA,OAAOT,EAAM+Q,SAAStQ,IAAO0P,YAGfa,GACdhR,EACAS,GAGA,OAAOiQ,GADaI,GAA0B9Q,EAAOS,IChBhD,IAAMwQ,GAAuC,CAAEF,SAAU,aAOhDG,GACdlD,EACAsC,GAEA,OAAO,SACLtQ,EACAuQ,GAEA,IAAIY,OAHJ,IAAAnR,IAAAA,EAAAiR,IAIA,IAAIG,GAAmB,EACvB,GACEb,EAAOjC,MACPiC,EAAOjC,KAAKN,aAAeA,QACFvU,IAAzB8W,EAAOjC,KAAKL,SACZ,CAIA,GAHAkD,EAAM,GAAG9a,OAAOka,EAAOjC,KAAKL,UAGxBsC,EAAOjC,KAAKH,aAAc,CAC5B,GAA6B,OAAzBoC,EAAOjC,KAAKL,SACd,OAAOgD,GAEP,IAAII,GAAU,EACRC,EAAc5f,OAAO6f,KAAKvR,EAAM+Q,UAAUS,QAAO,SAACC,EAAKC,GAM3D,OALIP,EAAI5N,SAASmO,GACfL,GAAU,EAEVI,EAAIC,GAAO1R,EAAM+Q,SAASW,GAErBD,IACN,IAEH,OAAOJ,EAAU,CAAEN,SAAUO,GAAgBtR,EAIjDoR,EACEvf,MAAM2E,QAAQ+Z,EAAOjC,KAAKL,WAAapc,MAAM2E,QAAQ+Z,EAAOhR,cAE9D4R,EAAMzf,OAAO6f,KAAKvR,EAAM+Q,UAK1B,IAFA,IAAMY,EAAqC,GAElCze,EAAI,EAAGA,EAAIie,EAAIte,OAAQK,IAAK,CACnC,IAAMuN,EAAK0Q,EAAIje,GACT0e,EAAYR,iCACTb,GAAM,CAAEhR,QAASgR,EAAOhR,QAAQrM,KACrCqd,EACEsB,EAAWvB,EAAQtQ,EAAM+Q,SAAStQ,GAAKmR,GACzCC,IACFF,EAAclR,GAAMoR,GAIxB,OAAIngB,OAAO6f,KAAKI,GAAe9e,OAAS,EACtCnB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GAAOiJ,EAAM+Q,UAAaY,KAI/B3R,YChEK8R,GACd9D,EACAsC,GAKA,OAAOY,GAAclD,EAAYqC,GAAcrC,EAAYsC,ICXtD,IAAMyB,GAA6B,+BAC7BC,GAA6B,+BAC7BC,GAAgC,oCAY7BC,GACdlE,GAEA,MAAO,CACLA,WAAYA,EACZa,YAAQpV,EACR0Y,mBAAoB,YAIRC,GACdpE,GAEA,MAAO,CACLA,WAAYA,EACZa,YAAQpV,EACR0Y,oBAAqB,YAITE,GACdrE,GAGA,OAAAtc,OAAAqF,OAAArF,OAAAqF,OAAA,GACKub,GAAgBtE,IAAW,CAC9BmE,mBAAoB,OAIxB,IAAAI,GAGE,SAAYvE,GAFZ9b,KAAAsN,KAAOyS,GAGL/f,KAAKoc,KAAO+D,GAAyBrE,IAIzCwE,GAGE,SAAYxE,GAFZ9b,KAAAsN,KAAOuS,GAGL7f,KAAKoc,KAAO4D,GAAuBlE,IAIvCyE,GAGE,SAAYzE,GAFZ9b,KAAAsN,KAAOwS,GAGL9f,KAAKoc,KAAO8D,GAAuBpE,IC7D1B0E,GACX,kCACWC,GAAoC,+BACpCC,GAAoC,wCAWjCC,GACd7E,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACKsb,GAAyBrE,IACzBD,GAAWC,EAAYvN,aAIdqS,GACd9E,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACKmb,GAAuBlE,IACvBD,GAAWC,EAAYvN,aAIdsS,GACd/E,EACAvN,GAEA,OAAA/O,OAAAqF,OAAArF,OAAAqF,OAAA,GACKqb,GAAuBpE,IACvBD,GAAWC,EAAYvN,IAI9B,IAAAuS,GAIE,SAAYhF,EAAoBvN,GAFhCvO,KAAAsN,KAAOkT,GAGLxgB,KAAKoc,KAAOuE,GAA+B7E,EAAYvN,IAI3DwS,GAIE,SAAYjF,EAAoBvN,GAFhCvO,KAAAsN,KAAOmT,GAGLzgB,KAAKoc,KAAOwE,GAA6B9E,EAAYvN,IAIzDyS,GAIE,SAAYlF,EAAoBvN,GAFhCvO,KAAAsN,KAAOoT,GAGL1gB,KAAKoc,KAAOyE,GAA6B/E,EAAYvN,aC1EzC0S,GAAoBnT,GAClC,OAAgC,IAAzBA,EAAMoT,iBAAyBpT,EAAMoQ,iBAG9BiD,GACdrT,GAEA,OAAOA,EAAMoT,eAAiB,ECHzB,IAAME,GAAmD,CAC9DF,eAAgB,YAMFG,GACdvF,EACAsC,GAKA,OAAO,SACLtQ,EAIAuQ,QAJA,IAAAvQ,IAAAA,EAAAtO,OAAAqF,OAAArF,OAAAqF,OAAA,GACKuc,IACAnD,KAIL,IAAMqD,EAAcnD,GAAcrC,EAAYsC,EAA1BD,CAAmCrQ,EAAOuQ,GAC9D,GAAIA,EAAOjC,MAAQiC,EAAOjC,KAAKN,aAAeA,EAAY,CACxD,IAAMmE,EAAqB5B,EAAOjC,KAAK6D,mBAUvC,GATIpX,EAAAA,aAAeiF,EAAMoT,eAAiBjB,EAAqB,GAC7DnX,QAAQ7E,MACN,WAAWoa,EAAO/Q,KAAlB,gOAIA+Q,GAGA4B,EACF,OAAAzgB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKyc,GAAW,CACdJ,eAAgBpT,EAAMoT,eAClBpT,EAAMoT,eAAiBjB,EACvBA,IAED,GAA2B,OAAvBA,EAET,OAAAzgB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKyc,GACAF,IAKT,OAAOE,GC3CX,IAAMC,GAA2B/hB,OAAAqF,OAAArF,OAAAqF,OAAA,GAC5BoZ,IACAmD,aAGWI,GACd1T,EACAS,GAGA,OAAO4S,GADavC,GAA0B9Q,EAAOS,aAIvCkT,GACd3T,EACAS,GAGA,OAAO0S,GADarC,GAA0B9Q,EAAOS,aAIvCmT,GACd5T,EACAS,GAEA,OAAOT,EAAM+Q,SAAStQ,IAAOgT,YC3BfI,GACd7F,EACAsC,GAKA,OAAOY,GAAclD,EAAYuF,GAAuBvF,EAAYsC,aCftDwD,GAAkB9T,EAAuBS,GACvD,OAAOT,EAAM+Q,SAAStQ,SAAOhH,ECA/B,IAAMsa,GAAmB,aAETC,GAAyBzC,EAAcvR,GACrD,OAAOuR,EACJ5I,MAJoB,KAKpB6I,QACC,SAACyC,EAAUC,GAAY,OAACD,EAAWA,EAASC,QAAWza,IACvDuG,YAIUmU,GACd1hB,EACA2hB,EACAvgB,GAEA,IAAKpB,IAAQoB,GAAuC,IAA9BnC,OAAO6f,KAAK1d,GAAOhB,OACvC,MAAO,GAGT,IAAMwhB,EAAQ5hB,EAAIkW,MApBK,KAoBmB2L,aAAY,SAAC7C,EAAKwC,SAC1D,OAAAjd,EAAA,IAAWid,GAAWxC,EAAGza,IACxBnD,GACH,gBAuBApB,EACA2hB,EACAvgB,WAEM0gB,WA2ByB9hB,EAAa2hB,WAC5C,IAAK3hB,IAAQ2hB,EACX,MAAO,GAGT,IAAMG,EAA0B,OAChC,IAA2B,IAAAC,EAAA3e,EAAAue,GAAWK,EAAAD,EAAAzgB,QAAA0gB,EAAAtgB,KAAAsgB,EAAAD,EAAAzgB,OAAE,CAAnC,IAAM2gB,EAAYD,EAAA5gB,MACjB6gB,EAAanR,SAAS9Q,IACxB8hB,EAAc3e,KAAK8e,qGAIvB,OAAOH,EAvCeI,CAAiBliB,EAAK2hB,GAC5C,GAA6B,IAAzBG,EAAc1hB,OAChB,OAAOgB,EAGT,IAAM+gB,EAAane,EAAU,GAAI5C,OACjC,IAAkC,IAAAghB,EAAAhf,EAAA0e,GAAaO,EAAAD,EAAA9gB,QAAA+gB,EAAA3gB,KAAA2gB,EAAAD,EAAA9gB,OAI7C,IAJG,IACGghB,EADsBD,EAAAjhB,MACqB8U,MAAMoL,IAEnDiB,EAAaJ,EACR1hB,EAAI,EAAGA,EAAI6hB,EAAqBliB,OAAQK,IAAK,CACpD,IAAM+hB,EAAeF,EAAqB7hB,GAGtCA,IAAM6hB,EAAqBliB,OAAS,EAClCmiB,GAAcA,EAAWC,WACpBD,EAAWC,GAGpBD,EAAaA,EAAWC,qGAK9B,OAAOL,EAnDAM,CAAiBziB,EAAK2hB,EAAaC,YAG5Bc,GACd5D,EACA6C,EACApU,WAEA,GAAIuR,GAAwB,IAAhBA,EAAK1e,OACf,MAAO,GAGT,IAAIuiB,EAAc,OAClB,IAAyB,IAAAC,EAAAxf,EAAA0b,GAAI+D,EAAAD,EAAAthB,QAAAuhB,EAAAnhB,KAAAmhB,EAAAD,EAAAthB,OAAE,CAA1B,IAAMwhB,EAAUD,EAAAzhB,MAGnBuhB,EAAc3e,EAAU2e,EADVjB,GAAkBoB,EAAYnB,EADzBJ,GAAmBuB,EAAYvV,uGAKpD,OAAOoV,WAkDOI,GACdjE,EACA/R,GAEA,OAAK+R,EAGE7f,OAAO6f,KAAKA,GAAMvS,QAAO,SAACvM,GAAQ,OAAA8e,EAAK9e,KAAS+M,KAF9C,YC3FKiW,GACd1d,EACA0I,aAEA,OAAUA,MAAAA,EAAAA,EAAM,IAAE,cAA4B,QAAfzJ,EAAAe,EAAO2d,gBAAQ,IAAA1e,EAAAA,EAAI,IAAE,iBAChC,QAAlBC,EAAAc,EAAO4d,mBAAW,IAAA1e,EAAAA,EAAI,IACxB,UAAoB,QAAXC,EAAAa,EAAO6d,YAAI,IAAA1e,EAAAA,EAAI,aAUV2e,GACdC,EACA/E,EACAzS,EACAmC,GAEA,IAAMsV,EAAsBjF,GAC1BgF,EACAxX,EAASmX,GAAsBnX,EAAQmC,GAAMA,MAAAA,EAAAA,EA1BrC,OA4BV,IAAKsV,EAAeliB,QAAUkiB,EAAeliB,MAAMsd,IACjD,OAAO4E,EAET,IAAMC,EAAqCtkB,OAAOqF,OAAO,GAAIgf,EAAgB,CAC3EliB,MAAO,CACLoiB,OAAQF,EAAeliB,MAAMsd,IAAIrU,KAC/B,SAACoZ,GAAS,OAAApF,GAA0BC,EAAUmF,GAAMriB,YAQ1D,OAJIyK,IACF0X,EAAIniB,MAAMsiB,WAAaJ,EAAeliB,MAAMsiB,WAC5CH,EAAIniB,MAAMuiB,MAAQL,EAAeliB,MAAMuiB,OAElCJ,6YXvBPhW,EACAS,GAGA,OAAOkQ,GADaG,GAA0B9Q,EAAOS,kCAKrDT,EACAS,GAGA,OAAOmQ,GADaE,GAA0B9Q,EAAOS,oCAKrDT,EACAS,GAGA,OAAOoQ,GADaC,GAA0B9Q,EAAOS,07CW1BrDT,EACA1B,GAEA,OAAOuX,GAA8B7V,EAAM8V,KAAM9V,EAAM+Q,SAAUzS,6DA+BjEwX,EACArV,GAEA,IAAMwV,GAASH,MAAAA,OAAI,EAAJA,EAAMG,SAAU,GACzBI,EAAkB,CACtBlF,IAAK8E,EAAOnZ,KAAI,SAAC2J,GAAS,OAAAA,EAAKhG,OAQjC,OANIqV,EAAKK,aACPE,EAAKF,WAAaL,EAAKK,YAErBL,EAAKM,QACPC,EAAKD,MAAQN,EAAKM,OAEb,CAAEH,OAAMA,EAAEI,KAAIA,6BAIrB/X,EACAgY,GAEA,MAAO,CAAChY,EAAQmX,GAAsBa,IAAeC,cCtE1CC,GAAmC,qBACnCC,GAAqB,0CCGrBC,GACX,wDACWC,GACX,gEACWC,GACX,6DACWC,GACX,8DAEWC,GACX,kDACWC,GACX,6CACWC,GACX,8CACWC,GACX,8CACWC,GACX,kDAEWC,GACX,kEACWC,GACX,2DACWC,GACX,8CAEFC,GAAA,SAAA9R,GAEE,SAAA8R,IAAA,IAAA/b,EACEiK,EAAA9P,KAAAxD,KAAMukB,KAAmBvkB,YAFlBqJ,EAAAiE,KAAOkX,YADiC1kB,EAAAslB,EAAA9R,KAAnD,CAAmD+R,IAOnDC,GAAA,SAAAhS,GAEE,SAAAgS,EAAmBjY,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMukB,KAAmBvkB,YADRqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOmX,YADwC3kB,EAAAwlB,EAAAhS,KAA1D,CAA0DiS,IAM1DC,GAAA,SAAAlS,GAEE,SAAAkS,EAAYnY,GAAZ,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMukB,GAAoBlX,IAAQrN,YAF3BqJ,EAAAiE,KAAOoX,YADqC5kB,EAAA0lB,EAAAlS,KAAvD,CAAuDmS,IAOvDC,GAAA,SAAApS,GAEE,SAAAoS,IAAA,IAAArc,EACEiK,EAAA9P,KAAAxD,KAAMukB,KAAmBvkB,YAFlBqJ,EAAAiE,KAAOqX,YADsC7kB,EAAA4lB,EAAApS,KAAxD,CAAwDqS,IAOxDC,GAEE,WADS5lB,KAAAsN,KAAOsX,IAIlBiB,GAEE,SAAmBC,GAAA9lB,KAAA8lB,aAAAA,EADV9lB,KAAAsN,KAAOuX,IAIlBkB,GAEE,SAAmB1Y,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOwX,IAIlBkB,GAEE,SAAmBF,GAAA9lB,KAAA8lB,aAAAA,EADV9lB,KAAAsN,KAAOyX,IAIlBkB,GAEE,SAAmBH,GAAA9lB,KAAA8lB,aAAAA,EADV9lB,KAAAsN,KAAO0X,IAIlBkB,GAEE,SAAmBC,GAAAnmB,KAAAmmB,UAAAA,EADVnmB,KAAAsN,KAAO2X,IAIlBmB,GAEE,SAAmBC,GAAArmB,KAAAqmB,QAAAA,EADVrmB,KAAAsN,KAAO4X,IAIlBoB,GAEE,WADStmB,KAAAsN,KAAO6X,02BC1FLoB,GAGT1Y,EAAAA,sBACFyW,OCD2C,SAACxW,GAAU,OAAAA,EAAM0Y,WAHjDC,GAGTzY,EAAAA,eAAeuY,GAAwBG,IAE9BC,GAGT3Y,EAAAA,eACFyY,GACAG,IAGWC,GAGT7Y,EAAAA,eACFyY,GACAK,IAGWC,GAGT/Y,EAAAA,eACFyY,GACAO,IAGWC,GAGTjZ,EAAAA,eACFyY,GACAS,IAGWC,GAA8B,SACzCrB,GAEA,OAAO9X,EAAAA,eAAe2Y,IAAmC,SAACH,GACxD,OAAOA,EACHA,EAAU7Z,MAAK,SAACya,GAAa,OAAAA,EAAS7Y,KAAOuX,KAC7C,SC9CKuB,GAGTrZ,EAAAA,eAAeuY,IAA0B,SAACzY,GAAU,OAAAA,EAAMwZ,GAAGjB,cAO/D,SAACvY,GAAU,OAAAA,EAAMwZ,GAAGC,iBALTC,GAGTxZ,EAAAA,eACFuY,GAAwBkB,ICRbC,GAGT1Z,EAAAA,eAAeuY,IAA0B,SAACzY,GAAU,OAAAA,EAAM6Z,YAEjDC,GAAoC,SAC/C9B,GAEA,OAAA9X,EAAAA,eAAe0Z,IAAsB,SAACC,GACpC,OAAAA,EAAShb,MAAK,SAACkb,GAAY,OAAAA,EAAQ/B,eAAiBA,4cCEtD,SAAAgC,EACY9X,EACA+X,GADA/nB,KAAAgQ,MAAAA,EACAhQ,KAAA+nB,YAAAA,SAMZD,EAAA5nB,UAAA8nB,cAAA,WACEhoB,KAAKgQ,MAAMU,SACT,IAAIuX,KAaRH,EAAA5nB,UAAAgoB,aAAA,SAAaC,GAAb,IAAA9e,EAAArJ,KACE,YADW,IAAAmoB,IAAAA,GAAA,GACJC,EAAAA,KACL,WAAM,OAAAD,IACNnoB,KAAKgQ,MAAMpI,KACTwI,EAAAA,OAAOiY,IACPC,EAAAA,eAAetoB,KAAKuoB,2BACpBzb,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAAWC,EAAA,GAAe,OAANA,EAAA,MAC5ByjB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAUA,EAAA,GAClBiH,QAAQwa,IACXnd,EAAK2e,mBAGTlb,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAUA,EAAA,GAAM,OAAAiH,QAAQwa,MAC1C5b,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAUA,EAAA,GAAM,OAAAyhB,MAEjCxmB,KAAKgQ,MAAMpI,KACTwI,EAAAA,OAAOiY,OASbP,EAAA5nB,UAAAuoB,YAAA,SAAY3C,GACV,OAAO9lB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACEsY,GAAuD5C,MAQ7DgC,EAAA5nB,UAAAqoB,wBAAA,WACE,OAAOvoB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuY,MAOXb,EAAA5nB,UAAA0oB,wBAAA,WACE,OAAO5oB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOyY,MAOXf,EAAA5nB,UAAA4oB,sBAAA,WACE,OAAO9oB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO2Y,MAOXjB,EAAA5nB,UAAA8oB,wBAAA,WACEhpB,KAAKgQ,MAAMU,SACT,IAAIuY,KAORnB,EAAA5nB,UAAAgpB,YAAA,WACE,OAAOlpB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO+Y,MAOXrB,EAAA5nB,UAAAkpB,YAAA,SAAYzB,GACV,OAAO3nB,KAAKgQ,MAAMU,SAChB,IAAI2Y,GAA8C1B,KAWtDG,EAAA5nB,UAAAopB,WAAA,SAAWC,GAAX,IAAAlgB,EAAArJ,KACE,OAAOA,KAAK+nB,YAAYhN,iBAAiBnT,KACvCkF,EAAAA,QAAO,SAAC0c,GAAkB,OAACA,KAC3BhB,EAAAA,KAAI,WAAM,OAAAnf,EAAK6e,cAAa,MAC5BuB,EAAAA,WAAU,WACR,OAAApgB,EAAK2G,MAAMpI,KACTwI,EAAAA,OACEsZ,GACEH,UAYZzB,EAAA5nB,UAAAypB,YAAA,SAAY7D,GACV9lB,KAAKgQ,MAAMU,SACT,IAAIkZ,GAA8C9D,KAOtDgC,EAAA5nB,UAAA2pB,gBAAA,WAAA,IAAAxgB,EAAArJ,KACE,OAAOA,KAAKkoB,cAAa,GAAMtgB,KAC7B4gB,EAAAA,KAAI,SAAChC,GACH,OAAAA,EAAUjd,SAAQ,SAAC6d,GAAa,OAAA/d,EAAKsgB,YAAYvC,EAAS7Y,YAShEuZ,EAAA5nB,UAAA4pB,eAAA,SAAejC,GACb,OAAOA,GAAWA,EAAQkC,eAAiB7P,EAAAA,yBAAyB8P,OAOtElC,EAAA5nB,UAAA+pB,gBAAA,SAAgBnE,GACd9lB,KAAKgQ,MAAMU,SACT,IAAIwZ,GAAkDpE,KAO1DgC,EAAA5nB,UAAAiqB,oBAAA,WAAA,IAAA9gB,EAAArJ,KACE,OAAOA,KAAKkoB,cAAa,GAAMtgB,KAC7B4gB,EAAAA,KAAI,SAAChC,GACH,OAAAA,EAAUjd,SAAQ,SAAC6d,GAAa,OAAA/d,EAAK4gB,gBAAgB7C,EAAS7Y,YASpEuZ,EAAA5nB,UAAAkqB,mBAAA,SAAmBvC,GACjB,OACEA,GAAWA,EAAQkC,eAAiB7P,EAAAA,yBAAyBmQ,WAQjEvC,EAAA5nB,UAAAoqB,sBAAA,SAAsBnE,GACpBnmB,KAAKgQ,MAAMU,SACT,IAAI6Z,GACFpE,IAGAA,GACFnmB,KAAKwqB,wBAAuB,IAOhC1C,EAAA5nB,UAAAuqB,kBAAA,WACE,OAAOzqB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsa,MAQX5C,EAAA5nB,UAAAyqB,oBAAA,WAAA,IAAAthB,EAAArJ,KACE,OAAOA,KAAKkoB,cAAa,GAAMtgB,KAC7B6hB,EAAAA,WAAU,WACR,OAAApgB,EAAK2G,MAAMpI,KACTwI,EAAAA,OAAOwa,UAUf9C,EAAA5nB,UAAAsqB,uBAAA,SAAuBnE,GACrBrmB,KAAKgQ,MAAMU,SACT,IAAIma,GACFxE,KASNyB,EAAA5nB,UAAA4qB,gBAAA,WAAA,IAAAzhB,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKyqB,oBACLzqB,KAAK2qB,wBACJ/iB,KACD4gB,EAAAA,KAAI,WAAM,OAAAnf,EAAK2hB,0BACfpgB,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACqhB,EAASphB,EAAA,GAAEshB,EAAOthB,EAAA,GAAM,OAACohB,GAAaE,OAQxCyB,EAAA5nB,UAAA8qB,qBAAA,WACNhrB,KAAKgQ,MAAMU,SACT,IAAIua,KASRnD,EAAA5nB,UAAAgrB,uBAAA,SACEC,EACAC,GAEA,GAAIA,EAAazqB,SAAWwqB,EAAiBxqB,OAC3C,OAAO,EAGT,IAAK,IAAIK,EAAI,EAAGA,EAAIoqB,EAAazqB,OAAQK,IAAK,CAC5C,IAAMqqB,EAAcD,EAAapqB,GAC3BsqB,EAAkBH,EAAiBnqB,GACzC,GAAIqqB,EAAYE,UAAYD,EAAgBC,QAC1C,OAAO,EAIX,OAAO,GAOTzD,EAAA5nB,UAAAsrB,mBAAA,SAAmB7D,GACjB,IAAKA,EACH,MAAO,GAET,IAAM8D,EAAa/X,KAAKC,UAAUgU,GAElC,OADgB+D,mBAAmBD,IAQrC3D,EAAA5nB,UAAAyrB,qBAAA,SAAqBC,GACnB,IAAMC,EAAUC,mBAAmBF,GAEnC,OADqBlY,KAAKG,MAAMgY,IAYlC/D,EAAA5nB,UAAA6rB,gBAAA,SACEC,EACAC,GAIA,OAFuBjsB,KAAKwrB,mBAAmBQ,KACnBhsB,KAAKwrB,mBAAmBS,gKAzUvDhkB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAbTyM,EAAAA,aAGRuI,MCJT,IAAA+R,GAAA,WAAA,SAAAA,YACSA,EAAA1qB,QAAP,SAAe2qB,EAAwBC,eACrC,IAA4B,IAAArnB,EAAApB,EAAAnE,OAAO6f,KAAK+M,IAAkBpnB,EAAAD,EAAAlD,QAAAmD,EAAA/C,KAAA+C,EAAAD,EAAAlD,OAAE,CAAvD,IAAMwqB,EAAarnB,EAAArD,MAChB2qB,EAAc,IAAIC,OAAO,OAASF,EAAgB,IAAK,KAC7DF,EAAiBA,EAAeK,QAC9BF,EACAF,EAAkBC,sGAGtB,OAAOF,KATX,YCQgBM,GACd5mB,EACA6mB,GAEA,OAAQ7mB,EAAOyI,SAAWzI,EAAOyI,QAAQoe,IAAe,YAS1CC,GACd9mB,EACA6mB,GAEA,IAAME,EAAQH,GAA0B5mB,EAAQ6mB,GAChD,OAAOE,GAASA,EAAMjsB,OAASisB,EAAM,QAAKrlB,MC1B/BslB,GAAsB,WACtBC,GAAsB,WACtBC,GAAuB,WCCvBC,GAAiB,+BACjBC,GAAsB,oCACtBC,GAAyB,uCAEzBC,GAAkB,gCAClBC,GAAuB,qCACvBC,GAA0B,wCAE1BC,GAAuB,qCACvBC,GAAmB,iCAEhCC,GAAA,WACWxtB,KAAAsN,KAAO0f,IAGlBS,GAEE,SAAmBpgB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO2f,IAIlBS,GAEE,SAAmBrgB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO4f,IAIlBS,GAAA,WACW3tB,KAAAsN,KAAO6f,IAGlBS,GAEE,SAAmBvgB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO8f,IAIlBS,GAEE,SAAmBxgB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO+f,IAIlBS,GAEE,SAAmBzgB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOggB,IAIlBS,GAAA,WACW/tB,KAAAsN,KAAOigB,IC7CLS,GAAkB,iCAClBC,GAAuB,sCACvBC,GAA0B,yCAC1BC,GAAsB,qCACtBC,GAAkB,iCAE/BC,GAAA,WACWruB,KAAAsN,KAAO0gB,IAGlBM,GAEE,SAAmBjhB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO2gB,IAIlBM,GAEE,SAAmBlhB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO4gB,IAIlBM,GAEE,SAAmBnhB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO6gB,IAIlBM,GAEE,SAAmBphB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO8gB,IC1BLM,GAAiB,gCACjBC,GAAsB,qCACtBC,GAAyB,wCACzBC,GAAsB,qCACtBC,GAAkB,iCAE/BC,GAAA,WACW/uB,KAAAsN,KAAOohB,IAGlBM,GAEE,SAAmB3hB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOqhB,IAIlBM,GAEE,SAAmB5hB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOshB,IAIlBM,GAEE,SAAmB7hB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOuhB,IAIlBM,GAEE,SAAmB9hB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOwhB,syBC5BLM,GAAuB,cCMvBC,GAGTxhB,EAAAA,sBAAwCuhB,ICAtCE,GAAwB,SAACxhB,GAAyB,OAAAA,EAAM+Q,mBAO5D,SAAC/Q,GAA4B,OAAAA,EAAMyhB,UALxBC,GAGTxhB,EAAAA,eACFqhB,GAAmBI,OASnB,SAAC3hB,GACC,OAAAA,GAASA,EAAMyhB,UAAYzhB,EAAMyhB,SAASG,YANjCC,GAGT3hB,EAAAA,eACFqhB,GAAmBO,OAUnB,SAAC9hB,GAA4B,OAAAA,GAASA,EAAMyhB,UAAYzhB,EAAMyhB,SAASM,SAL5DC,GAGT9hB,EAAAA,eACFqhB,GAAmBU,IAIRC,GAGThiB,EAAAA,eAAewhB,GAAkBF,OAKI,SAACzQ,GACxC,OAAOA,EAAWrf,OAAO6f,KAAKR,GAAUjU,KAAI,SAACqlB,GAAQ,OAAApR,EAASoR,MAAQ,MAJ3DC,GAGTliB,EAAAA,eAAegiB,GAAoBG,ICnCjCC,GAA6B,SAACtiB,GAA2B,OAAAA,EAAM+Q,UAC/DwR,GAAyB,SAACviB,GAA2B,OAAAA,EAAMwiB,gBAEpDC,GAGTviB,EAAAA,eACFqhB,IACA,SAACvhB,GAA4B,OAAAA,EAAM0iB,cAGxBC,GAGTziB,EAAAA,eAAeuiB,GAAoBH,IAE1BM,GAGT1iB,EAAAA,eAAeuiB,GAAoBF,IAE1BM,GAGT3iB,EAAAA,eAAeyiB,IAAuB,SAAC5R,GACzC,OAAOA,EACHrf,OAAO6f,KAAKR,GAAUjU,KAAI,SAACgmB,GAAY,OAAA/R,EAAS+R,MAChD,QC3BAC,GAAyB,SAAC/iB,GAA0B,OAAAA,EAAMgjB,gBAC1DC,GAA4B,SAACjjB,GAA0B,OAAAA,EAAM+Q,UAEtDmS,GAGThjB,EAAAA,eACFqhB,IACA,SAACvhB,GAA4B,OAAAA,EAAMmjB,aAGxBC,GAGTljB,EAAAA,eAAegjB,GAAmBD,IAEzBI,GAGTnjB,EAAAA,eAAegjB,GAAmBH,IAEzBO,GAGTpjB,EAAAA,eAAekjB,IAAsB,SAACrS,GACxC,OAAOA,EACHrf,OAAO6f,KAAKR,GAAUjU,KAAI,SAACgmB,GAAY,OAAA/R,EAAS+R,MAChD,4YCtBJ,SAAAS,EACYrhB,EACAnK,GADA7F,KAAAgQ,MAAAA,EACAhQ,KAAA6F,OAAAA,SAMZwrB,EAAAnxB,UAAAoxB,UAAA,WACE,OAAOtxB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOmhB,IACPzkB,EAAAA,QAAO,SAAC0kB,GAAW,OAAAxlB,QAAQwlB,QAO/BH,EAAAnxB,UAAAuxB,OAAA,WAAA,IAAApoB,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOshB,IACPlJ,EAAAA,KAAI,SAACmJ,GACEA,GACHtoB,EAAK2G,MAAMU,SAAS,IAAIkhB,OAG5B9kB,EAAAA,QAAO,SAAC6kB,GAAU,OAAA3lB,QAAQ2lB,QAO9BN,EAAAnxB,UAAAmL,IAAA,SAAIwmB,GAAJ,IAAAxoB,EAAArJ,KACE,OAAI6xB,EACK7xB,KAAKyxB,SAAS7pB,KACnBgD,EAAAA,KAAI,SAAC+mB,GAAU,OAAAA,EAAMhlB,MAAK,SAACmlB,GAAS,OAAAA,EAAK7B,MAAQ4B,SAI9C7xB,KAAKsxB,YAAY1pB,KACtB6hB,EAAAA,WAAU,SAACsI,GACT,OAAA1oB,EAAKooB,SAAS7pB,KACZgD,EAAAA,KAAI,SAAC+mB,GAAU,OAAAA,EAAMhlB,MAAK,SAACmlB,GAAS,OAAAA,EAAK7B,MAAQ8B,cAMzDV,EAAAnxB,UAAA8xB,UAAA,SAAUzC,GAAV,IAAAlmB,EAAArJ,KACEA,KAAKgQ,MACFpI,KAAKwI,EAAAA,OAAOmhB,IAAyC/e,EAAAA,KAAK,IAC1DC,WAAU,SAACwf,GACN1C,GAAY0C,IAAmB1C,GACjClmB,EAAK2G,MAAMU,SACT,IAAIwhB,GAAqC3C,QASnD8B,EAAAnxB,UAAAgX,WAAA,WACE,IAAIvV,EACJ3B,KAAKsxB,YACF7e,WAAU,SAAC4B,GAAQ,OAAC1S,EAAQ0S,KAC5BF,cACCxS,GAKJ3B,KAAKgyB,UACHrF,GAA2B3sB,KAAK6F,OAAQknB,gCA7E7C9kB,EAAAA,uDAZgB2J,EAAAA,aAKR8C,wBCGT,SAAAyd,YACEA,EAAAjyB,UAAAkyB,UAAA,SAAU7xB,GACR,OAAOmrB,mBAAmBnrB,IAG5B4xB,EAAAjyB,UAAAmyB,YAAA,SAAY1wB,GACV,OAAO+pB,mBAAmB/pB,IAG5BwwB,EAAAjyB,UAAAoyB,UAAA,SAAU/xB,GACR,OAAOurB,mBAAmBvrB,IAG5B4xB,EAAAjyB,UAAAqyB,YAAA,SAAY5wB,GACV,OAAOmqB,mBAAmBnqB,SCvBjB6wB,GAAgB,wBCuB3B,SAAAC,EACU5sB,EACY6sB,GAFtB,IAAArpB,EAAArJ,KACUA,KAAA6F,OAAAA,EACY7F,KAAA0yB,gBAAAA,EAEhB1yB,KAAK0yB,iBACP1yB,KAAK0yB,gBACFpB,YACA7e,WAAU,SAAC9Q,GAAU,OAAC0H,EAAKspB,gBAAkBhxB,YAdpDnC,OAAAyB,eAAYwxB,EAAAvyB,UAAA,iBAAc,KAA1B,iBACE,OACsB,QADtB4E,EACE9E,KAAK2yB,uBAAe,IAAA7tB,EAAAA,EACpB6nB,GAA2B3sB,KAAK6F,OAAQknB,qCAmB5C0F,EAAAvyB,UAAA0yB,eAAA,SAAevc,aACb,OAAyB,QAArBtR,EAAY,QAAZD,EAAC9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAEwQ,eAAO,IAAAvQ,OAAA,EAAAA,EAAEwQ,OAG3Bc,EAA4C,QAApCrR,EAAGhF,KAAK6F,OAAOyP,QAAQC,IAAIsd,iBAAS,IAAA7tB,OAAA,EAAAA,EAAGqR,IAEjCtM,WAAW,OACvBsM,EAAW,IAAMA,GAGZrW,KAAK6F,OAAOyP,QAAQC,IAAIF,QAAUgB,GARhC,IAmBXoc,EAAAvyB,UAAA4yB,eAAA,SAAezc,aACb,OAAyB,QAArBtR,EAAY,QAAZD,EAAC9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAEwQ,eAAO,IAAAvQ,OAAA,EAAAA,EAAEwQ,OAG3Bc,EAA4C,QAApCrR,EAAGhF,KAAK6F,OAAOyP,QAAQC,IAAIsd,iBAAS,IAAA7tB,OAAA,EAAAA,EAAGqR,IAGnCtM,WAAW,MACpB/J,KAAK6F,OAAOyP,QAAQC,IAAIwd,OAAOC,SAAS,OAEzC3c,EAAW,IAAMA,GAIjBrW,KAAK6F,OAAOyP,QAAQC,IAAIF,QACxBrV,KAAK6F,OAAOyP,QAAQC,IAAIwd,OACxB1c,GAdO,IAqBXoc,EAAAvyB,UAAA+yB,gBAAA,mBACE,OAAyB,QAArBluB,EAAY,QAAZD,EAAC9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAEwQ,eAAO,IAAAvQ,OAAA,EAAAA,EAAEwQ,MAKxBvV,KAAK6F,OAAOyP,QAAQC,IAAIF,SAAW,IACpCrV,KAAK6F,OAAOyP,QAAQC,IAAIwd,OACxB/yB,KAAKiyB,eANE,IAcXQ,EAAAvyB,UAAAgzB,YAAA,SAAY7c,GAIV,OAHKA,EAAStM,WAAW,OACvBsM,EAAW,IAAMA,GAEZrW,KAAKizB,kBAAoB5c,GAUlCoc,EAAAvyB,UAAAizB,OAAA,SACE9c,EACA+c,EACAC,EACAC,SAWA,GATAjd,EAAWrW,KAAKuzB,oBAAoBld,EAAUid,GAE1CF,IACF5zB,OAAO6f,KAAK+T,GAAW7pB,SAAQ,SAAChJ,GAC9B6yB,EAAU7yB,GAAOmrB,mBAAmB0H,EAAU7yB,OAEhD8V,EAAW6V,GAAgB1qB,QAAQ6U,EAAU+c,IAG3CC,EAAa,CACf,IAAIG,EAAoB,CAAEC,QAAS,IAAItB,IAEvC,GAAI9b,EAAShF,SAAS,KAAM,CAC1B,IAAIqiB,EACJ/b,EAAA5T,EAAsCsS,EAASI,MAAM,KAAI,GAAxDJ,EAAQsB,EAAA,GAAE+b,EAAuB/b,EAAA,GAElC6b,EAAiBh0B,OAAAqF,OAAArF,OAAAqF,OAAA,GACZ2uB,GACA,CAAEG,WAAYD,IAIrB,IAAIE,EAAa,IAAIC,EAAAA,WAAWL,GAChCh0B,OAAO6f,KAAKgU,GAAa9pB,SAAQ,SAAChJ,GAChC,IAAMoB,EAAQ0xB,EAAY9yB,QACZgH,IAAV5F,IAEAiyB,EADY,OAAVjyB,EACWiyB,EAAWE,OAAOvzB,GAElBqzB,EAAWG,IAAIxzB,EAAKoB,OAKvC,IAAMyK,EAASwnB,EAAWvP,WACtBjY,EAAOzL,SACT0V,GAAY,IAAMjK,GAItB,OAAOpM,KAAKkzB,YAAY7c,IAGlBoc,EAAAvyB,UAAAqzB,oBAAA,SAAoBld,EAAkBid,WAEtCU,GAD0C,QAA3BjvB,EAAsB,QAAtBD,EAAG9E,KAAK6F,OAAOyP,eAAO,IAAAxQ,OAAA,EAAAA,EAAEyQ,WAAG,IAAAxQ,OAAA,EAAAA,EAAE8tB,WACXxc,GAEvC,GAAIid,EAAO,CACT,GAAIU,MAAAA,OAAc,EAAdA,EAAiBV,GACnB,OAAOU,MAAAA,OAAc,EAAdA,EAAiBV,GAE1B,GAAIA,IAAUd,IAA2C,iBAAnBwB,EACpC,OAAOA,EAELnrB,EAAAA,aACFC,QAAQF,KACHyN,EAAQ,8CAA8Cid,EAAK,KAKpE,OAC6B,iBAAnBU,EACJA,EACAA,MAAAA,OAAc,EAAdA,EAA8B,UAAM3d,4JA5K7CpO,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLsP,UAHA4c,GAAehxB,WAAA,CAAA,CAAAiN,KAqBnB5H,EAAAA,kBCvBQuuB,GAAmB,sBACnBC,GAAmC,qCAEhD,SAAAC,YACSA,EAAAC,aAAP,SACEC,EACAC,EACAC,GAEA,OAAIA,EACKA,EAAQC,OAAOH,EAAY3gB,KAAKC,UAAU2gB,IAEnDC,GAAU,IAAIE,EAAAA,aAAcV,IAC1BM,EACA3gB,KAAKC,UAAU2gB,KAKZH,EAAAO,aAAP,SACEL,EACAM,GAEA,IAAMC,EAAiBD,EAAQJ,QAAQT,OAAOO,GAC9C,OAAOM,EAAQE,MAAM,CAAEN,QAASK,KAG3BT,EAAAW,oBAAP,SAA8BT,EAAoBE,GAChD,IAAMQ,EAAWR,EAAQlpB,IAAIgpB,GAC7B,GAAIU,EACF,OAAOrhB,KAAKG,MAAMkhB,SC7BXC,GAAsB,cACtBC,GAAoB,kCCApBC,GAAoB,4BACpBC,GAAyB,iCACzBC,GAA4B,oCAEzCC,GAAA,SAAA/hB,GAEE,SAAA+hB,IAAA,IAAAhsB,EACEiK,EAAA9P,KAAAxD,KAAMi1B,KAAkBj1B,YAFjBqJ,EAAAiE,KAAO4nB,YADmBp1B,EAAAu1B,EAAA/hB,KAArC,CAAqC+R,IAOrCiQ,GAAA,SAAAhiB,GAEE,SAAAgiB,EAAmBjoB,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMi1B,GAAmB5nB,IAAQrN,YADhBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO6nB,YADuBr1B,EAAAw1B,EAAAhiB,KAAzC,CAAyCmS,IAOzC8P,GAAA,SAAAjiB,GAEE,SAAAiiB,EAAmBloB,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMi1B,KAAkBj1B,YADPqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO8nB,YAD0Bt1B,EAAAy1B,EAAAjiB,KAA5C,CAA4CiS,uLCf/BiQ,GAGT3nB,EAAAA,sBAAuCmnB,OCCzC,SAAClnB,GAA2B,OAAAA,EAAM2nB,aALvBC,GAGT1nB,EAAAA,eACFwnB,GAAkBG,0GCOlB,SAAAC,EAAsB5lB,GAAAhQ,KAAAgQ,MAAAA,SAMtB4lB,EAAA11B,UAAA21B,eAAA,WAAA,IAAAxsB,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0lB,IACPC,EAAAA,UAAUC,EAAAA,gBACVlpB,EAAAA,QAAO,SAACgB,GACN,QAAIzE,EAAK4sB,oBAAoBnoB,KAGtBA,EAAMoQ,SACT7U,EAAK2G,MAAMU,SAAS,IAAIwlB,KAEnB,MAGXtrB,EAAAA,KAAI,SAACkD,GAAoC,OAAAA,EAAMnM,WAQnDi0B,EAAA11B,UAAAi2B,mBAAA,WAAA,IAAA9sB,EAAArJ,KAGE,OAFAA,KAAKgQ,MAAMU,SAAS,IAAIwlB,IAEjBl2B,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0lB,IACPhpB,EAAAA,QAAO,SAACgB,GACN,OAAAzE,EAAK4sB,oBAAoBnoB,MAE3BlD,EAAAA,KAAI,SAACkD,GAAoC,OAAAA,EAAMnM,WAIzCi0B,EAAA11B,UAAA+1B,oBAAA,SAAoBnoB,GAC5B,OAAQA,EAAMiP,SAAWjP,EAAM7J,SAAW6J,EAAMoQ,sJA7CnDjW,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAbGyM,EAAAA,2BCcf,SAAAwkB,EAAsBC,GAAAr2B,KAAAq2B,mBAAAA,SAQfD,EAAAl2B,UAAAo2B,yBAAA,SACL3B,EACA9yB,GAFK,IAAAwH,EAAArJ,KAIL,OAAOA,KAAKq2B,mBAAmBF,qBAAqBvuB,KAClD4K,EAAAA,KAAK,GACLiX,EAAAA,WAAU,SAACzV,GACT,OAAOnS,EAAK00B,OAAOltB,EAAKmtB,6BAA6B7B,EAAS3gB,SAW1DoiB,EAAAl2B,UAAAs2B,6BAAA,SACR7B,EACA3gB,GAOA,OALA2gB,EAAUA,EAAQE,MAAM,CACtB4B,WAAY,CACVC,eAAkB1iB,EAAM2iB,YAAc,UAAQ,IAAI3iB,EAAMiH,yJApC/DhT,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAPLywB,wBCoBP,SAAAgB,EACYP,EACAQ,EACAC,GAFA92B,KAAAq2B,mBAAAA,EACAr2B,KAAA62B,2BAAAA,EACA72B,KAAA82B,aAAAA,SAGZF,EAAA12B,UAAA62B,UAAA,SACEpC,EACA9yB,GAFF,IAAAwH,EAAArJ,KAIQg3B,EAAuBh3B,KAAKg3B,qBAAqBrC,GAKvD,OAJIqC,IACFrC,EAAUR,GAAgBO,aAAaT,GAAkBU,IAGpD30B,KAAK61B,eAAemB,GAAsBpvB,KAC/C4K,EAAAA,KAAK,GACLiX,EAAAA,WAAU,SAACzV,GAcT,OAZEA,MAAAA,OAAK,EAALA,EAAOiH,eACP0Z,EAAQtqB,IAAIgH,SAAShI,EAAKytB,aAAa7D,qBAEvC0B,EAAUA,EAAQE,MAAM,CACtB4B,WAAY,CACVC,eAAkB1iB,EAAM2iB,YAAc,UAAQ,IAC5C3iB,EAAMiH,iBAMPpZ,EAAK00B,OAAO5B,GAAS/sB,KAC1BqvB,EAAAA,YAAW,SAACC,GACV,OAAIA,aAAuBC,EAAAA,mBACE,MAAvBD,EAAYE,QACVJ,GACE3tB,EAAKguB,eAAeH,GACf7tB,EAAKwtB,2BAA2BP,yBACrC3B,EACA9yB,GAMHy1B,EAAAA,WAAWJ,YAOlBN,EAAA12B,UAAA21B,eAAA,SACRmB,GAEA,OAAIA,EACKh3B,KAAKq2B,mBAAmBR,iBAE1B7tB,EAAAA,GAAG,OAGF4uB,EAAA12B,UAAA82B,qBAAA,SAAqBrC,GAC7B,IAAM4C,EAAmBpD,GAAgBW,oBACvCb,GACAU,EAAQJ,SAEV,OAAOvoB,QAAQurB,IAGPX,EAAA12B,UAAAm3B,eAAA,SAAeG,aACvB,MAAyC,uBAAZ,QAAtBxyB,EAAkB,QAAlBD,EAAU,QAAVD,EAAA0yB,EAAKvzB,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,cAAM,IAAA1yB,OAAA,EAAAA,EAAG,UAAC,IAAAC,OAAA,EAAAA,EAAGsI,6KAxEnCrF,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDANjBywB,UADAQ,UANA3D,UCPGiF,GCCCC,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAauuB,GACb3wB,OAAO,ICNE4xB,GAA4B,uBAC5BC,GAA8B,yBAE9BC,GAAkC,CAC7CjqB,MAAO,CACLkqB,YAAa,CACXC,oBAAqBJ,GACrBK,sBAAuBJ,GACvBzY,KAAM,GACN6C,YAAa,OFRPwV,GAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,WAAA,aACAA,GAAA,cAAA,gBACAA,GAAA,gBAAA,mBAGUS,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,eAAA,aAOF,sBGXgBC,GACdnoB,EACApK,GAEA,KACGoK,EAAOzI,cACP3B,GACAA,EAAOiI,OACPjI,EAAOiI,MAAMkqB,aACbnyB,EAAOiI,MAAMkqB,YAAY3Y,MAE1B,OAAO,SAACjB,GAAY,OAAAA,GAGtB,IAAMia,EAAoBxyB,EAAOiI,MAAMkqB,YAEvC,OAAO,SAAC5Z,GACN,OAAO,SAACtQ,EAAOuQ,GACb,IAAMsB,EAAWvB,EAAQtQ,EAAOuQ,GAEhC,GAAIA,EAAO/Q,OAASgrB,EAAAA,MAAQja,EAAO/Q,OAASirB,EAAAA,OAAQ,CAClD,IAAMC,WAmDe3yB,EAAqBoK,GAChD,IAAMwoB,EAAoBC,GACxBzoB,EAAOvI,aACP7B,EAAOiI,MAAMkqB,YAAYC,qBAErBU,EAAsBD,GAC1BzoB,EAAOxI,eACP5B,EAAOiI,MAAMkqB,YAAYE,uBAG3B,OAAO3zB,EAAUk0B,EAAmBE,GA7DNC,CAAU/yB,EAAQoK,GAC1C,OAAO1L,EAAU,GAAIob,EAAU6Y,GAGjC,GAAIna,EAAO/Q,OAASgrB,EAAAA,KAAM,CAExB,IAQMO,EAA0B5V,GARPK,GACvB+U,EAAkBhZ,KAClBqY,EAAAA,gBAAgBoB,eAEgBxV,GAChC+U,EAAkBnW,YAClBwV,EAAAA,gBAAgBoB,eAKhBnZ,GAEFoZ,GACElzB,EAAOiI,MAAMkqB,YAAYC,oBACzBY,EACA5oB,EAAOvI,cAIT,IAQMsxB,EAA4B/V,GARPK,GACzB+U,EAAkBhZ,KAClBqY,EAAAA,gBAAgBuB,iBAEkB3V,GAClC+U,EAAkBnW,YAClBwV,EAAAA,gBAAgBuB,iBAKhBtZ,GAEFoZ,GACElzB,EAAOiI,MAAMkqB,YAAYE,sBACzBc,EACA/oB,EAAOxI,gBAIX,OAAOkY,aA4BGuZ,GACdC,EACAlpB,GAEA,IAAImpB,EAEJ,OAAQD,GACN,KAAKzB,EAAAA,gBAAgBoB,cACnBM,EAAUnpB,EAAOvI,aACjB,MAEF,KAAKgwB,EAAAA,gBAAgBuB,gBACnBG,EAAUnpB,EAAOxI,eACjB,MAEF,KAAKiwB,EAAAA,gBAAgB2B,WACnBD,OAAU7xB,EACV,MAGF,QACE6xB,EAAUnpB,EAAOxI,eAIrB,OAAO2xB,WAGOL,GACdO,EACA33B,EACAy3B,IAEKG,GAAMH,IAAYz3B,GACrBy3B,EAAQ9kB,QAAQglB,EAAW5lB,KAAKC,UAAUhS,aAI9B+2B,GAAgBU,EAAkB74B,GAChD,IAAIg5B,GAAMH,GAAV,CAIA,IAAMI,EAAeJ,EAAQnlB,QAAQ1T,GACrC,GAAKi5B,EAIL,OAAO9lB,KAAKG,MAAM2lB,aAGJD,GAAMH,GACpB,OAAQptB,QAAQotB,6HH5IjBnxB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBIAb,SAAAw0B,EAAsBxpB,GAAAjQ,KAAAiQ,OAAAA,SAsBtBwpB,EAAAv5B,UAAAw5B,gBAAA,SAAmB50B,GAAnB,IAAAuE,EAAArJ,KACEO,EAAGuE,EAAAvE,IACHo5B,EAAM70B,EAAA60B,OACN50B,EAAAD,EAAA80B,SAAAA,OAAQ,IAAA70B,EAAGiD,EAAAA,GAAG,IAAGjD,EACjBC,EAAAF,EAAAq0B,YAAAA,OAAW,IAAAn0B,EAAG0yB,EAAAA,gBAAgBoB,cAAa9zB,EAC3C2S,EAAA7S,EAAA+0B,OAAAA,OAAM,IAAAliB,EAAG,aAAQA,EAQXyhB,EAAUF,GAAWC,EAAan5B,KAAKiQ,QAEvC6pB,EAAgB,IAAIC,EAAAA,aA2B1B,OAxBAD,EAAc9mB,IACZ4mB,EACGhyB,KACCgD,EAAAA,KAAI,SAAC0D,GACH,OAAOoqB,GACLU,EACA/vB,EAAK2wB,uBAAuB1rB,EAAS/N,OAGzCioB,EAAAA,KAAI,SAAC1a,GAAU,OAAA+rB,EAAO/rB,OAEvB2E,aAGLqnB,EAAc9mB,IACZ2mB,EAAO/xB,KAAK0gB,EAAAA,eAAesR,IAAWnnB,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACgJ,EAAK/I,EAAA,GAAEuJ,EAAOvJ,EAAA,GAC9Dg0B,GACE1vB,EAAK2wB,uBAAuB1rB,EAAS/N,GACrCuN,EACAsrB,OAKCU,GAaTL,EAAAv5B,UAAA+5B,qBAAA,SAAwBn1B,OACtBvE,EAAGuE,EAAAvE,IACHwE,EAAAD,EAAAwJ,QAAAA,OAAO,IAAAvJ,EAAG,GAAEA,EACZC,EAAAF,EAAAq0B,YAQA,OAAOT,GAFSQ,QANL,IAAAl0B,EAAG0yB,EAAAA,gBAAgBoB,cAAa9zB,EAMHhF,KAAKiQ,QAI3CjQ,KAAKg6B,uBAAuB1rB,EAAS/N,KAI/Bk5B,EAAAv5B,UAAA85B,uBAAA,SACR1rB,EACA/N,GAEA,MAAO,aAAa,GAAG4D,OAAOmK,GAAS4rB,KAAK,KAAI,IAAI35B,0IAtGvD0H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLiC,uBCkBP,SAAA+yB,EACYC,EACAhgB,EACAE,EACAlI,GAHApS,KAAAo6B,wBAAAA,EACAp6B,KAAAoa,cAAAA,EACApa,KAAAsa,mBAAAA,EACAta,KAAAoS,2BAAAA,EANFpS,KAAAq6B,aAAe,IAAIN,EAAAA,aAYnB/5B,KAAAO,IAAM,cAKT45B,EAAAj6B,UAAAo6B,SAAA,WAAA,IAAAjxB,EAAArJ,KACLA,KAAKq6B,aAAarnB,IAChBhT,KAAKo6B,wBAAwBV,gBAAgB,CAC3Cn5B,IAAKP,KAAKO,IACVo5B,OAAQ35B,KAAKu6B,eACbV,OAAQ,SAAC/rB,GAAU,OAAAzE,EAAKwwB,OAAO/rB,QAS3BqsB,EAAAj6B,UAAAq6B,aAAA,WACR,OAAOxP,EAAAA,cAAc,CACnB/qB,KAAKsa,mBAAmBxG,WAAWlM,KACjCkF,EAAAA,QAAO,SAACgB,GAAU,QAAEA,KACpBlD,EAAAA,KAAI,SAACkD,GACH,OAAAtO,OAAAqF,OAAA,GACKiJ,OAIT9N,KAAKoa,cAAcf,YACnBrZ,KAAKoS,2BAA2BJ,mBAC/BpK,KACDgD,EAAAA,KAAI,SAAC5F,OAAA2S,EAAA5T,EAAAiB,EAAA,GAACw1B,EAAS7iB,EAAA,GAAEE,EAAMF,EAAA,GAAEzF,EAAWyF,EAAA,GAC9B3D,EAAQwmB,EAMZ,OALIxmB,UACFA,EAAKxU,OAAAqF,OAAA,GAAQmP,IAEAymB,cAER,CAAEzmB,MAAKA,EAAE6D,OAAMA,EAAE3F,YAAWA,QAS/BioB,EAAAj6B,UAAA25B,OAAA,SAAO/rB,IACXA,MAAAA,OAAK,EAALA,EAAOkG,QACThU,KAAKsa,mBAAmBvG,SAASjG,EAAMkG,QAErClG,MAAAA,OAAK,EAALA,EAAOoE,cACTlS,KAAKoS,2BAA2BH,eAAenE,EAAMoE,cAEnDpE,MAAAA,OAAK,EAALA,EAAO+J,QACT7X,KAAKoa,cAAchB,UAAUtL,EAAM+J,QAEnC7X,KAAKoa,cAAcT,eAObwgB,EAAAj6B,UAAA+5B,qBAAA,WACR,OAAOj6B,KAAKo6B,wBAAwBH,qBAAsC,CACxE15B,IAAKP,KAAKO,OAQP45B,EAAAj6B,UAAA6a,eAAA,mBACL,OAAO/O,QAA0C,QAAnCjH,EAA4B,QAA5BD,EAAC9E,KAAKi6B,8BAAsB,IAAAn1B,OAAA,EAAAA,EAAEkP,aAAK,IAAAjP,OAAA,EAAAA,EAAEkW,eAGrDkf,EAAAj6B,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,oMAhGrBlM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAnBLs0B,UACAxgB,UAGA5F,UADAxB,MCMF,IAAM8oB,GAA2BC,EAAAA,aAAqB,qBAE7CC,GACd5jB,EACA6jB,EACAj1B,EACAk1B,WAEA,GAAID,IAA2C,QAA9B/1B,EAAiB,QAAjBD,EAAIe,MAAAA,OAAM,EAANA,EAAQiI,aAAK,IAAAhJ,OAAA,EAAAA,EAAEk2B,mBAAW,IAAAj2B,OAAA,EAAAA,EAAEsa,MAAM,CACrD,GAAI4b,EAAAA,kBAAkBhkB,GACpB,gBAuCJ6jB,EACAzb,EACA6b,GAEA,IAAMC,EAAoB7X,GACxBjE,EACA8Y,EAAAA,kBAAkBiD,gBAGpB,OAAO,SAAUhd,GACf,OAAO,SAAUtQ,EAAOuQ,GACtB,GAAIA,EAAO/Q,OAASgrB,EAAAA,KAAM,CAKxB,GAJKxqB,IACHA,EAAQsQ,EAAQtQ,EAAOuQ,KAGpB6c,GAAcJ,EAAcO,OAAOV,IAAS,CAC/C,IAAMW,EAAQR,EAAczvB,IAAIsvB,GAAQ,IAOxC7sB,EAAQvJ,EAAU,GAAIuJ,EANQmV,GAC5BkY,EACA,GACAG,IAKJ,OAAOxtB,EAET,OAAOsQ,EAAQtQ,EAAOuQ,KAnEfkd,CACLT,EACAj1B,EAAOiI,MAAMktB,YAAY3b,KACzBrT,QAAQ+uB,MAAAA,OAA2B,EAA3BA,EAA6BhgB,mBAElC,GAAI3D,EAAAA,iBAAiBH,GAC1B,gBAWJ6jB,EACAzb,GAEA,IAAM8b,EAAoB7X,GACxBjE,EACA8Y,EAAAA,kBAAkBiD,gBAGpB,OAAO,SAAUhd,GACf,OAAO,SAAUtQ,EAAOuQ,GACtB,IAAMsB,EAAWvB,EAAQtQ,EAAOuQ,GAChC,GAAIsB,EAAU,CACZ,IAAM6b,EAAavY,GAAckY,EAAmB,GAAIxb,GACxDmb,EAAc/G,IAAI4G,GAAQa,GAG5B,OAAO7b,IA3BA8b,CACLX,EACAj1B,EAAOiI,MAAMktB,YAAY3b,MAK/B,OAAO,SAACjB,GAAY,OAAAA,OCtBTsd,GAA8B,IAAIx2B,EAAAA,eAC7C,4BAEWy2B,GAA4B,IAAIz2B,EAAAA,eAC3C,0BAMqC02B,GAUvBxD,GAbHyD,GAAgC,CAC3C,CACE91B,QAAS21B,GACTr1B,WAAYw0B,GACZz0B,KAAM,CACJwS,EAAAA,YACA,CAAC,IAAIlT,EAAAA,SAAYo2B,EAAAA,eACjB,CAAC,IAAIp2B,EAAAA,SAAYT,GACjB,CAAC,IAAIS,EAAAA,SAAYy0B,MAGrB,CACEp0B,QAAS41B,GACTt1B,WAAUu1B,GACVx1B,KAAM,CAACgB,EAAW,CAAC,IAAI1B,EAAAA,SAAYT,KAErC,CACEc,QAASg2B,EAAAA,cACT1zB,YAAaqzB,GACbz1B,OAAO,GAET,CACEF,QAASg2B,EAAAA,cACT1zB,YAAaszB,GACb11B,OAAO,kBCtCX,SAAA+1B,YACSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAASj4B,EACJ23B,GAAiB,CACpBv1B,EAAqByxB,sBCAbqE,GACdn4B,GAEA,GAAIA,aAAiBkzB,EAAAA,kBAAmB,CACtC,IAAMkF,EAAkC,CACtCC,QAASr4B,EAAMq4B,QACflF,OAAQnzB,EAAMmzB,OACdmF,WAAYt4B,EAAMs4B,WAClBlyB,IAAKpG,EAAMoG,KAeb,OAXI1K,MAAM2E,QAAQL,EAAMA,MAAMwzB,QAC5B4E,EAAgBxM,QAAU5rB,EAAMA,MAAMwzB,OACA,iBAAtBxzB,EAAMA,MAAMA,QAC5Bo4B,EAAgBxM,QAAU,CACxB,CACEviB,KAAMrJ,EAAMA,MAAMA,MAClBq4B,QAASr4B,EAAMA,MAAMu4B,qBAKpBH,EAGLxzB,EAAAA,aACFC,QAAQ7E,MACN,uEACAA,wBDpCLw4B,EAAAA,SAAQv0B,KAAA,CAAC,wBESR,SAAAw0B,EACYC,EACA3lB,GADAhX,KAAA28B,KAAAA,EACA38B,KAAAgX,kBAAAA,SAQZ0lB,EAAAx8B,UAAA08B,8BAAA,WACE,IAAMvyB,EAAcrK,KAAKgX,kBAAkBxB,mBACrCpJ,GAAS,IAAIynB,EAAAA,YAChBE,IACC,YACArI,mBAAmB1rB,KAAKgX,kBAAkBjC,gBAE3Cgf,IACC,gBACArI,mBAAmB1rB,KAAKgX,kBAAkB9B,oBAE3C6e,IAAI,aAAc,sBAEfQ,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAElB,OAAO78B,KAAK28B,KAAKG,KAAkBzyB,EAAK+B,EAAQ,CAAEmoB,QAAOA,sKA9B5DtsB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXL43B,EAAAA,kBAGAnoB,aC+BP,SACUooB,EACAC,GAFV,IAAA5zB,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAi9B,iCAAAA,EAxBVj9B,KAAAk9B,iBAEIl9B,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOC,IACPC,EAAAA,YAAW,WACT,OAAOh0B,EAAK4zB,iCACTL,gCACAh1B,KACCgD,EAAAA,KAAI,SAACoJ,GACH,OAAO,IAAIspB,GAAyCtpB,MAEtDijB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIu1B,GACFnB,GAAmBn4B,mCAjBlCgE,EAAAA,uDARQu1B,EAAAA,eAKAd,MAMPt8B,EAAA,CADCq9B,EAAAA,sDCTUC,GAAiB,CAACC,aCIfC,KACd,MAAO,CACLnI,YAAatX,GAA2B8W,SAI/B4I,GAER,IAAI34B,EAAAA,eACP,sBAGW44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,OCAd,kCAVCnB,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAjC,GACAkC,EAAAA,YAAYC,WAAWnJ,GAAqB6I,IAC5CO,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CAAC2B,0BCHd,SAAAO,YACSA,EAAApC,QAAP,WACE,MAAO,CACLC,SAAUmC,EACVlC,UAASj4B,EAAMyzB,gCAPpB8E,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,aAAcM,YCXbC,GAAqB,IAAIr5B,EAAAA,eAAe,qBAiBxCs5B,GAAmC,IAAIt5B,EAAAA,eAClD,kDCHA,SAAAu5B,EAC4B54B,EAGhB64B,EACoBC,GAJJ3+B,KAAA6F,OAAAA,EAGhB7F,KAAA0+B,iBAAAA,EACoB1+B,KAAA2+B,WAAAA,EAGtB3+B,KAAA4+B,eAAiB,IAAI7sB,EAAAA,qBAA0BxK,UAKzD/H,OAAAyB,eAAIw9B,EAAAv+B,UAAA,WAAQ,KAAZ,WACE,OACGF,KAAK0+B,kBACL1+B,KAAK4+B,eAAej9B,OAA8C,IAArC3B,KAAK4+B,eAAej9B,MAAMhB,wCAgBtD89B,EAAAv+B,UAAA2+B,gBAAA,eAAgB,IAAAC,EAAA,GAAAr6B,EAAA,EAAAA,EAAA/D,UAAAC,OAAA8D,IAAAq6B,EAAAr6B,GAAA/D,UAAA+D,iFACpB,OAAIzE,KAAK++B,SACP,CAAA,EAAO/+B,KAAK6F,QAEd,CAAA,EAAO7F,KAAK4+B,eACTh3B,KACCkF,EAAAA,QACE,SAACkyB,GACC,OAAAA,GAAiB31B,EAAK41B,SAASH,EAAQE,MAE3CxsB,EAAAA,KAAK,GACL0sB,EAAAA,MAAMl/B,KAAK6F,SAEZs5B,oBAQKV,EAAAv+B,UAAAk/B,aAAA,SAAaN,WACfO,EAASn7B,EAAOlE,KAAK4+B,eAAej9B,WAC1C,IAAoB,IAAA29B,EAAA37B,EAAAm7B,GAAMS,EAAAD,EAAAz9B,QAAA09B,EAAAt9B,KAAAs9B,EAAAD,EAAAz9B,OAAE,CAAvB,IAAMyxB,EAAKiM,EAAA59B,MACd09B,EAAUG,OAAOH,EAAUI,QAAQnM,GAAQ,qGAE7CtzB,KAAK4+B,eAAe/8B,KAAKw9B,IASjBZ,EAAAv+B,UAAA++B,SAAA,SAASH,EAAkBE,eACnC,IAAKF,EAAOn+B,OACV,OAAQq+B,EAAcr+B,WAExB,IAAoB,IAAA++B,EAAA/7B,EAAAm7B,GAAMa,EAAAD,EAAA79B,QAAA89B,EAAA19B,KAAA09B,EAAAD,EAAA79B,OAAE,CAAvB,IAAMyxB,EAAKqM,EAAAh+B,UACd,IAA2B,IAAAi+B,GAAAC,OAAA,EAAAl8B,EAAAq7B,IAAac,EAAAF,EAAA/9B,QAAAi+B,EAAA79B,KAAA69B,EAAAF,EAAA/9B,OAAE,CAArC,IAAMk+B,EAAYD,EAAAn+B,MACrB,GAAI3B,KAAKggC,cAAc1M,EAAOyM,GAC5B,OAAO,uMAIb,OAAO,GAeCtB,EAAAv+B,UAAA8/B,cAAA,SAAcC,EAAW1gC,SAIjC,OAHIA,EAAEoB,OAASs/B,EAAEt/B,SACds/B,GAADn7B,EAAAf,EAAS,CAACxE,EAAG0gC,GAAE,IAAb,GAAE1gC,EAACuF,EAAA,IAEAm7B,EAAEl2B,WAAWxK,IAA+B,OAAxB0gC,EAAE1gC,EAAEoB,SAAW,MAStC89B,EAAAv+B,UAAAgX,WAAA,SAAWgpB,0HACf,GAAIlgC,KAAK4+B,eAAej9B,MAEtB,MAAA,CAAA,GAGIq9B,EAA0B,GAE1BmB,EAAgC,cAE3BC,GACT,IAAKA,mBAGL,IAAKA,EAAYtB,SAAWsB,EAAYtB,OAAOn+B,OAC7C,MAAM,IAAI+Y,MAAM,4CAGd7Q,EAAAA,cAAgBw3B,EAAKpB,SAASmB,EAAYtB,OAAQE,IACpDl2B,QAAQF,KACN,2EAIJo2B,EAAct7B,KAAIvB,MAAlB68B,EAAa96B,EAASk8B,EAAYtB,SAElCqB,EAAaz8B,KACVxC,EAAAmI,OAAA,OAAA,GAAA,mEAC2B,MAAA,CAAA,EAAM+2B,EAAYj6B,+BAAtCm6B,EAAoBx7B,EAAAlC,OAE1B2B,EAAUvE,KAAK2+B,WAAY2B,GAE3B/7B,EAAUvE,KAAK6F,OAAQy6B,GACvBtgC,KAAKo/B,aAAagB,EAAYtB,gCAvBpC,IAA0Bh6B,EAAAnB,EAAAu8B,GAAgB,IAAEn7B,EAAAD,EAAAjD,QAAAkD,EAAA9C,KAAA8C,EAAAD,EAAAjD,OAAjCu+B,EAAWr7B,EAAApD,QAAXy+B,2GA2BXpgC,KAAK4+B,eAAe/8B,KAAKm9B,GAErBmB,EAAax/B,OACf,CAAA,EAAMY,QAAQg/B,IAAIJ,IADhB,CAAA,EAAA,UACFxoB,EAAA/U,gNAtJLqF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8EAITgD,EAAAA,OAAMD,KAAA,CAACjD,qCACPS,EAAAA,UAAQ,CAAA4H,KACRnF,EAAAA,OAAMD,KAAA,CAACs2B,sCAEPr2B,EAAAA,OAAMD,KAAA,CAAC3C,YCpBAi7B,GCACC,GAAgC,CAC3CzrB,eAAgB,CACdC,UAAW,iBACXE,cAAe,SACfM,cAAe,eACfK,eAAgB,gBAChBF,SAAU,mBACVQ,eAAgB,CACdkd,MAAO,GACPoN,sBAAuB,CAAC,cACxBC,mCAAmC,EACnCC,iBAAiB,EACjBC,aAAa,EACbC,MAAM,EACNC,qBAAqB,KCVdC,GAAc,iCACdC,GAAiB,oCACjBC,GACX,2CAEFC,GAEE,SAAmB9zB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO0zB,IAIlBI,GAEE,SAAmB/zB,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO2zB,IAIlBI,GAEE,SAAmBh0B,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO4zB,0JCpBLI,GAAyB,iBCKzBC,GAGT1zB,EAAAA,sBAA0CyzB,OCK5C,SAACxzB,GAA8B,OAAAA,EAAM+Q,UAL1B2iB,GAGTxzB,EAAAA,eACFuzB,GAAqBE,IAIVC,GAAiC,SAC5Cp0B,GAEA,OAAOU,EAAAA,eACLwzB,IACA,SAAC3iB,GAAa,OAAAA,GAAYA,EAASvR,OAI1Bq0B,GAA8B,SACzCr0B,GAEA,OAAOU,EAAAA,eACL0zB,GAA+Bp0B,IAC/B,SAACuR,GAAa,OAAAA,GAAYA,EAASle,0LCfrC,SAAAihC,EAAsB5xB,GAAAhQ,KAAAgQ,MAAAA,SAKtB4xB,EAAA1hC,UAAAmL,IAAA,WACE,OAAOrL,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOyxB,IACP/0B,EAAAA,QAAO,SAACyH,GAAS,YAAShN,IAATgN,OAUrBqtB,EAAA1hC,UAAA8S,IAAA,SACE8uB,EACAx0B,EACAy0B,GAEA/hC,KAAKgQ,MAAMU,SACT,IAAIsxB,GAAgC,CAClCF,KAAsB,iBAATA,EAAoB,CAAEG,IAAKH,GAASA,EACjDx0B,KAAIA,EACJy0B,QAAOA,MAWbH,EAAA1hC,UAAAgiC,OAAA,SAAO50B,EAAyB60B,GAC9BniC,KAAKgQ,MAAMU,cACCnJ,IAAV46B,EACI,IAAIC,GAAmC,CACrC90B,KAAMA,EACN60B,MAAOA,IAET,IAAIE,GAA0C/0B,kJAjDvDrF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAbGyM,EAAAA,UNCL4uB,GAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3B,sBAAA,+BACAA,GAAA,eAAA,wBACAA,GAAA,cAAA,8BACAA,GAAA,iBAAA,4COcA,SAAA8B,EACYva,EACAzN,EACAD,EACAG,EACAsc,EACAyL,GALAviC,KAAA+nB,YAAAA,EACA/nB,KAAAsa,mBAAAA,EACAta,KAAAqa,uBAAAA,EACAra,KAAAwa,eAAAA,EACAxa,KAAA82B,aAAAA,EACA92B,KAAAuiC,qBAAAA,SAMLD,EAAApiC,UAAAsiC,iBAAA,SAAiB7N,GACtB,OAAO30B,KAAKyiC,SAAS9N,EAAQtqB,MAMxBi4B,EAAApiC,UAAAwiC,aAAA,SAAa/N,GAClB,IAAMgO,IAA2B3iC,KAAK4iC,uBAAuBjO,GACvD8N,EAAWziC,KAAKyiC,SAAS9N,EAAQtqB,KACvC,OAAKs4B,GAA0BF,EACtB9N,EAAQE,MAAM,CACnB4B,WAAUj3B,OAAAqF,OAAA,GACL7E,KAAK6iC,+BAIPlO,GAGC2N,EAAApiC,UAAAuiC,SAAA,SAASp4B,GACjB,OAAOA,EAAIgH,SAASrR,KAAK82B,aAAa7D,oBAG9BqP,EAAApiC,UAAA0iC,uBAAA,SAAuBjO,GAE/B,OADiBA,EAAQJ,QAAQlpB,IAAI,kBAI7Bi3B,EAAApiC,UAAA2iC,0BAAA,WACR,IAAI7uB,EAMJ,OALAhU,KAAKsa,mBACFxG,WACArB,WAAU,SAACqwB,GAAQ,OAAC9uB,EAAQ8uB,KAC5B3uB,eAECH,MAAAA,OAAK,EAALA,EAAOiH,cACF,CACLyb,eAAkB1iB,EAAM2iB,YAAc,UAAQ,IAAI3iB,EAAMiH,cAGrD,IAMFqnB,EAAApiC,UAAA6iC,yBAAA,SACLpO,EACA9yB,GAFK,IAAAwH,EAAArJ,KAIL,OAAOA,KAAKgjC,qBAAqBp7B,KAC/B6hB,EAAAA,WAAU,SAACzV,GACT,OAAOnS,EAAK00B,OAAOltB,EAAKmtB,6BAA6B7B,EAAS3gB,SAQ7DsuB,EAAApiC,UAAA+iC,0BAAA,WAGLjjC,KAAK+nB,YAAYlN,aACjB7a,KAAKwa,eAAe3J,GAAG,CAAE5E,QAAS,UAClCjM,KAAKuiC,qBAAqBvvB,IACxB,CACEzS,IAAK,+BAEPigC,EAAAA,kBAAkB0C,iBAUZZ,EAAApiC,UAAA8iC,mBAAA,WAAA,IAEJG,EAFI95B,EAAArJ,KAGR,OAFeA,KAAKsa,mBAAmBxG,WAEzBlM,KACZ4gB,EAAAA,KAAI,SAACxU,GACCA,EAAMiH,cAAgBjH,EAAMymB,gBAAkB0I,EAChD95B,EAAKgR,uBAAuBrC,eAClBhE,EAAMymB,eAChBpxB,EAAK45B,4BAEPE,EAAWA,GAAYnvB,KAEzBlH,EAAAA,QACE,SAACkH,GAAqB,OAAAmvB,EAASloB,eAAiBjH,EAAMiH,gBAExDzI,EAAAA,KAAK,KAIC8vB,EAAApiC,UAAAs2B,6BAAA,SACR7B,EACA3gB,GAOA,OALA2gB,EAAUA,EAAQE,MAAM,CACtB4B,WAAY,CACVC,eAAkB1iB,EAAM2iB,YAAc,UAAQ,IAAI3iB,EAAMiH,oOAzH/DhT,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATLgV,UAEA9G,UACAyD,UAJA/G,UADA0iB,UAFAmP,wBCeP,SAAAwB,EACYC,EACArsB,GADAhX,KAAAqjC,sBAAAA,EACArjC,KAAAgX,kBAAAA,SAGZosB,EAAAljC,UAAA62B,UAAA,SACEpC,EACA9yB,GAFF,IAAAwH,EAAArJ,KAIQwiC,EAAmBxiC,KAAKqjC,sBAAsBb,iBAClD7N,GAKF,OAFAA,EAAU30B,KAAKqjC,sBAAsBX,aAAa/N,GAE3C9yB,EAAK00B,OAAO5B,GAAS/sB,KAC1BqvB,EAAAA,YAAW,SAACC,GACV,GAAIA,aAAuBC,EAAAA,kBACzB,OAAQD,EAAYE,QAClB,KAAK,IACH,GAAI/tB,EAAKguB,eAAeH,IAAgBsL,EACtC,OAAOn5B,EAAKg6B,sBAAsBN,yBAChCpO,EACA9yB,GAEG,GAGLq1B,EAAY7sB,IAAIgH,SACdhI,EAAK2N,kBAAkBxB,qBAEG,kBAA5B0hB,EAAYjzB,MAAMA,MAGlB,OADAoF,EAAKg6B,sBAAsBJ,4BACpBj7B,EAAAA,KAGT,MACF,KAAK,IAEDkvB,EAAY7sB,IAAIgH,SACdhI,EAAK2N,kBAAkBxB,qBAEG,kBAA5B0hB,EAAYjzB,MAAMA,OAEqB,kBAAnC0wB,EAAQtyB,KAAKgJ,IAAI,eACnBhC,EAAKg6B,sBAAsBJ,4BAMrC,OAAO3L,EAAAA,WAAWJ,QAKdkM,EAAAljC,UAAAm3B,eAAA,SAAeG,aACvB,MAAyC,uBAAZ,QAAtBxyB,EAAkB,QAAlBD,EAAU,QAAVD,EAAA0yB,EAAKvzB,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,cAAM,IAAA1yB,OAAA,EAAAA,EAAG,UAAC,IAAAC,OAAA,EAAAA,EAAGsI,8JA5DnCrF,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDANjBm9B,UADA1tB,wBCOP,SAAA0uB,EACYhpB,EACAtD,GADAhX,KAAAsa,mBAAAA,EACAta,KAAAgX,kBAAAA,SAGZssB,EAAApjC,UAAA62B,UAAA,SACEpC,EACA9yB,GAEA,IAAM0hC,EAA2BvjC,KAAKujC,yBAAyB5O,GAC/D,OAAO30B,KAAKsa,mBAAmBxG,WAAWlM,KACxC4K,EAAAA,KAAK,GACLiX,EAAAA,WAAU,SAACzV,GAUT,OATIuvB,IACF5O,EAAUA,EAAQE,MAAM,CACtB4B,WAAY,CACVC,eAAkB1iB,EAAM2iB,YAAc,UAAQ,IAC5C3iB,EAAMiH,iBAKPpZ,EAAK00B,OAAO5B,QAKf2O,EAAApjC,UAAAqjC,yBAAA,SAAyB5O,GACjC,OAAOA,EAAQtqB,MAAQrK,KAAKgX,kBAAkBnB,4KA9BjD5N,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDALjBkO,UADAuB,UCJI+iB,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAa+6B,GACbn9B,OAAO,GAET,CACEF,QAAS6xB,EAAAA,kBACTvvB,YAAai7B,GACbr9B,OAAO,aCAKwU,GACdsN,EACAyb,GAQA,OANe,WACb,OAAAA,EAAW3E,kBAAkB38B,MAAK,WAEhC6lB,EAAYtN,qCAMFgpB,GACd1I,GAGA,OADe,WAAM,OAAAA,EAA4BT,8BAWnD,SAAAoJ,YACSA,EAAAzH,QAAP,WACE,MAAO,CACLC,SAAUwH,EACVvH,UAASj4B,EAAA,CACPoC,EAAqBm6B,KAClB9I,GAAY,CACf,CACE5xB,QAASyO,EAAAA,aACTnM,YAAagL,IAEf,CACEtN,QAAS49B,EAAAA,gBACTt9B,WAAYo9B,GACZr9B,KAAM,CAAC+zB,IACPl0B,OAAO,GAET,CACEF,QAAS49B,EAAAA,gBACTt9B,WAAYoU,GACZrU,KAAM,CAAC+T,GAAaskB,IACpBx4B,OAAO,iCAxBhBw2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,aAAc4F,EAAAA,YAAY3H,iCC/BtC,SAAA4H,YACSA,EAAA5H,QAAP,WACE,MAAO,CACLC,SAAU2H,8BANfpH,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,aAAcK,GAAiBpC,UAAWyH,GAAezH,iCCUnE,SAAA6H,EACY/b,EACAxN,EACApQ,EACA+F,GAHAlQ,KAAA+nB,YAAAA,EACA/nB,KAAAua,oBAAAA,EACAva,KAAAmK,OAAAA,EACAnK,KAAAkQ,oBAAAA,SAGZ4zB,EAAA5jC,UAAA6jC,YAAA,WAAA,IAAA16B,EAAArJ,KACE,OAAOA,KAAK+nB,YAAYhN,iBAAiBnT,KACvCgD,EAAAA,KAAI,SAACswB,GACH,OAAKA,IACH7xB,EAAKkR,oBAAoB5H,kBAClBtJ,EAAKc,OAAOI,SAASlB,EAAK6G,oBAAoB7E,IAAI,0MAhBlEpD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDARLgV,UACAhI,UALanH,EAAAA,cAGbC,uBCYP,SAAA+4B,EACYjc,EACAxN,EACArK,EACA/F,GAHAnK,KAAA+nB,YAAAA,EACA/nB,KAAAua,oBAAAA,EACAva,KAAAkQ,oBAAAA,EACAlQ,KAAAmK,OAAAA,SAGZ65B,EAAA9jC,UAAA6jC,YAAA,WAAA,IAAA16B,EAAArJ,KAIE,OAHAA,KAAKua,oBAAoBzH,qBAGlB9S,KAAK+nB,YAAYhN,iBAAiBnT,KACvCgD,EAAAA,KAAI,SAACswB,GACH,OAAIA,EACK7xB,EAAKc,OAAOI,SAASlB,EAAK6G,oBAAoB7E,IAAI,UAEnD6vB,iMApBfjzB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDARLgV,UACAhI,UAFAlH,SAHaD,EAAAA,iBCKtB,aCJai5B,GAAiC,CAC5C3uB,QAAS,CACPC,IAAK,CACHsd,UAAW,CACTqR,kBAAmB,kECE3B,SAAAC,0DAAwCrkC,EAAAqkC,EAAA7wB,MAAAmB,8HAJvCxM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,UCFFm/B,GAAkC,IAAIl/B,EAAAA,eAEjD,yCCEcm/B,GAAc/2B,EAAeiH,GAC3C,OAAO/U,OAAOqF,OAAO,IAAIyI,EAAQiH,UCDnC,aCSA+vB,GAAA,WAAA,SAAAA,IAAA,IAAAj7B,EAAArJ,KAIUA,KAAAwE,QAA2B,GAM3BxE,KAAAukC,uBAAyB,IAAIC,IAW5BxkC,KAAAykC,QAAyB,IAAIC,EAAAA,YAAc,SAACC,GASnD,OAHAt7B,EAAKs7B,SAAWA,EAChBt7B,EAAKu7B,yBAAyBD,GAEvB,WACLt7B,EAAKs7B,SAAW,KAChBt7B,EAAKw7B,mCAENj9B,KAAKk9B,EAAAA,SAMA9kC,KAAA2kC,SAA4B,YAOpCL,EAAApkC,UAAA8S,IAAA,SAAItO,GACE1E,KAAKiT,IAAIvO,KAIT1E,KAAK2kC,UACP3kC,KAAK+kC,qBAAqBrgC,EAAQ1E,KAAK2kC,UAEzC3kC,KAAKwE,QAAQd,KAAKgB,KAMZ4/B,EAAApkC,UAAA0kC,yBAAA,SAAyBD,GAAzB,IAAAt7B,EAAArJ,KACNA,KAAKwE,QAAQ+E,SAAQ,SAAC7E,GACpB,OAAA2E,EAAK07B,qBAAqBrgC,EAAQigC,OAQ9BL,EAAApkC,UAAA2kC,6BAAA,WAAA,IAAAx7B,EAAArJ,KACNA,KAAKwE,QAAQ+E,SAAQ,SAAC7E,GAAW,OAAA2E,EAAK27B,yBAAyBtgC,OAMzD4/B,EAAApkC,UAAA6kC,qBAAA,SAAqBrgC,EAAuBigC,GAClD,IAAMM,EAAuBvgC,EAAO+N,WAAU,SAAC4B,GAAQ,OAAAswB,EAAS9iC,KAAKwS,MACrErU,KAAKukC,uBAAuBxQ,IAAIrvB,EAAQugC,IAOlCX,EAAApkC,UAAA8kC,yBAAA,SAAyBtgC,GAC/B,IAAMugC,EAAuBjlC,KAAKukC,uBAAuBl5B,IAAI3G,QAChC6C,IAAzB09B,IACFA,EAAqB9wB,cACrBnU,KAAKukC,uBAAuBzQ,OAAOpvB,KASvC4/B,EAAApkC,UAAAgiC,OAAA,SAAOx9B,GAKL,IAAI1D,EAHJhB,KAAKglC,yBAAyBtgC,IAI6B,KAAtD1D,EAAIhB,KAAKwE,QAAQ0gC,WAAU,SAACrhC,GAAM,OAAAA,IAAMa,OAC3C1E,KAAKwE,QAAQg7B,OAAOx+B,EAAG,IAO3BsjC,EAAApkC,UAAA+S,IAAA,SAAIvO,GACF,OAAO1E,KAAKwE,QAAQ6M,SAAS3M,MAnHjC,iBCWA,SAAAygC,IAOUnlC,KAAAolC,WAAa,IAAIZ,WAczBW,EAAAjlC,UAAAmlC,SAAA,SAAYC,EAAoBC,GAC9B,IAAMC,EAAYxlC,KAAKylC,aAAaH,GAcpC,OAbIE,EAAUE,eAAezyB,IAAIsyB,GAC3B18B,EAAAA,aACFC,QAAQF,KACN,iCACA28B,EACA,2CACAD,GAIJE,EAAUE,eAAe1yB,IAAIuyB,GAGxB,WAAM,OAAAC,EAAUE,eAAexD,OAAOqD,KAO/CJ,EAAAjlC,UAAAmL,IAAA,SAAOi6B,GACL,IAAIb,EAAUzkC,KAAKylC,aAAaH,GAAWI,eAAejB,QAI1D,OAHI57B,EAAAA,cACF47B,EAAUzkC,KAAK2lC,wBAAwBlB,EAASa,IAE3Cb,GAMTU,EAAAjlC,UAAAwQ,SAAA,SAASzB,GACP,IAAMq2B,EAAYr2B,EAAMhP,YACFD,KAAK4lC,gBAAgBN,GAC7BzjC,KAAKoN,IAQbk2B,EAAAjlC,UAAA0lC,gBAAA,SAAmBN,GACzB,IAAME,EAAYxlC,KAAKylC,aAAaH,GAMpC,OAJKE,EAAUK,gBACbL,EAAUK,cAAgB,IAAIC,EAAAA,QAC9B9lC,KAAKqlC,SAASC,EAAWE,EAAUK,gBAE9BL,EAAUK,eAMXV,EAAAjlC,UAAAulC,aAAA,SAAgBH,GAQtB,OAPIz8B,EAAAA,aACF7I,KAAK+lC,kBAAkBT,GAGpBtlC,KAAKolC,WAAW/5B,IAAIi6B,IACvBtlC,KAAKgmC,gBAAgBV,GAEhBtlC,KAAKolC,WAAW/5B,IAAIi6B,IAMrBH,EAAAjlC,UAAA8lC,gBAAA,SAAmBV,GACzBtlC,KAAKolC,WAAWrR,IAAIuR,EAAW,CAC7BO,cAAe,KACfH,eAAgB,IAAIpB,MAShBa,EAAAjlC,UAAA6lC,kBAAA,SAAqBT,GAC3B,KAAKA,MAAAA,OAAS,EAATA,EAAWrlC,aACd,MAAM,IAAIyZ,MACR,kBAAkB4rB,EAAS,kEAUzBH,EAAAjlC,UAAAylC,wBAAA,SACNJ,EACAD,GAEA,OAAOC,EAAQ39B,KACb4gB,EAAAA,KAAI,SAACvZ,GACGA,aAAiBq2B,GACrBx8B,QAAQF,KACN,2BACA28B,EACA,oBACAt2B,EACA,+CACAq2B,EAAUW,mIAlIrBh+B,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,WCrBd,IAAM+gC,GAAmB,GAYzBC,GAAA,WAKE,SAAAA,EACUC,EACAC,GADArmC,KAAAomC,aAAAA,EACApmC,KAAAqmC,uBAAAA,SASVF,EAAAjmC,UAAAmL,IAAA,SAAI2I,EAAOsyB,EAAqBC,WAE9B,GAAIA,EAAQ9gC,EAAAA,YAAY+gC,KAAM,CAC5B,QAAsBj/B,IAAlB++B,EACF,OAAOA,EAET,MAAM,IAAI5sB,MACR,gGAIJ,IAAuB,IAAA3U,EAAApB,EAAAO,EAAIlE,KAAKqmC,yBAAuBrhC,EAAAD,EAAAlD,QAAAmD,EAAA/C,KAAA+C,EAAAD,EAAAlD,OAAE,CAApD,IAGG4kC,EAHWzhC,EAAArD,MAGQ0J,IAAI2I,EAAOkyB,GAAkBzgC,EAAAA,YAAY+gC,MAClE,GAAIC,IAAYP,GACd,OAAOO,oGAIX,OAAOzmC,KAAKomC,aAAa/6B,IAAI2I,EAAOsyB,EAAeC,MApCvD,iBCuBE,SAAAG,EACYC,EACAC,EACA53B,GAFAhP,KAAA2mC,SAAAA,EACA3mC,KAAA4mC,SAAAA,EACA5mC,KAAAgP,OAAAA,EAbHhP,KAAA6mC,SAAyC7mC,KAAKgP,OACpD3D,IAAIy7B,IACJl/B,KACCgD,EAAAA,KAAI,SAACqE,GAAU,OAAAA,EAAM83B,aACrBC,EAAAA,iBAGahnC,KAAAinC,kBAAoB,IAAIzC,IAQvCxkC,KAAKknC,kBAAqBlnC,KAAK6mC,SAE5BM,iBAWET,EAAAxmC,UAAAknC,sBAAA,SACLC,EACAC,EACAC,GAHK,IAAAl+B,EAAArJ,UAGL,IAAAunC,IAAAA,EAAA,IAEA,IAAMC,EAAiBD,EAAqB5mC,OACxC,IAAIwlC,GACFnmC,KAAK4mC,SACLW,EAAqB38B,KAAI,SAACm8B,GAAc,OAAAA,EAAUH,aAEpD5mC,KAAK4mC,SAET,OAAO5mC,KAAKynC,qBAAqBJ,GAAYz/B,KAC3CgD,EAAAA,KAAI,SAAC9F,GAAoB,OAApBf,EAAAe,EAAA,GAAc,GAAoB3E,OAAOqnC,MAC9Chf,EAAAA,KAAI,SAACue,GACH,OAAA19B,EAAK2F,OAAO0B,SACV2zB,GAAWyC,GAAwB,CACjCQ,QAAOA,EACPP,UAASA,UAYZL,EAAAxmC,UAAAwnC,gCAAA,SACLL,GADK,IAAAh+B,EAAArJ,KAML,OAAOA,KAAKynC,qBAAqBJ,GAAYz/B,KAC3CgD,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAC6iC,EAAa5iC,EAAA,GAAE6iC,EAAM7iC,EAAA,GACzB,IAAKsE,EAAK49B,kBAAkBh0B,IAAI20B,GAAS,CACvC,IAAMb,EAAYY,EAAcxnC,OAAOkJ,EAAKu9B,UAC5Cv9B,EAAK49B,kBAAkBlT,IAAI6T,EAAQb,GAGrC,OAAO19B,EAAK49B,kBAAkB57B,IAAIu8B,MAEpCpf,EAAAA,KAAI,SAACue,GACH,OAAA19B,EAAK2F,OAAO0B,SACV2zB,GAAWyC,GAAwB,CACjCC,UAASA,UAUXL,EAAAxmC,UAAAunC,qBAAA,SACNJ,GADM,IAAAh+B,EAAArJ,KAGN,OAAO6nC,EAAAA,KAAKR,KAAcz/B,KACxB6hB,EAAAA,WAAU,SAACme,GACT,OAAAA,aAAkBE,EAAAA,gBACb9/B,EAAAA,GAAG,CAAC4/B,EAAQA,IACb7c,EAAAA,cAAc,CAGZ8c,EAAAA,KAAKx+B,EAAKs9B,SAASoB,mBAAmBH,IACtC5/B,EAAAA,GAAG4/B,QAGX7R,EAAAA,UAAUC,EAAAA,kBAId0Q,EAAAxmC,UAAAw6B,YAAA,WACM16B,KAAKknC,mBACPlnC,KAAKknC,kBAAkB/yB,cAIzBnU,KAAKinC,kBAAkB19B,SAAQ,SAACy+B,GAAe,OAAAA,EAAWC,oMArH7DhgC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDA1BZ+iC,EAAAA,gBAEAC,EAAAA,gBAiBOhD,MCRT,IAAMe,GAAwB,iBAmB5B,SAAAkC,EACYC,EACAC,GADAtoC,KAAAqoC,aAAAA,EACAroC,KAAAsoC,YAAAA,EAPHtoC,KAAAuoC,WAAmCvoC,KAAKsoC,YAAYzB,SAASj/B,KACpEgD,EAAAA,KAAI,SAACm8B,GAAc,OAAAA,EAAUH,YAC7B9+B,EAAAA,UAAU9H,KAAKqoC,sBAkBjBD,EAAAloC,UAAAmL,IAAA,SACE2I,EACAsyB,GAEA,OAAOtmC,KAAKuoC,WAAW3gC,KACrBgD,EAAAA,KAAI,SAACg8B,EAAUzE,GACb,OAAAyE,EAASv7B,IACP2I,EACAsyB,MAAAA,EAAAA,EAAiBJ,GAGjB/D,EAAQ18B,EAAAA,YAAY+gC,UAAOj/B,MAG/BuF,EAAAA,QAAO,SAAC07B,GAAa,OAAAA,IAAatC,QAatCkC,EAAAloC,UAAAuoC,SAAA,SACEz0B,GAEA,OAAOhU,KAAKqL,IAAI2I,EAAO,IAAIpM,KACzBkF,EAAAA,QAAO,SAAC47B,GACN,IAAK/oC,MAAM2E,QAAQokC,GACjB,MAAM,IAAIhvB,MACR,mDAAmD1F,EAAMqQ,WAAU,KAGvE,OAAOqkB,EAAU/nC,OAAS,KAE5BgoC,EAAAA,MAAK,SAACppB,EAAKqpB,GAAa,OAAA1kC,EAAIqb,EAAQqpB,KAAW,oBCzErCC,GAAoBnkC,GAClC,IAAI/C,EAEJ,OADA+C,EAAO+N,WAAU,SAACq2B,GAAa,OAACnnC,EAAQmnC,KAAW30B,cAC5CxS,4JDGRsG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAdZgjC,EAAAA,gBAGOzB,wBEuBP,SAAAqC,EAAsBC,GAAtB,IAAA3/B,EAAArJ,KAAsBA,KAAAgpC,gBAAAA,EAFZhpC,KAAA85B,cAAgB,IAAIC,EAAAA,aAWtB/5B,KAAAipC,WAGJ,IAAIzE,IAVN,IAAM0E,EAAkBlpC,KAAKgpC,gBAAgBT,WAAW3gC,KACtD4gB,EAAAA,KAAI,WAAM,OAAAnf,EAAK4/B,WAAWE,YAG5BnpC,KAAK85B,cAAc9mB,IAAIk2B,EAAgBz2B,oBAQjCs2B,EAAA7oC,UAAAkpC,cAAA,SACNC,GAEA,IAAKrpC,KAAKipC,WAAWh2B,IAAIo2B,GAAiB,CACxC,IAAMJ,EAAaJ,GACjB7oC,KAAKgpC,gBAAgBP,SAASY,IAEhCrpC,KAAKipC,WAAWlV,IAAIsV,EAAgBJ,GAGtC,OAAOjpC,KAAKipC,WAAW59B,IAAIg+B,IAM7BN,EAAA7oC,UAAAopC,cAAA,SACED,GAEA,IAAMJ,EAAajpC,KAAKopC,cAAcC,GACtC,OAAO1pC,MAAM2E,QAAQ2kC,IAAeA,EAAWtoC,OAAS,GAM1DooC,EAAA7oC,UAAAqpC,SAAA,SACEF,GADF,IAAAhgC,EAAArJ,KAGE,OAAIA,KAAKspC,cAAcD,GACdz+B,EAAAA,KAAI,SAAC4+B,GAAa,OAAAngC,EAAKogC,cAAcD,EAAOH,MAE5C,SAACK,GAAgC,OAAAA,IAO5CX,EAAA7oC,UAAAypC,aAAA,SACEN,GADF,IAAAhgC,EAAArJ,KAGE,OAAIA,KAAKspC,cAAcD,GACdz+B,EAAAA,KAAI,SAAC4+B,GAAe,OAAAngC,EAAKugC,YAAYJ,EAAOH,MAE5C,SAACK,GAAkC,OAAAA,IAO9CX,EAAA7oC,UAAA2pC,QAAA,SAAcnlC,EAAW2kC,GACvB,OAAIrpC,KAAKspC,cAAcD,GACdrpC,KAAKypC,cAAc/kC,EAAQ2kC,GAE3B3kC,GAOXqkC,EAAA7oC,UAAA0pC,YAAA,SACEplC,EACA6kC,GAFF,IAAAhgC,EAAArJ,KAIE,OAAIA,KAAKspC,cAAcD,IAAmB1pC,MAAM2E,QAAQE,GAC/CA,EAAQoG,KAAI,SAAClG,GAClB,OAAA2E,EAAKogC,cAAc/kC,EAAQ2kC,MAGtB7kC,GAIHukC,EAAA7oC,UAAAupC,cAAA,SACN/kC,EACA2kC,GAEA,OAAOrpC,KAAKopC,cAAcC,GAAgB/pB,QAAO,SAAChf,EAAQwpC,GACxD,OAAOA,EAAUD,QAAQnlC,EAAQpE,UAChCiH,IAGLwhC,EAAA7oC,UAAAw6B,YAAA,WACE16B,KAAK85B,cAAc3lB,uJA1GtBlM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAvBLijC,wBCmBP,SAAA2B,EACYpN,EACAqN,EACAC,EACApkC,EACA6sB,GALZ,IAAArpB,EAAArJ,KACYA,KAAA28B,KAAAA,EACA38B,KAAAgqC,oBAAAA,EACAhqC,KAAAiqC,iBAAAA,EACAjqC,KAAA6F,OAAAA,EACA7F,KAAA0yB,gBAAAA,EAEV1yB,KAAK0yB,gBACFpB,YACA7e,WAAU,SAAC9Q,GAAU,OAAC0H,EAAK4oB,eAAiBtwB,YAGjDooC,EAAA7pC,UAAAgqC,eAAA,SACEC,GAEA,IAAM5V,EAAUJ,GAAgBC,aAC9BF,IACA,EACA,IAAIO,EAAAA,aAEFroB,GAAqB,IAAIynB,EAAAA,YAC1BE,IAAI,WAAY/zB,KAAKiyB,gBACrB8B,IAAI,OAAQ,kBAEiB,IAArBoW,EAAe,QACxB/9B,EAASA,EAAO2nB,IAAI,QAAS,GAAKoW,EAAQr5B,aAGT,IAAxBq5B,EAAkB,WAC3B/9B,EAASA,EAAO2nB,IAAI,WAAY,GAAKoW,EAAQ3mB,WAG/C,IAAMnZ,EAAMrK,KAAKgqC,oBAAoBpX,eAAe,qBAEpD,OAAO5yB,KAAK28B,KACTtxB,IAAwBhB,EAAK,CAAEkqB,QAAOA,EAAEnoB,OAAMA,IAC9CxE,KAAK5H,KAAKiqC,iBAAiBV,SAASnF,gCAxC1Cn8B,EAAAA,uDAlBQ80B,EAAAA,kBAYAtK,UADAsW,UARA5E,UAOA9S,aCOT,kCAVCoL,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqB29B,IACrB,CACEl+B,QAASqkC,GACTC,SAAUN,gBCVhB,aCCaO,GAAkB,IAAIplC,EAAAA,eACjC,qBCFF,gBCAA,gBCDA,aCEaqlC,GAAqB,IAAIrlC,EAAAA,eACpC,mCCMA,SAAAslC,EAAoBV,GAAA9pC,KAAA8pC,UAAAA,SAEpBU,EAAAtqC,UAAA2pC,QAAA,SAAQnlC,EAAkBpE,GAA1B,IAAA+I,EAAArJ,KAaE,YAZeuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,GAAUA,EAAO+E,UACnBnJ,EAAOmJ,QAAU/E,EAAO+E,QAAQmB,KAAI,SAAC6/B,GAAU,OAAAjrC,OAAAqF,OAAArF,OAAAqF,OAAA,GAC1C4lC,GAAK,CACRC,QAASrhC,EAAKygC,UAAUD,QAAQY,EAAMC,QAASH,UAInDvqC,KAAK2qC,0BAA0BjmC,EAAQpE,GAChCA,GAMDkqC,EAAAtqC,UAAAyqC,0BAAA,SAA0BjmC,EAAapE,GACzCoE,GAAUA,EAAOkmC,2BACnBtqC,EAAOsqC,yBAA2B5qC,KAAK6qC,qBACrCnmC,EAAOkmC,2BAIPlmC,GAAUA,EAAOomC,6BACnBxqC,EAAOwqC,2BAA6B9qC,KAAK6qC,qBACvCnmC,EAAOomC,6BAIPpmC,GAAUA,EAAOqmC,yBACnBzqC,EAAOyqC,uBAAyB/qC,KAAK6qC,qBACnCnmC,EAAOqmC,yBAIPrmC,GAAUA,EAAOsmC,2BACnB1qC,EAAO0qC,yBAA2BhrC,KAAK6qC,qBACrCnmC,EAAOsmC,4BAKLR,EAAAtqC,UAAA2qC,qBAAA,SAAqBI,GAC3B,OAAOA,EAASn+B,QAAO,SAAClN,EAAGoB,EAAGi/B,GAE5B,OAAOj/B,IADGi/B,EAAEr1B,KAAI,SAACsgC,GAAO,OAAAx3B,KAAKC,UAAUu3B,MACxBzL,QAAQ/rB,KAAKC,UAAU/T,gJApD3CqI,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJxB4jC,UCHWoC,GAAkC,CAC7C71B,QAAS,CACPC,IAAK,CACHsd,UAAW,CAETuY,MACE,wjBACFC,KACE,6iBACFC,WACE,miBACFC,WAAY,0CACZC,cAAe,yDACfC,cAAe,yDACfC,SAAU,wCACVC,WAAY,kCACZC,YAAa,2CACbC,SAAU,2CCfLC,GAA+B,IAAI5mC,EAAAA,eAE9C,4CCKA,SAAA6mC,EACYpP,EACAqN,EACAC,GAFAjqC,KAAA28B,KAAAA,EACA38B,KAAAgqC,oBAAAA,EACAhqC,KAAAiqC,iBAAAA,SAGL8B,EAAA7rC,UAAA8S,IAAA,SACL6E,EACAm0B,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAAA,GAEA,IAAMC,EAAQz4B,KAAKC,UAAU,IAEvB4gB,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGZxyB,EAAMrK,KAAKgqC,oBAAoB7W,OACnC,aACA,CACEtb,OAAMA,EACNm0B,OAAMA,EACNE,SAAQA,GAEV,CAAEloB,KAAMioB,EAAaG,IAAKF,IAG5B,OAAOlsC,KAAK28B,KACTG,KAAuBzyB,EAAK8hC,EAAO,CAAE5X,QAAOA,IAC5C3sB,KAAK5H,KAAKiqC,iBAAiBV,SAASuC,MAGlCC,EAAA7rC,UAAAmsC,OAAA,SACLx0B,EACAm0B,EACAM,EACAF,EACAG,GAEA,IAAIngC,EAAS,GACTmgC,IACFngC,EAAS,CAAEmgC,YAAWA,IAGxB,IAAMhY,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGZxyB,EAAMrK,KAAKgqC,oBAAoB7W,OACnC,gBACA,CAAEtb,OAAMA,EAAEm0B,OAAMA,EAAEM,YAAWA,GAAE9sC,OAAAqF,OAAA,CAC7BunC,IAAGA,GAAKhgC,IAGZ,OAAOpM,KAAK28B,KACT6P,MAAwBniC,EAAK,GAAI,CAAEkqB,QAAOA,IAC1C3sB,KAAK5H,KAAKiqC,iBAAiBV,SAASuC,MAGlCC,EAAA7rC,UAAAgiC,OAAA,SACLrqB,EACAm0B,EACAM,GAEA,IAAM/X,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGZxyB,EAAMrK,KAAKgqC,oBAAoB7W,OAAO,gBAAiB,CAC3Dtb,OAAMA,EACNm0B,OAAMA,EACNM,YAAWA,IAGb,OAAOtsC,KAAK28B,KAAK7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,+BA7EzCtsB,EAAAA,uDATQ80B,EAAAA,kBAOAtK,UADAsW,UCFI0D,GAA0B,IAAIvnC,EAAAA,eAEzC,uCCUA,SAAAwnC,EACY/P,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGF4C,EAAAxsC,UAAAysC,uBAAA,SAAuB90B,EAAgBm0B,GAC/C,OAAOhsC,KAAK82B,aAAa3D,OAAO,cAAe,CAAEtb,OAAMA,EAAEm0B,OAAMA,KAGvDU,EAAAxsC,UAAA0sC,WAAA,SAAW/0B,GACnB,IAAI0c,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,qBAOlB,OAJIhlB,IAAW5Q,IACbstB,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,IAG1DA,GAGTmY,EAAAxsC,UAAA8S,IAAA,SAAI6E,EAAgBm0B,EAAgBa,GAClC,IAAMxiC,EAAMrK,KAAK2sC,uBAAuB90B,EAAQm0B,GAE1CG,EAAQz4B,KAAKC,UAAU,IAEvBvH,GAAqB,IAAIynB,EAAAA,YAAaE,IAAI,YAAa8Y,GAEvDtY,EAAUv0B,KAAK4sC,WAAW/0B,GAEhC,OAAO7X,KAAK28B,KAAKG,KAAKzyB,EAAK8hC,EAAO,CAAE5X,QAAOA,EAAEnoB,OAAMA,IAAIxE,KACrDqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtCjE,KAAK8pC,UAAUP,SAASkD,MAI5BC,EAAAxsC,UAAAgiC,OAAA,SAAOrqB,EAAgBm0B,EAAgBa,GACrC,IAAMxiC,EACJrK,KAAK2sC,uBAAuB90B,EAAQm0B,GACpC,IACAtgB,mBAAmBmhB,GAEftY,EAAUv0B,KAAK4sC,WAAW/0B,GAEhC,OAAO7X,KAAK28B,KACT7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,IACrB3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCAjDjDgE,EAAAA,uDAdQ80B,EAAAA,kBAQAtK,UADAsW,wBCcP,SAAA+D,EACYnQ,EACAqN,EACAC,GAFAjqC,KAAA28B,KAAAA,EACA38B,KAAAgqC,oBAAAA,EACAhqC,KAAAiqC,iBAAAA,SAGL6C,EAAA5sC,UAAA6sC,QAAA,SAAQl1B,GACb,OAAO7X,KAAK28B,KACTtxB,IAAkBrL,KAAKgqC,oBAAoB7W,OAAO,QAAS,CAAEtb,OAAMA,KACnEjQ,KACColC,EAAAA,MAAM,SACNhtC,KAAKiqC,iBAAiBN,aAAaW,MAIlCwC,EAAA5sC,UAAA0c,KAAA,SAAK/E,EAAgBm0B,GAC1B,OAAIA,IAAW7kC,EACNnH,KAAK+sC,QAAQl1B,GAAQjQ,KAC1BgD,EAAAA,KAAI,SAACwgC,GACH,OAAIA,EACiBA,EAAMz+B,MAAK,SAAC0+B,GAC7B,YAA4B9jC,IAArB8jC,EAAe,YAIjB,SAKNrrC,KAAK28B,KACTtxB,IACCrL,KAAKgqC,oBAAoB7W,OAAO,OAAQ,CAAEtb,OAAMA,EAAEm0B,OAAMA,KAEzDpkC,KAAK5H,KAAKiqC,iBAAiBV,SAASe,MAI3CwC,EAAA5sC,UAAAC,OAAA,SACE0X,EACAo1B,EACAC,GAEA,IAAMf,EAAQz4B,KAAKC,UAAU,IAEzBvH,EAAS,GASb,OAPI6gC,IACF7gC,EAAS,CAAE6gC,UAAWA,IAEpBC,IACF9gC,EAAwB,gBAAI8gC,GAGvBltC,KAAK28B,KACTG,KACC98B,KAAKgqC,oBAAoB7W,OAAO,aAAc,CAAEtb,OAAMA,GAAIzL,GAC1D+/B,GAEDvkC,KAAK5H,KAAKiqC,iBAAiBV,SAASe,MAGzCwC,EAAA5sC,UAAA4zB,OAAA,SAAOjc,EAAgBm0B,GACrB,IAAIzX,EAAU,IAAIE,EAAAA,YAIlB,OAHI5c,IAAW5Q,IACbstB,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,IAE1Dv0B,KAAK28B,KAAK7I,OACf9zB,KAAKgqC,oBAAoB7W,OAAO,aAAc,CAAEtb,OAAMA,EAAEm0B,OAAMA,IAC9D,CAAEzX,QAAOA,KAIbuY,EAAA5sC,UAAAwrC,SAAA,SAAS7zB,EAAgBm0B,EAAgBmB,GACvC,IAAI5Y,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,sCAElBtI,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,GAE/D,IAAM6Y,GAAyB,IAAIvZ,EAAAA,YAAaE,IAAI,QAASoZ,GAEvD9iC,EAAMrK,KAAKgqC,oBAAoB7W,OAAO,WAAY,CACtDtb,OAAMA,EACNm0B,OAAMA,IAGR,OAAOhsC,KAAK28B,KAAK0Q,IAAIhjC,EAAK+iC,EAAY,CAAE7Y,QAAOA,+BAxFlDtsB,EAAAA,uDAnBQ80B,EAAAA,kBASAtK,UAFAsW,MCHF,IAAMuE,GAAuB,IAAIpoC,EAAAA,eAEtC,oCCMA,SAAAqoC,EACY5Q,EACAqN,EACAC,GAFAjqC,KAAA28B,KAAAA,EACA38B,KAAAgqC,oBAAAA,EACAhqC,KAAAiqC,iBAAAA,SAGLsD,EAAArtC,UAAA2rC,SAAA,SACLh0B,EACAm0B,EACAwB,EACAC,GAEA,IAAIL,EAAa,IAAIvZ,EAAAA,WAEjB7nB,QAAQwhC,KACVJ,EAAaA,EAAWrZ,IAAI,eAAgByZ,IAG1CxhC,QAAQyhC,KACVL,EAAaA,EAAWrZ,IAAI,sBAAuB0Z,IAGrD,IAAMlZ,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGlB,OAAO78B,KAAK28B,KACT6P,MACCxsC,KAAKgqC,oBAAoB7W,OAAO,WAAY,CAAEtb,OAAMA,EAAEm0B,OAAMA,IAC5DoB,EACA,CAAE7Y,QAAOA,IAEV3sB,KAAK5H,KAAKiqC,iBAAiBV,SAAS+D,gCAlC1CrlC,EAAAA,uDAVQ80B,EAAAA,kBAQAtK,UAFAsW,aCoCT,kCA3BCtM,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqB6kC,IACrB,CACEplC,QAAS2nC,GACTrD,SAAUyC,IAEZ,CACE/mC,QAASukC,GACTjiC,YAAamiC,GACbvkC,OAAO,GAET,CACEF,QAAS4nC,GACTtD,SAAU0B,IAEZ,CACEhmC,QAAS6nC,GACTvD,SAAUqC,IAEZ,CACE3mC,QAAS8nC,GACTxD,SAAUkD,gBClChB,aCCaO,GAAmB,IAAI5oC,EAAAA,eAClC,mBAGW6oC,GAA8B,IAAI7oC,EAAAA,eAE7C,+BCRF,gBCCA,2BCME,SAAA8oC,EAAsBC,GAAAjuC,KAAAiuC,QAAAA,SAEfD,EAAA9tC,UAAAguC,WAAA,SACLr2B,EACAm0B,EACAmC,GAEA,OAAOnuC,KAAKiuC,QAAQC,WAAWr2B,EAAQm0B,EAAQmC,IAG1CH,EAAA9tC,UAAAkuC,oBAAA,SACLv2B,EACAm0B,GAEA,OAAOhsC,KAAKiuC,QAAQG,oBAAoBv2B,EAAQm0B,IAG3CgC,EAAA9tC,UAAAmuC,6BAAA,SACLx2B,EACAm0B,GAEA,OAAOhsC,KAAKiuC,QAAQI,6BAA6Bx2B,EAAQm0B,IAGpDgC,EAAA9tC,UAAAouC,0BAAA,SACLz2B,EACAm0B,GAEA,OAAOhsC,KAAKiuC,QAAQK,0BAA0Bz2B,EAAQm0B,4IAhCzD/jC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLopC,wBCKP,SAAAC,EAAsBP,GAAAjuC,KAAAiuC,QAAAA,SAEtBO,EAAAtuC,UAAAuuC,cAAA,SACE52B,EACAm0B,EACA0C,GAEA,OAAO1uC,KAAKiuC,QAAQQ,cAAc52B,EAAQm0B,EAAQ0C,4IAXrDzmC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLwpC,wBCQP,SAAAC,EAAsBX,GAAAjuC,KAAAiuC,QAAAA,SAEfW,EAAA1uC,UAAA2uC,cAAA,SACLh3B,EACAm0B,EACA8C,GAEA,OAAO9uC,KAAKiuC,QAAQY,cAAch3B,EAAQm0B,EAAQ8C,IAG7CF,EAAA1uC,UAAA6uC,WAAA,SACLl3B,EACAm0B,EACAgD,GAEA,OAAOhvC,KAAKiuC,QAAQc,WAAWl3B,EAAQm0B,EAAQgD,IAG1CJ,EAAA1uC,UAAA+uC,QAAA,SACLp3B,EACAm0B,EACAkD,GAEA,OAAOlvC,KAAKiuC,QAAQgB,QAAQp3B,EAAQm0B,EAAQkD,IAGvCN,EAAA1uC,UAAAivC,QAAA,SAAQt3B,EAAgBm0B,GAC7B,OAAOhsC,KAAKiuC,QAAQkB,QAAQt3B,EAAQm0B,IAG/B4C,EAAA1uC,UAAAkvC,kBAAA,SACLv3B,EACAm0B,GAEA,OAAOhsC,KAAKiuC,QAAQmB,kBAAkBv3B,EAAQm0B,4IAtCjD/jC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALLkqC,UCEIC,GAA2B,IAAIpqC,EAAAA,eAE1C,6BCHF,2BCME,SAAAqqC,EAAsBtB,GAAAjuC,KAAAiuC,QAAAA,SAEtBsB,EAAArvC,UAAAsvC,gBAAA,WACE,OAAOxvC,KAAKiuC,QAAQwB,oBAGtBF,EAAArvC,UAAAwvC,eAAA,SACE73B,EACAm0B,EACA2D,EACAC,GAEA,OAAO5vC,KAAKiuC,QAAQyB,eAAe73B,EAAQm0B,EAAQ2D,EAAUC,4IAhBhE3nC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJL0qC,UCEIC,GAA0B,IAAI5qC,EAAAA,eAEzC,4BCHF,2BCME,SAAA6qC,EAAsB9B,GAAAjuC,KAAAiuC,QAAAA,SAEf8B,EAAA7vC,UAAAC,OAAA,SACL0X,EACAm0B,EACAgE,GAEA,OAAOhwC,KAAKiuC,QAAQ9tC,OAAO0X,EAAQm0B,EAAQgE,IAGtCD,EAAA7vC,UAAA6zB,IAAA,SACLlc,EACAm0B,EACAiE,GAEA,OAAOjwC,KAAKiuC,QAAQla,IAAIlc,EAAQm0B,EAAQiE,IAG1CF,EAAA7vC,UAAAgwC,aAAA,WACE,OAAOlwC,KAAKiuC,QAAQkC,yJAvBvBloC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLirC,UCEIC,GAA6B,IAAInrC,EAAAA,eAE5C,4BAEWorC,GAA6B,IAAIprC,EAAAA,eAE5C,4BAEWqrC,GAAuB,IAAIrrC,EAAAA,eAEtC,yBCRF,2BCME,SAAAsrC,EAAsBvC,GAAAjuC,KAAAiuC,QAAAA,SAEfuC,EAAAtwC,UAAAuwC,2BAAA,SACLzE,EACA0E,EACAvC,EACAt2B,GAEA,OAAO7X,KAAKiuC,QAAQwC,2BAClBzE,EACA0E,EACAvC,EACAt2B,4IAhBL5P,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLwrC,UCCIC,GAAiC,IAAI1rC,EAAAA,eAEhD,gCAEW2rC,GAAsC,IAAI3rC,EAAAA,eAErD,kDCFA,SAAA4rC,EAAoBhH,GAAA9pC,KAAA8pC,UAAAA,SAEpBgH,EAAA5wC,UAAA2pC,QAAA,SAAQnlC,EAAmBpE,GAA3B,IAAA+I,EAAArJ,KA2BE,YA1BeuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,EAAO+E,UACTnJ,EAAOmJ,QAAU/E,EAAO+E,QAAQmB,KAAI,SAAC6/B,GACnC,OAAAphC,EAAK0nC,kBAAkBtG,OAIvB/lC,EAAOssC,eACT1wC,EAAO0wC,aAAetsC,EAAOssC,aAAapmC,KAAI,SAACqmC,GAAgB,OAAAzxC,OAAAqF,OAAArF,OAAAqF,OAAA,GAC1DosC,GAAW,CACdxnC,QAASwnC,EAAYxnC,QAAQmB,KAAI,SAAC6/B,GAAU,OAAAjrC,OAAAqF,OAAArF,OAAAqF,OAAA,GACvC4lC,GAAK,CACRyG,WAAY7nC,EAAK0nC,kBAAkBtG,EAAMyG,uBAK3CxsC,EAAOysC,qBACT7wC,EAAO6wC,mBAAqBzsC,EAAOysC,mBAAmBvmC,KAAI,SAAC6/B,GACzD,OAAAphC,EAAK0nC,kBAAkBtG,OAIpBnqC,GAGDwwC,EAAA5wC,UAAA6wC,kBAAA,SAAkBrsC,GACxB,OAAAlF,OAAAqF,OAAArF,OAAAqF,OAAA,GACKH,GAAM,CACTgmC,QAAS1qC,KAAK8pC,UAAUD,QAAQnlC,EAAOgmC,QAASH,+IArCrDtiC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJxB4jC,wBCLF,SAAAqI,YASSA,EAAAC,uBAAP,SAA8BC,GAC5B,IAAMC,GAA2C,GAAlC,IAAI3sC,MAAO4sC,oBAM1B,MAAO,IADMD,GAAU,EAAKD,EAAS,IAAM,IAAOA,EAAS,IAAM,KAJnDG,KAAKC,IAAID,KAAKE,MAAMJ,EAAS,KACxCltB,WACAutB,SAAS,EAAG,KAGO,KAFLL,EAAS,IAAIltB,WAAWutB,SAAS,EAAG,MAKhDR,EAAAS,sBAAP,SAA6BC,EAAcC,GACzC,OAAUD,EAAI,KACXC,EAAwB,WAAb,YACXX,EAAUC,0BAGRD,EAAAY,sBAAP,SAA6BC,GAC3B,OAAO,IAAIrtC,KACT,GAAGqtC,EAASC,UAAU,EAAG,IAAMd,EAAUC,wBAAuB,IAE/Dc,cACAD,UAAU,EAAG,wBCvBpB,SAAAE,YAGEA,EAAAlyC,UAAA2pC,QAAA,SACEnlC,EACApE,GAYA,YAVeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,EAAO2tC,yBACT/xC,EAAO+xC,uBAAyBryC,KAAKsyC,YACnC5tC,EAAO2tC,yBAIJ/xC,GAQD8xC,EAAAlyC,UAAAoyC,YAAA,SAAYR,GAMlB,OAAUA,EAAI,KALI,IAAIltC,MAAO2tC,mBAAmB,GAAI,CAClDC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAEiB,MAAMtB,GAAUC,kJAhC9CppC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,6BCOxB,SAAAwtC,EAAoB7I,GAAA9pC,KAAA8pC,UAAAA,SAEpB6I,EAAAzyC,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAcE,YAVeuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,EAAO+E,UACTnJ,EAAOmJ,QAAU/E,EAAO+E,QAAQmB,KAAI,SAAC6/B,GACnC,OAAAphC,EAAK0nC,kBAAkBtG,OAIpBnqC,GAGDqyC,EAAAzyC,UAAA6wC,kBAAA,SAAkBrsC,GACxB,OAAAlF,OAAAqF,OAAArF,OAAAqF,OAAA,GACKH,GAAM,CACTgmC,QAAS1qC,KAAK8pC,UAAUD,QAAQnlC,EAAOgmC,QAASH,+IAzBrDtiC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJxB4jC,UCJW6J,GAAsC,CACjDt9B,QAAS,CACPC,IAAK,CACHsd,UAAW,CACTggB,mBACE,qDACF3E,WAAY,uDCGlB,SAAA4E,EACYnW,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZgJ,EAAA5yC,UAAAuuC,cAAA,SACE52B,EACAm0B,EACA0C,GAEA,IAAItB,GAAa,IAAIvZ,EAAAA,YAAaE,IAAI,eAAgB2a,GAQtD,OANAtB,EAAaA,EAAWrZ,IACtB,SACA,ugBAIK/zB,KAAK28B,KACT0Q,IACCrtC,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,cACxC,GACA,CACE5/B,OAAQghC,IAGXxlC,KAAK5H,KAAK8pC,UAAUP,SAASe,MAGxBwI,EAAA5yC,UAAA6yC,gBAAA,SAAgBl7B,GACxB,IAAMm7B,EAAe,SAAWn7B,EAAS,UACzC,OAAO7X,KAAK82B,aAAa5D,YAAY8f,8BAlCxC/qC,EAAAA,uDATQ80B,EAAAA,kBAOAtK,UADAsW,UCDIkK,GAAqB,IAAI/tC,EAAAA,eACpC,qBAGWguC,GAA0B,IAAIhuC,EAAAA,eAEzC,uBAEWiuC,GAAqB,IAAIjuC,EAAAA,eACpC,qBAGWkuC,GAAgC,IAAIluC,EAAAA,eAE/C,6CCDA,SAAAmuC,EACY1W,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGFuJ,EAAAnzC,UAAA6yC,gBAAA,SAAgBl7B,GACxB,IAAMm7B,EAAe,SAAWn7B,EAAS,UACzC,OAAO7X,KAAK82B,aAAa5D,YAAY8f,IAGhCK,EAAAnzC,UAAA2uC,cAAA,SACLh3B,EACAm0B,EACA8C,GAIA,OAFAA,EAAU9uC,KAAK8pC,UAAUD,QAAQiF,EAASqE,IAEnCnzC,KAAK28B,KACTG,KACC98B,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,sBACxC8C,EACA,CACEva,SAAS,IAAIE,EAAAA,aAAcV,IAAI,eAAgB,sBAGlDnsB,KAAK5H,KAAK8pC,UAAUP,SAAS0J,MAG3BI,EAAAnzC,UAAA6uC,WAAA,SACLl3B,EACAm0B,EACAgD,GAEA,OAAOhvC,KAAK28B,KAAK0Q,IACfrtC,KAAK82B,aAAa3D,OAAO,qBAAsB,CAAEtb,OAAMA,EAAEm0B,OAAMA,IAC/D,GACA,CACE5/B,OAAQ,CAAE4iC,UAAWA,MAKpBqE,EAAAnzC,UAAA+uC,QAAA,SACLp3B,EACAm0B,EACAkD,GAEA,OAAOlvC,KAAK28B,KAAK0Q,IACfrtC,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,gBACxC,GACA,CACE5/B,OAAQ,CAAE8iC,eAAgBA,MAKzBmE,EAAAnzC,UAAAivC,QAAA,SAAQt3B,EAAgBm0B,GAC7B,OAAOhsC,KAAK28B,KACTtxB,IAAIrL,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,iBAC5CpkC,KAAK5H,KAAK8pC,UAAUP,SAAS+F,MAG3B+D,EAAAnzC,UAAAkvC,kBAAA,SACLv3B,EACAm0B,GAEA,OAAOhsC,KAAK28B,KACTtxB,IACCrL,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,kBAEzCpkC,KACColC,EAAAA,MAAM,iBACNhtC,KAAK8pC,UAAUH,aAAa2F,gCA3EnCrnC,EAAAA,uDAhBQ80B,EAAAA,kBAcAtK,UAFAsW,MCAT,kBAIE,SAAAuK,EACY3W,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZwJ,EAAApzC,UAAAuvC,iBAAA,WACE,OAAOzvC,KAAK28B,KACTtxB,IACCrL,KAAK82B,aAAa5D,YAbK,iBAexBtrB,KACCgD,EAAAA,KAAI,SAAC2oC,GAAoB,OAAAA,EAAgBC,gBACzCxzC,KAAK8pC,UAAUH,aAAamG,MAIlCwD,EAAApzC,UAAAwvC,eAAA,SACE73B,EACAm0B,EACAyH,EACAC,GAEA,IAAItG,GAAa,IAAIvZ,EAAAA,YAAaE,IAAI,cAAe0f,GAWrD,YAV4BlsC,IAAxBmsC,IACFtG,EAAaA,EAAWrZ,IAAI,sBAAuB2f,IAGrDtG,EAAaA,EAAWrZ,IACtB,SACA,ugBAIK/zB,KAAK28B,KACT0Q,IACCrtC,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,eACxC,GACA,CACE5/B,OAAQghC,IAGXxlC,KAAK5H,KAAK8pC,UAAUP,SAASe,MAGxBgJ,EAAApzC,UAAA6yC,gBAAA,SAAgBl7B,GACxB,IAAMm7B,EAAe,SAAWn7B,EAAS,UACzC,OAAO7X,KAAK82B,aAAa5D,YAAY8f,8BAjDxC/qC,EAAAA,uDAdQ80B,EAAAA,kBAUAtK,UAFAsW,MCQT,kBAIE,SAAA4K,EACYhX,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,EAEe,oBAAd8J,YACT5zC,KAAK6zC,UAAY,IAAID,kBAMfD,EAAAzzC,UAAA6yC,gBAAA,SAAgBl7B,GACxB,IAAMm7B,EAAe,SAAWn7B,EAAS,UACzC,OAAO7X,KAAK82B,aAAa5D,YAAY8f,IAGhCW,EAAAzzC,UAAAC,OAAA,SACL0X,EACAm0B,EACAgE,GAHK,IAAA3mC,EAAArJ,KASL,OAJAgwC,EAAiBhwC,KAAK8pC,UAAUD,QAC9BmG,EACAM,IAEKtwC,KAAK8zC,mBAAmBj8B,EAAQm0B,GAAQpkC,KAC7CgD,EAAAA,KAAI,SAAC2J,GACH,IAAMw/B,EAAY1qC,EAAK2qC,aAAaz/B,EAAK0/B,cAAcxJ,OACvD,MAAO,CACLpgC,IAAKkK,EAAK2/B,QACVC,WAAY9qC,EAAK+qC,4BACfpE,EACAz7B,EAAK4/B,WAAW1J,MAChBsJ,GAEFE,cAAeF,MAGnBM,EAAAA,UAAS,SAACC,GAER,OAAOjrC,EAAKkrC,sBAAsBD,EAAIjqC,IAAKiqC,EAAIH,YAAYvsC,KACzDgD,EAAAA,KAAI,SAAC4pC,GAAa,OAAAnrC,EAAKorC,8BAA8BD,MACrDH,EAAAA,UAAS,SAACK,GAIR,OAHAA,EAAoC,eAClC1E,EAAe2E,eACjBD,EAAqC,iBAAI,EAClCrrC,EAAKurC,4BACV/8B,EACAm0B,EACA0I,GACA9sC,KAAKyB,EAAKygC,UAAUP,SAAS8G,cAOlCsD,EAAAzzC,UAAA6zB,IAAA,SACLlc,EACAm0B,EACAiE,GAEA,OAAOjwC,KAAK28B,KAAK0Q,IACfrtC,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,kBACxC,GACA,CACE5/B,OAAQ,CAAE6jC,iBAAkBA,MAKlC0D,EAAAzzC,UAAAiwC,cAAA,WACE,OAAOnwC,KAAK28B,KACTtxB,IAAsBrL,KAAK82B,aAAa5D,YA9EnB,cA+ErBtrB,KACCgD,EAAAA,KAAI,SAACiqC,GAAiB,OAAAA,EAAaC,aACnC90C,KAAK8pC,UAAUH,aAAa4G,MAIxBoD,EAAAzzC,UAAA4zC,mBAAA,SACRj8B,EACAm0B,GAEA,OAAOhsC,KAAK28B,KAAKtxB,IACfrL,KAAK+yC,gBAAgBl7B,GACnBm0B,EACA,+CAII2H,EAAAzzC,UAAAq0C,sBAAA,SACRL,EACAC,GAEA,IAAM5f,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,oCAChBkY,OAAQ,cAEN3H,EAAa,IAAIvZ,EAAAA,WAAW,CAAEJ,QAAS,IAAItB,KAK/C,OAJA3yB,OAAO6f,KAAK80B,GAAY5qC,SAAQ,SAAChJ,GAC/B6sC,EAAaA,EAAW5Y,OAAOj0B,EAAK4zC,EAAW5zC,OAG1CP,KAAK28B,KAAKG,KAAKoX,EAAS9G,EAAY,CACzC7Y,QAAOA,EACPhe,aAAc,UAIRo9B,EAAAzzC,UAAA00C,4BAAA,SACR/8B,EACAm0B,EACAmI,GAEA,IAAI/G,EAAa,IAAIvZ,EAAAA,WAAW,CAAEJ,QAAS,IAAItB,KAC/C3yB,OAAO6f,KAAK80B,GAAY5qC,SAAQ,SAAChJ,GAC/B6sC,EAAaA,EAAW5Y,OAAOj0B,EAAK4zC,EAAW5zC,OAGjD,IAAMg0B,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGlB,OAAO78B,KAAK28B,KAAKG,KACf98B,KAAK+yC,gBAAgBl7B,GAAUm0B,EAAS,wBACxCoB,EACA,CAAE7Y,QAAOA,KAILof,EAAAzzC,UAAAk0C,4BAAA,SACNpE,EACAmE,EACAF,GAEA,IAAM7nC,EAASpM,KAAKg0C,aAAaG,GAuCjC,OAtCA/nC,EAAO6nC,EAA0C,4BAC/CjE,EAAegF,kBACjB5oC,EAAO6nC,EAAgC,kBAAKjE,EAAeiF,SAASjxB,KACpE5X,EAAO6nC,EAAkC,oBAAKjE,EAAekF,WACR,SAAjDjB,EAA2C,4BAC7C7nC,EAAO6nC,EAAuC,yBAC5CjE,EAAemF,YACflB,EAA4C,6BAC5CjE,EAAeoF,YAEjBhpC,EAAO6nC,EAA4C,8BACjDjE,EAAemF,YACjB/oC,EAAO6nC,EAA2C,6BAChDjE,EAAeoF,YAEnBhpC,EAAO6nC,EAA+B,iBAAKjE,EAAeqF,IAG1DjpC,EAAO6nC,EAAqC,uBAC1CjE,EAAesF,eAAeC,QAAQ3kB,QACxCxkB,EAAO6nC,EAAuC,yBAC5CjE,EAAesF,eAAeE,UAChCppC,EAAO6nC,EAAsC,wBAC3CjE,EAAesF,eAAeG,SAChCrpC,EAAO6nC,EAAqC,uBAC1CjE,EAAesF,eAAeI,MAC9B,IACA1F,EAAesF,eAAeK,MAChCvpC,EAAO6nC,EAAkC,oBACvCjE,EAAesF,eAAeM,KAC5B5F,EAAesF,eAAeO,OAChCzpC,EAAO6nC,EAAoC,sBACzCjE,EAAesF,eAAeO,OAAOC,aAEvC1pC,EAAO6nC,EAAoC,sBAAK,GAElD7nC,EAAO6nC,EAAwC,0BAC7CjE,EAAesF,eAAeS,WACzB3pC,GAGDunC,EAAAzzC,UAAAu0C,8BAAA,SAA8BuB,GAMpC,IALA,IAEMC,EAFSj2C,KAAK6zC,UAAUqC,gBAAgBF,EAAM,YACxBG,qBAAqB,QAAQ,GAC7BA,qBAAqB,SAE3CpyB,EAAS,GACN/iB,EAAI,EAAGi1C,EAAOj1C,GAAIA,IAAK,CAC9B,IAAMo1C,EAAQH,EAAOj1C,GAEY,OAA/Bo1C,EAAMC,aAAa,SACa,KAAhCD,EAAMC,aAAa,WAEnBtyB,EAAOqyB,EAAMC,aAAa,SAAWD,EAAMC,aAAa,UAI5D,OAAOtyB,GAGD4vB,EAAAzzC,UAAA8zC,aAAA,SAAasC,GACnB,OAAOA,EAAUh3B,QAAO,SAAUtd,EAAQqC,GAGxC,OADArC,EADYqC,EAAK9D,KACH8D,EAAK1C,MACZK,IACN,+BA7MNiG,EAAAA,uDAlBQ80B,EAAAA,kBAaAtK,UAFAsW,wBCDT,SAAAwN,YAWEA,EAAAr2C,UAAAs2C,SAAA,SAASryB,GACP,IAAIsyB,EAAQ,EAOZ,OANIz2C,KAAK02C,WACPD,GAAStyB,EAAK7W,OAAStN,KAAK02C,SAAW,GAAK,GAE1C12C,KAAK22C,eACPF,GAAStyB,EAAKiD,WAAapnB,KAAK22C,aAAe,GAAK,GAE/CF,GAGTF,EAAAr2C,UAAA02C,SAAA,SAASzyB,GACP,OAAOnkB,KAAKw2C,SAASryB,GAAQ,GAG/BoyB,EAAAr2C,UAAA22C,YAAA,SAAY1yB,GACV,OAAOnkB,KAAKw2C,SAASryB,uBCrBvB,SAAA2yB,EACYC,EACAC,GADAh3C,KAAA+2C,eAAAA,EACA/2C,KAAAg3C,aAAAA,SAWZF,EAAA52C,UAAAmlC,SAAA,SAAY4R,GACV,OAAOj3C,KAAKg3C,aAAa3R,SACvB4R,EAAQhoC,MACRjP,KAAKk3C,cAAcD,KAQbH,EAAA52C,UAAAg3C,cAAA,SAAiBD,GAAjB,IAAA5tC,EAAArJ,KACR,OAAOA,KAAK+2C,eACTnvC,KAAKu1B,EAAAA,OAAMh7B,WAAA,EAAA+B,EAAI,GAAGC,OAAO8yC,EAAQ54B,WACjCzW,KACCgD,EAAAA,KAAI,SAACyT,GACH,OAAAhV,EAAK8tC,YAAY94B,EAAQ44B,EAAQhoC,MAAOgoC,EAAQ7xC,cAgB9C0xC,EAAA52C,UAAAi3C,YAAA,SACR94B,EACAinB,EACAlgC,SAEA,OAAOA,EACHA,EAAQiZ,GACRgmB,GAAWiB,EAAyB,QAAhBxgC,EAAEuZ,EAAOhR,eAAO,IAAAvI,EAAAA,EAAI,0KAxD/CmD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXLiyC,EAAAA,sBAGAjS,MCFF,IAAMkS,GAAiB,4BACjBC,GAAsB,iCACtBC,GAAyB,oCAEzBC,GACX,gDAEFC,GAEE,SAAmBpqC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO+pC,IAIlBK,GAEE,SAAmBrqC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOgqC,IAIlBK,GAEE,SAAmBtqC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOiqC,IAIlBK,GAEE,WADS53C,KAAAsN,KAAOkqC,ICvBLK,GAAkB,6BAClBC,GAAuB,4BACvBC,GAA0B,+BAEvCC,GAEE,WADSh4C,KAAAsN,KAAOuqC,IAIlBI,GAEE,SAAmB5qC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOwqC,IAIlBI,GAEE,SAAmB7qC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOyqC,ICfLI,GAAqB,OACrBC,GAAkB,+BAOlBC,GAAyB,aCTzBC,GAAkB,UCOlBC,GAAmB,WACnBC,GAAmB,8BAEnBC,GAAkC,qBAClCC,GAA+B,kBAC/BC,GACX,2BACWC,GAAiC,oBACjCC,GAA+B,kBAC/BC,GAA6B,gBAC7BC,GAA0B,aCG1BC,GACX,6CACWC,GACX,qDACWC,GACX,kDAEWC,GACX,0CACWC,GACX,kDACWC,GACX,+CAEWC,GAAuB,kCACvBC,GAA4B,uCAC5BC,GACX,0CAEWC,GAAuB,kCACvBC,GAA4B,uCAC5BC,GACX,0CACWC,GACX,gDAEWC,GACX,2CACWC,GACX,gDACWC,GACX,mDACWC,GACX,4CAEWC,GAAoB,+BACpBC,GAAyB,oCACzBC,GAA4B,uCAC5BC,GACX,6CAQWC,GACX,wDAEWC,GAAyB,oCACzBC,GACX,yCACWC,GACX,4CAEWC,GAAsB,iCACtBC,GAA2B,sCAC3BC,GACX,yCACWC,GACX,+CAEWC,GAAc,yBACdC,GAAmB,8BACnBC,GAAsB,iCACtBC,GAAoB,+BAEpBC,GAAsB,qCACtBC,GAAsB,iCAEtBC,GAAwB,mCACxBC,GACX,wCACWC,GACX,2CAEWC,GAA4B,8BAC5BC,GAA0B,qCAE1BC,GAAkB,6BAClBC,GAAuB,kCACvBC,GAA0B,qCAC1BC,GACX,2CAEFC,GAEE,SACSvuC,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOgsC,IAMlBuC,GAEE,SAAmBxuC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOisC,IAIlBuC,GAEE,SAAmBzuC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOksC,IAIlBuC,GAAA,SAAAzoC,GAEE,SAAAyoC,EACS1uC,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBG,KAAgCz4C,YAFhDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOmsC,YADsB35C,EAAAi8C,EAAAzoC,KAAxC,CAAwC0oC,IASxCC,GAAA,SAAA3oC,GAEE,SAAA2oC,EAAmB5uC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBG,GAAiCprC,IAAQrN,YAD/CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOosC,YAD0B55C,EAAAm8C,EAAA3oC,KAA5C,CAA4C4oC,IAO5CC,GAAA,SAAA7oC,GAEE,SAAA6oC,EAAmB9uC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBG,KAAgCz4C,YADtCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOqsC,YAD6B75C,EAAAq8C,EAAA7oC,KAA/C,CAA+C8oC,IAO/CC,GAAA,SAAA/oC,GAEE,SAAA+oC,IAAA,IAAAhzC,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBG,KAAgCz4C,YAFhDqJ,EAAAiE,KAAOssC,YADkC95C,EAAAu8C,EAAA/oC,KAApD,CAAoDgpC,IAOpDC,GAAA,SAAAjpC,GAEE,SAAAipC,EAAmBlvC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBK,KAAuC34C,YAD7CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOusC,YAD8B/5C,EAAAy8C,EAAAjpC,KAAhD,CAAgD0oC,IAOhDQ,GAAA,SAAAlpC,GAEE,SAAAkpC,EAAmBnvC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBK,KAAuC34C,YAD7CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOwsC,YADkCh6C,EAAA08C,EAAAlpC,KAApD,CAAoD4oC,IAOpDO,GAAA,SAAAnpC,GAEE,SAAAmpC,EAAmBpvC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBK,KAAuC34C,YAD7CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOysC,YADqCj6C,EAAA28C,EAAAnpC,KAAvD,CAAuD8oC,IAOvDM,GAAA,SAAAppC,GAEE,SAAAopC,IAAA,IAAArzC,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBK,KAAuC34C,YAFvDqJ,EAAAiE,KAAO+sC,YAD0Cv6C,EAAA48C,EAAAppC,KAA5D,CAA4DgpC,IAO5DK,GAAA,SAAArpC,GAEE,SAAAqpC,EACStvC,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBI,KAA6B14C,YAF7CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO2sC,YADmBn6C,EAAA68C,EAAArpC,KAArC,CAAqC0oC,IASrCY,GAAA,SAAAtpC,GAEE,SAAAspC,EAAmBvvC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBI,GAA8BrrC,IAAQrN,YAD5CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO4sC,YADuBp6C,EAAA88C,EAAAtpC,KAAzC,CAAyC4oC,IAOzCW,GAAA,SAAAvpC,GAEE,SAAAupC,EAAmBxvC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBI,KAA6B14C,YADnCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO6sC,YAD0Br6C,EAAA+8C,EAAAvpC,KAA5C,CAA4C8oC,IAO5CU,GAAA,SAAAxpC,GAEE,SAAAwpC,IAAA,IAAAzzC,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBI,KAA6B14C,YAF7CqJ,EAAAiE,KAAO8sC,YAD+Bt6C,EAAAg9C,EAAAxpC,KAAjD,CAAiDgpC,IAOjDS,GAAA,SAAAzpC,GAEE,SAAAypC,EACS1vC,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YAN/CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOgtC,YADwBx6C,EAAAi9C,EAAAzpC,KAA1C,CAA0C0oC,IAa1CgB,GAAA,SAAA1pC,GAEE,SAAA0pC,EAAmB3vC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YADrCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOitC,YAD4Bz6C,EAAAk9C,EAAA1pC,KAA9C,CAA8C4oC,IAO9Ce,GAEE,SAAmB5vC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOktC,IAIlB0C,GAAA,SAAA5pC,GAEE,SAAA4pC,IAAA,IAAA7zC,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YAF/CqJ,EAAAiE,KAAOiuC,YADyBz7C,EAAAo9C,EAAA5pC,KAA3C,CAA2C8oC,IAO3Ce,GAAA,SAAA7pC,GAEE,SAAA6pC,EACS9vC,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YAN/CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOmtC,YADqB36C,EAAAq9C,EAAA7pC,KAAvC,CAAuC0oC,IAavCoB,GAAA,SAAA9pC,GAEE,SAAA8pC,EAAmB/vC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,GAAgCvrC,IAAQrN,YAD9CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOotC,YADyB56C,EAAAs9C,EAAA9pC,KAA3C,CAA2C4oC,IAO3CmB,GAAA,SAAA/pC,GAEE,SAAA+pC,EAAmBhwC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YADrCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOqtC,YAD4B76C,EAAAu9C,EAAA/pC,KAA9C,CAA8C8oC,IAO9CkB,GAAA,SAAAhqC,GAEE,SAAAgqC,IAAA,IAAAj0C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBM,KAA+B54C,YAF/CqJ,EAAAiE,KAAOstC,YADiC96C,EAAAw9C,EAAAhqC,KAAnD,CAAmDgpC,IAOnDiB,GAAA,SAAAjqC,GAEE,SAAAiqC,EACSlwC,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAFxCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOutC,YADc/6C,EAAAy9C,EAAAjqC,KAAhC,CAAgC0oC,IAShCwB,GAAA,SAAAlqC,GAEE,SAAAkqC,EAAmBnwC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,GAAyB1rC,IAAQrN,YADvCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOwtC,YADkBh7C,EAAA09C,EAAAlqC,KAApC,CAAoC4oC,IAOpCuB,GAAA,SAAAnqC,GAEE,SAAAmqC,EAAmBpwC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAD9BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOytC,YADqBj7C,EAAA29C,EAAAnqC,KAAvC,CAAuC8oC,IAOvCsB,GAAA,SAAApqC,GAEE,SAAAoqC,IAAA,IAAAr0C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAFxCqJ,EAAAiE,KAAO0tC,YADmBl7C,EAAA49C,EAAApqC,KAArC,CAAqCgpC,IAOrCqB,GAAA,WACW39C,KAAAsN,KAAO0sC,IAGlB4D,GAEE,SAAmBvwC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO2tC,IAIlB4C,GAAA,WACW79C,KAAAsN,KAAO4tC,IAGlB4C,GAAA,SAAAxqC,GAEE,SAAAwqC,EAAmBzwC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMw4C,KAAiBx4C,YADNqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO6tC,YADuBr7C,EAAAg+C,EAAAxqC,KAAzC,CAAyC+R,IAOzC04B,GAAA,SAAAzqC,GAEE,SAAAyqC,EAAmB1wC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMw4C,GAAkBnrC,IAAQrN,YADfqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO8tC,YAD2Bt7C,EAAAi+C,EAAAzqC,KAA7C,CAA6CmS,IAO7Cu4B,GAAA,SAAA1qC,GAEE,SAAA0qC,EAAmB3wC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMw4C,KAAiBx4C,YADNqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+tC,YAD8Bv7C,EAAAk+C,EAAA1qC,KAAhD,CAAgDiS,IAOhD04B,GAAA,WACWj+C,KAAAsN,KAAOguC,IAGlB4C,GAEE,SAAmB7wC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO0rC,IAIlBmF,GAEE,WADSn+C,KAAAsN,KAAO2rC,IAIlBmF,GAEE,SAAmB/wC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO4rC,IAIlBmF,GAAA,SAAA/qC,GAEE,SAAA+qC,EAAmBhxC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO6rC,YAD6Br5C,EAAAu+C,EAAA/qC,KAA/C,CAA+CyN,IAO/Cu9B,GAAA,SAAAhrC,GAEE,SAAAgrC,EAAmBjxC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO8rC,YADoCt5C,EAAAw+C,EAAAhrC,KAAtD,CAAsD0N,IAOtDu9B,GAAA,SAAAjrC,GAEE,SAAAirC,EAAmBlxC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+rC,YADiCv5C,EAAAy+C,EAAAjrC,KAAnD,CAAmD0N,IAOnDw9B,GAAA,SAAAlrC,GAEE,SAAAkrC,EACSnxC,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBQ,KAA2B94C,YAF3CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOkuC,YADiB17C,EAAA0+C,EAAAlrC,KAAnC,CAAmC0oC,IASnCyC,GAAA,SAAAnrC,GAEE,SAAAmrC,EAAmBpxC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBQ,GAA4BzrC,IAAQrN,YAD1CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOmuC,YADqB37C,EAAA2+C,EAAAnrC,KAAvC,CAAuC4oC,IAOvCwC,GAAA,SAAAprC,GAEE,SAAAorC,EAAmBrxC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBQ,KAA2B94C,YADjCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOouC,YADwB57C,EAAA4+C,EAAAprC,KAA1C,CAA0C8oC,IAO1CuC,GAAA,SAAArrC,GAEE,SAAAqrC,IAAA,IAAAt1C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBQ,KAA2B94C,YAF3CqJ,EAAAiE,KAAOquC,YAD6B77C,EAAA6+C,EAAArrC,KAA/C,CAA+CgpC,ICnZlCsC,GAAiB,4BAE9BC,GAEE,SAAmBxxC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOsxC,ICKLE,GAAqB,gCACrBC,GAA0B,qCAC1BC,GACX,wCACWC,GACX,6CAEWC,GAAmB,8BACnBC,GAAwB,mCACxBC,GAA2B,sCAExCC,GAAA,SAAA/rC,GAEE,SAAA+rC,IAAA,IAAAh2C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBO,KAA6B74C,YAF7CqJ,EAAAiE,KAAOwxC,YADoBh/C,EAAAu/C,EAAA/rC,KAAtC,CAAsCuK,IAOtCyhC,GAAA,SAAAhsC,GAEE,SAAAgsC,EAAmBjyC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBO,KAA6B74C,YADnCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOyxC,YADwBj/C,EAAAw/C,EAAAhsC,KAA1C,CAA0CwK,IAO1CyhC,GAAA,SAAAjsC,GAEE,SAAAisC,EAAmBlyC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBO,KAA6B74C,YADnCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO0xC,YAD2Bl/C,EAAAy/C,EAAAjsC,KAA7C,CAA6CyK,IAO7CyhC,GAAA,SAAAlsC,GAEE,SAAAksC,IAAA,IAAAn2C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBO,KAA6B74C,YAF7CqJ,EAAAiE,KAAO2xC,YADgCn/C,EAAA0/C,EAAAlsC,KAAlD,CAAkD0K,IAOlDyhC,GAEE,SACSpyC,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAO4xC,IAWlBQ,GAEE,SAAmBryC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO6xC,IAIlBQ,GAEE,SAAmBtyC,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO8xC,IC5DLQ,GACX,0CACWC,GACX,kDACWC,GACX,+CACWC,GACX,+CAEFC,GAAA,SAAA1sC,GAEE,SAAA0sC,EACS3yC,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAPxCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOsyC,YAD8B9/C,EAAAkgD,EAAA1sC,KAAhD,CAAgD0oC,IAchDiE,GAAA,SAAA3sC,GAEE,SAAA2sC,EAAmB5yC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAD9BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOuyC,YADqC//C,EAAAmgD,EAAA3sC,KAAvD,CAAuD8oC,IAOvD8D,GAAA,SAAA5sC,GAEE,SAAA4sC,EAAmB7yC,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,GAAyB1rC,IAAQrN,YADvCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOwyC,YADkChgD,EAAAogD,EAAA5sC,KAApD,CAAoD4oC,IAOpDiE,GAAA,SAAA7sC,GAEE,SAAA6sC,IAAA,IAAA92C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBS,KAAwB/4C,YAFxCqJ,EAAAiE,KAAOyyC,YADyCjgD,EAAAqgD,EAAA7sC,KAA3D,CAA2DgpC,okCHmBzD,4EAEA,oFAEA,6/EIjEF,2BCME,SAAA8D,EAAsBC,GAAArgD,KAAAqgD,kBAAAA,EACpBrgD,KAAKqlC,kBAMG+a,EAAAlgD,UAAAmlC,SAAA,WACRrlC,KAAKsgD,oBAMGF,EAAAlgD,UAAAogD,iBAAA,WACRtgD,KAAKqgD,kBAAkBhb,SAAS,CAC9BhnB,OAAQkiC,GACRtxC,MAAOuxC,8IArBZv4C,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALL2xC,aCIP,SAAY2J,0BAFbhkB,EAAAA,SAAQv0B,KAAA,CAAC,gDAFDk4C,MCMF,IAAMM,GAAiB,yBACjBC,GAAyB,iCACzBC,GAAsB,8BACtBC,GAAoB,4BACpBC,GAA4B,oCAC5BC,GAAyB,iCAEzBC,GAAoB,4BACpBC,GAA4B,oCAC5BC,GAAyB,iCAEtCC,GAAA,SAAA7tC,GAEE,SAAA6tC,EACS9zC,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOozC,YADgB5gD,EAAAqhD,EAAA7tC,KAAlC,CAAkCyN,IAclCqgC,GAAA,SAAA9tC,GAEE,SAAA8tC,EACS/zC,GADT,IAAAhE,EAaEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAZ/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOqzC,YADuB7gD,EAAAshD,EAAA9tC,KAAzC,CAAyC0N,IAmBzCqgC,GAAA,SAAA/tC,GAEE,SAAA+tC,EACSh0C,GADT,IAAAhE,EASEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAR/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOszC,YADoB9gD,EAAAuhD,EAAA/tC,KAAtC,CAAsC0N,IAetCsgC,GAAA,SAAAhuC,GAEE,SAAAguC,EACSj0C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOuzC,YADmB/gD,EAAAwhD,EAAAhuC,KAArC,CAAqCyN,IASrCwgC,GAAA,SAAAjuC,GAEE,SAAAiuC,EACSl0C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOwzC,YAD0BhhD,EAAAyhD,EAAAjuC,KAA5C,CAA4C0N,IAS5CwgC,GAAA,SAAAluC,GAEE,SAAAkuC,EACSn0C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOyzC,YADuBjhD,EAAA0hD,EAAAluC,KAAzC,CAAyC0N,IAczCygC,GAAA,SAAAnuC,GAEE,SAAAmuC,EACSp0C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO0zC,YADmBlhD,EAAA2hD,EAAAnuC,KAArC,CAAqCyN,IAcrC2gC,GAAA,SAAApuC,GAEE,SAAAouC,EACSr0C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO2zC,YAD0BnhD,EAAA4hD,EAAApuC,KAA5C,CAA4C0N,IAc5C2gC,GAAA,SAAAruC,GAEE,SAAAquC,EACSt0C,GADT,IAAAhE,EASEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAR/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO4zC,YADuBphD,EAAA6hD,EAAAruC,KAAzC,CAAyC0N,ICjH5B4gC,GAAmB,mCACnBC,GAAwB,uCACxBC,GACX,0CACWC,GAAyB,wCAEzBC,GAAsB,qCACtBC,GACX,0CACWC,GACX,6CAGFC,GAAA,SAAA7uC,GAEE,SAAA6uC,EACS90C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBD,KAAuBr4C,YAFvCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOs0C,YADkB9hD,EAAAqiD,EAAA7uC,KAApC,CAAoCuK,IASpCukC,GAAA,SAAA9uC,GAEE,SAAA8uC,EACS/0C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBD,GAAwBhrC,EAAQpJ,QAAMjE,YAPtDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOu0C,YADsB/hD,EAAAsiD,EAAA9uC,KAAxC,CAAwCwK,IAcxCukC,GAAA,SAAA/uC,GAEE,SAAA+uC,EACSh1C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBD,KAAuBr4C,YAFvCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOw0C,YADyBhiD,EAAAuiD,EAAA/uC,KAA3C,CAA2CyK,IAe3CukC,GAAA,SAAAhvC,GAEE,SAAAgvC,IAAA,IAAAj5C,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBD,KAAuBr4C,YAFvCqJ,EAAAiE,KAAOy0C,YADuBjiD,EAAAwiD,EAAAhvC,KAAzC,CAAyC0K,IAQzCukC,GAAA,SAAAjvC,GAEE,SAAAivC,EACSl1C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO00C,YADqBliD,EAAAyiD,EAAAjvC,KAAvC,CAAuCyN,IASvCyhC,GAAA,SAAAlvC,GAEE,SAAAkvC,EACSn1C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO20C,YADyBniD,EAAA0iD,EAAAlvC,KAA3C,CAA2C0N,IAc3CyhC,GAAA,SAAAnvC,GAEE,SAAAmvC,EACSp1C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO40C,YAD4BpiD,EAAA2iD,EAAAnvC,KAA9C,CAA8C0N,IChFjC0hC,GAAc,qBACdC,GAAmB,0BACnBC,GAAsB,6BAEtBC,GAAY,mBACZC,GAAiB,wBACjBC,GAAoB,2BAEpBC,GAAoB,2BACpBC,GAAyB,gCACzBC,GAA4B,mCAE5BC,GAAa,oBACbC,GAAqB,4BAErBC,GAAqB,4BAErBC,GAAc,qBAEdC,GAAc,qBACdC,GAAsB,6BACtBC,GAAmB,0BAehCC,GAAA,SAAApwC,GAEE,SAAAowC,EAAmBr2C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQs2C,aAAW3jD,YADzBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo1C,YADc5iD,EAAA4jD,EAAApwC,KAAhC,CAAgCuK,IAWhC+lC,GAAA,SAAAtwC,GAEE,SAAAswC,EAAmBv2C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQs2C,aAAW3jD,YADzBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq1C,YADkB7iD,EAAA8jD,EAAAtwC,KAApC,CAAoCwK,IAYpC+lC,GAAA,SAAAvwC,GAEE,SAAAuwC,EAAmBx2C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs1C,YADqB9iD,EAAA+jD,EAAAvwC,KAAvC,CAAuCyK,IAOvC+lC,GAAA,SAAAxwC,GAEE,SAAAwwC,EACSz2C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO01C,YADkBljD,EAAAgkD,EAAAxwC,KAApC,CAAoCyN,IASpCgjC,GAAA,SAAAzwC,GAEE,SAAAywC,EACS12C,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAP/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO21C,YADsBnjD,EAAAikD,EAAAzwC,KAAxC,CAAwC0N,IAcxCgjC,GAAA,SAAA1wC,GAEE,SAAA0wC,EACS32C,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YAF/BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO41C,YADyBpjD,EAAAkkD,EAAA1wC,KAA3C,CAA2C0N,IAiB3CijC,GAAA,SAAA3wC,GAEE,SAAA2wC,EAAmB52C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu1C,YADY/iD,EAAAmkD,EAAA3wC,KAA9B,CAA8BuK,IAW9BqmC,GAAA,SAAA5wC,GAEE,SAAA4wC,EAAmB72C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,OAAQ3+B,EAAQpJ,QAAMjE,YADpCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOw1C,YADgBhjD,EAAAokD,EAAA5wC,KAAlC,CAAkCwK,IAWlCqmC,GAAA,SAAA7wC,GAEE,SAAA6wC,EAAmB92C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOy1C,YADmBjjD,EAAAqkD,EAAA7wC,KAArC,CAAqCyK,IAiBrCqmC,GAEE,SAAmB/2C,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO61C,IAYlBkB,GAAA,SAAA/wC,GAEE,SAAA+wC,EAAmBh3C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ4/B,YAAUjtC,YADxBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO81C,YADoBtjD,EAAAukD,EAAA/wC,KAAtC,CAAsC6I,IAWtCmoC,GAAA,SAAAhxC,GAEE,SAAAgxC,IAAA,IAAAj7C,EACEiK,EAAA9P,KAAAxD,KAAMo4C,KAAgBp4C,YAFfqJ,EAAAiE,KAAO+1C,YADoBvjD,EAAAwkD,EAAAhxC,KAAtC,CAAsC+M,IAWtCkkC,GAAA,SAAAjxC,GAEE,SAAAixC,EAAmBl3C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOg2C,YADcxjD,EAAAykD,EAAAjxC,KAAhC,CAAgC6I,IAOhCqoC,GAEE,SAAmBn3C,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOi2C,IAIlBkB,GAAA,SAAAnxC,GAEE,SAAAmxC,EAAmBp3C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk2C,YADqB1jD,EAAA2kD,EAAAnxC,KAAvC,CAAuC6I,IAOvCuoC,GAEE,SAAmBr3C,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOm2C,IC7MLkB,GAAgB,uBAEhBC,GAA2B,kCAC3BC,GAA2B,kCAE3BC,GAAqB,4BAErBC,GAAmB,0BAOhCC,GAAA,SAAA1xC,GAEE,SAAA0xC,EAAmB33C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQs2C,WAAYt2C,EAAQg+B,OAAKrrC,YADvCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq3C,YADe7kD,EAAAklD,EAAA1xC,KAAjC,CAAiCyK,IAajCknC,GAAA,SAAA3xC,GAEE,SAAA2xC,EAAmB53C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,IAAQrN,YADdqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs3C,YAD0B9kD,EAAAmlD,EAAA3xC,KAA5C,CAA4CyN,IAa5CmkC,GAAA,SAAA5xC,GAEE,SAAA4xC,EAAmB73C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,IAAQrN,YADdqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu3C,YAD0B/kD,EAAAolD,EAAA5xC,KAA5C,CAA4C0N,IAU5CmkC,GAEE,SAAmB93C,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOw3C,IAOlBM,GAAA,SAAA9xC,GAEE,SAAA8xC,IAAA,IAAA/7C,EACEiK,EAAA9P,KAAAxD,KAAMo4C,KAAgBp4C,YAFfqJ,EAAAiE,KAAOy3C,YADkBjlD,EAAAslD,EAAA9xC,KAApC,CAAoC+I,aC7DpBgpC,GAAkBha,EAAYxzB,GAC5C,OAAIA,IAAW5Q,EACNokC,EAAKia,KAEPja,EAAKrnB,cAkBEuhC,GAAoBthD,GAClC,MACmB,aAAjBA,EAAMuhD,QACgB,SAAtBvhD,EAAMwhD,mBAfsB,KAAAzZ,EAgBX/nC,EAAMyhD,WAhBK1Z,EAAA,KACvBA,EAAOjiC,WAAW,sBADKiiC,WAuBhB2Z,GAAgBC,GAC9B,MAAO,WAAWA,WAqBJC,GAAa7Z,GAC3B,OAAOA,EAAOjiC,WAAW,SCrDpB,IAAM+7C,GAAmB,+BACnBC,GAAwB,oCACxBC,GAA2B,uCAE3BC,GAAiB,6BACjBC,GAAyB,qCACzBC,GAAsB,kCAInCC,GAEE,SACS/4C,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOw4C,IAUlBO,GAAA,SAAA/yC,GAEE,SAAA+yC,EAAmBh5C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiBiN,GAAkBh4C,EAAQg+B,KAAMh+B,EAAQwK,UAAQ7X,YADtDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO04C,YADyBlmD,EAAAumD,EAAA/yC,KAA3C,CAA2CyK,IAO3CuoC,GAAA,SAAAhzC,GAEE,SAAAgzC,EAAmBj5C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,OAAQ3+B,EAAQpJ,QAAMjE,YADpCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOy4C,YADsBjmD,EAAAwmD,EAAAhzC,KAAxC,CAAwCwK,IAoBxCyoC,GAAA,SAAAjzC,GAEE,SAAAizC,EAAmBl5C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQs2C,aAAW3jD,YADzBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO24C,YADgBnmD,EAAAymD,EAAAjzC,KAAlC,CAAkCuK,IA2BlC2oC,GAAA,SAAAlzC,GAEE,SAAAkzC,EAAmBn5C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,SAAOhsC,YADrBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO44C,YADuBpmD,EAAA0mD,EAAAlzC,KAAzC,CAAyCyK,IAsBzC0oC,GAAA,SAAAnzC,GAEE,SAAAmzC,EAAmBp5C,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo4C,GAAiB/qC,EAAQ2+B,OAAQ3+B,EAAQpJ,QAAMjE,YADpCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO64C,YADoBrmD,EAAA2mD,EAAAnzC,KAAtC,CAAsCwK,mvDAzFC,4JCG1B4oC,GAGT74C,EAAAA,sBAAsCsqC,OAKJ,SAACrqC,GAA0B,OAAAA,EAAMs9B,OAH1Dub,GAGT34C,EAAAA,eAAe04C,GAAiBE,IAEvBC,GAA+B,SAC1C7a,GAEA,OAAOh+B,EAAAA,eACL24C,IACA,SAAC74C,GACC,OAAA4T,GAAmC5T,EAAOk+B,OAInC8a,GAAyB,SACpC9a,GAEA,OAAOh+B,EAAAA,eACL24C,IACA,SAAC74C,GACC,OAAAgR,GAAoBhR,EAAOk+B,OAIpB+a,GAAiC,SAC5C/a,GAEA,OAAOh+B,EAAAA,eACL24C,IACA,SAAC74C,GACC,OAAA2T,GAAuB3T,EAAOk+B,OAIvBgb,GAA4C,SACvDhb,GAEA,OAAOh+B,EAAAA,eACL24C,IACA,SAAC74C,GACC,OAAA0T,GAAkC1T,EAAOk+B,OAIlCib,GAAgC,SAC3Cjb,GAEA,OAAOh+B,EAAAA,eAAe84C,GAAuB9a,IAAS,SAACl+B,GACrD,OAAOA,GAASA,EAAMrE,QAAUqE,EAAMrE,QAAU,OAIvCy9C,GAA8B,SACzClb,EACAC,GAEA,OAAOj+B,EAAAA,eACLi5C,GAA8Bjb,IAC9B,SAACl+B,GACC,OAAOA,EACHA,EAAMnB,MAAK,SAAC89B,GAAU,OAAAA,EAAMC,QAAQ1mB,OAASioB,UAC7C1kC,SAQ4B,SAACuG,GAA0B,OAAAA,EAAM0jB,QAH1D21B,GAGTn5C,EAAAA,eAAe04C,GAAiBU,OAOlC,SAACt5C,GAA0B,OAAAA,EAAMu5C,UALtBC,GAGTt5C,EAAAA,eACF04C,GAAiBa,uWCtFjB,SAAAC,EACYx3C,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAQZotC,EAAAtnD,UAAAunD,QAAA,SAAQzb,GACN,OAAOhsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOs3C,GAA0C1b,MASrDwb,EAAAtnD,UAAAynD,cAAA,SAAc3b,GACZ,OAAOhsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOw3C,GAAgD5b,MAS3Dwb,EAAAtnD,UAAA6+B,SAAA,SAASiN,GACP,OAAOhsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOy3C,GAAkD7b,IAKzD8b,EAAAA,UAAS,SAAC/oB,GAAa,OAACA,EAAWgpB,EAAAA,MAAM,GAAKC,EAAAA,SAC9CjgD,EAAAA,yBAOIy/C,EAAAtnD,UAAA+nD,mBAAA,WAEN,MAAO,QADYxW,KAAKyW,SAAS7jC,SAAS,IAAI8jC,OAAO,EAAG,IAS1DX,EAAAtnD,UAAAorC,WAAA,SAAWxmC,OACT+S,EAAM/S,EAAA+S,OACNo1B,EAASnoC,EAAAmoC,UACTC,EAAepoC,EAAAooC,gBACfkb,EAAStjD,EAAAsjD,UAWHzE,EAAa3jD,KAAKioD,qBAUxB,OATAjoD,KAAKgQ,MAAMU,SACT,IAAI23C,GAAuB,CACzBD,UAASA,EACTvwC,OAAMA,EACNo1B,UAASA,EACTC,gBAAeA,EACfyW,WAAUA,KAGP3jD,KAAK2nD,cAAchE,IAQ5B6D,EAAAtnD,UAAAooD,mBAAA,SAAmBxjD,OACjB+S,EAAM/S,EAAA+S,OACNm0B,EAAMlnC,EAAAknC,OACNoc,EAAStjD,EAAAsjD,UAQHzE,EAAa3jD,KAAKioD,qBACxBjoD,KAAKgQ,MAAMU,SACT,IAAI63C,GAAsB,CACxB1wC,OAAMA,EACNm0B,OAAMA,EACNoc,UAASA,EACTzE,WAAUA,MAUhB6D,EAAAtnD,UAAAsoD,SAAA,SAAS1jD,OACPknC,EAAMlnC,EAAAknC,OACNn0B,EAAM/S,EAAA+S,OACNuwC,EAAStjD,EAAAsjD,UAMTpoD,KAAKgQ,MAAMU,SACT,IAAI+3C,GAAqB,CACvB5wC,OAAMA,EACNm0B,OAAMA,EACNoc,UAASA,MASfZ,EAAAtnD,UAAAwoD,WAAA,SAAW1c,GACT,OAAOhsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOu4C,GAAiD3c,MAY5Dwb,EAAAtnD,UAAA0oD,aAAA,SACE5c,EACAC,GAEA,OAAOjsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOu4C,GAAiD3c,IACxDphC,EAAAA,KAAI,SAACnB,GACH,IAAMo/C,EAAkBp/C,EAAQqD,QAC9B,SAAC29B,GAAU,OAAAA,EAAMC,QAAQ1mB,OAASioB,KAEpC,OAAO4c,EACHA,EAAgBA,EAAgBloD,OAAS,QACzC4G,OAaVigD,EAAAtnD,UAAA4oD,SAAA,SACEjxC,EACAm0B,EACAC,EACAC,GAEAlsC,KAAKgQ,MAAMU,SACT,IAAIq4C,GAAyB,CAC3BlxC,OAAMA,EACNm0B,OAAMA,EACNC,YAAWA,EACXC,SAAQA,MAYdsb,EAAAtnD,UAAAqrC,WAAA,SACE1zB,EACAm0B,EACAgd,GAHF,IAAA3/C,EAAArJ,KAKEgpD,EAASz/C,SAAQ,SAACmhC,GAChBrhC,EAAK2G,MAAMU,SACT,IAAIq4C,GAAyB,CAC3BlxC,OAAMA,EACNm0B,OAAMA,EACNC,YAAavB,EAAQuB,YACrBC,SAAUxB,EAAQwB,gBAa1Bsb,EAAAtnD,UAAA+oD,YAAA,SAAYpxC,EAAgBm0B,EAAgBM,GAC1CtsC,KAAKgQ,MAAMU,SACT,IAAIw4C,GAA4B,CAC9BrxC,OAAMA,EACNm0B,OAAMA,EACNM,YAAa,GAAGA,MAatBkb,EAAAtnD,UAAAipD,YAAA,SACEtxC,EACAm0B,EACAM,EACAJ,GAEIA,EAAW,EACblsC,KAAKgQ,MAAMU,SACT,IAAI04C,GAA4B,CAC9BvxC,OAAMA,EACNm0B,OAAMA,EACNM,YAAa,GAAGA,EAChBJ,SAAUA,KAIdlsC,KAAKipD,YAAYpxC,EAAQm0B,EAAQM,IAUrCkb,EAAAtnD,UAAAmpD,SAAA,SAASrd,EAAgBC,GACvB,OAAOjsC,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACEk5C,GAA+Ctd,EAAQC,MAY7Dub,EAAAtnD,UAAAqpD,YAAA,SAAYvd,EAAgBn0B,EAAgBs1B,GAC1CntC,KAAKgQ,MAAMU,SACT,IAAI84C,GAA2B,CAC7B3xC,OAAMA,EACNm0B,OAAMA,EACNmB,MAAKA,MAWXqa,EAAAtnD,UAAAyrC,WAAA,SAAWK,EAAgBn0B,GACzB7X,KAAKgQ,MAAMU,SACT,IAAI+4C,GAAuB,CACzB5xC,OAAMA,EACNm0B,OAAMA,MAWZwb,EAAAtnD,UAAAwpD,WAAA,SAAW1d,EAAgBoc,GAA3B,IAAA/+C,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnC,OAAAxO,EAAK2G,MAAMU,SACT,IAAI+3C,GAAqB,CACvB5wC,OAAMA,EACNm0B,OAAMA,EACNoc,UAASA,qKArUlBngD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZGyM,EAAAA,aAGRqH;;;;;;;;;;;ACOT,IAGM0wC,GAAiB,CACrB,CAAEn9B,QAAS,MAAOo9B,KAAM,OACxB,CAAEp9B,QAAS,MAAOo9B,KAAM,OACxB,CAAEp9B,QAAS,MAAOo9B,KALA,UAOdC,GAAqB3lD,EACtBylD,GAAc,CACjB,CAAEn9B,QAAS,MAAOo9B,KAVE,UAYhBE,GAAoB5lD,EACrBylD,GAAc,CACjB,CAAEn9B,QAAS,MAAOo9B,KAAM,kBAeVG,GAAYC,EAAcC,QAAA,IAAAA,IAAAA,GAAA,GAMxC,IALA,IAAMC,EAAWD,EACbH,GACAD,GACEl/C,EAAWq/C,EAAKvzC,MAAM,KAAK0zC,UAC7BC,EAAQ,GACLz/C,EAAShK,OAAS,GAAG,CAC1B,IAAMmJ,EAAUa,EAASlH,MACzB,GAAgB,OAAZqG,EACEa,EAAShK,OAAS,EACpBypD,GArCU,aAuCVA,GAAS,UAOXA,GAJkBF,EAAS5qC,QACzB,SAAC+qC,EAAKC,GAAW,OAAAD,EAAI79B,QAAQ89B,EAAO99B,QAAS89B,EAAOV,QACpD9/C,GAGEa,EAAShK,OAAS,IACpBypD,GAAS,OAIf,OAAOA,WA4BOG,GACdC,GAEA,OAAOA,EAAK5/C,KAAI,SAACP,GACf,IAAMogD,GAAYpgD,EAAIN,WAAW,KAEjC,MAAO,CAAE0gD,SAAQA,EAAEL,MAAO,IAAIL,GAD9B1/C,EAAMogD,EAAWpgD,EAAMA,EAAI89C,OAAO,IACY,0BC/FlD,SAAAuC,YAMEA,EAAAxqD,UAAAyqD,aAAA,SAAaC,GACX,IAAMC,EAGAN,GAAoBK,GAAUhgD,KAAI,SAAC9F,OAAE2lD,EAAQ3lD,EAAA2lD,SAAEL,EAAKtlD,EAAAslD,MAAO,MAAA,CAC/DK,SAAQA,EACRL,MAAO,IAAI79B,OAAO69B,OAGdU,EAAkBD,EAAkB/9C,QAAO,SAACi+C,GAAS,OAAAA,EAAKN,YAC1DO,EAAkBH,EAAkB/9C,QAAO,SAACi+C,GAAS,OAACA,EAAKN,YAEjE,OAAO,SAACpgD,GACN,OAAAygD,EAAgBG,MAAK,SAACC,GAAY,OAAAA,EAAQd,MAAMe,KAAK9gD,QACpD2gD,EAAgBC,MAAK,SAACC,GAAY,OAAAA,EAAQd,MAAMe,KAAK9gD,gIArB3DpC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,6BCSxB,SAAAimD,EAAsBC,GAAArrD,KAAAqrD,YAAAA,SAKtBD,EAAAlrD,UAAAorD,SAAA,WACE,OAAO,WACL,OAAO,OAOXF,EAAAlrD,UAAAqrD,aAAA,SAAajiD,GAAb,IAAAD,EAAArJ,KACQwrD,EAAWliD,EAAMsB,KAAI,SAAC1B,GAAS,OAAAG,EAAKoiD,YAAYviD,MAChDwiD,EAAU1rD,KAAK2rD,YAAYH,GAIjC,OAHI3iD,EAAAA,cACF6iD,EAAgB,OAAIpiD,GAEfoiD,GAMTN,EAAAlrD,UAAAyrD,YAAA,SAAYH,GACV,IAAME,EAAU,SACd/gD,EACAihD,EACAz8C,GAEA,IAAK,IAAInO,EAAI,EAAGA,EAAIwqD,EAAS7qD,OAAQK,IAAK,CACxC,IAAMgB,EAASwpD,EAASxqD,GAAG2J,EAAUihD,EAAcz8C,GACnD,GAAInN,EACF,OAAOA,EAGX,OAAO,MAKT,OAHI6G,EAAAA,cACF6iD,EAAmB,UAAIF,GAElBE,GAQCN,EAAAlrD,UAAAurD,YAAA,SAAYviD,QAAA,IAAAA,IAAAA,EAAA,IACpB,IAAMwiD,EAAU,SACd/gD,EACAihD,EACAz8C;;;;;;;;;AAYA,GAAa,KAATjG,EACF,MACsB,SAApBiG,EAAM08C,YACLD,EAAaE,eAAiBnhD,EAAShK,OAAS,GAE1C,KAEF,CAAEorD,SAAU,GAAIC,UAAW,IAGpC,IAAMC,EAAQ/iD,EAAKuN,MAAM,KAEzB,GAAIw1C,EAAMtrD,OAASgK,EAAShK,OAE1B,OAAO,KAGT,GACsB,SAApBwO,EAAM08C,YACLD,EAAaE,eAAiBG,EAAMtrD,OAASgK,EAAShK,QAGvD,OAAO,KAMT,IAHA,IAAMqrD,EAA2C,GAGxC7pB,EAAQ,EAAGA,EAAQ8pB,EAAMtrD,OAAQwhC,IAAS,CACjD,IAAM+pB,EAAOD,EAAM9pB,GACbr4B,EAAUa,EAASw3B,GAEzB,GADoB+pB,EAAKniD,WAAW,KAElCiiD,EAAUE,EAAKha,UAAU,IAAMpoC,OAC1B,GAAIoiD,IAASpiD,EAAQZ,KAE1B,OAAO,KAIX,MAAO,CAAE6iD,SAAUphD,EAASV,MAAM,EAAGgiD,EAAMtrD,QAASqrD,UAASA,IAK/D,OAHInjD,EAAAA,cACF6iD,EAAe,MAAIxiD,GAEdwiD,GAMTN,EAAAlrD,UAAAisD,YAAA,SAAYC,GACV,IAAMV,EAAU,SACd/gD,EACA0hD,EACAl9C,GAEA,OAAOi9C,EAAgBzhD,EAAU0hD,EAAOl9C,GACpC,KACA,CAAE48C,SAAUphD,EAAUqhD,UAAW,KAKvC,OAHInjD,EAAAA,cACF6iD,EAA0B,iBAAIU,GAEzBV,GAMTN,EAAAlrD,UAAAosD,YAAA,SAAYC,GACV,IAAMC,EAAgBxsD,KAAKqrD,YAAYV,aAAa4B,GAE9Cb,EAAU,SACd/gD,GAEA,IAAM8hD,EAAW,IAAI9hD,EAASC,KAAI,SAAC/G,GAAM,OAAAA,EAAEqF,QAAMgxB,KAAK,KAEtD,OAAOsyB,EAAcC,GACjB,CAAEV,SAAUphD,EAAUqhD,UAAW,IACjC,MAKN,OAHInjD,EAAAA,cACF6iD,EAAuB,cAAIa,GAEtBb,2IA1JVzjD,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjBulD,wBCCP,SAAAgC,EACY9lB,EACA17B,EACAyhD,GAFA3sD,KAAA4mC,SAAAA,EACA5mC,KAAAkL,qBAAAA,EACAlL,KAAA2sD,kBAAAA,EAGF3sD,KAAA4sD,YAAa,SAMvBF,EAAAxsD,UAAA2sD,KAAA,WACO7sD,KAAK4sD,aACR5sD,KAAK4sD,YAAa,EAElB5sD,KAAKqX,cAOCq1C,EAAAxsD,UAAAmX,UAAA,WAER,IAAMlN,EAASnK,KAAK4mC,SAASv7B,IAAIL,EAAAA,QACjCb,EAAO2iD,YAAY9sD,KAAK+sD,gBAAgB5iD,EAAOtE,UAQvC6mD,EAAAxsD,UAAA6sD,gBAAA,SAAgBpkD,GAAhB,IAAAU,EAAArJ,KACR,OAAO2I,EAAOiC,KAAI,SAACuE,GACjB,IAAM69C,EAAkB3jD,EAAK4jD,eAAe99C,GAK5C,OAHIA,EAAMrE,UAAYqE,EAAMrE,SAASnK,SACnCqsD,EAAgBliD,SAAWzB,EAAK0jD,gBAAgB59C,EAAMrE,WAEjDkiD,MAWDN,EAAAxsD,UAAA+sD,eAAA,SAAe99C,SACjB3G,EAAYxI,KAAKiJ,aAAakG,GACpC,GAAI3G,EAAW,CACb,IAAMC,EAAczI,KAAKkL,qBAAqB3C,eAAeC,GAG7D,OAFAxI,KAAKktD,oBAAoBzkD,EAAaD,EAAW2G,IAE7C1G,MAAAA,OAAW,EAAXA,EAAa0kD,kBACRh+C,EAAMjG,KACb1J,OAAAqF,OAAArF,OAAAqF,OAAA,GACKsK,GAAK,CACRu8C,QAAS1rD,KAAK2sD,kBAAkBrB,eAEzB7iD,MAAAA,OAAW,EAAXA,EAAa+iD,kBACfr8C,EAAMjG,KACb1J,OAAAqF,OAAArF,OAAAqF,OAAA,GACKsK,GAAK,CACRu8C,QAAS1rD,KAAKotD,mBAAmBj+C,EAAO1G,MAAAA,OAAW,EAAXA,EAAa+iD,aAEf,KAAb,QAAlB1mD,EAAA2D,MAAAA,OAAW,EAAXA,EAAaa,aAAK,IAAAxE,OAAA,EAAAA,EAAEnE,gBACtBwO,EAAMu8C,QACblsD,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYsK,GAAK,CAAEjG,KAAMT,MAAAA,OAAW,EAAXA,EAAaa,MAAM,cAErC6F,EAAMjG,KACb1J,OAAAqF,OAAArF,OAAAqF,OAAA,GACKsK,GAAK,CACRu8C,QAAS1rD,KAAK2sD,kBAAkBpB,cAC9B9iD,MAAAA,OAAW,EAAXA,EAAaa,QAAS,OAK9B,OAAO6F,GAUCu9C,EAAAxsD,UAAAktD,mBAAA,SACRj+C,EACAk+C,GAFQ,IAAAhkD,EAAArJ,KAIFwrD,EAAyB6B,EAAoBziD,KACjD,SAAC0iD,GACC,MAAmC,mBAArBA,EACVA,EACAjkD,EAAKkkD,yBAAyBp+C,EAAOm+C,MAG7C,OAAOttD,KAAK2sD,kBAAkBhB,YAAYH,IASlCkB,EAAAxsD,UAAAqtD,yBAAA,SACRp+C,EACAq+C,GAGA,OADgBxtD,KAAK4mC,SAASv7B,IAAImiD,EAC3BpoD,CAAQ+J,IAOPu9C,EAAAxsD,UAAA+I,aAAA,SAAakG,GACrB,OAAOA,EAAMoF,MAAQpF,EAAMoF,KAAKtI,SAGxBygD,EAAAxsD,UAAAgtD,oBAAA,SACRzkD,EACAD,EACA2G,GAEA,GAAItG,EAAAA,YAAa,CAGf,GACkB,OAAhBJ,GACuB,QAAvBA,MAAAA,OAAW,EAAXA,EAAaa,SACbb,MAAAA,OAAW,EAAXA,EAAa+iD,UAEb,OAIF,KAAK/iD,MAAAA,OAAW,EAAXA,EAAaa,OAMhB,YALAtJ,KAAK4I,KACH,wCAAwCJ,EAAS,IACjD2G,EACA,0EAOAu9C,EAAAxsD,UAAA0I,KAAA,eAAK,IAAAV,EAAA,GAAAzD,EAAA,EAAAA,EAAA/D,UAAAC,OAAA8D,IAAAyD,EAAAzD,GAAA/D,UAAA+D,GACPoE,EAAAA,aACFC,QAAQF,KAAIzG,MAAZ2G,QAAO5E,EAASgE,kLAjKrBD,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAPWgjC,EAAAA,gBAK5B7/B,SAHA8iD,wBCKP,SAAAqC,EAAoBC,GAAA1tD,KAAA0tD,aAAAA,SACpBD,EAAAvtD,UAAAoL,UAAA,SAAUo/B,GACR,OAAO1qC,KAAK0tD,aAAapiD,UAAU,CAAEW,QAAS,UAAWG,OAAQs+B,+BANpEijB,EAAAA,KAAIzlD,KAAA,CAAC,CACJ+9B,KAAM,6DAHCh7B,uBCOP,SAAA2iD,EAAoBC,GAAA7tD,KAAA6tD,WAAAA,SAEpBD,EAAA1tD,UAAAoL,UAAA,SAAUC,GACR,OAAOvL,KAAK6tD,WAAWviD,UAAUC,8BAPpCoiD,EAAAA,KAAIzlD,KAAA,CAAC,CACJ+9B,KAAM,sDAJCh7B,YCST,kCALCwxB,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV8vB,aAAc,CAACF,GAASH,IACxBM,QAAS,CAACH,GAASH,eCDrB,uIAJCxlD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBCMb,SAAA+oD,EACY/9C,EACqBgH,GADrBjX,KAAAiQ,OAAAA,EACqBjQ,KAAAiX,WAAAA,SAMjC+2C,EAAA9tD,UAAA6jC,YAAA,SACE50B,EACArB,GAKA,OAHImtB,EAAAA,kBAAkBj7B,KAAKiX,aACzBjX,KAAKuS,SAASpD,EAAOrB,IAEhB,GAMCkgD,EAAA9tD,UAAAqS,SAAA,SAAS7P,EAA2BoL,GAC5C,IAAMxG,EAAStH,KAAKiQ,OAAOzI,aAEvBF,GAAUA,EAAOgK,WACnBhK,EAAOgK,SAAS28C,KAAOngD,EAAMzD,oBClCnB6jD,GAAyBznB,GAIvC,OAHe,WACbA,EAAQ0nB,yKDKXlmD,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjBiC,SAMsC5H,OAAMa,WAAA,CAAA,CAAAiN,KAAhDnF,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,oCEAV,SAAAw1C,EACYvoD,EACA8mD,EACA/lB,GAFA5mC,KAAA6F,OAAAA,EACA7F,KAAA2sD,kBAAAA,EACA3sD,KAAA4mC,SAAAA,SAGZpnC,OAAAyB,eAAcmtD,EAAAluD,UAAA,sBAAmB,KAAjC,WACE,OACGF,KAAK6F,QAAU7F,KAAK6F,OAAO6C,SAAW1I,KAAK6F,OAAO6C,QAAQ2lD,UAAa,oCAO5ED,EAAAluD,UAAAiuD,UAAA,WACE,IAAMhkD,EAAiBnK,KAAK4mC,SAASv7B,IAAIL,EAAAA,QACnCsjD,EAAYtuD,KAAKuuD,YACnBD,EAAU3tD,QACZwJ,EAAO2iD,YAAW5oD,EAAKoqD,EAAcnkD,EAAOtE,UAOtCuoD,EAAAluD,UAAAquD,UAAA,WACR,IAAKvuD,KAAKwuD,oBAAoB7tD,OAC5B,MAAO,GAET,IAAMgI,EAAiB,GASvB,OAPAA,EAAOjF,KAAK,CACVmoD,UAAW,OACXH,QAAS1rD,KAAKyuD,gBACd1qB,YAAa,CAACiqB,IACdU,UAAW,KAGN/lD,GAMCylD,EAAAluD,UAAAuuD,cAAA,WACR,IAAM/C,EAAU1rD,KAAK2sD,kBAAkBL,YACrCtsD,KAAKwuD,qBAEP,OAAOxuD,KAAK2sD,kBAAkBR,YAAYT,kLArD7CzjD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAPLwpD,UADAvD,UAFYjjB,EAAAA,8BCQrB,SAAAymB,YACSA,EAAA3yB,QAAP,WACE,MAAO,CACLC,SAAU0yB,EACVzyB,UAAW,CACT,CACEp2B,QAAS49B,EAAAA,gBACT19B,OAAO,EACPI,WAAY6nD,GACZ9nD,KAAM,CAACgoD,kCAVhB3xB,EAAAA,kBCDC,SAAYluB,EAAYjB,GACtBtN,KAAKuO,GAAKA,EACVvO,KAAKsN,KAAOA,iBCYd,SAAAuhD,EAAsBhpD,GAAtB,IAAAwD,EAAArJ,KAAsBA,KAAA6F,OAAAA,EAfd7F,KAAA8uD,kBAAgC,GAgBlC9uD,KAAK+uD,gBAEP/uD,KAAK8uD,kBAAoB9uD,KAAKgvD,uBAAuBpkD,KAAI,SAAC1B,GACxD,OAAAG,EAAK4lD,YAAY/lD,cAjBvB1J,OAAAyB,eAAc4tD,EAAA3uD,UAAA,gBAAa,KAA3B,WACE,OAAOF,KAAK6F,QAAU7F,KAAK6F,OAAO6C,yCAQpClJ,OAAAyB,eAAW4tD,EAAA3uD,UAAA,gBAAa,KAAxB,WACE,OAAOF,KAAKkvD,cAAcC,2CAe5BN,EAAA3uD,UAAAkvD,eAAA,SAAeC,GACb,OACErvD,KAAK+uD,gBACJ/uD,KAAKsvD,aAAaD,EAAarvD,KAAK8uD,oBAO/BD,EAAA3uD,UAAAovD,aAAA,SACRD,EACAE,GAFQ,IAAAlmD,EAAArJ,KAIR,OAAOuvD,EAActE,MAAK,SAACuE,GACzB,OAAAnmD,EAAKomD,UAAUJ,EAAaG,OAOtBX,EAAA3uD,UAAAuvD,UAAA,SAAUJ,EAAuBG,GACzC,GAAIH,EAAY1uD,SAAW6uD,EAAa7uD,OACtC,OAAO,EAGT,IAAK,IAAIK,EAAI,EAAGA,EAAIwuD,EAAa7uD,OAAQK,IAAK,CAC5C,IAAM0uD,EAAUF,EAAaxuD,GACvB2uD,EAASN,EAAYruD,GAG3B,IAAK0uD,EAAQ3lD,WAAW,MAAQ2lD,IAAYC,EAC1C,OAAO,EAGX,OAAO,GAMCd,EAAA3uD,UAAA8uD,qBAAA,WACR,OAAOxvD,OAAOukB,OAAO/jB,KAAKkvD,cAAcvmD,QAAQ2W,QAC9C,SAACC,EAAK9W,GACJ,OAA0B,IAA1BA,EAAY0mD,WACZ1mD,EAAYa,OACZb,EAAYa,MAAM3I,OACd4e,EAAIpb,OAAOsE,EAAYa,OACvBiW,IACN,KAOMsvC,EAAA3uD,UAAA+uD,YAAA,SAAY5kD,GACpB,OAAQA,GAAO,IAAIoM,MAAM,6IAvF5BxO,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjByE,uBCOP,SAAAgmD,EACYnpB,EACAopB,GADA7vD,KAAAymC,QAAAA,EACAzmC,KAAA6vD,UAAAA,SAMZD,EAAA1vD,UAAA6jC,YAAA,SAAY50B,GACV,IAAIkgD,EAAwBlgD,EAAM9E,IAAIO,KAAI,SAACy/C,GAAQ,OAAAA,EAAInhD,QAKvD,OAFAmmD,EAAcA,EAAY1uD,OAAS0uD,EAAc,CAAC,IAE9CrvD,KAAKymC,QAAQ2oB,eAAeC,GACvBrvD,KAAK6vD,UAAU9rB,cAEjB/7B,EAAAA,IAAG,2JAnBbC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjB0pD,UADA/qB,aC0DP,SACU9G,EACA7yB,EACAmH,GAHV,IAAAjI,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmK,OAAAA,EACAnK,KAAAsR,SAAAA,EAjDVtR,KAAA8vD,UAA6B9vD,KAAKg9B,SAASp1B,KACzCu1B,EAAAA,OAAO4yB,GACPnlD,EAAAA,KAAI,SAACyT,GAAyC,OAAAA,EAAOhR,WACrDmb,EAAAA,KAAI,SAAC1jB,OAAEoE,EAAIpE,EAAAoE,KAASmqB,EAAWvuB,EAAAgM,MAAEC,EAAMjM,EAAAiM,OACrC1H,EAAKc,OAAO6G,SAAS9H,EAAI1J,OAAAqF,OAAA,CAAIwuB,YAAWA,GAAKtiB,QAKjD/Q,KAAAgwD,eAAkChwD,KAAKg9B,SAASp1B,KAC9Cu1B,EAAAA,OAAO8yB,GACPrlD,EAAAA,KAAI,SAACyT,GAAyC,OAAAA,EAAOhR,WACrDmb,EAAAA,KAAI,SAACne,GACHhB,EAAKc,OAAO+lD,cAAc7lD,OAK9BrK,KAAAmwD,gBAAsCnwD,KAAKg9B,SAASp1B,KAClDu1B,EAAAA,OACEizB,GACAC,GACAC,IAEF9nC,EAAAA,KAAI,WACF,IAAM+nC,EAAiBlnD,EAAKc,OAAOtE,OAAOiH,QACxC,SAACqC,GAAoB,QAAEA,EAAMoF,MAAQpF,EAAMoF,KAAKi8C,sBAE9CD,EAAe5vD,SAAW0I,EAAKc,OAAOtE,OAAOlF,QAC/C0I,EAAKc,OAAO2iD,YAAYyD,OAM9BvwD,KAAAywD,cAAoCzwD,KAAKg9B,SAASp1B,KAChDu1B,EAAAA,OAAOuzB,GACPloC,EAAAA,KAAI,WAAM,OAAAnf,EAAKiI,SAASH,WAI1BnR,KAAA2wD,iBAAuC3wD,KAAKg9B,SAASp1B,KACnDu1B,EAAAA,OAAOyzB,GACPpoC,EAAAA,KAAI,WAAM,OAAAnf,EAAKiI,SAASG,oCA9C3BxJ,EAAAA,uDATQu1B,EAAAA,eADAxyB,EAAAA,cAFA6lD,EAAAA,YAePzwD,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,sCAUpBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,2CAUpBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,4CAkBpBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,0CAOpBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,iDCrDTgtB,GAAiB,CAACozB,ICalBC,GAA4B,CACvCl+C,aAAc,EACd/E,MAAO,CACLzD,IAAK,GACLgpB,YAAa,GACbjnB,OAAQ,GACRkC,QAAS,CACPC,GAAI,IAENyiD,aAAa,EACb7iD,mBAAe5G,GAEjBmH,eAAWnH,YAGGq2B,KACd,MAAO,CACLzzB,OAAQiU,aAIIA,GACdtQ,EACAuQ,WAEA,YAHA,IAAAvQ,IAAAA,EAAAijD,IAGQ1yC,EAAO/Q,MACb,KAAK2jD,EAAAA,kBACH,OAAAzxD,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRY,UAAW2P,EAAOhR,QAAQ+B,YAC1ByD,aAAcwL,EAAOhR,QAAQ4B,MAAMV,KAIvC,KAAK2iD,EAAAA,aACL,KAAKC,EAAAA,cACH,OAAA3xD,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRY,eAAWnH,IAIf,KAAK4F,EACH,OAAOW,EAAMY,yCAEJZ,GAAK,CACRY,UAASlP,OAAAqF,OAAArF,OAAAqF,OAAA,GAAOiJ,EAAMY,WAAS,CAAEJ,QAAS+P,EAAOhR,YAEnDS,EAGN,KAAKsjD,EAAAA,iBACH,MAAO,CACLtjD,MAAKtO,OAAAqF,OAAArF,OAAAqF,OAAA,GACAwZ,EAAOhR,QAAQ+B,aAAW,CAC7Bd,QAG0B,QAHnBvJ,EAGU,QAHVD,EAGLgJ,EAAMY,iBAAS,IAAA5J,OAAA,EAAAA,EAAEwJ,eAAO,IAAAvJ,EAAAA,EAAIsZ,EAAOhR,QAAQ+B,YAAYd,UAE3DuE,aAAcwL,EAAOhR,QAAQ4B,MAAMV,GACnCG,eAAWnH,GAIf,QACE,OAAOuG,OAKA+vB,GAER,IAAI34B,EAAAA,eAAwC,kBAEpC44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,kBAgHZ,SAAAyzB,EAAoBnC,GAAAlvD,KAAAkvD,cAAAA,SAtGpBmC,EAAAnxD,UAAAoxD,UAAA,SAAUliD,GAOR,YAJId,EACAH,EAHAL,EAAmCsB,EAAY3E,KAC/CumD,GAAc,EAGdO,EAAY,GAETzjD,EAAMwB,YAEXiiD,GACE,KAFFzjD,EAAQA,EAAMwB,YAEAjF,IAAIO,KAAI,SAAC4mD,GAAe,OAAAA,EAAWtoD,QAAMgxB,KAAK,MAG9C,QAAdp1B,EAAIgJ,EAAMyG,YAAI,IAAAzP,OAAA,EAAAA,EAAEmH,WACdkC,EAA0B,QAAbpJ,EAAG+I,EAAMyG,YAAI,IAAAxP,OAAA,EAAAA,EAAEkH,SAI1B6B,EAAMyG,MAAQzG,EAAMyG,KAAKi8C,oBAC3BliD,EAAUR,EAAMyG,KAAKi8C,oBAMpBQ,IACA1iD,GACER,EAAMrF,aACLqF,EAAMrF,YAAYs7B,aAClBj2B,EAAMrF,YAAYs7B,YAAYp3B,MAC5B,SAAC8kD,GAAM,OAAAA,GAAqB,iBAAhBA,EAAEC,gBAGpBV,GAAc,GAOlB7iD,EAAgBA,GAAiBnO,KAAK2xD,oBAAoBJ,GAElD,IAAAnlD,EAAW0B,EAAK1B,OAExB,GAAI0B,EAAMzD,IAAI1J,OAAS,GAA2B,eAAtBmN,EAAMzD,IAAI,GAAGnB,KACvCoF,EAAU,CACRC,GAAI,oBACJjB,KAAM0M,EAAAA,SAAS43C,mBAGjB,GAAIxlD,EAAoB,YACtBkC,EAAU,CAAEC,GAAInC,EAAoB,YAAGkB,KAAM0M,EAAAA,SAAS63C,mBACjD,GAAIzlD,EAAqB,aAC9BkC,EAAU,CAAEC,GAAInC,EAAqB,aAAGkB,KAAM0M,EAAAA,SAAS83C,oBAClD,GAAI1lD,EAAkB,UAC3BkC,EAAU,CAAEC,GAAInC,EAAkB,UAAGkB,KAAM0M,EAAAA,SAAS83C,oBAC/C,QAA6BvqD,IAAzBuG,EAAMyG,KAAKw9C,UACpBzjD,EAAU,CAAEC,GAAIT,EAAMyG,KAAKw9C,UAAWzkD,KAAM0M,EAAAA,SAAS43C,mBAChD,IAAKtjD,EAAS,CACnB,GAAIR,EAAMzD,IAAI1J,OAAS,EAGrB2N,EAAU,CACRC,GAFA,IAAMT,EAAMzD,IAAIO,KAAI,SAAC4mD,GAAe,OAAAA,EAAWtoD,QAAMgxB,KAAK,KAG1D5sB,KAAM0M,EAAAA,SAAS43C,mBAGjBtjD,EAAU,CACRC,GAAI,WACJjB,KAAM0M,EAAAA,SAAS43C,cAMvB,MAAO,CACLvnD,IAAK+E,EAAY/E,IACjBgpB,YAAajkB,EAAY3E,KAAK4oB,YAC9BjnB,OAAMA,EACNkC,QAAOA,EACP0iD,YAAWA,EACX7iD,cAAaA,IAeTkjD,EAAAnxD,UAAAyxD,oBAAA,SAAoBzoD,GAG1B,OAAOlJ,KAAKkvD,cAAcjmD,aAAaC,EAAKi/C,OAAO,mBCxLvC6J,GACdvrB,GAGA,OADe,WAAM,OAAAA,EAAQomB,6BD8E9B5kD,EAAAA,uDA7FQK,uBC6BT,SAAA2pD,YACSA,EAAAh2B,QAAP,WACE,MAAO,CACLC,SAAU+1B,EACV91B,UAAW,CACT2B,GACA,CACE/3B,QAASmsD,EAAAA,sBACT7nB,SAAUgnB,IAEZ,CACEtrD,QAAS49B,EAAAA,gBACTt9B,WAAY2rD,GACZ5rD,KAAM,CAACsmD,IACPzmD,OAAO,gCAxBhBw2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPG,EAAAA,YAAYC,WAAWxwB,GAAiBkwB,IACxCO,EAAAA,cAAcD,WAAWT,IACzBy0B,EAAAA,4BAA4Bl2B,QAAQ,CAClC7sB,YAAW,EACXgjD,SAAUzkD,cCFH0kD,GAAsB,IAAIntD,EAAAA,eACrC,sBACA,CACEC,WAAY,OACZC,QAAS,WACP,OA1BJ8F,EA2BM7F,EAAAA,OAAOiD,GA1BbqkD,EA2BMtnD,EAAAA,OAAO+lD,IAzBG,SAACj8C,GACf,IAAM3G,EAAY2G,EAAMoF,MAAQpF,EAAMoF,KAAc,QAC9C9L,EAAcyC,EAAqB3C,eAAeC,GAClDc,EAASb,GAAeA,EAAYa,OAAU,GACpD,OAAOqjD,EAAkBpB,aAAajiD,QAPxC4B,EACAyhD,mBCaA,SAAA2F,EACY93C,EACA+3C,GADAvyD,KAAAwa,eAAAA,EACAxa,KAAAuyD,iBAAAA,SAGZD,EAAApyD,UAAA62B,UAAA,SACEpC,EACA9yB,GAFF,IAAAwH,EAAArJ,KAIE,OAAOA,KAAKwa,eAAezM,iBAAiBnG,KAC1C4K,EAAAA,KAAK,GACLiX,EAAAA,WAAU,SAAC3b,GACT,OAAOjM,EAAK00B,OAAO5B,GAAS/sB,KAC1BqvB,EAAAA,YAAW,SAACud,SACV,GACEA,aAAoBrd,EAAAA,mBACpB9tB,EAAKmpD,sBAAiC,QAAZ1tD,EAACgJ,EAAMA,aAAK,IAAAhJ,OAAA,EAAAA,EAAEqJ,gBAEpC9E,EAAKk8C,oBAAoB/Q,GAAW,CACtCnrC,EAAKmR,eAAe3J,GAAG,CAAE5E,QAAS,SAElC,IAAMwmD,EAAWppD,EAAKqpD,mBAAmBle,GACrCie,GACFppD,EAAKkpD,iBAAiB7I,WAAW+I,GAIvC,OAAOn7B,EAAAA,WAAWkd,YAmBlB8d,EAAApyD,UAAAsyD,sBAAA,SAAsBrkD,GAC9B,OAAOA,MAAAA,OAAa,EAAbA,EAAewkD,cAAc5oD,WAAW,aAQvCuoD,EAAApyD,UAAAqlD,oBAAA,SAAoB/Q,mBAC5B,OACsB,MAApBA,EAASpd,QAC6B,eAAZ,QAA1BpyB,EAAsB,QAAtBD,EAAc,QAAdD,EAAA0vC,EAASvwC,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,cAAM,IAAA1yB,OAAA,EAAAA,EAAG,UAAC,IAAAC,OAAA,EAAAA,EAAGsI,OACW,cAAd,QAA1B5D,EAAsB,QAAtBF,EAAc,QAAdmO,EAAA68B,EAASvwC,aAAK,IAAA0T,OAAA,EAAAA,EAAE8f,cAAM,IAAAjuB,OAAA,EAAAA,EAAG,UAAC,IAAAE,OAAA,EAAAA,EAAG87C,SAIvB8M,EAAApyD,UAAAwyD,mBAAA,SAAmBle,aAC3B,OAAiC,QAAjCxvC,EAA6B,QAA7BD,EAAqB,QAArBD,EAAO0vC,EAASvwC,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,cAAM,IAAA1yB,OAAA,EAAAA,EAAG,UAAC,IAAAC,OAAA,EAAAA,EAAG0gD,gKAlEvCz9C,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDARJ4K,UADby3C,UCNI7vB,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAaiqD,GACbrsD,OAAO,ICPE2sD,GAAgB,yJCGhBC,GAAyB,cAItBC,GACdhlD,EACAuQ,aAEA,YAHA,IAAAvQ,IAAAA,EAJoC,IAO5BuQ,EAAO/Q,MACb,KAAKylD,GACL,KAAKC,GAEL,KAAKC,GACH,OAA8B,QAA9BluD,EAAmB,QAAnBD,EAAIuZ,MAAAA,OAAM,EAANA,EAAQhR,eAAO,IAAAvI,OAAA,EAAAA,EAAEsjD,iBAAS,IAAArjD,OAAA,EAAAA,EAAEysB,QACvBnT,EAAOjC,KAAKL,SAEZjO,EAEX,KAAKolD,GACH,OAAO70C,EAAOhR,QAChB,KAAK8lD,GACL,KAAKC,GACH,OAAkB,QAAdpuD,EAAAqZ,EAAOhR,eAAO,IAAArI,OAAA,EAAAA,EAAEgnC,UAAWl+B,EArBC,GAwBzBA,EACT,KAAKulD,GACH,OAAOvlD,IAAU+kD,GACbA,GA3B4B,GA8BpC,OAAO/kD,WAKOwlD,GACdxlD,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAHsCvG,WAM9B8W,EAAO/Q,MACb,KAAKylD,GACL,KAAKC,GACL,KAAKO,GACL,KAAKC,GACL,KAAKC,GACH,OAAOp1C,EAAOhR,QAAQg+B,KAE1B,OAAOv9B,WAGO4lD,GACd5lD,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAlDkC,IAqD1BuQ,EAAO/Q,MACb,KAAKimD,GACL,KAAKC,GACH,OAAOn1C,EAAOjC,KAAKL,SACrB,KAAKs3C,GACH,MA1D8B,GA4DlC,OAAOvlD,MCCG6lD,iBCGV,SAAAC,EACY5jD,EACAuiD,EACAn4C,GAHZ,IAAA/Q,EAAArJ,KACYA,KAAAgQ,MAAAA,EACAhQ,KAAAuyD,iBAAAA,EACAvyD,KAAAoa,cAAAA,EA3BFpa,KAAAq6B,aAAe,IAAIN,EAAAA,aAGrB/5B,KAAA6zD,cAAgB7zD,KAAKoa,cAAcf,YAAYzR,KAGrD4K,EAAAA,KAAK,GACLshD,EAAAA,YAAY9zD,KAAKgQ,OACjBI,EAAAA,OAAO2jD,IAEPjnD,EAAAA,QAAO,SAACk/B,GAAW,OAAAA,IAAW6mB,MAC9BjoD,EAAAA,KAAI,SAACohC,GACH,MAAe,KAAXA,EAEK7kC,EAEF6kC,MAIHhsC,KAAAg0D,cAAgBh0D,KAAK6zD,cAAcjsD,KACzC6hB,EAAAA,WAAU,SAACuiB,GAAW,OAAA3iC,EAAKkpD,iBAAiB5K,cAAc3b,OAQ1DhsC,KAAKi0D,wBAGPL,EAAA1zD,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,eAGVy/C,EAAA1zD,UAAA+zD,eAAA,WAAA,IAAA5qD,EAAArJ,KAERA,KAAKq6B,aAAarnB,IAChBhT,KAAKoa,cACFf,YACAzR,KAECssD,EAAAA,WACAzqC,EAAAA,WAAU,SAAC3kB,OAAAC,EAAAhB,EAAAe,EAAA,GAACqvD,EAAcpvD,EAAA,GAAE8S,EAAM9S,EAAA,GAEhC,OAAAgmB,EAAAA,cAAc,CACZ/iB,EAAAA,GAAGmsD,GACHnsD,EAAAA,GAAG6P,GACHxO,EAAKwqD,gBACJjsD,KAAK4K,EAAAA,KAAK,QAGhBC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACqvD,EAAcpvD,EAAA,GAAE8S,EAAM9S,EAAA,GAAEinC,EAAMjnC,EAAA,GAErCsE,EAAK+qD,eAAev8C,EAAQs8C,IAC9B9qD,EAAKgrD,YAAYroB,EAAQn0B,EAAQs8C,OAMzC,IAAMG,EAAmBt0D,KAAKg0D,cAAcpsD,KAC1CgD,EAAAA,KAAI,SAAC2pD,GAKH,MAAO,CACLlpB,KAAMkpB,EAAW5yD,MACjBo9B,UAAWw1B,EAAWr2C,SAAyC,IAA9Bq2C,EAAWrzC,eAC5CszC,QACGD,EAAWtwD,OAASswD,EAAWx3C,WAAaw3C,EAAWr2C,YAM9DpR,EAAAA,QAAO,SAAChI,OAAEi6B,EAAQj6B,EAAAi6B,SAAEsM,EAAIvmC,EAAAumC,KAAO,OAAAtM,GAAY11B,EAAKorD,QAAQppB,OAIpDqpB,EAAqBJ,EAAiB1sD,KAC1C0gB,EAAAA,eAAetoB,KAAK6zD,cAAe7zD,KAAKoa,cAAcf,aACtDmP,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACE,EAAAD,EAAA,GAAEsmC,EAAIrmC,EAAAqmC,KAAEmpB,EAAMxvD,EAAAwvD,OAAEz1B,EAAQ/5B,EAAA+5B,SAAIiN,EAAMjnC,EAAA,GAAE8S,EAAM9S,EAAA,GAE5Cg6B,GACA11B,EAAKorD,QAAQppB,KACZmpB,IACA3O,GAAa7Z,IAEd3iC,EAAKuT,KAAKovB,EAAQn0B,OAKxB7X,KAAK20D,YAAcC,EAAAA,OACjB,WAAM,OAAAF,EAAmBjiD,eACzB,WAAM,OAAA6hD,KACN1sD,KAEAgD,EAAAA,KAAI,SAAC9F,OAAEumC,EAAIvmC,EAAAumC,KAAO,OAACA,GAAc,MACjCtjC,EAAAA,uBACAwH,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAO3CmkD,EAAA1zD,UAAAoxB,UAAA,WACE,OAAOtxB,KAAK20D,aAMdf,EAAA1zD,UAAAinD,gBAAA,WACE,OAAOnnD,KAAK20D,YAAY/sD,KACtB0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,aAClCzO,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAmB,OAAAugD,GAAdtgD,EAAA,GAAQA,EAAA,OAClBgD,EAAAA,yBAOJ6rD,EAAA1zD,UAAAwoD,WAAA,WAAA,IAAAr/C,EAAArJ,KACE,OAAOA,KAAK6zD,cAAcjsD,KACxB6hB,EAAAA,WAAU,SAACuiB,GAAW,OAAA3iC,EAAKkpD,iBAAiB7J,WAAW1c,MACvDjkC,EAAAA,yBAWJ6rD,EAAA1zD,UAAA0oD,aAAA,SAAa3c,GAAb,IAAA5iC,EAAArJ,KACE,OAAOA,KAAK6zD,cAAcjsD,KACxB6hB,EAAAA,WAAU,SAACuiB,GACT,OAAA3iC,EAAKkpD,iBAAiB3J,aAAa5c,EAAQC,MAE7ClkC,EAAAA,yBAOJ6rD,EAAA1zD,UAAA20D,WAAA,WACE,OAAO70D,KAAKg0D,cAAcpsD,KACxBgD,EAAAA,KAAI,SAAC2pD,GAAe,OAAAA,EAAWr2C,WAC/BnW,EAAAA,yBAOJ6rD,EAAA1zD,UAAA6+B,SAAA,WAAA,IAAA11B,EAAArJ,KAKE,OAAOA,KAAK6zD,cAAcjsD,KACxB6hB,EAAAA,WAAU,SAACuiB,GAAW,OAAA3iC,EAAKkpD,iBAAiBxzB,SAASiN,MACrD8b,EAAAA,UAAS,SAACh6C,GAAU,OAACA,EAAQi6C,EAAAA,MAAM,GAAKC,EAAAA,SACxCjgD,EAAAA,yBAII6rD,EAAA1zD,UAAAm0D,YAAA,SACNroB,EACAn0B,EACAs8C,GAKInoB,IAAW7kC,EACbnH,KAAKuyD,iBAAiB/J,SAAS,CAC7B3wC,OAAMA,EACNm0B,OAAQ7kC,EACRihD,UAAW,CACT52B,QAAQ,KAGHxxB,KAAK80D,cACd90D,KAAK+0D,eAAe/oB,GAEpBn0B,IAAWs8C,GACXt8C,IAAW5Q,GACXktD,IAAmBltD,EAInBjH,KAAKuyD,iBAAiB/J,SAAS,CAC7B3wC,OAAMA,EACNm0B,OAAMA,EACNoc,UAAW,CACT52B,QAAQ,KAKZxxB,KAAKuyD,iBAAiBjK,mBAAmB,CACvCzwC,OAAMA,EACNm0B,OAAMA,EACNoc,UAAW,CACT52B,QAAQ,MAMRoiC,EAAA1zD,UAAA0c,KAAA,SAAKovB,EAAgBn0B,GAErBA,IAAW5Q,GAAyB+kC,IAAW7kC,GACnDnH,KAAKuyD,iBAAiB/J,SAAS,CAC7B3wC,OAAMA,EACNm0B,OAAMA,EACNoc,UAAW,CACT52B,QAAQ,MAMRoiC,EAAA1zD,UAAA80D,qBAAA,SAAqBC,GAArB,IAAA5rD,EAAArJ,KACAk1D,EAAeD,EAAYrqD,KAAI,SAAC6/B,GAAU,MAAA,CAC9CwB,YAAaxB,EAAMC,QAAQ1mB,KAC3BkoB,SAAUzB,EAAMyB,aAElBlsC,KAAKm1D,iCACFvtD,KAAK0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,cACvC5G,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAE8S,EAAM9S,EAAA,GAC5BsE,EAAKkpD,iBAAiBhnB,WACpB1zB,EACAwtC,GAAkB+P,EAAUzzD,MAAOkW,GACnCq9C,OAKAtB,EAAA1zD,UAAAi1D,+BAAA,WAAA,IAAA9rD,EAAArJ,KACN,OAAOA,KAAKq1D,kBACVr1D,KAAKg0D,cAAcpsD,KAAKkF,EAAAA,QAAO,WAAM,OAACzD,EAAKyrD,oBAIvClB,EAAA1zD,UAAAo1D,eAAA,SACNF,EACAppB,GAKA,OACE6Z,GAAa7Z,KACZopB,EAAUl3C,SAAWk3C,EAAUr4C,SAAWq4C,EAAUnxD,QAIjD2vD,EAAA1zD,UAAAm1D,kBAAA,SACNE,GADM,IAAAlsD,EAAArJ,KAMAg0D,EAAgBuB,GAElBv1D,KAAKg0D,cAET,OAAOA,EAAcpsD,KACnBkF,EAAAA,QAAO,SAACsoD,GAAc,OAACA,EAAUl3C,WAEjCoK,EAAAA,eAAetoB,KAAK6zD,eACpB/mD,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAEinC,EAAMjnC,EAAA,GAAM,OAACsE,EAAKisD,eAAeF,EAAWppB,MAChEphC,EAAAA,KAAI,SAAC9F,GAAgB,OAAhBf,EAAAe,EAAA,GAAU,MACf0N,EAAAA,KAAK,GACL8V,EAAAA,eAAetoB,KAAKoa,cAAcf,aAClCmP,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAE8S,EAAM9S,EAAA,GAEjBsE,EAAKorD,QAAQW,EAAUzzD,QAAUkW,IAAW5Q,GAC9CoC,EAAKuT,KAAKzV,EAAqB0Q,MAGnC4R,EAAAA,WAAU,WACR,OAAOuqC,KAETlnD,EAAAA,QAAO,SAACsoD,GAAc,OAACA,EAAUl3C,WAEjCoK,EAAAA,eAAetoB,KAAKoa,cAAcf,aAClCvM,EAAAA,QACE,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GACT,OADiBA,EAAA,KACNkC,GACXmuD,EAAUr4C,SACVq4C,EAAUnxD,SAEduO,EAAAA,KAAK,GACLgW,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAE8S,EAAM9S,EAAA,GACjBsE,EAAKorD,QAAQW,EAAUzzD,QACzB0H,EAAKkpD,iBAAiBjnB,WAAW,CAC/BzzB,OAAMA,EACNuwC,UAAW,CACT52B,QAAQ,QAKhB/H,EAAAA,WAAU,WACR,OAAOuqC,KAETlnD,EAAAA,QAAO,SAACsoD,GAAc,OAACA,EAAUl3C,WACjCpR,EAAAA,QAAO,SAACsoD,GAAc,OAAAA,EAAUr4C,SAAWq4C,EAAUnxD,SAErDqkB,EAAAA,eAAetoB,KAAK6zD,eACpB/mD,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAEinC,EAAMjnC,EAAA,GAAM,OAACsE,EAAKisD,eAAeF,EAAWppB,MAChEphC,EAAAA,KAAI,SAAC9F,GAAgB,OAAhBf,EAAAe,EAAA,GAAU,MACfgI,EAAAA,QAAO,SAACsoD,GAAc,OAAC/rD,EAAKorD,QAAQW,EAAUzzD,UAC9C6Q,EAAAA,KAAK,KAUTohD,EAAA1zD,UAAA4oD,SAAA,SAAS7c,EAAqBC,GAA9B,IAAA7iC,EAAArJ,KACEA,KAAKq1D,oBACFztD,KAAK0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,cACvC5G,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACswD,EAASrwD,EAAA,GAAE8S,EAAM9S,EAAA,GAC5BsE,EAAKkpD,iBAAiBzJ,SACpBjxC,EACAwtC,GAAkB+P,EAAUzzD,MAAOkW,GACnCo0B,EACAC,OAUR0nB,EAAA1zD,UAAA+oD,YAAA,SAAYxe,GAAZ,IAAAphC,EAAArJ,KACEA,KAAK6zD,cACFjsD,KAAK0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,aAAc7G,EAAAA,KAAK,IAC1DC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACknC,EAAMjnC,EAAA,GAAE8S,EAAM9S,EAAA,GACzBsE,EAAKkpD,iBAAiBtJ,YAAYpxC,EAAQm0B,EAAQvB,EAAM6B,iBAU9DsnB,EAAA1zD,UAAAipD,YAAA,SAAY7c,EAAqBJ,GAAjC,IAAA7iC,EAAArJ,KACEA,KAAK6zD,cACFjsD,KAAK0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,aAAc7G,EAAAA,KAAK,IAC1DC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACknC,EAAMjnC,EAAA,GAAE8S,EAAM9S,EAAA,GACzBsE,EAAKkpD,iBAAiBpJ,YACpBtxC,EACAm0B,EACAM,EACAJ,OAUR0nB,EAAA1zD,UAAAmpD,SAAA,SAASpd,GAAT,IAAA5iC,EAAArJ,KACE,OAAOA,KAAK6zD,cAAcjsD,KACxB6hB,EAAAA,WAAU,SAACuiB,GACT,OAAA3iC,EAAKkpD,iBAAiBlJ,SAASrd,EAAQC,MAEzClkC,EAAAA,yBASJ6rD,EAAA1zD,UAAAwrC,SAAA,SAASyB,GAAT,IAAA9jC,EAAArJ,KACEA,KAAK6zD,cACFjsD,KAAK0gB,EAAAA,eAAetoB,KAAKoa,cAAcf,aAAc7G,EAAAA,KAAK,IAC1DC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACknC,EAAMjnC,EAAA,GAAE8S,EAAM9S,EAAA,GACzBsE,EAAKkpD,iBAAiBhJ,YAAYvd,EAAQn0B,EAAQs1B,OAOxDymB,EAAA1zD,UAAAs1D,gBAAA,WACE,OAAOx1D,KAAKsxB,YAAY1pB,KAAKgD,EAAAA,KAAI,SAACygC,GAAS,OAAAA,EAAKoqB,UAOlD7B,EAAA1zD,UAAA40D,YAAA,SAAYzpB,GACLA,GACHrrC,KAAK20D,YACFliD,WAAU,SAACijD,GAAe,OAACrqB,EAAOqqB,KAClCvhD,cAEL,IAAMwhD,EAAWtqB,MAAAA,OAAI,EAAJA,EAAMoqB,KACvB,OACEE,IACCA,EAAS1vB,OAAS/+B,GACjBlH,KAAK41D,QAAQD,EAAS1lC,IAAIxZ,MAAM,KAAKxM,MAAM,GAAGiwB,KAAK,QASzD05B,EAAA1zD,UAAAqrC,WAAA,SAAW0pB,GAAX,IAAA5rD,EAAArJ,KACEi1D,EAAY1rD,SAAQ,SAACkhC,GACnBphC,EAAKy/C,SAASre,EAAMC,QAAQ1mB,KAAMymB,EAAMyB,cAIpC0nB,EAAA1zD,UAAA01D,QAAA,SAAQC,GACd,QAAIA,KACKA,EAAIC,MAAMlD,KAUbgB,EAAA1zD,UAAA60D,eAAA,SAAe/oB,GAAf,IACFipB,EADE5rD,EAAArJ,KAENA,KAAK0oD,aACF9gD,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAAChJ,GACVwrD,EAAcxrD,EACdJ,EAAKkpD,iBAAiB5mB,WAAWK,EAAQ/kC,GACzCoC,EAAK2rD,qBAAqBC,OAIxBrB,EAAA1zD,UAAAu0D,QAAA,SAAQppB,GACd,OACGA,GAAyB,iBAATA,GAAkD,IAA7B7rC,OAAO6f,KAAKgsB,GAAM1qC,QAIpDizD,EAAA1zD,UAAAk0D,eAAA,SAAev8C,EAAgBs8C,GACrC,OACEt8C,IAAW5Q,GACXktD,IAAmBt8C,8KAhexB5P,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAzCGyM,EAAAA,aAsCR41C,UAfAvuC,OD2CG06C,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,OAAA,SACAA,GAAA,SAAA,kBErEF,4BC0BE,SAAAoC,EACYC,EACAC,GAFZ,IAAA5sD,EAIEiK,EAAA9P,KAAAxD,OAAOA,YAHGqJ,EAAA2sD,YAAAA,EACA3sD,EAAA4sD,kBAAAA,EAJF5sD,EAAA6sD,MAAQ7sD,EAAK4sD,kBAAkB3kC,YAOvCjoB,EAAKqtC,SAAW18B,EAAAA,SAAS43C,aACzBvoD,EAAKstC,aAAe,gDAVd72C,EAAAi2D,EAAAziD,GAaRyiD,EAAA71D,UAAAi2D,aAAA,WAAA,IAAA9sD,EAAArJ,KACE,OAAOA,KAAKk2D,MAAMtuD,KAChB6hB,EAAAA,WAAU,SAAChpB,GACT,OAAA4I,EAAK2sD,YAAYI,UAAU,kCAAmC,CAC5DC,MAAO51D,EAAE61D,kBAMjBP,EAAA71D,UAAAq2D,cAAA,WACE,OAAOvuD,EAAAA,GAAG,CAAC2rD,EAAAA,eAAe6C,SAAU7C,EAAAA,eAAe8C,cAxB7ClgB,sJAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXLuxD,UAPA9C,aCAT,2BCME,SAAA+C,EAAsB1oB,GAAAjuC,KAAAiuC,QAAAA,SAEtB0oB,EAAAz2D,UAAAuxB,OAAA,SAAO5Z,GACL,OAAO7X,KAAKiuC,QAAQlB,QAAQl1B,IAG9B8+C,EAAAz2D,UAAA8S,IAAA,SAAI6E,EAAgBi3B,GAClB,OAAO9uC,KAAKiuC,QAAQj7B,IAAI6E,EAAQi3B,IAGlC6nB,EAAAz2D,UAAAmsC,OAAA,SAAOx0B,EAAgBm3B,EAAmBF,GACxC,OAAO9uC,KAAKiuC,QAAQ5B,OAAOx0B,EAAQm3B,EAAWF,IAGhD6nB,EAAAz2D,UAAA02D,OAAA,SAAO/+C,EAAgBi3B,GACrB,OAAO9uC,KAAKiuC,QAAQ2oB,OAAO/+C,EAAQi3B,IAGrC6nB,EAAAz2D,UAAA4zB,OAAA,SAAOjc,EAAgBm3B,GACrB,OAAOhvC,KAAKiuC,QAAQna,OAAOjc,EAAQm3B,4IAvBtC/mC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALL0xD,aCyBP,SACU75B,EACA85B,GAFV,IAAAztD,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA82D,qBAAAA,EAjBV92D,KAAA+2D,eAEI/2D,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAsC65B,IACtCpsD,EAAAA,KAAI,SAACyT,GAAW,OAAAA,EAAOhR,WACvBgnC,EAAAA,UAAS,SAAChnC,GACR,OAAAhE,EAAKytD,qBAAqBF,OAAOvpD,EAAQwK,OAAQxK,EAAQyhC,SAASlnC,KAChEgD,EAAAA,KAAI,SAAC2J,GAAS,OAAA,IAAI0iD,GAAqC1iD,MACvD0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIkvD,GAAkC96B,GAAmBn4B,mCAZrEgE,EAAAA,uDAPQu1B,EAAAA,eAGAm5B,MAOPv2D,EAAA,CADCq9B,EAAAA,uDCeD,SACUT,EACAm6B,GAFV,IAAA9tD,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAm3D,yBAAAA,EAhBVn3D,KAAAo3D,eAEIp3D,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOk6B,IACP5tC,EAAAA,WAAU,WACR,OAAOpgB,EAAK8tD,yBAAyBjnB,eAAetoC,KAClDgD,EAAAA,KAAI,SAACkqC,GAAc,OAAA,IAAIwiB,GAAqCxiB,MAC5D7d,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIuvD,GAAkCn7B,GAAmBn4B,mCAXrEgE,EAAAA,uDAPQu1B,EAAAA,eAIAuS,MAMP3vC,EAAA,CADCq9B,EAAAA,gDCRI,IAAM+5B,GAAyB,gCACzBC,GAA8B,qCAC9BC,GACX,wCAEFC,GAEE,WADS33D,KAAAsN,KAAOkqD,IAIlBI,GAEE,SAAmBvqD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOmqD,IAIlBI,GAEE,SAAmBxqD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOoqD,ICfLI,GAA4B,mCAC5BC,GACX,wCACWC,GACX,2CACWC,GAA6B,oCAE1CC,GAEE,SACS7qD,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOwqD,IAUlBK,GAEE,SAAmB9qD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOyqD,IAIlBK,GAEE,SAAmB/qD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO0qD,IAIlBK,GAEE,WADSr4D,KAAAsN,KAAO2qD,ICbLK,GAAe,OACfC,GAA0B,cAC1BC,GAA6B,iBAC7BC,GAAiC,oBACjCC,GAA2B,eAC3BC,GAAyB,aACzBC,GAA0B,cAC1BC,GAA8B,kBAC9BC,GACX,gCACWC,GAAkC,sBAClCC,GAAsC,yBACtCC,GAA0B,cAC1BC,GAA2B,eAC3BC,GAAwC,2BAExCC,GAAgB,uBAChBC,GAAuB,8BACvBC,GAAc,qBACdC,GAAiB,wBACjBC,GAAuB,+BACvBC,GAA8B,gCAC9BC,GAAqB,4BACrBC,GAAoB,2BACpBC,GAA4B,mCAC5BC,GACX,0CACWC,GAAU,iBAEVC,GAAmB,0BACnBC,GAAuC,0BACvCC,GACX,4BACWC,GAAmC,sBACnCC,GAA2B,kCAC3BC,GAAoB,oCC3CjBC,GACdC,GAEA,OAAOtsD,EAAAA,eCLAH,EAAAA,sBAA4CyqC,KDKV,SAACiiB,GACxC,OAAAC,GAAqCD,EAAaD,eAItCG,GACdH,GAEA,OAAOtsD,EAAAA,eAAeqsD,GAAuBC,IAAY,SAACh5C,GACxD,OAAA7C,GAAsB6C,eAIVo5C,GACdJ,GAEA,OAAOtsD,EAAAA,eAAeqsD,GAAuBC,IAAY,SAACh5C,GACxD,OAAA3C,GAAsB2C,eAIVq5C,GACdL,GAEA,OAAOtsD,EAAAA,eAAeqsD,GAAuBC,IAAY,SAACh5C,GACxD,OAAA5C,GAAoB4C,yJEdXs5C,GAAwB,+BACxBC,GAA6B,oCAC7BC,GACX,uCACWC,GAA8B,qCAE9BC,GACX,gDACWC,GACX,qDACWC,GACX,wDACWC,GACX,iDAEWC,GACX,kDACWC,GACX,uDACWC,GACX,0DACWC,GACX,mDAEWC,GAAwB,wBACxBC,GAA6B,6BAC7BC,GAAgC,gCAE7CC,GAAA,SAAAroD,GAEE,SAAAqoD,EACStuD,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAM+5D,KAAiB/5D,YAPhBqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOstD,YADuB96D,EAAA67D,EAAAroD,KAAzC,CAAyC2J,IAczC2+C,GAAA,SAAAtoD,GAEE,SAAAsoD,EAAmBvuD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM+5D,GAAkB1sD,IAAQrN,YADfqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOutD,YAD2B/6D,EAAA87D,EAAAtoD,KAA7C,CAA6C4J,IAO7C2+C,GAAA,SAAAvoD,GAEE,SAAAuoD,EAAmBxuD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM+5D,KAAiB/5D,YADNqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOwtD,YAD8Bh7D,EAAA+7D,EAAAvoD,KAAhD,CAAgD6J,IAOhD2+C,GAAA,SAAAxoD,GAEE,SAAAwoD,IAAA,IAAAzyD,EACEiK,EAAA9P,KAAAxD,KAAM+5D,KAAiB/5D,YAFhBqJ,EAAAiE,KAAOytD,YAD4Bj7D,EAAAg8D,EAAAxoD,KAA9C,CAA8C8J,IAQ9C2+C,GAAA,SAAAzoD,GAEE,SAAAyoD,EACS1uD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0hB,KAAqCh6D,YALrDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO0tD,YAD2Bl7D,EAAAi8D,EAAAzoD,KAA7C,CAA6CuK,IAY7Cm+C,GAAA,SAAA1oD,GAEE,SAAA0oD,EAAmB3uD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0hB,GAAsC3sD,IAAQrN,YADpDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO2tD,YAD+Bn7D,EAAAk8D,EAAA1oD,KAAjD,CAAiDwK,IAOjDm+C,GAAA,SAAA3oD,GAEE,SAAA2oD,EAAmB5uD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0hB,GAAsC3sD,IAAQrN,YADpDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO4tD,YADkCp7D,EAAAm8D,EAAA3oD,KAApD,CAAoDyK,IAOpDm+C,GAAA,SAAA5oD,GAEE,SAAA4oD,IAAA,IAAA7yD,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0hB,KAAqCh6D,YAFrDqJ,EAAAiE,KAAO6tD,YADuCr7D,EAAAo8D,EAAA5oD,KAAzD,CAAyD0K,IAOzDm+C,GAAA,SAAA7oD,GAEE,SAAA6oD,EACS9uD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2hB,KAAuCj6D,YALvDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO8tD,YAD6Bt7D,EAAAq8D,EAAA7oD,KAA/C,CAA+CuK,IAY/Cu+C,GAAA,SAAA9oD,GAEE,SAAA8oD,EAAmB/uD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2hB,GAAwC5sD,IAAQrN,YADtDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+tD,YADiCv7D,EAAAs8D,EAAA9oD,KAAnD,CAAmDwK,IAOnDu+C,GAAA,SAAA/oD,GAEE,SAAA+oD,EAAmBhvD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2hB,GAAwC5sD,IAAQrN,YADtDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOguD,YADoCx7D,EAAAu8D,EAAA/oD,KAAtD,CAAsDyK,IAOtDu+C,GAAA,SAAAhpD,GAEE,SAAAgpD,IAAA,IAAAjzD,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2hB,KAAuCj6D,YAFvDqJ,EAAAiE,KAAOiuD,YADyCz7D,EAAAw8D,EAAAhpD,KAA3D,CAA2D0K,IAO3Du+C,GAAA,SAAAjpD,GAEE,SAAAipD,EACSlvD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4hB,KAAiCl6D,YALjDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOkuD,YADuB17D,EAAAy8D,EAAAjpD,KAAzC,CAAyCuK,IAYzC2+C,GAAA,SAAAlpD,GAEE,SAAAkpD,EAAmBnvD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4hB,GAAkC7sD,IAAQrN,YADhDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOmuD,YAD2B37D,EAAA08D,EAAAlpD,KAA7C,CAA6CwK,IAO7C2+C,GAAA,SAAAnpD,GAEE,SAAAmpD,EAAmBpvD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4hB,GAAkC7sD,IAAQrN,YADhDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOouD,YAD8B57D,EAAA28D,EAAAnpD,KAAhD,CAAgDyK,IC3KnC2+C,GAA0B,iCAC1BC,GACX,sCACWC,GACX,yCAEFC,GAEE,WADS78D,KAAAsN,KAAOovD,IAIlBI,GAEE,SAAmBzvD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOqvD,IAIlBI,GAEE,SAAmB1vD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOsvD,IClBLI,GACX,uCACWC,GACX,+CACWC,GACX,4CAEFC,GAEE,SAAmB9vD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO0vD,IAIlBI,GAEE,SAAmB/vD,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO4vD,IAIlBG,GAAA,WACWr9D,KAAAsN,KAAO2vD,ICNLK,GACX,uCACWC,GACX,4CACWC,GACX,+CACWC,GACX,yCACWC,GACX,8CACWC,GACX,iDACWC,GACX,wCACWC,GACX,wCAEFC,GAAA,SAAAxqD,GAEE,SAAAwqD,EAAmBzwD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMm6D,KAAyBn6D,YADdqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOgwD,YAD+Bx9D,EAAAg+D,EAAAxqD,KAAjD,CAAiD+R,IAOjD04C,GAAA,SAAAzqD,GAEE,SAAAyqD,EAAmB1wD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMm6D,GAA0B9sD,IAAQrN,YADvBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOiwD,YADmCz9D,EAAAi+D,EAAAzqD,KAArD,CAAqDmS,IAOrDu4C,GAAA,SAAA1qD,GAEE,SAAA0qD,EAAmB3wD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMm6D,KAAyBn6D,YADdqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOkwD,YADsC19D,EAAAk+D,EAAA1qD,KAAxD,CAAwDiS,IAOxD04C,GAAA,SAAA3qD,GAEE,SAAA2qD,EACS5wD,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBwgB,KAA2C94D,YAF3DqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOmwD,YADiC39D,EAAAm+D,EAAA3qD,KAAnD,CAAmDuK,IASnDqgD,GAAA,SAAA5qD,GAEE,SAAA4qD,EAAmB7wD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBwgB,GAA4CzrD,IAAQrN,YAD1DqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOowD,YADqC59D,EAAAo+D,EAAA5qD,KAAvD,CAAuDwK,IAOvDqgD,GAAA,SAAA7qD,GAEE,SAAA6qD,EAAmB9wD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBwgB,KAA2C94D,YADjDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOqwD,YADwC79D,EAAAq+D,EAAA7qD,KAA1D,CAA0DyK,IAO1DqgD,GAAA,SAAA9qD,GAEE,SAAA8qD,IAAA,IAAA/0D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBwgB,KAA2C94D,YAF3DqJ,EAAAiE,KAAOswD,YADgC99D,EAAAs+D,EAAA9qD,KAAlD,CAAkD0K,IAOlDqgD,GAAA,SAAA/qD,GAEE,SAAA+qD,IAAA,IAAAh1D,EACEiK,EAAA9P,KAAAxD,KAAMm6D,KAAyBn6D,YAFxBqJ,EAAAiE,KAAOuwD,YADgC/9D,EAAAu+D,EAAA/qD,KAAlD,CAAkDqS,ICpErC24C,GAAqB,4BACrBC,GAA0B,iCAC1BC,GAA6B,oCAC7BC,GAAsB,6BAEtBC,GAAe,sBACfC,GAAoB,2BACpBC,GAAuB,8BACvBC,GAA6B,oCAE1CC,GAAA,SAAAxrD,GAEE,SAAAwrD,EACSzxD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAM05D,KAAmB15D,YALlBqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOgxD,YADoBx+D,EAAAg/D,EAAAxrD,KAAtC,CAAsC2J,IAYtC8hD,GAAA,SAAAzrD,GAEE,SAAAyrD,EAAmB1xD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM05D,GAAoBrsD,IAAQrN,YADjBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOixD,YADwBz+D,EAAAi/D,EAAAzrD,KAA1C,CAA0C4J,IAO1C8hD,GAAA,SAAA1rD,GAEE,SAAA0rD,EAAmB3xD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM05D,KAAmB15D,YADRqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOkxD,YAD2B1+D,EAAAk/D,EAAA1rD,KAA7C,CAA6C6J,IAO7C8hD,GAAA,SAAA3rD,GAEE,SAAA2rD,IAAA,IAAA51D,EACEiK,EAAA9P,KAAAxD,KAAM05D,KAAmB15D,YAFlBqJ,EAAAiE,KAAOmxD,YADqB3+D,EAAAm/D,EAAA3rD,KAAvC,CAAuC8J,IAOvC8hD,GAAA,SAAA5rD,GAEE,SAAA4rD,EACS7xD,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2gB,KAAwBj5D,YANxCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOoxD,YADe5+D,EAAAo/D,EAAA5rD,KAAjC,CAAiC0oC,IAajCmjB,GAAA,SAAA7rD,GAEE,SAAA6rD,EAAmB9xD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2gB,GAAyB5rD,IAAQrN,YADvCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOqxD,YADmB7+D,EAAAq/D,EAAA7rD,KAArC,CAAqC4oC,IAOrCkjB,GAAA,SAAA9rD,GAEE,SAAA8rD,IAAA,IAAA/1D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2gB,KAAwBj5D,YAFxCqJ,EAAAiE,KAAOsxD,YADsB9+D,EAAAs/D,EAAA9rD,KAAxC,CAAwC8oC,IAOxCijB,GAAA,SAAA/rD,GAEE,SAAA+rD,IAAA,IAAAh2D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB2gB,KAAwBj5D,YAFxCqJ,EAAAiE,KAAOuxD,YAD2B/+D,EAAAu/D,EAAA/rD,KAA7C,CAA6CgpC,IChEhCgjB,GAA8B,qCAC9BC,GACX,0CACWC,GACX,6CAEWC,GACX,2CACWC,GACX,gDACWC,GACX,mDAEWC,GAA8B,qCAC9BC,GACX,0CACWC,GACX,6CAEWC,GACX,6CACWC,GACX,kDACWC,GACX,qDAEWC,GACX,4CACWC,GACX,yCACWC,GACX,6CAEFC,GAAA,SAAA/sD,GAEE,SAAA+sD,EACShzD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMy5D,KAA4Bz5D,YAL3BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOgyD,YAD4Bx/D,EAAAugE,EAAA/sD,KAA9C,CAA8C2J,IAY9CqjD,GAAA,SAAAhtD,GAEE,SAAAgtD,EAAmBjzD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMy5D,GAA6BpsD,IAAQrN,YAD1BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOiyD,YADgCz/D,EAAAwgE,EAAAhtD,KAAlD,CAAkD4J,IAOlDqjD,GAAA,SAAAjtD,GAEE,SAAAitD,EAAmBlzD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMy5D,KAA4Bz5D,YADjBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOkyD,YADmC1/D,EAAAygE,EAAAjtD,KAArD,CAAqD6J,IAOrDqjD,GAAA,SAAAltD,GAEE,SAAAktD,EACSnzD,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMy5D,KAA4Bz5D,YAL3BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOmyD,YAD0B3/D,EAAA0gE,EAAAltD,KAA5C,CAA4C2J,IAY5CwjD,GAAA,SAAAntD,GAEE,SAAAmtD,EAAmBpzD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMy5D,GAA6BpsD,IAAQrN,YAD1BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOoyD,YAD8B5/D,EAAA2gE,EAAAntD,KAAhD,CAAgD4J,IAOhDwjD,GAAA,SAAAptD,GAEE,SAAAotD,EAAmBrzD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMy5D,KAA4Bz5D,YADjBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOqyD,YADiC7/D,EAAA4gE,EAAAptD,KAAnD,CAAmD6J,IAOnDwjD,GAAA,SAAArtD,GAEE,SAAAqtD,EACStzD,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4gB,KAAyBl5D,YANzCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOsyD,YAD4B9/D,EAAA6gE,EAAArtD,KAA9C,CAA8C0oC,IAa9C4kB,GAAA,SAAAttD,GAEE,SAAAstD,EAAmBvzD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4gB,GAA0B7rD,IAAQrN,YADxCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOuyD,YADgC//D,EAAA8gE,EAAAttD,KAAlD,CAAkD4oC,IAOlD2kB,GAAA,SAAAvtD,GAEE,SAAAutD,IAAA,IAAAx3D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4gB,KAAyBl5D,YAFzCqJ,EAAAiE,KAAOwyD,YADmChgE,EAAA+gE,EAAAvtD,KAArD,CAAqD8oC,IAOrD0kB,GAAA,SAAAxtD,GAEE,SAAAwtD,EACSzzD,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAMw5D,KAAqBx5D,YAPpBqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOyyD,YAD8BjgE,EAAAghE,EAAAxtD,KAAhD,CAAgD2J,IAchD8jD,GAAA,SAAAztD,GAEE,SAAAytD,EAAmB1zD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMw5D,GAAsBnsD,IAAQrN,YADnBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO0yD,YADkClgE,EAAAihE,EAAAztD,KAApD,CAAoD4J,IAOpD8jD,GAAA,SAAA1tD,GAEE,SAAA0tD,EAAmB3zD,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMw5D,KAAqBx5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO2yD,YADqCngE,EAAAkhE,EAAA1tD,KAAvD,CAAuD6J,IAOvD8jD,GAAA,SAAA3tD,GAEE,SAAA2tD,IAAA,IAAA53D,EACEiK,EAAA9P,KAAAxD,KAAMy5D,KAA4Bz5D,YAF3BqJ,EAAAiE,KAAO4yD,YAD2BpgE,EAAAmhE,EAAA3tD,KAA7C,CAA6C8J,IAO7C8jD,GAAA,SAAA5tD,GAEE,SAAA4tD,IAAA,IAAA73D,EACEiK,EAAA9P,KAAAxD,KAAMw5D,KAAqBx5D,YAFpBqJ,EAAAiE,KAAO6yD,YAD+BrgE,EAAAohE,EAAA5tD,KAAjD,CAAiD8J,IAOjD+jD,GAAA,SAAA7tD,GAEE,SAAA6tD,IAAA,IAAA93D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB4gB,KAAyBl5D,YAFzCqJ,EAAAiE,KAAO8yD,YAD4BtgE,EAAAqhE,EAAA7tD,KAA9C,CAA8CgpC,IC1KjC8kB,GAA4B,mCAC5BC,GACX,wCACWC,GACX,2CAEWC,GACX,yCACWC,GACX,8CACWC,GACX,iDAEWC,GAA6B,oCAC7BC,GACX,yCACWC,GACX,6CAEFC,GAAA,SAAAvuD,GAEE,SAAAuuD,EAAmBx0D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO8zD,YAD0BthE,EAAA+hE,EAAAvuD,KAA5C,CAA4C+R,IAO5Cy8C,GAAA,SAAAxuD,GAEE,SAAAwuD,EAAmBz0D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,GAAsBhsD,IAAQrN,YADnBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+zD,YAD8BvhE,EAAAgiE,EAAAxuD,KAAhD,CAAgDmS,IAOhDs8C,GAAA,SAAAzuD,GAEE,SAAAyuD,EAAmB10D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOg0D,YADiCxhE,EAAAiiE,EAAAzuD,KAAnD,CAAmDiS,IAOnDy8C,GAAA,SAAA1uD,GAEE,SAAA0uD,EAAmB30D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOi0D,YAD+BzhE,EAAAkiE,EAAA1uD,KAAjD,CAAiD+R,IAOjD48C,GAAA,SAAA3uD,GAEE,SAAA2uD,EAAmB50D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,GAAsBhsD,IAAQrN,YADnBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk0D,YADmC1hE,EAAAmiE,EAAA3uD,KAArD,CAAqDmS,IAOrDy8C,GAAA,SAAA5uD,GAEE,SAAA4uD,EAAmB70D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOm0D,YADsC3hE,EAAAoiE,EAAA5uD,KAAxD,CAAwDiS,IAOxD48C,GAAA,SAAA7uD,GAEE,SAAA6uD,EAAmB90D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo0D,YAD2B5hE,EAAAqiE,EAAA7uD,KAA7C,CAA6C+R,IAO7C+8C,GAAA,SAAA9uD,GAEE,SAAA8uD,EAAmB/0D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,GAAsBhsD,IAAQrN,YADnBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq0D,YAD+B7hE,EAAAsiE,EAAA9uD,KAAjD,CAAiDmS,IAOjD48C,GAAA,SAAA/uD,GAEE,SAAA+uD,EAAmBh1D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMq5D,KAAqBr5D,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs0D,YADkC9hE,EAAAuiE,EAAA/uD,KAApD,CAAoDiS,ICvDvC+8C,GAAyB,yBACzBC,GAA8B,8BAC9BC,GAAiC,iCAEjCC,GAA0B,0BAC1BC,GACX,kCACWC,GAA+B,+BAE/BC,GAAuB,uBACvBC,GAA4B,4BAC5BC,GAA+B,+BAE/BC,GAA6B,6BAC7BC,GAAgC,gCAEhCC,GAA0B,0BAEvCC,GAAA,SAAA5vD,GAEE,SAAA4vD,EACS71D,GADT,IAAAhE,EAUEiK,EAAA9P,KAAAxD,KAAMo6D,KAAkBp6D,YATjBqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOg1D,YADwBxiE,EAAAojE,EAAA5vD,KAA1C,CAA0C2J,IAgB1CkmD,GAAA,SAAA7vD,GAEE,SAAA6vD,EAAmB91D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo6D,GAAmB/sD,IAAQrN,YADhBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOi1D,YAD4BziE,EAAAqjE,EAAA7vD,KAA9C,CAA8C4J,IAO9CkmD,GAAA,SAAA9vD,GAEE,SAAA8vD,EAAmB/1D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo6D,KAAkBp6D,YADPqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk1D,YAD+B1iE,EAAAsjE,EAAA9vD,KAAjD,CAAiD6J,IAOjDkmD,GAAA,SAAA/vD,GAEE,SAAA+vD,EACSh2D,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0gB,KAAoCh5D,YANpDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOm1D,YADyB3iE,EAAAujE,EAAA/vD,KAA3C,CAA2CuK,IAa3CylD,GAAA,SAAAhwD,GAEE,SAAAgwD,EAAmBj2D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0gB,KAAoCh5D,YAD1CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo1D,YADgC5iE,EAAAwjE,EAAAhwD,KAAlD,CAAkDyK,IAOlDwlD,GAAA,SAAAjwD,GAEE,SAAAiwD,EAAmBl2D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0gB,GAAqC3rD,IAAQrN,YADnDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq1D,YAD6B7iE,EAAAyjE,EAAAjwD,KAA/C,CAA+CwK,IAO/C0lD,GAAA,SAAAlwD,GAEE,SAAAkwD,EACSn2D,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBygB,KAAgC/4D,YANhDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOs1D,YADsB9iE,EAAA0jE,EAAAlwD,KAAxC,CAAwCuK,IAaxC4lD,GAAA,SAAAnwD,GAEE,SAAAmwD,EAAmBp2D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBygB,KAAgC/4D,YADtCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOw1D,YAD6BhjE,EAAA2jE,EAAAnwD,KAA/C,CAA+CyK,IAO/C2lD,GAAA,SAAApwD,GAEE,SAAAowD,EAAmBr2D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBygB,GAAiC1rD,IAAQrN,YAD/CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu1D,YAD0B/iE,EAAA4jE,EAAApwD,KAA5C,CAA4CwK,IAO5C6lD,GAAA,SAAArwD,GAEE,SAAAqwD,IAAA,IAAAt6D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBygB,KAAgC/4D,YAFhDqJ,EAAAiE,KAAOy1D,YADyBjjE,EAAA6jE,EAAArwD,KAA3C,CAA2C0K,IAO3C4lD,GAAA,SAAAtwD,GAEE,SAAAswD,IAAA,IAAAv6D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB0gB,KAAoCh5D,YAFpDqJ,EAAAiE,KAAO01D,YAD4BljE,EAAA8jE,EAAAtwD,KAA9C,CAA8C0K,IAO9C6lD,GAAA,SAAAvwD,GAEE,SAAAuwD,IAAA,IAAAx6D,EACEiK,EAAA9P,KAAAxD,KAAMo6D,KAAkBp6D,YAFjBqJ,EAAAiE,KAAO21D,YADyBnjE,EAAA+jE,EAAAvwD,KAA3C,CAA2C8J,ICvI9B0mD,GAAe,sBACfC,GAAuB,8BACvBC,GAAoB,2BACpBC,GAAgB,uBAE7BC,GAAA,SAAA5wD,GAEE,SAAA4wD,EAAmB72D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM85D,KAAQ95D,YADGqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOw2D,YADehkE,EAAAokE,EAAA5wD,KAAjC,CAAiC+R,IAOjC8+C,GAAA,SAAA7wD,GAEE,SAAA6wD,EAAmB92D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM85D,GAASzsD,IAAQrN,YADNqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO02D,YADmBlkE,EAAAqkE,EAAA7wD,KAArC,CAAqCmS,IAOrC2+C,GAAA,SAAA9wD,GAEE,SAAA8wD,EAAmB/2D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM85D,KAAQ95D,YADGqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOy2D,YADsBjkE,EAAAskE,EAAA9wD,KAAxC,CAAwCiS,IAOxC8+C,GAEE,WADSrkE,KAAAsN,KAAO22D,ICxBLK,GACX,0CACWC,GACX,kDACWC,GACX,+CACWC,GACX,2CAEWC,GAA6B,oCAC7BC,GACX,4CACWC,GACX,yCACWC,GACX,0CAEFC,GAAA,SAAAxxD,GAEE,SAAAwxD,EACSz3D,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAM65D,KAAiC75D,YALhCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOg3D,YADiCxkE,EAAAglE,EAAAxxD,KAAnD,CAAmD+R,IAYnD0/C,GAAA,SAAAzxD,GAEE,SAAAyxD,EAAmB13D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM65D,KAAiC75D,YADtBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOi3D,YADwCzkE,EAAAilE,EAAAzxD,KAA1D,CAA0DiS,IAO1Dy/C,GAAA,SAAA1xD,GAEE,SAAA0xD,EAAmB33D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM65D,GAAkCxsD,IAAQrN,YAD/BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk3D,YADqC1kE,EAAAklE,EAAA1xD,KAAvD,CAAuDmS,IAOvDw/C,GAAA,SAAA3xD,GAEE,SAAA2xD,IAAA,IAAA57D,EACEiK,EAAA9P,KAAAxD,KAAM65D,KAAiC75D,YAFhCqJ,EAAAiE,KAAOm3D,YADkC3kE,EAAAmlE,EAAA3xD,KAApD,CAAoDqS,IAOpDu/C,GAAA,SAAA5xD,GAEE,SAAA4xD,EACS73D,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB6gB,KAAsCn5D,YALtDqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOo3D,YAD4B5kE,EAAAolE,EAAA5xD,KAA9C,CAA8C0oC,IAY9CmpB,GAAA,SAAA7xD,GAEE,SAAA6xD,EAAmB93D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB6gB,KAAsCn5D,YAD5CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq3D,YADmC7kE,EAAAqlE,EAAA7xD,KAArD,CAAqD8oC,IAOrDgpB,GAAA,SAAA9xD,GAEE,SAAA8xD,EAAmB/3D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB6gB,GAAuC9rD,IAAQrN,YADrDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs3D,YADgC9kE,EAAAslE,EAAA9xD,KAAlD,CAAkD4oC,IAOlDmpB,GAAA,SAAA/xD,GAEE,SAAA+xD,IAAA,IAAAh8D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiB6gB,KAAsCn5D,YAFtDqJ,EAAAiE,KAAOu3D,YADiC/kE,EAAAulE,EAAA/xD,KAAnD,CAAmDgpC,IClFtCgpB,GAAiB,wBACjBC,GAAyB,gCACzBC,GAAsB,6BAEnCC,GAEE,SAAmBp4D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOg4D,IAIlBI,GAEE,SAAmBr4D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOk4D,IAIlBG,GAAA,WACW3lE,KAAAsN,KAAOi4D,ICdLK,GAAc,qBACdC,GAAmB,0BACnBC,GAAsB,6BAEnCC,GAEE,WADS/lE,KAAAsN,KAAOs4D,IAIlBI,GAEE,SAAmB34D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOu4D,IAIlBI,GAEE,SAAmB54D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOw4D,ICdLI,GAAe,sBACfC,GAAqB,4BACrBC,GAAuB,8BACvBC,GAAc,qBAE3BC,GAAA,SAAAhzD,GAEE,SAAAgzD,EACSj5D,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBigB,KAAwBv4D,YANxCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO44D,YADqBpmE,EAAAwmE,EAAAhzD,KAAvC,CAAuC0oC,IAavCuqB,GAAA,SAAAjzD,GAEE,SAAAizD,EAAmBC,GAAnB,IAAAn9D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBigB,KAAwBv4D,YAD9BqJ,EAAAm9D,OAAAA,EADVn9D,EAAAiE,KAAO84D,YAD4BtmE,EAAAymE,EAAAjzD,KAA9C,CAA8C8oC,IAO9CqqB,GAAA,SAAAnzD,GAEE,SAAAmzD,EAAmBp5D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBigB,GAAyBlrD,IAAQrN,YADvCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO64D,YAD0BrmE,EAAA2mE,EAAAnzD,KAA5C,CAA4C4oC,IAO5CwqB,GAAA,SAAApzD,GAEE,SAAAozD,IAAA,IAAAr9D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBigB,KAAwBv4D,YAFxCqJ,EAAAiE,KAAO+4D,YAD0BvmE,EAAA4mE,EAAApzD,KAA5C,CAA4CgpC,IChC/BqqB,GAAkB,yBAClBC,GAAuB,8BACvBC,GAA0B,iCAC1BC,GACX,6CAEFC,GAAA,SAAAzzD,GAEE,SAAAyzD,EACS15D,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBkgB,KAA2Bx4D,YAF3CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOq5D,YADkB7mE,EAAAinE,EAAAzzD,KAApC,CAAoC0oC,IASpCgrB,GAAA,SAAA1zD,GAEE,SAAA0zD,EAAmB35D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBkgB,GAA4BnrD,IAAQrN,YAD1CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs5D,YADsB9mE,EAAAknE,EAAA1zD,KAAxC,CAAwC4oC,IAOxC+qB,GAAA,SAAA3zD,GAEE,SAAA2zD,IAAA,IAAA59D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBkgB,KAA2Bx4D,YAF3CqJ,EAAAiE,KAAOu5D,YADyB/mE,EAAAmnE,EAAA3zD,KAA3C,CAA2C8oC,IAO3C8qB,GAAA,SAAA5zD,GAEE,SAAA4zD,IAAA,IAAA79D,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBkgB,KAA2Bx4D,YAF3CqJ,EAAAiE,KAAOw5D,YADuBhnE,EAAAonE,EAAA5zD,KAAzC,CAAyCgpC,IC7B5B6qB,GAAsB,6BACtBC,GAA2B,kCAC3BC,GAA8B,qCAE9BC,GAAmB,0BACnBC,GAAwB,+BACxBC,GAA2B,kCAE3BC,GAAsB,6BACtBC,GAA2B,kCAC3BC,GAA8B,qCAE9BC,GAAsB,6BACtBC,GAA2B,kCAC3BC,GAA8B,qCAE3CC,GAAA,SAAAz0D,GAEE,SAAAy0D,EAAmB16D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO65D,YADqBrnE,EAAAioE,EAAAz0D,KAAvC,CAAuC+R,IAOvC2iD,GAAA,SAAA10D,GAEE,SAAA00D,EAAmB36D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,GAAgBlsD,IAAQrN,YADbqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO85D,YADyBtnE,EAAAkoE,EAAA10D,KAA3C,CAA2CmS,IAO3CwiD,GAAA,SAAA30D,GAEE,SAAA20D,EAAmB56D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+5D,YAD4BvnE,EAAAmoE,EAAA30D,KAA9C,CAA8CiS,IAQ9C2iD,GAAA,SAAA50D,GAEE,SAAA40D,EAAmB76D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOg6D,YADkBxnE,EAAAooE,EAAA50D,KAApC,CAAoC+R,IAOpC8iD,GAAA,SAAA70D,GAEE,SAAA60D,EAAmB96D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,GAAgBlsD,IAAQrN,YADbqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOi6D,YADsBznE,EAAAqoE,EAAA70D,KAAxC,CAAwCmS,IAOxC2iD,GAAA,SAAA90D,GAEE,SAAA80D,EAAmB/6D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk6D,YADyB1nE,EAAAsoE,EAAA90D,KAA3C,CAA2CiS,IAQ3C8iD,GAAA,SAAA/0D,GAEE,SAAA+0D,EACSh7D,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YAFdqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOm6D,YADqB3nE,EAAAuoE,EAAA/0D,KAAvC,CAAuC+R,IASvCijD,GAAA,SAAAh1D,GAEE,SAAAg1D,EAAmBj7D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,GAAgBlsD,IAAQrN,YADbqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo6D,YADyB5nE,EAAAwoE,EAAAh1D,KAA3C,CAA2CmS,IAO3C8iD,GAAA,SAAAj1D,GAEE,SAAAi1D,EAAmBl7D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq6D,YAD4B7nE,EAAAyoE,EAAAj1D,KAA9C,CAA8CiS,IAQ9CijD,GAAA,SAAAl1D,GAEE,SAAAk1D,EAAmBn7D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs6D,YADqB9nE,EAAA0oE,EAAAl1D,KAAvC,CAAuC+R,IAOvCojD,GAAA,SAAAn1D,GAEE,SAAAm1D,EAAmBp7D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,GAAgBlsD,IAAQrN,YADbqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu6D,YADyB/nE,EAAA2oE,EAAAn1D,KAA3C,CAA2CmS,IAO3CijD,GAAA,SAAAp1D,GAEE,SAAAo1D,EAAmBr7D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMu5D,KAAev5D,YADJqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOw6D,YAD4BhoE,EAAA4oE,EAAAp1D,KAA9C,CAA8CiS,IC7FjCojD,GAAqB,4BACrBC,GAA6B,oCAC7BC,GAA0B,iCAC1BC,GAA2B,kCAE3BC,GAAoB,2BACpBC,GAAyB,gCACzBC,GAA4B,mCAC5BC,GACX,yCACWC,GAA6B,oCAE7BC,GAAwB,+BACxBC,GAA6B,oCAC7BC,GACX,uCACWC,GACX,6CAEFC,GAAA,SAAAl2D,GAEE,SAAAk2D,EAAmBn8D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo5D,KAAcp5D,YADHqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOq7D,YADoB7oE,EAAA0pE,EAAAl2D,KAAtC,CAAsC+R,IAOtCokD,GAAA,SAAAn2D,GAEE,SAAAm2D,EAAmBp8D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo5D,GAAe/rD,IAAQrN,YADZqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu7D,YADwB/oE,EAAA2pE,EAAAn2D,KAA1C,CAA0CmS,IAO1CikD,GAAA,SAAAp2D,GAEE,SAAAo2D,EAAmBr8D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMo5D,KAAcp5D,YADHqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs7D,YAD2B9oE,EAAA4pE,EAAAp2D,KAA7C,CAA6CiS,IAO7CokD,GAAA,SAAAr2D,GAEE,SAAAq2D,IAAA,IAAAtgE,EACEiK,EAAA9P,KAAAxD,KAAMo5D,KAAcp5D,YAFbqJ,EAAAiE,KAAOw7D,YADyBhpE,EAAA6pE,EAAAr2D,KAA3C,CAA2CqS,IAO3CikD,GAAA,SAAAt2D,GAEE,SAAAs2D,EACSv8D,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBsgB,KAAwB54D,YANxCqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOy7D,YADmBjpE,EAAA8pE,EAAAt2D,KAArC,CAAqC0oC,IAarC6tB,GAAA,SAAAv2D,GAEE,SAAAu2D,EAAYx8D,GAAZ,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBsgB,GAAyBvrD,IAAQrN,YAFjDqJ,EAAAiE,KAAO07D,YADuBlpE,EAAA+pE,EAAAv2D,KAAzC,CAAyC4oC,IAOzC4tB,GAAA,SAAAx2D,GAEE,SAAAw2D,EAAmBC,GAAnB,IAAA1gE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBsgB,KAAwB54D,YAD9BqJ,EAAA0gE,gBAAAA,EADV1gE,EAAAiE,KAAO27D,YAD0BnpE,EAAAgqE,EAAAx2D,KAA5C,CAA4C8oC,IAO5C4tB,GAAA,SAAA12D,GAEE,SAAA02D,IAAA,IAAA3gE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBsgB,KAAwB54D,YAFxCqJ,EAAAiE,KAAO47D,YAD+BppE,EAAAkqE,EAAA12D,KAAjD,CAAiDgpC,IAOjD2tB,GAEE,SACS58D,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAO67D,IAUlBe,GAAA,SAAA52D,GAEE,SAAA42D,EACS78D,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBugB,KAA4B74D,YAL5CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAO87D,YADuBtpE,EAAAoqE,EAAA52D,KAAzC,CAAyC0oC,IAYzCmuB,GAAA,SAAA72D,GAEE,SAAA62D,EAAY98D,GAAZ,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBugB,GAA6BxrD,IAAQrN,YAFrDqJ,EAAAiE,KAAO+7D,YAD2BvpE,EAAAqqE,EAAA72D,KAA7C,CAA6C4oC,IAO7CkuB,GAAA,SAAA92D,GAEE,SAAA82D,IAAA,IAAA/gE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBugB,KAA4B74D,YAF5CqJ,EAAAiE,KAAOg8D,YAD8BxpE,EAAAsqE,EAAA92D,KAAhD,CAAgD8oC,IAOhDiuB,GAAA,SAAA/2D,GAEE,SAAA+2D,IAAA,IAAAhhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBugB,KAA4B74D,YAF5CqJ,EAAAiE,KAAOi8D,YADmCzpE,EAAAuqE,EAAA/2D,KAArD,CAAqDgpC,IC3HxCguB,GAA2B,iCAC3BC,GACX,sCACWC,GACX,yCAEFC,GAAA,SAAAn3D,GAEE,SAAAm3D,EAAmBp9D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM25D,KAAkB35D,YADPqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOg9D,YADyBxqE,EAAA2qE,EAAAn3D,KAA3C,CAA2C+R,IAO3CqlD,GAAA,SAAAp3D,GAEE,SAAAo3D,EAAmBr9D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM25D,GAAmBtsD,IAAQrN,YADhBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOi9D,YAD6BzqE,EAAA4qE,EAAAp3D,KAA/C,CAA+CmS,IAO/CklD,GAAA,SAAAr3D,GAEE,SAAAq3D,EAAmBt9D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM25D,KAAkB35D,YADPqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOk9D,YADgC1qE,EAAA6qE,EAAAr3D,KAAlD,CAAkDiS,IClBrCqlD,GAAoB,2BACpBC,GAAyB,gCACzBC,GAA4B,mCAE5BC,GAAsB,6BACtBC,GAA2B,kCAC3BC,GAA8B,qCAC9BC,GAAqB,4BAElCC,GAEE,SAAmB99D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOs9D,IAIlBQ,GAEE,SAAmB/9D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOu9D,IAIlBQ,GAEE,SAAmBh+D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOw9D,IAIlBQ,GAAA,SAAAh4D,GAEE,SAAAg4D,EAAmBj+D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBmgB,KAA+Bz4D,YADrCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOy9D,YADqBjrE,EAAAwrE,EAAAh4D,KAAvC,CAAuC0oC,IAOvCuvB,GAAA,SAAAj4D,GAEE,SAAAi4D,EAAmBl+D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBmgB,GAAgCprD,IAAQrN,YAD9CqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO09D,YADyBlrE,EAAAyrE,EAAAj4D,KAA3C,CAA2C4oC,IAO3CsvB,GAAA,SAAAl4D,GAEE,SAAAk4D,EAAmBC,GAAnB,IAAApiE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBmgB,KAA+Bz4D,YADrCqJ,EAAAoiE,YAAAA,EADVpiE,EAAAiE,KAAO29D,YAD4BnrE,EAAA0rE,EAAAl4D,KAA9C,CAA8C8oC,IAO9CsvB,GAAA,SAAAp4D,GAEE,SAAAo4D,IAAA,IAAAriE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBmgB,KAA+Bz4D,YAF/CqJ,EAAAiE,KAAO49D,YAD0BprE,EAAA4rE,EAAAp4D,KAA5C,CAA4CgpC,IClD/BqvB,GAAwB,8BAErCC,GAAA,WACW5rE,KAAAsN,KAAOq+D,ICALE,GAAmB,0BACnBC,GAAwB,+BACxBC,GAA2B,kCAC3BC,GAAoB,2BAEjCC,GAAA,SAAA34D,GAEE,SAAA24D,EACS5+D,GADT,IAAAhE,EASEiK,EAAA9P,KAAAxD,KAAMs5D,KAAYt5D,YARXqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOu+D,YADkB/rE,EAAAmsE,EAAA34D,KAApC,CAAoC+R,IAepC6mD,GAAA,SAAA54D,GAEE,SAAA44D,EAAmB7+D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs5D,GAAajsD,IAAQrN,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOw+D,YADsBhsE,EAAAosE,EAAA54D,KAAxC,CAAwCmS,IAOxC0mD,GAAA,SAAA74D,GAEE,SAAA64D,EAAmB9+D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs5D,KAAYt5D,YADDqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOy+D,YADyBjsE,EAAAqsE,EAAA74D,KAA3C,CAA2CiS,IAO3C6mD,GAAA,SAAA94D,GAEE,SAAA84D,IAAA,IAAA/iE,EACEiK,EAAA9P,KAAAxD,KAAMs5D,KAAYt5D,YAFXqJ,EAAAiE,KAAO0+D,YADmBlsE,EAAAssE,EAAA94D,KAArC,CAAqCqS,IC7BxB0mD,GAAgB,uBAChBC,GAAqB,4BACrBC,GAAwB,+BACxBC,GAA8B,qCAE9BC,GAAiB,wBACjBC,GAAsB,6BACtBC,GAAyB,gCAEzBC,GAAc,qBACdC,GAAmB,0BACnBC,GAAsB,6BACtBC,GAAoB,yCAEjCC,GAAA,SAAA15D,GAEE,SAAA05D,EAAmB3/D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBogB,KAAyB14D,YAD/BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO++D,YADgBvsE,EAAAktE,EAAA15D,KAAlC,CAAkC0oC,IAOlCixB,GAAA,SAAA35D,GAEE,SAAA25D,EAAmB5/D,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBogB,GAA0BrrD,IAAQrN,YADxCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOg/D,YADoBxsE,EAAAmtE,EAAA35D,KAAtC,CAAsC4oC,IAOtCgxB,GAAA,SAAA55D,GAEE,SAAA45D,IAAA,IAAA7jE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBogB,KAAyB14D,YAFzCqJ,EAAAiE,KAAOi/D,YADuBzsE,EAAAotE,EAAA55D,KAAzC,CAAyC8oC,IAOzC+wB,GAAA,SAAA75D,GAEE,SAAA65D,IAAA,IAAA9jE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBogB,KAAyB14D,YAFzCqJ,EAAAiE,KAAOk/D,YAD4B1sE,EAAAqtE,EAAA75D,KAA9C,CAA8CgpC,IAO9C8wB,GAEE,SAAmB//D,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOm/D,IAIlBY,GAEE,SAAmBhgE,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOo/D,IAIlBY,GAAA,WACWttE,KAAAsN,KAAOq/D,IAGlBY,GAAA,SAAAj6D,GAEE,SAAAi6D,EAAmBlgE,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBqgB,KAAuB34D,YAD7BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs/D,YADc9sE,EAAAytE,EAAAj6D,KAAhC,CAAgC0oC,IAOhCwxB,GAAA,SAAAl6D,GAEE,SAAAk6D,EAAmBngE,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBqgB,GAAwBtrD,IAAQrN,YADtCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOu/D,YADkB/sE,EAAA0tE,EAAAl6D,KAApC,CAAoC4oC,IAOpCuxB,GAAA,SAAAn6D,GAEE,SAAAm6D,IAAA,IAAApkE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBqgB,KAAuB34D,YAFvCqJ,EAAAiE,KAAOw/D,YADqBhtE,EAAA2tE,EAAAn6D,KAAvC,CAAuC8oC,IAOvCsxB,GAAA,SAAAp6D,GAEE,SAAAo6D,IAAA,IAAArkE,EACEiK,EAAA9P,KAAAxD,KAAMs4C,GAAiBqgB,KAAuB34D,YAFvCqJ,EAAAiE,KAAOy/D,YADmBjtE,EAAA4tE,EAAAp6D,KAArC,CAAqCgpC,IClFxBqxB,GACX,wCACWC,GACX,6CACWC,GACX,gDACWC,GACX,yCAEFC,GAAA,SAAAz6D,GAEE,SAAAy6D,EACS1gE,GADT,IAAAhE,EAQEiK,EAAA9P,KAAAxD,KAAM45D,KAA0B55D,YAPzBqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOqgE,YAD+B7tE,EAAAiuE,EAAAz6D,KAAjD,CAAiD+R,IAcjD2oD,GAAA,SAAA16D,GAEE,SAAA06D,EAAmB3gE,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM45D,GAA2BvsD,IAAQrN,YADxBqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOsgE,YADmC9tE,EAAAkuE,EAAA16D,KAArD,CAAqDmS,IAOrDwoD,GAAA,SAAA36D,GAEE,SAAA26D,EAAmB5gE,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM45D,KAA0B55D,YADfqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOugE,YADsC/tE,EAAAmuE,EAAA36D,KAAxD,CAAwDiS,IAOxD2oD,GAAA,SAAA56D,GAEE,SAAA46D,IAAA,IAAA7kE,EACEiK,EAAA9P,KAAAxD,KAAM45D,KAA0B55D,YAFzBqJ,EAAAiE,KAAOwgE,YADgChuE,EAAAouE,EAAA56D,KAAlD,CAAkDqS,s+RC7BlCwoD,GACdC,GAEA,OAAO,SAAC1pE,GACN,OAAA0pE,EAASxmE,KAAKE,EAAAA,eAAUP,GAAYusD,EAAAA,YAAYpvD,YC+alD,SACUs4B,EACAqxC,EACAlX,EACAmX,EACAC,GALV,IAAAllE,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAquE,0BAAAA,EACAruE,KAAAm3D,yBAAAA,EACAn3D,KAAAsuE,4BAAAA,EACAtuE,KAAAuuE,kBAAAA,EAxaFvuE,KAAAwuE,eAAiBxuE,KAAKg9B,SAASp1B,KACrCu1B,EAAAA,OACEsxC,GACAre,KAKJpwD,KAAA0uE,oBAII1uE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwxC,IACP/jE,EAAAA,KAAI,SAACyT,GAA+C,OAAAA,EAAOhR,WAC3DgnC,EAAAA,UAAS,SAAChnC,GACR,OAAAhE,EAAKglE,0BACFx/B,cAAcxhC,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQyhC,SACtDlnC,KACCysC,EAAAA,UAAS,SAACvF,GAOR,OANAA,EAAmB,UAAIzhC,EAAQyhC,QAAQ8/B,UACnCvhE,EAAQyhC,QAAQ+G,QAAUxoC,EAAQyhC,QAAQ+G,OAAOC,cACnDt2C,OAAOqF,OAAOiqC,EAAQ+G,OAAQ,CAC5BC,aAAczoC,EAAQyhC,QAAQ+G,OAAOC,eAGrCzoC,EAAQwK,SAAW5Q,EACd,CACL,IAAI4nE,GAAmC,CACrCh3D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,OAChB8C,QAASA,KAIN,CACL,IAAIggC,GAA8BzhE,EAAQwK,QAC1C,IAAIg3D,GAAmC,CACrCh3D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,OAChB8C,QAASA,QAKjB7X,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI+mE,GACF3yC,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAgvE,oBAOIhvE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO8xC,IACPrkE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKglE,0BACTt/B,WAAW1hC,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQyhC,QAAQvgC,IAC3D3G,KACCysC,EAAAA,UAAS,WAAM,MAAA,CACb,IAAI66B,GAA0C7hE,EAAQyhC,SACtD,IAAIqgC,GAA0C,CAC5Ct3D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,SAElB,IAAIojC,GACJ,IAAIC,GACJ,IAAIC,GAA2C,CAC7Cz3D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAGpB/U,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIunE,GACFnzC,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAwvE,4BAGIxvE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOsyC,IACP7kE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKglE,0BACTj/B,kBAAkB/hC,EAAQwK,OAAQxK,EAAQ2+B,QAC1CpkC,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAIm7D,GAAkDn7D,MAE/D0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI2nE,GACFvzC,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAA4vE,wCAII5vE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOizB,IACP/b,EAAAA,UAAS,WAAM,MAAA,CACb,IAAIg7B,GACJ,IAAIQ,GACJ,IAAIC,QAKR9vE,KAAA+vE,oCAEI/vE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOsxC,IACP7jE,EAAAA,KAAI,WAAM,OAAA,IAAIwkE,OAIhBpvE,KAAAgwE,2BAEIhwE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOkzB,IACPzlD,EAAAA,KAAI,WAAM,OAAA,IAAIqlE,OAIhBjwE,KAAAkwE,0BAEIlwE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOmzB,IACP1lD,EAAAA,KAAI,WAAM,OAAA,IAAIqlE,OAIhBjwE,KAAAmwE,iBAIInwE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOizC,IACPxlE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKglE,0BACTp/B,QAAQ5hC,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQgjE,gBAChDzoE,KACCysC,EAAAA,UAAS,WACP,MAAO,CACL,IAAIi8B,GACFjjE,EAAQgjE,gBAEV,IAAI5nB,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAItB/U,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIuoE,GAAoCn0C,GAAmBn4B,YAKrEkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAwwE,sBAIIxwE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOszC,IACP7lE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GAER,OAAOhE,EAAK8tD,yBACTh3D,OAAOkN,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQ2iC,gBAC/CpoC,KACCysC,EAAAA,UAAS,SAACxkB,GACR,OAAIxiB,EAAQwK,SAAW5Q,EACd,CAAC,IAAIypE,GAA4C7gD,IAEjD,CACL,IAAI8gD,GAAmCtjE,EAAQwK,QAC/C,IAAI64D,GAA4C7gD,OAItDoH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4oE,GACFx0C,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAA6wE,mBAGI7wE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO2zC,IACPlmE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAK8tD,yBACTpjC,IAAI1mB,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQ2iC,eAAezhC,IAC3D3G,KACCgD,EAAAA,KACE,WACE,OAAA,IAAImmE,GACF1jE,EAAQ2iC,mBAGd/Y,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIgpE,GACF50C,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAixE,YAKIjxE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+zC,IACPtmE,EAAAA,KAAI,SAACyT,GAAgB,OAAAA,EAAOhR,WAC5BgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKklE,kBACTrgC,WAAW7gC,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQ8gC,cACnDvmC,KACC6hB,EAAAA,WAAU,SAAClV,GAAS,MAAA,CAClB,IAAI48D,GAAuB,CAAEnlC,OAAQ3+B,EAAQ2+B,SAC7C,IAAIolC,GAAkC78D,OAExC0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIqpE,GAA+Bj1C,GAAmBn4B,YAIjEkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAsxE,qBAGItxE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOo0C,IACP3mE,EAAAA,KAAI,SAACyT,GAAgD,OAAAA,EAAOhR,WAC5DgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKklE,kBACTngC,oBAAoB/gC,EAAQwK,OAAQxK,EAAQ2+B,QAC5CpkC,KACCgD,EAAAA,KACE,SAAC2J,GACC,OAAA,IAAIi9D,GAA2Cj9D,MAEnD0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIypE,GACFr1C,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAA0xE,0BAEI1xE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOw0C,IACP/mE,EAAAA,KAAI,SAACyT,GAAyC,OAAAA,EAAOhR,WACrDzC,EAAAA,KAAI,SAACyC,GACH,OAAO,IAAIukE,GAAoC,CAC7C/5D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAMtBhsC,KAAA6xE,8BAGI7xE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO20C,IACPlnE,EAAAA,KACE,SAACyT,GAAyD,OAAAA,EAAOhR,WAEnEP,EAAAA,QAAO,SAACO,GAAY,OAAArB,QAAQqB,EAAQ2+B,WACpCviB,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKklE,kBACTlgC,6BAA6BhhC,EAAQwK,OAAQxK,EAAQ2+B,QACrDpkC,KACCgD,EAAAA,KAAI,WAAM,OAAA,IAAImnE,MACd96C,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIgqE,GACF51C,GAAmBn4B,YAM/BkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAiyE,2BAIIjyE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+0C,IACPtnE,EAAAA,KAAI,SAACyT,GAAsD,OAAAA,EAAOhR,WAClEP,EAAAA,QAAO,SAACO,GAAY,OAAArB,QAAQqB,EAAQ2+B,WACpCmmC,EAAAA,WAAU,SAAC9kE,GACT,OAAOhE,EAAKklE,kBACTjgC,0BAA0BjhC,EAAQwK,OAAQxK,EAAQ2+B,QAClDpkC,KACCgD,EAAAA,KACE,WACE,OAAA,IAAIwnE,GAAgD5yE,OAAAqF,OAAA,GAC/CwI,OAGT4pB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIwqC,GAA6C7yE,OAAAqF,OAAArF,OAAAqF,OAAA,GAC5CwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAIwkD,GAAqB,CACvBzc,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,kBAM5Bs2D,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAsyE,eAKItyE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOo1C,IACP3nE,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKilE,4BACT7/B,cAAcphC,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQqhC,cACtD9mC,KACCysC,EAAAA,UAAS,SAACm+B,GAAU,MAAA,CAClB,IAAI/pB,GAAqB,CACvBzc,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,SAElB,IAAI46D,GAAqCplE,EAAQqhC,cACjD,IAAIgkC,GAA6C,CAC/C76D,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAGpB/U,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI2qE,GAAkCv2C,GAAmBn4B,YAIpEkqE,GAAWnuE,KAAKwuE,uCAlanBvmE,EAAAA,uDAzBQu1B,EAAAA,eAqBAoR,UACAmB,UAFAvB,UADAR,MAgBP5tC,EAAA,CADCq9B,EAAAA,qDAmDDr9B,EAAA,CADCq9B,EAAAA,qDAyCDr9B,EAAA,CADCq9B,EAAAA,6DA2BDr9B,EAAA,CADCq9B,EAAAA,yEAeDr9B,EAAA,CADCq9B,EAAAA,qEASDr9B,EAAA,CADCq9B,EAAAA,4DASDr9B,EAAA,CADCq9B,EAAAA,2DASDr9B,EAAA,CADCq9B,EAAAA,kDAkCDr9B,EAAA,CADCq9B,EAAAA,uDAoCDr9B,EAAA,CADCq9B,EAAAA,oDA8BDr9B,EAAA,CADCq9B,EAAAA,6CA0BDr9B,EAAA,CADCq9B,EAAAA,sDA4BDr9B,EAAA,CADCq9B,EAAAA,2DAeDr9B,EAAA,CADCq9B,EAAAA,+DA4BDr9B,EAAA,CADCq9B,EAAAA,4DAqCDr9B,EAAA,CADCq9B,EAAAA,uDCzVD,SACUT,EACA41C,GAFV,IAAAvpE,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA4yE,qBAAAA,EA5DV5yE,KAAA6yE,kBAGI7yE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO21C,IACPrpD,EAAAA,WAAU,WACR,OAAOpgB,EAAKupE,qBAAqBpjC,kBAAkB5nC,KACjDgD,EAAAA,KACE,SAAC4oC,GACC,OAAA,IAAIu/B,GAAwCv/B,MAEhDvc,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIgrE,GAAqC52C,GAAmBn4B,aAQtEjE,KAAAizE,gBAKIjzE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+1C,IACPtoE,EAAAA,KAAI,SAACyT,GAA2C,OAAAA,EAAOhR,WACvDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKupE,qBACTljC,eACCriC,EAAQwK,OACRxK,EAAQ2+B,OACR3+B,EAAQsiC,SACRtiC,EAAQuiC,UAEThoC,KACCysC,EAAAA,UAAS,SAAC9/B,GACR,MAAO,CACL,IAAI4+D,GAA4B,CAC9B9nC,KAAM92B,EACNsD,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,SAElB,IAAIikC,GACJ,IAAImD,GAAsC7+D,OAG9C0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIqrE,GAAmCj3C,GAAmBn4B,mCAtDvEgE,EAAAA,uDARQu1B,EAAAA,eAKA+R,MAMPnvC,EAAA,CADCq9B,EAAAA,mDAsBDr9B,EAAA,CADCq9B,EAAAA,wDCWD,SACUT,EACAs2C,GAFV,IAAAjqE,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAszE,2BAAAA,EAjCVtzE,KAAAuzE,4BAIIvzE,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOq2C,IACP5oE,EAAAA,KAAI,SAACyT,GAAuD,OAAAA,EAAOhR,WACnEgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKiqE,2BACT7iC,2BACCpjC,EAAQ2+B,OACR3+B,EAAQqjC,0BACRrjC,EAAQ8gC,aACR9gC,EAAQwK,QAETjQ,KACC6hB,EAAAA,WAAU,SAAClV,GAAS,MAAA,CAClB,IAAI48D,GAAuB,CAAEnlC,OAAQ3+B,EAAQ2+B,SAC7C,IAAIynC,GAAkDl/D,OAExD0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI0rE,GACFt3C,GAAmBn4B,mCA1BlCgE,EAAAA,uDARQu1B,EAAAA,eAKAgT,MAMPpwC,EAAA,CADCq9B,EAAAA,iECLUC,GAAiB,CAC5Bi2C,GACAC,GACAC,GACAC,GACAC,ICRWhjB,GAAyC,CACpDijB,QAAS,aAGK51D,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAmmE,IAGQ51D,EAAO/Q,MACb,KAAK4mE,GACH,IAAMF,EAAU31D,EAAOhR,QAEvB,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkmE,QAAOA,IAIX,KAAKG,GACH,OAAA30E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkmE,QAAS,SAIb,KAAKI,GACH,OAAA50E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkmE,QAAS,KAKf,OAAOlmE,EAGF,ICnCMijD,GAA+B,CAC1ClyC,SAAU,aAGIT,GACdtQ,EACAuQ,GAIA,YALA,IAAAvQ,IAAAA,EAAAumE,IAKQh2D,EAAO/Q,MACb,KAAKgnE,GACH,IACMz1D,EADwBR,EAAOhR,QACViS,QACzB,SAACi1D,EAAiDtuC,SAChD,OAAAzmC,OAAAqF,OAAArF,OAAAqF,OAAA,GACK0vE,KAAiBzvE,EAAA,IACnBmhC,EAAKjiB,MAAOiiB,EAAInhC,MAEpBtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAK21D,GACH,OAAOzjB,GAIX,OAAOjjD,EAGF,ICpCMijD,GAAmC,CAC9CnhB,SAAU,CAAE6kC,QAAIltE,EAAWmtE,gBAAYntE,GACvCunC,QAAS,GACT6lC,aAAc,CACZC,UAAW,GACXC,SAAU,IAEZ7kC,eAAgB,GAChB8kC,aAAc,aAGA12D,GACdtQ,EACAuQ,GAMA,YAPA,IAAAvQ,IAAAA,EAAAinE,IAOQ12D,EAAO/Q,MACb,KAAK0nE,GACH,IAAM3pC,EAAahtB,EAAOhR,QAC1B,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR8hC,SAAQpwC,OAAAqF,OAAArF,OAAAqF,OAAA,GACHiJ,EAAM8hC,UAAQ,CACjB6kC,GAAIppC,EAAKqI,wBAKf,KAAKuhC,GACH,OAAAz1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR8hC,SAAQpwC,OAAAqF,OAAArF,OAAAqF,OAAA,GACHiJ,EAAM8hC,UAAQ,CACjB8kC,WAAYr2D,EAAOhR,YAKzB,KAAK6nE,GACL,KAAKC,GACH,IAAMrmC,EAAmBzwB,EAAOhR,QAEhC,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRghC,QAAOA,IAIX,KAAKsmC,GACH,IAAMC,EAAiBh3D,EAAOhR,QAC9B,IAAKgoE,EACH,OAAOvnE,EAGT,IAAM8mE,EAAYS,EAAe/1D,QAC/B,SAACg2D,EAAyCC,SACxC,OAAA/1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKywE,KAAKxwE,EAAA,IACPywE,EAAKvxD,MAAOuxD,EAAIzwE,MAEpBtF,OAAAqF,OAAA,GAEIiJ,EAAM6mE,aAAaC,YAI1B,OAAAp1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR6mE,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBC,UAASA,MAKf,KAAKY,GACH,IAAMX,EAAWx2D,EAAOhR,QAExB,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR6mE,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBE,SAAQA,MAKd,KAAKY,GACL,KAAKC,GACH,OAAAl2E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkiC,eAAgB3xB,EAAOhR,UAI3B,KAAKsoE,GACH,IAAM3lC,EAAiB3xB,EAAOhR,QAC9B,OAAI2iC,EAAyB,SAC3BxwC,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkiC,eAAcA,IAIXliC,EAGT,KAAKyyC,GACL,KAAKq1B,GACH,IAAMd,EAA2Cz2D,EAAOhR,QAExD,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRgnE,aAAYA,IAIhB,KAAKe,GACH,OAAO9kB,GAGT,KAAK+kB,GAEH,OADmBz3D,EAAOhR,SAExB,KAAK,EACH,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRghC,QAAS,KAIb,KAAK,EACH,OAAAtvC,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR6mE,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBC,UAAW,GACXC,SAAU,OAKhB,KAAK,EACH,OAAAr1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkiC,eAAgB,KAKtB,OAAOliC,EAGT,KAAKioE,GACL,KAAKvB,GACH,OAAAh1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR6mE,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBC,UAAW,OAIjB,KAAKoB,GACH,OAAAx2E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRghC,QAASzwB,EAAOhR,QAAQ4oE,gBACxBtB,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBE,SACEx2D,EAAOhR,QAAQsnE,cAAgBt2D,EAAOhR,QAAQsnE,aAAa3wD,OAE/DgsB,eAAgB3xB,EAAOhR,QAAQ6oE,cAInC,KAAKpE,GACH,OAAAtyE,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRghC,QAAS,KAIb,KAAKojC,GACH,OAAA1yE,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR6mE,aAAYn1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACPiJ,EAAM6mE,cAAY,CACrBE,SAAU,OAMlB,OAAO/mE,ECxMF,IAAMijD,GAAgC,CAC3C8jB,SAAUn5D,EAAAA,WAAWm/B,sBAGPz8B,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAqoE,IAGQ93D,EAAO/Q,MACb,KAAK8oE,GACH,OAAA52E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+mE,SAAUx2D,EAAOhR,UAIrB,KAAKwoE,GACH,OAAO9kB,GAGT,QACE,OAAOjjD,GCrBN,IAAMijD,GAAkC,CAC7ClyC,SAAU,GACVg2D,cAAUttE,YAGI6W,GACdtQ,EACAuQ,GAKA,YANA,IAAAvQ,IAAAA,EAAAuoE,IAMQh4D,EAAO/Q,MACb,KAAKgpE,GACH,IACMz3D,EAD8BR,EAAOhR,QACbiS,QAC5B,SACEi3D,EACAtwC,SAEA,OAAAzmC,OAAAqF,OAAArF,OAAAqF,OAAA,GACK0xE,KAAoBzxE,EAAA,IACtBmhC,EAAKjiB,MAAOiiB,EAAInhC,MAEpBtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAKm2D,GACH,OAAAx1E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+mE,SAAUx2D,EAAOhR,QAAQomC,YAAYzvB,OAIzC,KAAK6xD,GACH,OAAAr2E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+mE,cAAUttE,IAId,KAAKitE,GACH,OAAOzjB,GAIX,OAAOjjD,WC7CO8vB,KACd,MAAO,CACL44C,MAAOr4D,GACLq6B,GACAi+B,IAEF3hC,UAAW4hC,GACXC,oBAAqBC,GACrBpjC,aAAcqjC,GACdC,UAAWC,QAIFl5C,GAER,IAAI34B,EAAAA,eAAgD,oBAE5C44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,OCjBd,kCARCnB,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAE,EAAAA,YAAYC,WAAWoa,GAAkB1a,IACzCO,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CAAC2B,0BCJd,SAAAk5C,YACSA,EAAA/6C,QAAP,WACE,MAAO,CACLC,SAAU86C,EACV76C,UAASj4B,EACJyzB,GAAY,CACf,CACE5xB,QAASwwC,GACTluC,YAAa0tD,GACb9vD,OAAO,iCAZhBw2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACk5C,GAAqBC,QCUjC,IAAMC,GAA6B,SAACrpE,GAA8B,OAAAA,EAAMghC,SAClEsoC,GAA0B,SAACtpE,GAC/B,OAAAA,EAAM6mE,cACF0C,GAA4B,SAACvpE,GACjC,OAAAA,EAAMkiC,sBACFsnC,GAA0B,SAACxpE,GAC/B,OAAAA,EAAMgnE,oBAEKyC,GAGT1pE,EAAAA,sBAAqC0qC,OAOvC,SAACi/B,GAAiC,OAAAA,EAAchB,OALrCiB,GAGTzpE,EAAAA,eACFupE,GAAgBG,OAOwB,SAAC5pE,GACzC,OAAA8Y,GAA+B9Y,IAJpB6pE,GAGT3pE,EAAAA,eAAeypE,GAAqBG,IAI3BC,GAGT7pE,EAAAA,eAAe2pE,GAAkBR,IAExBW,GAMT9pE,EAAAA,eAAe2pE,GAAkBP,OAKD,SAACzC,GACnC,OACEA,GACAn1E,OAAO6f,KAAKs1D,EAAaC,WAAWhqE,KAClC,SAACoZ,GAAS,OAAA2wD,EAAaC,UAAU5wD,OAP1B+zD,GAGT/pE,EAAAA,eAAe8pE,GAAeE,OAYE,SAACrD,GACnC,OAAOA,GAAgBA,EAAaE,UAJzBoD,GAGTjqE,EAAAA,eAAe8pE,GAAeI,OAOE,SAACvD,GACnC,GAA8B,KAA1BA,EAAaE,SACf,OAAmD,IAA/Cr1E,OAAO6f,KAAKs1D,EAAaC,WAAWj0E,OAC/B,KAEFg0E,EAAaC,UAAUD,EAAaE,WARlCsD,GAGTnqE,EAAAA,eAAe8pE,GAAeM,IASrBC,GAGTrqE,EAAAA,eAAe2pE,GAAkBN,IAExBiB,GAGTtqE,EAAAA,eAAe2pE,GAAkBL,OAOnC,SAACxpE,GACC,OAAAkZ,GAAiClZ,KAChCgZ,GAAiChZ,IAPzByqE,GAGTvqE,EAAAA,eACFypE,GAAqBe,OAWrB,SAAC1qE,GAA8B,OAAAA,EAAM8hC,SAAS6kC,IALnCgE,GAGTzqE,EAAAA,eACF2pE,GAAgBe,OAShB,SAAC5qE,GAA8B,OAAAA,EAAM8hC,SAAS8kC,YALnCiE,GAGT3qE,EAAAA,eACF2pE,GAAgBiB,OC3GhB,SAAC9qE,GAAyB,OAAAA,EAAM6oE,qBALrBkC,GAGT7qE,EAAAA,eACFupE,GAAgBuB,IAILC,GAGT/qE,EAAAA,eACF6qE,ITiB2C,SAC3C/qE,GACG,OAAAA,EAAMkmE,WU/BEgF,GAGThrE,EAAAA,eAAeupE,IAAkB,SAACzpE,GAAyB,OAAAA,EAAMgnC,aAExDmkC,GAGTjrE,EAAAA,eAAegrE,ITyBgB,SAAClrE,GAA0B,OAAAA,EAAM+Q,eSpB5B,SAACq6D,GACvC,OAAO15E,OAAO6f,KAAK65D,GAAStuE,KAAI,SAACoZ,GAAS,OAAAk1D,EAAQl1D,OAJvCm1D,GAGTnrE,EAAAA,eAAeirE,GAAmBG,ICdzBC,GAA+B,SAACvrE,GAC3C,OAAAA,EAAM+mE,UAEKyE,GAGTtrE,EAAAA,eAAeupE,IAAkB,SAACzpE,GAAyB,OAAAA,EAAMgpE,aAExDyC,GAGTvrE,EAAAA,eAAesrE,GAAoBD,ICV1BG,GAGTxrE,EAAAA,eACFupE,IACA,SAACzpE,GAAyB,OAAAA,EAAM0lC,gBAGrBimC,GAGTzrE,EAAAA,eAAewrE,IRyCmB,SAAC1rE,GACrC,OAAAA,EAAM+Q,YQxCK66D,GAGT1rE,EAAAA,eAAeyrE,IAAwB,SAACP,GAC1C,OAAO15E,OAAO6f,KAAK65D,GAAStuE,KAAI,SAACoZ,GAAS,OAAAk1D,EAAQl1D,SAGvC21D,GAGT3rE,EAAAA,eAAewrE,IR+BmB,SAAC1rE,GACrC,OAAAA,EAAM+mE,iwBSjDN,SAAA+E,EACYC,EACA5jB,EACA77C,GAFApa,KAAA65E,cAAAA,EACA75E,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAOZw/D,EAAA15E,UAAAuuC,cAAA,SAAcC,GAAd,IACM1C,EADN3iC,EAAArJ,KAEEA,KAAKi2D,kBACF9O,kBACAv/C,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAACqnE,GAAiB,OAAC9tC,EAAS8tC,KAEzC95E,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,GAAUA,IAAW5Q,GAAyB+kC,GAChD3iC,EAAKwwE,cAAcnpE,SACjB,IAAIqpE,GAA8B,CAChCliE,OAAQA,EACRm0B,OAAQA,EACR0C,aAAcA,SAUxBkrC,EAAA15E,UAAAy4E,cAAA,WAAA,IAAAtvE,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKi2D,kBAAkB3kC,YACvBtxB,KAAK65E,cAAcjyE,KAAKwI,EAAAA,OAAO4pE,OAC9BpyE,KACDkF,EAAAA,QAAO,SAAChI,OAACumC,EAADtnC,EAAAe,EAAA,GAAK,GAAM,OAAAkH,QAAQq/B,MAC3BzgC,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACumC,EAAItmC,EAAA,GAAE2pC,EAAY3pC,EAAA,GAOtB,YANqBwC,IAAjBmnC,GAA8BrD,EAAKqpC,aACrChmC,EAAerD,EAAKqpC,WAAW1wD,KAC/B3a,EAAKwwE,cAAcnpE,SACjB,IAAI+hE,GAAqCpnC,EAAKqpC,WAAW1wD,QAGtD0qB,kLAlDdzmC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZGyM,EAAAA,aAIRgiD,UADA36C,wBC2BP,SAAAghE,EACYJ,EACA5jB,EACA77C,GAFApa,KAAA65E,cAAAA,EACA75E,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAMZ6/D,EAAA/5E,UAAA63E,0BAAA,WAAA,IAAA1uE,EAAArJ,KACE,OAAOA,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAO8pE,IACP5xD,EAAAA,eACEtoB,KAAK65E,cAAcjyE,KACjBwI,EAAAA,OAAOiqD,GAAuB1hB,OAGlCnwB,EAAAA,KAAI,SAAC1jB,OAAGq1E,EAAHp2E,EAAAe,EAAA,GAAe,GAEdq1E,EAAaj8D,SAAWi8D,EAAap9D,SAAWo9D,EAAal2E,OAE/DoF,EAAK+wE,gCAGTptC,EAAAA,MAAM,GACNz9B,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAO3CwqE,EAAA/5E,UAAAi4E,wBAAA,WACE,OAAOn4E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOiqE,MAOXJ,EAAA/5E,UAAA+3E,4BAAA,WACE,OAAOj4E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOkqE,MAOXL,EAAA/5E,UAAA23E,mBAAA,WACE,OAAO73E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOmqE,MAOXN,EAAA/5E,UAAAs6E,6BAAA,WACE,OAAOx6E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOiqD,GAAuB5hB,OAOlCwhC,EAAA/5E,UAAAu6E,+BAAA,WACEz6E,KAAK65E,cAAcnpE,SACjB,IAAIgqE,KAORT,EAAA/5E,UAAAy6E,0BAAA,WACE,OAAO36E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOiqD,GAAuB3hB,OAOlCuhC,EAAA/5E,UAAA06E,4BAAA,WACE56E,KAAK65E,cAAcnpE,SACjB,IAAImqE,KAORZ,EAAA/5E,UAAA46E,uCAAA,WACE96E,KAAK65E,cAAcnpE,SACjB,IAAI2+D,KAOR4K,EAAA/5E,UAAA66E,oCAAA,WACE,OAAO/6E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOiqD,GAAuB1hB,OAOlCshC,EAAA/5E,UAAA86E,2BAAA,WACEh7E,KAAK65E,cAAcnpE,SACjB,IAAI0+D,KAOR6K,EAAA/5E,UAAA64E,8BAAA,WACE,OAAO/4E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAO6qE,IACPnuE,EAAAA,QAAO,SAACknE,GAAY,OAAgC,IAAhCx0E,OAAO6f,KAAK20D,GAASrzE,YAQ7Cs5E,EAAA/5E,UAAAg7E,oBAAA,SAAoBpsC,GAEhB,IAAIqsC,EAMAC,EAPFp7E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACH,EAASG,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAACsB,EAAStB,KACtC3lE,cACCgnE,GAAUC,GACZp7E,KAAK65E,cAAcnpE,SACjB,IAAI6qE,GAAmC,CACrC1jE,OAAMsjE,EACNnvC,OAAMovC,EACNtsC,QAASA,OAUnBmrC,EAAA/5E,UAAAk6E,2BAAA,WAEI,IAAIoB,EAMAC,EAPFz7E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACE,EAASF,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAAC2B,EAAS3B,KACtC3lE,cACCqnE,GAAUC,GACZz7E,KAAK65E,cAAcnpE,SACjB,IAAI4+D,GAA2C,CAC7Cz3D,OAAM2jE,EACNxvC,OAAMyvC,OAWhBxB,EAAA/5E,UAAAw7E,gBAAA,SAAgBnG,GAEZ,IAAIoG,EAMAC,EAPF57E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACK,EAASL,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAAC8B,EAAS9B,KACtC3lE,cACCwnE,GAAUC,GACZ57E,KAAK65E,cAAcnpE,SACjB,IAAImrE,GAAgC,CAClChkE,OAAM8jE,EACN3vC,OAAM4vC,EACNvL,eAAgBkF,OAW1B0E,EAAA/5E,UAAA47E,cAAA,SAAchtC,GAEV,IAAIitC,EADF/7E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACS,EAAST,KACnCnnE,cACC4nE,GACF/7E,KAAK65E,cAAcnpE,SACjB,IAAIsrE,GAA8B,CAChCnkE,OAAMkkE,EACNjtC,QAAOA,OAWjBmrC,EAAA/5E,UAAA2yC,mBAAA,SAAmB/D,GAEf,IAAImtC,EAMAC,EAPFl8E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACW,EAASX,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAACoC,EAASpC,KACtC3lE,cACC+nE,GAAUD,GACZj8E,KAAK65E,cAAcnpE,SACjB,IAAIm+D,GAAmC,CACrCh3D,OAAMokE,EACNjwC,OAAMkwC,EACNptC,QAASA,OAUnBmrC,EAAA/5E,UAAAi8E,gCAAA,WACEn8E,KAAK65E,cAAcnpE,SACjB,IAAI0rE,KAORnC,EAAA/5E,UAAAmuC,6BAAA,WACE,IAAIx2B,EAMAm0B,EALJhsC,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAAC9tC,EAAS8tC,KACtC3lE,cACC0D,GAAUm0B,GACZhsC,KAAK65E,cAAcnpE,SACjB,IAAIgiE,GAA6C,CAC/C76D,OAAMA,EACNm0B,OAAMA,MASdiuC,EAAA/5E,UAAAouC,0BAAA,WACE,IAAIz2B,EAMAm0B,EALJhsC,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAAC9tC,EAAS8tC,KACtC3lE,cACC0D,GAAUm0B,GACZhsC,KAAK65E,cAAcnpE,SACjB,IAAIy+D,GAA0C,CAC5Ct3D,OAAMA,EACNm0B,OAAMA,MASdiuC,EAAA/5E,UAAAm8E,6BAAA,WACEr8E,KAAKquC,+BACLruC,KAAKsuC,4BACLtuC,KAAKg7E,8BAGGf,EAAA/5E,UAAAm7E,cAAA,WACR,IAAIxjE,EAKJ,OAJA7X,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cAEA0D,GAAUA,IAAW5Q,GACtBjH,KAAKi2D,kBAAkBnB,0LAzV5B7sD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDA3BGyM,EAAAA,aAURgiD,UADA36C,wBCWP,SAAAqjE,EACYzC,EACA5jB,EACA77C,GAFApa,KAAA65E,cAAAA,EACA75E,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAMZkiE,EAAAp8E,UAAAgwC,aAAA,WACE,OAAOlwC,KAAK65E,cAAcjyE,KAAKwI,EAAAA,OAAOmsE,MAMxCD,EAAAp8E,UAAAm4E,kBAAA,WACE,OAAOr4E,KAAK65E,cAAcjyE,KAAKwI,EAAAA,OAAOosE,MAMxCF,EAAAp8E,UAAAu8E,kCAAA,WACE,OAAOz8E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOiqD,GAAuBzhB,OAOlC0jC,EAAAp8E,UAAAw8E,8BAAA,WACE18E,KAAK65E,cAAcnpE,SACjB,IAAIisE,KAORL,EAAAp8E,UAAA08E,uBAAA,WACE58E,KAAK65E,cAAcnpE,SAAS,IAAImsE,KAOlCP,EAAAp8E,UAAA48E,qBAAA,SAAqB9sC,GAEjB,IAAImrC,EAMAC,EAPFp7E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACH,EAASG,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAACsB,EAAStB,KACtC3lE,cAECgnE,GAAUC,GACZp7E,KAAK65E,cAAcnpE,SACjB,IAAIqsE,GAAqC,CACvCllE,OAAMsjE,EACNnvC,OAAMovC,EACNprC,eAAcA,OAWxBssC,EAAAp8E,UAAA88E,kBAAA,SAAkBhtC,GAEd,IAAIwrC,EAMAyB,EAPFj9E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACE,EAASF,KACnCnnE,cAGHnU,KAAKi2D,kBACF3kC,YACA7e,WAAU,SAACijD,GAAe,OAACunB,EAAOvnB,KAClCvhD,cACCqnE,GAAUyB,GACZj9E,KAAK65E,cAAcnpE,SACjB,IAAIwsE,GAAkC,CACpCrlE,OAAM2jE,EACNxvC,OAAQixC,EAAKj5D,KACbgsB,eAAgBA,OAU1BssC,EAAAp8E,UAAAi9E,sBAAA,WACEn9E,KAAK65E,cAAcnpE,SAAS,IAAI0sE,KAGxBd,EAAAp8E,UAAAm7E,cAAA,WACR,IAAIxjE,EAKJ,OAJA7X,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cAEA0D,GAAUA,IAAW5Q,GACtBjH,KAAKi2D,kBAAkBnB,0LA3H5B7sD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAjBGyM,EAAAA,aAGRgiD,UADA36C,wBC2BP,SAAAokE,EACYxD,EACA5jB,EACA77C,GAFApa,KAAA65E,cAAAA,EACA75E,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAMZijE,EAAAn9E,UAAAguC,WAAA,SAAWC,GAEP,IAAIgtC,EAMAC,EAPFp7E,KAAKq7E,kBAEPr7E,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACH,EAASG,KACnCnnE,cAGHnU,KAAKi2D,kBACF9O,kBACA10C,WAAU,SAACqnE,GAAiB,OAACsB,EAAStB,KACtC3lE,cAECgnE,GAAUC,GACZp7E,KAAK65E,cAAcnpE,SACjB,IAAI4sE,GAA2B,CAC7BzlE,OAAMsjE,EACNnvC,OAAMovC,EACNjtC,aAAYA,OAUtBkvC,EAAAn9E,UAAAuwC,2BAAA,SACEC,EACAvC,GAFF,IAIMnC,EAJN3iC,EAAArJ,KAMEA,KAAKi2D,kBACF9O,kBACAv/C,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAACqnE,GAAiB,OAAC9tC,EAAS8tC,KAEzC95E,KAAKoa,cAAcd,kBAAiB,SAACzB,GAEjC7L,QAAQggC,IACRhgC,QAAQ6L,IACRA,IAAW5Q,GAEXoC,EAAKwwE,cAAcnpE,SACjB,IAAI6sE,GAA2C,CAC7CvxC,OAAMA,EACN0E,0BAAyBA,EACzBvC,aAAYA,EACZt2B,OAAMA,SAUhBwlE,EAAAn9E,UAAAs9E,qBAAA,WACE,OAAOx9E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOqqD,GAAyB1hB,OAOpCskC,EAAAn9E,UAAAu9E,qBAAA,WACE,OAAOz9E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOsqD,GAAyB3hB,OAOpCskC,EAAAn9E,UAAAw9E,mBAAA,WACE,OAAO19E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOuqD,GAAuB5hB,OAOlCskC,EAAAn9E,UAAAy9E,qBAAA,WACE39E,KAAK65E,cAAcnpE,SAAS,IAAIktE,KAMlCP,EAAAn9E,UAAA29E,kBAAA,WACE79E,KAAK65E,cAAcnpE,SAAS,IAAIu/D,KAOlCoN,EAAAn9E,UAAA49E,kBAAA,SAAkBC,GAChB/9E,KAAK65E,cAAcnpE,SACjB,IAAIstE,GAAkCD,KAQ1CV,EAAAn9E,UAAAkuC,oBAAA,SAAoBpC,GAClB,IAAIn0B,EACJ7X,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cACC0D,GACF7X,KAAK65E,cAAcnpE,SACjB,IAAIkhE,GAAoC,CACtC/5D,OAAMA,EACNm0B,OAAMA,MASdqxC,EAAAn9E,UAAAq4E,yBAAA,WACE,OAAOv4E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAO6tE,MAOXZ,EAAAn9E,UAAAg+E,gBAAA,WACE,OAAOl+E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAO+tE,MAQXd,EAAAn9E,UAAAk+E,aAAA,SAAatH,GACX92E,KAAK65E,cAAcnpE,SAAS,IAAI2tE,GAA6BvH,KAM/DuG,EAAAn9E,UAAAo+E,oBAAA,WACE,OAAOt+E,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOmuE,MAIDlB,EAAAn9E,UAAAm7E,cAAA,WACR,IAAIxjE,EAKJ,OAJA7X,KAAKoa,cACFf,YACA5G,WAAU,SAAC6oE,GAAc,OAACzjE,EAASyjE,KACnCnnE,cAEA0D,GAAUA,IAAW5Q,GACtBjH,KAAKi2D,kBAAkBnB,0LAzL5B7sD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDA1BGyM,EAAAA,aAIRgiD,UADA36C,wBCwBP,SAAAulE,EACY3E,EACA5jB,EACA77C,GAFApa,KAAA65E,cAAAA,EACA75E,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAMZokE,EAAAt+E,UAAAsvC,gBAAA,WAAA,IAAAnmC,EAAArJ,KACE,OAAOA,KAAK65E,cAAcjyE,KACxBwI,EAAAA,OAAOquE,IACPn2D,EAAAA,eACEtoB,KAAK65E,cAAcjyE,KACjBwI,EAAAA,OAAOiqD,GAAuBxhB,OAGlCrwB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAAIq1E,GAAFp1E,EAAA,GAAcA,EAAA,IAEfo1E,EAAaj8D,SAAWi8D,EAAap9D,SAAWo9D,EAAal2E,OAE/DoF,EAAKomC,sBAGTzC,EAAAA,MAAM,GACNz9B,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAO3C+uE,EAAAt+E,UAAAuvC,iBAAA,WACEzvC,KAAK65E,cAAcnpE,SAAS,IAAIguE,KAQlCF,EAAAt+E,UAAAwvC,eAAA,SAAeC,EAAkBC,GAAjC,IACM5D,EADN3iC,EAAArJ,KAEEA,KAAKi2D,kBACF9O,kBACAv/C,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAACqnE,GAAiB,OAAC9tC,EAAS8tC,KAEzC95E,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,GAAUA,IAAW5Q,GAAyB+kC,GAChD3iC,EAAKwwE,cAAcnpE,SACjB,IAAIiuE,GAA+B,CACjC9mE,OAAQA,EACRm0B,OAAQA,EACR2D,SAAUA,EACVC,SAAUA,SAUpB4uC,EAAAt+E,UAAAy5E,uBAAA,WAAA,IAAAtwE,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKi2D,kBAAkB3kC,YACvBtxB,KAAK65E,cAAcjyE,KAAKwI,EAAAA,OAAOwuE,OAC9Bh3E,KACD4gB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACumC,EAAItmC,EAAA,QACSwC,IADCxC,EAAA,IAGZsmC,GAAQA,EAAKoI,aACfpqC,EAAKwwE,cAAcnpE,SACjB,IAAI0iE,GAAsC/nC,OAKlDzgC,EAAAA,KAAI,SAAC9F,GAAiB,OAAjBf,EAAAe,EAAA,GAAW,QAOpB05E,EAAAt+E,UAAA2+E,iBAAA,WACE,OAAO7+E,KAAK25E,yBAAyB/xE,KACnCgD,EAAAA,KAAI,SAACiqE,GAAa,OAAAA,IAAa96D,EAAAA,mBAAmB+kE,qBAOtDN,EAAAt+E,UAAA6+E,YAAA,WAAA,IAAA11E,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKi2D,kBAAkB3kC,YACvBtxB,KAAK65E,cAAcjyE,KAAKwI,EAAAA,OAAO4uE,OAC9Bp3E,KACD4gB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACumC,EAAItmC,EAAA,QACGwC,IADCxC,EAAA,IACYsmC,GAAQA,EAAKqI,qBACnCrqC,EAAKwwE,cAAcnpE,SACjB,IAAI0iE,GAAsC/nC,OAIhDzgC,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAEC,EAAA,GAAU,OAANA,EAAA,mLAhHhBkD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAxBGyM,EAAAA,aAWRgiD,UADA36C,wBCOP,SAAAgmE,EACYtiD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZm1C,EAAA/+E,UAAAuwC,2BAAA,SACEzE,EACA0E,EACAvC,EACAt2B,GAEA64B,EAA4B1wC,KAAK8pC,UAAUD,QACzC6G,EACAG,IAGF,IAAMtc,GAAU,IAAIE,EAAAA,aAAcV,IAAI,eAAgB,oBAEhD3nB,GAAS,IAAIynB,EAAAA,YAChBE,IAAI,SAAUiY,GACdjY,IAAI,eAAgBoa,EAAa9pB,YAEpC,OAAOrkB,KAAK28B,KACTG,KACC98B,KAAK82B,aAAa3D,OAAO,6BAA8B,CACrDtb,OAAMA,IAER64B,EACA,CAAEnc,QAAOA,EAAEnoB,OAAMA,IAElBxE,KAAK5H,KAAK8pC,UAAUP,SAASqH,gCAlCnC3oC,EAAAA,uDAfQ80B,EAAAA,kBAaAtK,UADAsW,MCKT,IACMm2C,GAAiB,wBAIrB,SAAAC,EACYxiD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGFq1C,EAAAj/E,UAAAgzB,YAAA,SAAYrb,EAAgBunE,GACpC,IAAMC,EAAgB,SAAWxnE,EAASunE,EAC1C,OAAOp/E,KAAK82B,aAAa5D,YAAYmsD,IAGhCF,EAAAj/E,UAAAguC,WAAA,SACLr2B,EACAm0B,EACAmC,GAEA,IAAI5Z,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,sCAGdhlB,IAAW5Q,IACbstB,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,IAEjE,IAAMnoB,GAAS,IAAIynB,EAAAA,YAChBE,IAAI,SAAUiY,GACdjY,IAAI,eAAgBoa,EAAa9pB,YAEpC,OAAOrkB,KAAK28B,KACTG,KACC98B,KAAK82B,aAAa3D,OAAO,aAAc,CAAEtb,OAAMA,IAC/C,GACA,CAAE0c,QAAOA,EAAEnoB,OAAMA,IAElBxE,KAAK5H,KAAK8pC,UAAUP,SAASuE,MAGlCqxC,EAAAj/E,UAAAkuC,oBAAA,SACEv2B,EACAm0B,GAEA,IAAM3hC,EAAMrK,KAAKkzB,YAAYrb,EAAQqnE,IAAkBlzC,EACjD5/B,EAAS,IAAIynB,EAAAA,WAAW,CAC5BF,WAAY,gEAEd,OAAO3zB,KAAK28B,KAAKtxB,IAAqBhB,EAAK,CAAE+B,OAAMA,KAGrD+yE,EAAAj/E,UAAAmuC,6BAAA,SACEx2B,EACAm0B,GAEA,IAAM3hC,EAAM,GAAGrK,KAAKkzB,YAClBrb,EACAqnE,IACElzC,EAAM,sBACV,OAAOhsC,KAAK28B,KAAK7I,OAAYzpB,IAG/B80E,EAAAj/E,UAAAouC,0BAAA,SAA0Bz2B,EAAgBm0B,GACxC,IAAM3hC,EAAM,GAAGrK,KAAKkzB,YAClBrb,EACAqnE,IACElzC,EAAM,gBACV,OAAOhsC,KAAK28B,KAAK7I,OAAYzpB,8BAjEhCpC,EAAAA,uDApBQ80B,EAAAA,kBASAtK,UAFAsW,aC6DT,kCAzCCtM,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqBssC,IACrB,CACE7sC,QAASwoC,GACTlE,SAAU80C,IAEZ,CAAEp5E,QAAS+nC,GAAkBzlC,YAAayoC,GAAoB7qC,OAAO,GACrE,CACEF,QAASspC,GACThF,SAAUgJ,IAEZ,CACEttC,QAASqqC,GACT/F,SAAUsJ,IAEZ,CACE5tC,QAAS8pC,GACTxF,SAAUiJ,IAEZ,CACEvtC,QAAS4oC,GACTtE,SAAUyI,IAEZ,CACE/sC,QAAS4qC,GACTtG,SAAU40C,IAEZ,CACEl5E,QAAS6qC,GACTvoC,YAAasqC,GACb1sC,OAAO,GAET,CACEF,QAAS8qC,GACTxoC,YAAa+pC,GACbnsC,OAAO,eCxDb,aCJaq5E,GAA2B,IAAIp6E,EAAAA,eAE1C,wCCYA,SAAAq6E,EACY5iD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,EALF9pC,KAAAu0B,SAAU,IAAIE,EAAAA,aAAcV,IAAI,eAAgB,2BAQ1DwrD,EAAAr/E,UAAA0c,KAAA,SACErO,EACAkC,GAEA,OAAOzQ,KAAK28B,KACTtxB,IAAOrL,KAAKw/E,qBAAqBjxE,EAAIkC,GAAc,CAClD8jB,QAASv0B,KAAKu0B,UAEf3sB,KAAK5H,KAAK8pC,UAAUP,SAAiB+1C,MAG1CC,EAAAr/E,UAAAu/E,oBAAA,SACExgE,EACAxO,EACAivE,EACAj8D,EACAD,EACAE,QAHA,IAAAg8D,IAAAA,EAAA,gBACA,IAAAj8D,IAAAA,EAAA,QACA,IAAAD,IAAAA,EAAWvE,EAAIte,QAGf,IAAMg/E,EAAangF,OAAAqF,OAAArF,OAAAqF,OAAA,GACd7E,KAAK4/E,iBAAiBnvE,IACtBzQ,KAAK6/E,oBAAoBp8D,EAAaD,EAAUE,IAKrD,OAFAi8D,EAA4B,aAAI1gE,EAAIoF,WAE7BrkB,KAAK28B,KACTtxB,IACCrL,KAAK8/E,sBAAsBH,EAAeD,GAC1C,CACEnrD,QAASv0B,KAAKu0B,UAGjB3sB,KACColC,EAAAA,MAAM,aACNhtC,KAAK8pC,UAAUH,aAAa21C,MAIxBC,EAAAr/E,UAAAs/E,qBAAA,SAAqBjxE,EAAYkC,GACzC,OAAOzQ,KAAK82B,aAAa3D,OACvB,YACA,CAAE5kB,GAAEA,GACJvO,KAAK4/E,iBAAiBnvE,KAIhB8uE,EAAAr/E,UAAA4/E,sBAAA,SAAsBH,EAAoBD,GAClD,OAAO1/E,KAAK82B,aAAa3D,OACvB,aACA,GAAE3zB,OAAAqF,OAAA,CACA66E,OAAMA,GAAKC,KAIPJ,EAAAr/E,UAAA2/E,oBAAA,SACRp8D,EACAD,EACAE,GAEA,IAAMi8D,EAAgB,GAWtB,YAVoBp4E,IAAhBkc,IACFk8D,EAA2B,YAAIl8D,EAAYY,iBAE5B9c,IAAbic,IACFm8D,EAAwB,SAAIn8D,EAASa,iBAE1B9c,IAATmc,IACFi8D,EAAoB,KAAIj8D,GAGnBi8D,GAGCJ,EAAAr/E,UAAA0/E,iBAAA,SACRnvE,GAEA,IAAIkvE,EAAgB,GACpB,OAAQlvE,EAAYnD,MAClB,KAAK0M,EAAAA,SAAS63C,aACZ8tB,EAAgB,CAAE1zC,YAAax7B,EAAYlC,IAC3C,MAEF,KAAKyL,EAAAA,SAAS83C,cACZ6tB,EAAgB,CAAEI,aAActvE,EAAYlC,IAC5C,MAEF,KAAKyL,EAAAA,SAASgmE,aACZL,EAAgB,CAAEM,YAAaxvE,EAAYlC,IAK/C,OAAOoxE,mLAzGV13E,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAbL43B,EAAAA,kBAUAtK,UAFAsW,UC6DGm3C,GAnCCC,GAAiC,sBACjCC,GAA0B,oBAkC3BF,GAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAE9B,MAAA,mBAEAA,GAAA,QAAA,qCA4BF,SAAAG,0DAAwCvgF,EAAAugF,EAAA/sE,MAAAmB,8HAJvCxM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBCvFf,SAAAq7E,YAEEA,EAAApgF,UAAA2pC,QAAA,SACEnlC,EACApE,GAMA,YANA,IAAAA,IAAAA,EAAA,IAEAN,KAAKugF,kBAAkB77E,EAAQpE,GAC/BN,KAAKwgF,sBAAsB97E,EAAQpE,GACnCN,KAAKygF,2BAA2B/7E,EAAQpE,GACxCN,KAAK0gF,uBAAuBh8E,EAAQpE,GAC7BA,GAMCggF,EAAApgF,UAAAqgF,kBAAA,SACR77E,EACApE,GAEA,GAAKoE,EAAL,CAGA,IAAMyf,EAAa,GAEfzf,EAAOuhC,OACT9hB,EAAK8hB,KAAOvhC,EAAOuhC,MAEjBvhC,EAAOirC,WACTxrB,EAAK7W,KAAO5I,EAAOirC,UAEjBjrC,EAAO/B,QACTwhB,EAAKxhB,MAAQ+B,EAAO/B,OAElB+B,EAAO0iB,WACTjD,EAAKiD,SAAW1iB,EAAO0iB,UAErB1iB,EAAOurB,MACT9L,EAAKw8D,OAASj8E,EAAOurB,KAEnBvrB,EAAOk8E,QACTz8D,EAAKy8D,MAAQl8E,EAAOk8E,OAElBl8E,EAAOm8E,aACT18D,EAAK08D,WAAan8E,EAAOm8E,YAG3BvgF,EAAO6jB,KAAOA,IAMNm8D,EAAApgF,UAAAsgF,sBAAA,SACR97E,EACApE,WAEA,GAAKoE,MAAAA,OAAM,EAANA,EAAQo8E,aAAb,CAGKnhF,MAAM2E,QAAQI,EAAOo8E,aAAaC,eACrCr8E,EAAOo8E,aAAaC,YAAc,CAACr8E,EAAOo8E,aAAaC,cAEzDzgF,EAAO6jB,KAAK68D,MAAQ,OACpB,IAAmB,IAAArpE,EAAAhU,EAAAe,EAAOo8E,aAAaC,aAAWv3E,EAAAmO,EAAA9V,QAAA2H,EAAAvH,KAAAuH,EAAAmO,EAAA9V,OAAE,CAA/C,IAAMo/E,EAAIz3E,EAAA7H,MACbrB,EAAO6jB,KAAK68D,MAAMC,EAAKC,UAAY,GAC/BD,EAAKJ,aACPvgF,EAAO6jB,KAAK68D,MAAMC,EAAKC,UAAUL,WAAaI,EAAKJ,iHAQ/CP,EAAApgF,UAAAugF,2BAAA,SACR/7E,EACApE,mBAEA,GAAyB,QAArBwE,EAACJ,MAAAA,OAAM,EAANA,EAAQo8E,oBAAY,IAAAh8E,OAAA,EAAAA,EAAEi8E,gBAG3B,IAAmB,IAAAv3E,EAAA7F,EAAAe,EAAOo8E,aAAaC,aAAWr3E,EAAAF,EAAA3H,QAAA6H,EAAAzH,KAAAyH,EAAAF,EAAA3H,OAAE,CAA/C,IAAMo/E,EAAIv3E,EAAA/H,MACb,GAAIhC,MAAM2E,QAAuB,QAAhBS,EAACk8E,EAAKE,kBAAU,IAAAp8E,OAAA,EAAAA,EAAE2pD,eACjC,IAAwB,IAAA/kD,GAAAk2B,OAAA,EAAAl8B,EAAAs9E,EAAKE,WAAWzyB,YAAS0yB,EAAAz3E,EAAA9H,QAAAu/E,EAAAn/E,KAAAm/E,EAAAz3E,EAAA9H,OAAE,CAA9C,IAAM6sD,EAAS0yB,EAAAz/E,MACZ0/E,EAAiC,CACrCpxD,IAAKy+B,EAAUz+B,IACf0f,SAAU+e,EAAU/e,UAElB+e,EAAUmyB,aACZQ,EAAKR,WAAanyB,EAAUmyB,YAG1BnyB,EAAU/e,WAAaywC,GACzBiB,EAAKC,SAAW5yB,EAAU4yB,SACjB5yB,EAAU/e,WAAawwC,GAChCkB,EAAKC,SAAW5yB,EAAUz+B,IAE1BoxD,EAAKC,SAAW5yB,EAAU/e,SAEvBrvC,EAAO6jB,KAAK68D,MAAMC,EAAKC,UAAUC,aACpC7gF,EAAO6jB,KAAK68D,MAAMC,EAAKC,UAAUC,WAAa,IAEhD7gF,EAAO6jB,KAAK68D,MAAMC,EAAKC,UAAUC,WAAWz9E,KAAK29E,0MAY/Cf,EAAApgF,UAAAwgF,uBAAA,SACRh8E,EACApE,mBAEA,GAAyB,QAArBwE,EAACJ,MAAAA,OAAM,EAANA,EAAQo8E,oBAAY,IAAAh8E,OAAA,EAAAA,EAAEi8E,gBAI3B,IAAmB,IAAAv3E,EAAA7F,EAAAe,EAAOo8E,aAAaC,aAAWr3E,EAAAF,EAAA3H,QAAA6H,EAAAzH,KAAAyH,EAAAF,EAAA3H,OAAE,CAA/C,IAAMo/E,EAAIv3E,EAAA/H,MACb,GAAIhC,MAAM2E,QAAuB,QAAhBS,EAACk8E,EAAKE,kBAAU,IAAAp8E,OAAA,EAAAA,EAAE2pD,eACjC,IAAwB,IAAA/kD,GAAA43E,OAAA,EAAA59E,EAAAs9E,EAAKE,WAAWzyB,YAAgB0yB,EAAAz3E,EAAA9H,QAAAu/E,EAAAn/E,KAAAm/E,EAAAz3E,EAAA9H,OAAE,CAArD,IAAM6sD,EAAS0yB,EAAAz/E,MAGd+sD,EAAU8yB,eACZ9yB,EAAU+yB,aAAe/yB,EAAU8yB,oBAC5B9yB,EAAU8yB,cAIf9yB,EAAUmyB,aACZnyB,EAAUmyB,gBAAat5E,GAEpBjH,EAAO6gF,aACV7gF,EAAO6gF,WAAa,IAEtB7gF,EAAO6gF,WAAWz9E,KAAKgrD,kUA7IhCzmD,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,eCPbu8E,GAAsB,IAAIx8E,EAAAA,eAErC,mCCWA,SAAAy8E,EACUhlD,EACA7F,EACEgT,GAFF9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACE92B,KAAA8pC,UAAAA,EALF9pC,KAAAu0B,SAAU,IAAIE,EAAAA,aAAcV,IAAI,eAAgB,2BAQ1D4tD,EAAAzhF,UAAA0c,KAAA,SACEnM,EACAivE,GAGA,QAAyBn4E,IAArBkJ,EAAYnD,KACd,OAAOtN,KAAK28B,KACTtxB,IACCrL,KAAK82B,aAAa3D,OAChB,OACA,CACE5kB,GAAIkC,EAAYlC,IAElB,CAAEmxE,OAAQA,GAAkB,YAE9B,CACEnrD,QAASv0B,KAAKu0B,UAGjB3sB,KAAK5H,KAAK8pC,UAAUP,SAASm4C,KAIlC,IAAMt0C,EAAaptC,KAAK4hF,sBAAsBnxE,GAC9C,OAAOzQ,KAAK28B,KACTtxB,IAAIrL,KAAK6hF,iBAAiBz0C,EAAYsyC,GAAS,CAC9CnrD,QAASv0B,KAAKu0B,UAEf3sB,KAAK5H,KAAK8pC,UAAUP,SAASm4C,MAGxBC,EAAAzhF,UAAA2hF,iBAAA,SACRz1E,EAGAszE,GAGA,OADAA,EAASA,GAAkB,UACpB1/E,KAAK82B,aAAa3D,OAAO,QAAS,GAAE3zB,OAAAqF,OAAA,CAAI66E,OAAMA,GAAKtzE,KAGlDu1E,EAAAzhF,UAAA0hF,sBAAA,SACRnxE,GAEA,IAAI28B,EAAa,GAYjB,MATuB,sBAAnB38B,EAAYlC,KACd6+B,EAAa,CAAEsJ,SAAUjmC,EAAYnD,MAEjCmD,EAAYnD,OAAS0M,EAAAA,SAAS43C,aAChCxkB,EAA0B,cAAI38B,EAAYlC,GAE1C6+B,EAAiB,KAAI38B,EAAYlC,IAG9B6+B,mLApEVnlC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZL43B,EAAAA,kBASAtK,UADAsW,aCJT,gBCuBA,kCAlBCtM,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT,CACEp2B,QAAS+7E,GACTz3C,SAAUs3C,IAEZ,CACE57E,QAAS27E,GACTr5E,YAAai4E,GACbr6E,OAAO,GAET,CACEF,QAASg8E,GACT13C,SAAUk1C,4BCDhB,SAAAyC,0DAAkDliF,EAAAkiF,EAAA1uE,GAChD0uE,EAAA9hF,UAAAu/E,oBAAA,SACExgE,EACAxO,EACAivE,EACAj8D,EACAD,EACAE,QAHA,IAAAg8D,IAAAA,EAAA,gBACA,IAAAj8D,IAAAA,EAAA,QACA,IAAAD,IAAAA,EAAWvE,EAAIte,QAGf,IAAMshF,EAA8B,CAAEA,OAAQhjE,GAExC0gE,EAAangF,OAAAqF,OAAArF,OAAAqF,OAAA,GACd7E,KAAK4/E,iBAAiBnvE,IACtBzQ,KAAK6/E,oBAAoBp8D,EAAaD,EAAUE,IAGrD,OAAO1jB,KAAK28B,KACTG,KACC98B,KAAK8/E,sBAAsBH,EAAeD,GAC1CuC,EACA,CACE1tD,QAASv0B,KAAKu0B,UAGjB3sB,KACColC,EAAAA,MAAM,aACNhtC,KAAK8pC,UAAUH,aAAa21C,SA1BcC,+KAHjDt3E,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,6BCZd,SAAA+8E,YAEEA,EAAAhiF,UAAA2pC,QAAA,SAAQnlC,EAAwBpE,GAO9B,YANeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAArF,OAAAqF,OAAA,GACAH,GAAc,CAClB8sB,OAAQxxB,KAAKmiF,iBAAiBz9E,EAAO8sB,WAGlClxB,GAOC4hF,EAAAhiF,UAAAiiF,iBAAA,SAAiBC,GACzB,MAA2B,iBAAbA,EAAqC,SAAbA,EAAsBA,2HApB/Dn6E,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,6BCEd,SAAAk9E,YAEEA,EAAAniF,UAAA2pC,QAAA,SAAQnlC,EAAoBpE,GAQ1B,YAPeiH,IAAXjH,UACFA,EAAMd,OAAAqF,OAAArF,OAAAqF,OAAA,GACAH,GAAc,CAClB49E,WAAY59E,EAAO8sB,UAEPA,OAETlxB,2HAbV2H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,eCDDo9E,GAAyB,IAAIr9E,EAAAA,eAExC,wBAEWs9E,GAA0B,IAAIt9E,EAAAA,eAEzC,6BAEWu9E,GAAyB,IAAIv9E,EAAAA,eAExC,sCCAA,SAAAw9E,EAAoB54C,GAAA9pC,KAAA8pC,UAAAA,SAEpB44C,EAAAxiF,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAYE,YAReuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAArF,OAAAqF,OAAA,GACAH,GAAc,CAClBqf,OAAQrf,EAAOi+E,YAAY/3E,KAAI,SAAC8pE,GAAe,OAAAl1E,OAAAqF,OAAA,GAC1CwE,EAAKygC,UAAUD,QAAQ6qC,EAAY6N,WAIrCjiF,2IAnBV2H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALZ4jC,aCCF,aCLA,SAAS65C,GAAgB/8E,GACvB,MAAyB,iBAAXA,GAAuBA,EAAOg9E,SAG9C,SAASC,GAAUC,EAAOx3D,GACxB,GAAc,MAAVw3D,EACF,OAAO,EAKT,IAHA,IAAMC,EAAaD,EAAMtsE,MAAM,KACzBwsE,EAAe13D,EAAQ9U,MAAM,KAE1BzV,EAAI,EAAGA,EAAIiiF,EAAatiF,OAAQK,IAAK,CAC5C,IAAMkiF,EAAoBC,OAAOF,EAAajiF,IACxCoiF,EAAkBD,OAAOH,EAAWhiF,KAAO,EAEjD,GAAIkiF,IAAsBE,EACxB,OAAOA,EAAkBF,EAG7B,OAAO,WAGOG,GAAex9E,EAAiBk9E,GAC9C,GAAIH,GAAgB/8E,GAClB,MAAoB,MAAbk9E,EAAM,IACRD,GAAUj9E,EAAOg9E,SAASE,MAAOA,EAAM56B,OAAO,EAAG46B,EAAMpiF,SACxDmiF,GAAUj9E,EAAOg9E,SAASE,MAAOA,YAIzBO,GAAiBz9E,EAAiByhC,GAChD,GAAIs7C,GAAgB/8E,GAAS,CAC3B,IAAM09E,EACW,MAAfj8C,EAAQ,GACJzhC,EAAOg9E,SAASv7C,EAAQ6gB,OAAO,EAAG7gB,EAAQ3mC,SAC1CkF,EAAOg9E,SAASv7C,GAEhBtlC,EACqB,iBAAlBuhF,EACHF,GAAex9E,EAAQ09E,GACvBA,EAEN,MAAsB,MAAfj8C,EAAQ,IAActlC,EAASA,6HDzCzCiG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBEMb,SAAAu+E,EAAsB39E,GAAA7F,KAAA6F,OAAAA,SAEtB29E,EAAAtjF,UAAAujF,QAAA,SAAQl4D,GACN,OAAO83D,GAAerjF,KAAK6F,OAAQ0lB,IAGrCi4D,EAAAtjF,UAAAwjF,UAAA,SAAUp8C,GACR,OAAOg8C,GAAiBtjF,KAAK6F,OAAQyhC,4IAXxCr/B,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAPLw+E,wBCMP,SAAAC,EACYC,EACAC,EACAP,GAFAvjF,KAAA6jF,YAAAA,EACA7jF,KAAA8jF,cAAAA,EACA9jF,KAAAujF,cAAAA,EAGJvjF,KAAA+jF,SAAU,SAElBvkF,OAAAyB,eAAa2iF,EAAA1jF,UAAA,iBAAc,KAA3B,SAA4B6iF,GACtB/iF,KAAKujF,cAAcE,QAAQV,EAAM1+D,cAAgBrkB,KAAK+jF,SACxD/jF,KAAK8jF,cAAcE,mBAAmBhkF,KAAK6jF,aAC3C7jF,KAAK+jF,SAAU,IACL/jF,KAAKujF,cAAcE,QAAQV,EAAM1+D,aAAerkB,KAAK+jF,UAC/D/jF,KAAK8jF,cAAc36C,QACnBnpC,KAAK+jF,SAAU,8DAlBpBE,EAAAA,UAAS/7E,KAAA,CAAC,CACTg8E,SAAU,iEAJeC,EAAAA,mBAAaC,EAAAA,wBAC/BZ,+CAcNa,EAAAA,2BCRD,SAAAC,EACYT,EACAC,EACAP,GAFAvjF,KAAA6jF,YAAAA,EACA7jF,KAAA8jF,cAAAA,EACA9jF,KAAAujF,cAAAA,EAGJvjF,KAAA+jF,SAAU,SAElBvkF,OAAAyB,eAAaqjF,EAAApkF,UAAA,YAAS,KAAtB,SAAuBonC,GACjBtnC,KAAKujF,cAAcG,UAAUp8C,KAAatnC,KAAK+jF,SACjD/jF,KAAK8jF,cAAcE,mBAAmBhkF,KAAK6jF,aAC3C7jF,KAAK+jF,SAAU,IACL/jF,KAAKujF,cAAcG,UAAUp8C,IAAYtnC,KAAK+jF,UACxD/jF,KAAK8jF,cAAc36C,QACnBnpC,KAAK+jF,SAAU,8DAlBpBE,EAAAA,UAAS/7E,KAAA,CAAC,CACTg8E,SAAU,4DAJeC,EAAAA,mBAAaC,EAAAA,wBAC/BZ,0CAcNa,EAAAA,2BCLH,SAAAE,YACSA,EAAAtoD,QAAP,SACEuoD,GAEA,MAAO,CACLtoD,SAAUqoD,EACVpoD,UAAW,CACT71B,EAAqC,CACnCu8E,SAAU,CACRE,MAAOyB,GAAgB,oCAblC/nD,EAAAA,SAAQv0B,KAAA,CAAC,CACR4lD,aAAc,CAAC81B,GAAuBU,IACtCv2B,QAAS,CAAC61B,GAAuBU,0BC2BjC,SAAAG,EACgC9lD,EACG74B,EACvBkjC,EACMnjC,GAHc7F,KAAA2+B,WAAAA,EACG3+B,KAAA8F,cAAAA,EACvB9F,KAAAgpC,gBAAAA,EARKhpC,KAAA0kF,qBAA4B,GAC5B1kF,KAAA2kF,cAAqB,GAUpC3kF,KAAK6F,OAASA,EACd7F,KAAK4kF,eAAiB,IAAI7yE,EAAAA,gBAAgBlM,GAK1C7F,KAAKq6B,aAAer6B,KAAK6kF,oBAAoBpyE,mBAGvCgyE,EAAAvkF,UAAA2kF,kBAAA,WAAA,IAAAx7E,EAAArJ,KACA8kF,EAAsC9kF,KAAKgpC,gBAAgB39B,IAC/D1F,EACA,IAEIo/E,EAAuB/kF,KAAKgpC,gBAAgB39B,IAChD7F,EACA,IAGF,OAAOw/E,EAAAA,IAAIF,EAAeC,GAAsBn9E,KAE9Cq9E,EAAAA,KAAK,GACLz8D,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACogF,EAAYngF,EAAA,GAAEogF,EAAmBpgF,EAAA,GACrC,OAAAsE,EAAK+7E,cAAcF,EAAcC,QAK/BV,EAAAvkF,UAAAklF,cAAA,SAAcF,EAAqBC,IACrCA,MAAAA,OAAmB,EAAnBA,EAAqBxkF,SACvB4D,EAASpC,WAAA,EAAA+B,EAAA,CAAClE,KAAK0kF,sBAAyBS,IAEtCD,EAAavkF,QACf4D,EAASpC,WAAA,EAAA+B,EAAA,CAAClE,KAAK2kF,eAAkBO,KAG/BA,EAAavkF,QAAUwkF,EAAoBxkF,SAC7CX,KAAKqlF,qBAIDZ,EAAAvkF,UAAAmlF,kBAAA,WACN,IAAMC,EAAY/gF,EAChB,GACAvE,KAAK8F,cACL9F,KAAK0kF,qBACL1kF,KAAK2kF,cACL3kF,KAAK2+B,YAEN3+B,KAAK4kF,eAAwC/iF,KAAKyjF,GAG9ChC,GAAiBtjF,KAAK6F,OAAQ,yBACjCtB,EAAUvE,KAAK6F,OAAQy/E,IAI3Bb,EAAAvkF,UAAAw6B,YAAA,WACM16B,KAAKq6B,cACPr6B,KAAKq6B,aAAalmB,cAEnBnU,KAAK4kF,eAAwCW,8LAxFjDt9E,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8EAqBTgD,EAAAA,OAAMD,KAAA,CAAC3C,qCACP4C,EAAAA,OAAMD,KAAA,CAAC5C,YA1BH8iC,mCA4BJjgC,EAAAA,OAAMD,KAAA,CAACjD,0BC/BV,SAAAugF,EAAYC,WASLD,EAAAE,WAAP,SAAkB7/E,GAChB,MAAO,CACLq2B,SAAUspD,EACVrpD,UAAW,CAACv2B,EAAcC,MAYvB2/E,EAAAG,kBAAP,SACEx/E,EACAC,GAEA,MAAO,CACL81B,SAAUspD,EACVrpD,UAAW,CAACj2B,EAAqBC,EAAeC,MAS7Co/E,EAAAvpD,QAAP,SAAep2B,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLq2B,SAAUspD,EACVrpD,UAAW,CAACv2B,EAAcC,gCA9C/B42B,EAAAA,SAAQv0B,KAAA,CAAC,gDAFDu8E,UCAImB,GAAyC,CACpDtwE,QAAS,CACPC,IAAK,CACHsd,UAAW,CACTgzD,qBACE,oEC0BV,kCApBCppD,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,aAAcwnD,GAAaE,WAAWE,KAChDzpD,UAAW,CACT,CACEp2B,QAASy8E,GACTn6E,YAAaq6E,GACbz8E,OAAO,GAET,CACEF,QAASw8E,GACTl6E,YAAa65E,GACbj8E,OAAO,GAET,CACEF,QAAS08E,GACTp6E,YAAag6E,GACbp8E,OAAO,0BCpBX,SAAA6/E,EAAsBjgF,GAAA7F,KAAA6F,OAAAA,SAEtBigF,EAAA5lF,UAAA2pC,QAAA,SAAQnlC,EAAqBpE,GAO3B,YANeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAEbA,EAAOqhF,SACTzlF,EAAOylF,OAAS/lF,KAAKgmF,UAAUthF,EAAOqhF,SAEjCzlF,GAWTwlF,EAAA5lF,UAAA8lF,UAAA,SAAUthF,WACFqhF,EAAS,GACf,GAAIrhF,MACF,IAAoB,IAAAuhF,EAAAtiF,EAAAe,GAAMwhF,EAAAD,EAAApkF,QAAAqkF,EAAAjkF,KAAAikF,EAAAD,EAAApkF,OAAE,CAAvB,IAAMskF,EAAKD,EAAAvkF,MACRykF,EAASD,EAAMtmF,eAAe,gBAC/BkmF,EAAOlmF,eAAesmF,EAAME,aAC/BN,EAAOI,EAAME,WAAaD,EAAS,GAAK,IAG1C,IAAIE,OAAc,EACdF,IAAWL,EAAOI,EAAME,WAAWF,EAAMI,gBAC3CR,EAAOI,EAAME,WAAWF,EAAMI,cAAgB,IAI9CD,EADEF,EACeL,EAAOI,EAAME,WAAWF,EAAMI,cAE9BR,EAAOI,EAAME,WAGhC,IAAMG,EAAWhnF,OAAAqF,OAAA,GAAQshF,GACzBK,EAAYn8E,IAAMrK,KAAKymF,kBAAkBD,EAAYn8E,KACrDi8E,EAAeH,EAAMO,QAAUF,oGAGnC,OAAOT,GASDD,EAAA5lF,UAAAumF,kBAAA,SAAkBp8E,GACxB,OAAI,IAAIkiB,OAAO,4BAA4B4+B,KAAK9gD,GACvCA,GAGNrK,KAAK6F,OAAOyP,QAAQqxE,MAAMtxE,SACzBrV,KAAK6F,OAAOyP,QAAQC,IAAIF,SACxB,IAAMhL,2IA/DbpC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDANjBsP,wBCKT,SAAAmyE,YAEEA,EAAA1mF,UAAA2pC,QAAA,SAAQnlC,EAAqBpE,GAQ3B,YAPeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,EAAOmiF,oBACTvmF,EAAOumF,kBAAoB7mF,KAAKgmF,UAAUthF,EAAOmiF,oBAE5CvmF,GAUCsmF,EAAA1mF,UAAA8lF,UAAA,SAAUthF,WACZoiF,EAAa,GAEnB,GAAIpiF,MACF,IAAwB,IAAAuhF,EAAAtiF,EAAAe,GAAMwhF,EAAAD,EAAApkF,QAAAqkF,EAAAjkF,KAAAikF,EAAAD,EAAApkF,OAAE,CAA3B,IAAMklF,EAASb,EAAAvkF,MACbmlF,EAAWjnF,eAAeknF,EAAUC,iBACvCF,EAAWC,EAAUC,eAAiB,IAExCF,EAAWC,EAAUC,eAAetjF,KAAKqjF,qGAG7C,OAAOD,6BAhCV7+E,EAAAA,+BCUC,SAAAg/E,EAAoBh9C,GAAAjqC,KAAAiqC,iBAAAA,EAMVjqC,KAAAknF,mBAAqB,SAE/BD,EAAA/mF,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAeE,YAbA,IAAAM,IAAAA,EAAA,IAEAA,EAAMd,OAAAqF,OAAArF,OAAAqF,OAAA,GACDvE,GACCoE,GAGN1E,KAAKmnF,gBAAgB7mF,GACjBoE,EAAOskD,WACT1oD,EAAO0oD,SAAWtkD,EAAOskD,SAASp+C,KAAI,SAAC8/B,GACrC,OAAArhC,EAAK4gC,iBAAiBJ,QAAQa,EAASH,QAGpCjqC,GAGD2mF,EAAA/mF,UAAAinF,gBAAA,SAAgB7mF,GACtBN,KAAKonF,qBAAqB9mF,GAC1BN,KAAKqnF,uBAAuB/mF,IAYtB2mF,EAAA/mF,UAAAmnF,uBAAA,SAAuB/mF,GACzBA,EAAOgnF,SACThnF,EAAOgnF,OAAShnF,EAAOgnF,OAAOx6E,QAAO,SAACy6E,GACpC,OACGjnF,EAAO2jB,aACP3jB,EAAO2jB,WAAWujE,gBAChBD,EAAM1nF,eAAe,YAAc0nF,EAAME,UAC1CF,EAAMxjE,QACNwjE,EAAMxjE,OAAOpX,MAAK,SAAChL,GACjB,OACEA,EAAMkzE,UAAYlzE,EAAM00D,MAAQ/1D,EAAO2jB,WAAWujE,qBAiBxDP,EAAA/mF,UAAAknF,qBAAA,SAAqB9mF,GAArB,IAAA+I,EAAArJ,KACFM,EAAOgnF,SACThnF,EAAOgnF,OAAShnF,EAAOgnF,OAAO18E,KAAI,SAAC88E,GACzB,IAAAC,EAA8BD,EAAWC,UAA3BC,WtT7CP/jF,EAAG/B,GACtB,IAAIU,EAAI,GACR,IAAK,IAAI5C,KAAKiE,EAAOrE,OAAOU,UAAUL,eAAe2D,KAAKK,EAAGjE,IAAMkC,EAAE29B,QAAQ7/B,GAAK,IAC9E4C,EAAE5C,GAAKiE,EAAEjE,IACb,GAAS,MAALiE,GAAqD,mBAAjCrE,OAAOqoF,sBACtB,CAAA,IAAI7mF,EAAI,EAAb,IAAgBpB,EAAIJ,OAAOqoF,sBAAsBhkF,GAAI7C,EAAIpB,EAAEe,OAAQK,IAC3Dc,EAAE29B,QAAQ7/B,EAAEoB,IAAM,GAAKxB,OAAOU,UAAU4nF,qBAAqBtkF,KAAKK,EAAGjE,EAAEoB,MACvEwB,EAAE5C,EAAEoB,IAAM6C,EAAEjE,EAAEoB,KAE1B,OAAOwB,EsToC8BulF,CAAKL,EAAhC,CAAA,cAGN,OAFAE,EAAYI,eACVL,MAAAA,OAAS,EAATA,EAAWhnF,QAAS,EAAIgnF,EAAUhnF,OAAS0I,EAAK69E,mBAC3CU,+IA5Ed3/E,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJxB4jC,wBCIA,SAAAk/C,EAAoBn+C,GAAA9pC,KAAA8pC,UAAAA,SAEpBm+C,EAAA/nF,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAQE,QANA,IAAAM,IAAAA,EAAA,SAEeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,GAAUA,EAAOoiF,WAMnB,OALAxmF,EAASoE,EAAOoiF,WAAWl8E,KAAI,SAACm8E,GAAc,OAAAvnF,OAAAqF,OAAArF,OAAAqF,OAAA,GACzCkiF,GAAS,CACZzmF,OAAQ+I,EAAKygC,UAAUD,QAAQk9C,EAAUzmF,OAAQiqC,kJAhBxDtiC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAHxB4jC,wBCEA,SAAAm/C,EAAsBriF,GAAA7F,KAAA6F,OAAAA,SAEtBqiF,EAAAhoF,UAAA2pC,QAAA,SAAQnlC,EAAqBpE,GAQ3B,YAPeiH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAEbA,EAAOuhC,OACT3lC,EAAO2lC,KAAOjmC,KAAKgmF,UAAUthF,EAAOuhC,MACpC3lC,EAAO6nF,SAAWzjF,EAAOuhC,MAEpB3lC,GAGC4nF,EAAAhoF,UAAA8lF,UAAA,SAAU//C,GAClB,OAAOA,EAAKzZ,QAAQ,WAAY,6IAhBnCvkB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDALjBsP,UCGI2zE,GAAgC,IAAIljF,EAAAA,eAE/C,iDCKA,SAAAmjF,EACY1rD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZu+C,EAAAnoF,UAAA0c,KAAA,SACEqvB,EACA+6C,EACAxjE,GAEA,OAAOxjB,KAAK28B,KACTtxB,IAAIrL,KAAKkzB,YAAY+Y,EAAa+6C,EAAexjE,IACjD5b,KAAK5H,KAAK8pC,UAAUP,SAAS6+C,MAGxBC,EAAAnoF,UAAAgzB,YAAA,SACRlP,EACA+iE,EACAvjE,GAEA,OAAOxjB,KAAK82B,aAAa3D,OACvB,oBACA,CACE8Y,YAAajoB,GAEf,CAAEgjE,cAAeD,EAAWvjE,SAAQA,+BA5BzCvb,EAAAA,uDATQ80B,EAAAA,kBAIAtK,UACAsW,UCDIu/C,GAA4B,IAAIpjF,EAAAA,eAE3C,2BAEWqjF,GAA4B,IAAIrjF,EAAAA,eAE3C,yCCKA,SAAAsjF,EACY7rD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZ0+C,EAAAtoF,UAAA0c,KAAA,SAAKqvB,EAAqBw8C,GACxB,OAAOzoF,KAAK28B,KACTtxB,IAAIrL,KAAKkzB,YAAY+Y,EAAaw8C,IAClC7gF,KACColC,EAAAA,MAAM,WACNhtC,KAAK8pC,UAAUH,aAAa2+C,MAIlCE,EAAAtoF,UAAA48B,KAAA,SAAKmP,EAAqBy8C,GACxBA,EAAS1oF,KAAK8pC,UAAUD,QAAQ6+C,EAAQH,IAExC,IAAMh0D,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAGZx6B,EAAO,IAAIsmF,gBAMjB,OALAtmF,EAAKmyB,OAAO,WAAYk0D,EAAOE,UAC/BvmF,EAAKmyB,OAAO,UAAWk0D,EAAOG,SAC9BxmF,EAAKmyB,OAAO,SAAUk0D,EAAOI,OAAOzkE,YACpChiB,EAAKmyB,OAAO,QAASk0D,EAAOK,OAErB/oF,KAAK28B,KAAKG,KAAK98B,KAAKkzB,YAAY+Y,GAAc5pC,EAAKgiB,WAAY,CACpEkQ,QAAOA,KAIDi0D,EAAAtoF,UAAAgzB,YAAA,SAAYlP,EAAcykE,GAClC,OAAOzoF,KAAK82B,aAAa3D,OACvB,iBACA,CACE8Y,YAAajoB,GAEf,CAAEykE,SAAQA,+BAzCfxgF,EAAAA,uDAbQ80B,EAAAA,kBAKAtK,UACAsW,UCCIigD,GAAiC,IAAI9jF,EAAAA,eAEhD,+BAEW+jF,GAAgC,IAAI/jF,EAAAA,eAE/C,+BCIIgkF,GAAsC,CAC1C1lE,SAAU,kBAKV,SAAA2lE,EACYxsD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZq/C,EAAAjpF,UAAAkpF,OAAA,SACEt4E,EACAsT,GAEA,YAFA,IAAAA,IAAAA,EAAA8kE,IAEOlpF,KAAK28B,KACTtxB,IAAIrL,KAAKqpF,kBAAkBv4E,EAAOsT,IAClCxc,KAAK5H,KAAK8pC,UAAUP,SAASy/C,MAGlCG,EAAAjpF,UAAAopF,gBAAA,SACEC,EACA/lE,GAEA,YAFA,IAAAA,IAAAA,EAAA,GAEOxjB,KAAK28B,KACTtxB,IAAIrL,KAAKwpF,sBAAsBD,EAAM/lE,EAASa,aAC9Czc,KACColC,EAAAA,MAAM,eACNhtC,KAAK8pC,UAAUH,aAAas/C,MAIxBE,EAAAjpF,UAAAmpF,kBAAA,SACRv4E,EACAsT,GAEA,OAAOpkB,KAAK82B,aAAa3D,OACvB,gBACA,GAAE3zB,OAAAqF,OAAA,CAEAiM,MAAKA,GACFsT,KAKC+kE,EAAAjpF,UAAAspF,sBAAA,SAAsBD,EAAcE,GAC5C,OAAOzpF,KAAK82B,aAAa3D,OAAO,qBAAsB,GAAI,CAAEo2D,KAAIA,EAAEE,IAAGA,mBC1DzDC,GAAYhK,GAC1B,IAAMiK,EAAejK,EAAO90E,KAAI,SAACtI,GAC/B,MAAa,iBAANA,EAAiBsnF,GAAYtnF,GAAKA,KAG3C,OAAOunF,GADcC,GAAevlF,EAASpC,WAAA,EAAA+B,EAAA,CAAC,IAAOylF,eASvCG,GAAepK,QAAA,IAAAA,IAAAA,EAAA,IAC7B,IAAMrgE,EAAO7f,OAAO6f,KAAKqgE,GAUzB,OATIrgE,EAAKhO,SAAS,gBACTquE,EAAgB,eAChBA,EAAc,OACZrgE,EAAKhO,SAAS,mBAChBquE,EAAc,MAEvBlgF,OAAO6f,KAAKqgE,GAAQn2E,SAAQ,SAAChJ,GAC3Bm/E,EAAOn/E,GAAOupF,GAAepK,EAAOn/E,OAE/Bm/E,WASOkK,GACdlK,EACAqK,QAAA,IAAAA,IAAAA,EAAA,GAKA,IAHA,IAAMJ,EAAe,GAEjB3oF,EAAI+oF,EACD/oF,EAAI0+E,EAAO/+E,QAAQ,CACxB,GAAkB,MAAd++E,EAAO1+E,GACLA,EAAI+oF,IACNJ,EAAajK,EAAOv3B,OAAO4hC,EAAY/oF,EAAI+oF,IAAe,IAE5DA,EAAa/oF,EAAI,OACZ,GAAkB,MAAd0+E,EAAO1+E,GAAY,CAC5B,IAAMgpF,EAAYJ,GAAYlK,EAAQ1+E,EAAI,GAC1C,IAAIrB,MAAM2E,QAAQ0lF,GAKhB,OAAOL,EAJPA,EAAajK,EAAOv3B,OAAO4hC,EAAY/oF,EAAI+oF,IAAeC,EAAU,GAEpEhpF,GADA+oF,EAAaC,EAAU,IACN,OAId,GAAkB,MAAdtK,EAAO1+E,GAIhB,OAHIA,EAAI+oF,IACNJ,EAAajK,EAAOv3B,OAAO4hC,EAAY/oF,EAAI+oF,IAAe,IAErD,CAACJ,EAAc3oF,EAAI,GAE5BA,IAOF,OAJI+oF,EAAarK,EAAO/+E,SACtBgpF,EAAajK,EAAOv3B,OAAO4hC,EAAY/oF,EAAI+oF,IAAe,IAGrDJ,WAQOE,GAAgBnK,GAC9B,OAAOlgF,OAAO6f,KAAKqgE,GAChB90E,KAAI,SAACrK,GACJ,IAAMypF,EAAYH,GAAgBnK,EAAOn/E,IACzC,OAAOypF,EAAezpF,EAAG,IAAIypF,EAAS,IAAMzpF,KAE7C25B,KAAK,cASM+vD,GAAiB11E,EAASmrE,GAGxC,OAAOwK,GAAiB31E,EADJ,iBAAXmrE,EAAsBkK,GAAYlK,GAAUA,GAIvD,SAASwK,GAAiB31E,EAASmrE,GACjC,IAAKt7E,EAASmQ,GACZ,OAAOA,EAGT,IAAM8K,EAAO7f,OAAO6f,KAAKqgE,GAEzB,GACkB,IAAhBrgE,EAAK1e,QAEL0e,EAAK1S,MAAK,SAACu+B,GAAO,MAAO,UAAPA,GAAyB,YAAPA,GAA2B,SAAPA,KAExD,OAAO32B,EAGT,IAAMvS,EAAS,GAQf,OANAqd,EAAK9V,SAAQ,SAAChJ,GACRgU,EAAK1U,eAAeU,KACtByB,EAAOzB,GAAO2pF,GAAc31E,EAAKhU,GAAMm/E,EAAOn/E,QAI3CyB,uBD1GRiG,EAAAA,uDArBQ80B,EAAAA,kBAeAtK,UADAsW,wBEyBP,SAAAohD,EAAsBxtD,GAAA38B,KAAA28B,KAAAA,EAEZ38B,KAAAoqF,aAAe,gBAWzBD,EAAAjqF,UAAAmqF,oBAAA,SAAoBC,eACZC,EAAuC,OAC7C,IAAoB,IAAAC,EAAA7mF,EAAA2mF,GAA0BG,EAAAD,EAAA3oF,QAAA4oF,EAAAxoF,KAAAwoF,EAAAD,EAAA3oF,OAAE,CAA3C,IAAM2nC,EAAKihD,EAAA9oF,MACRqD,EAAAjB,EAAoB/D,KAAK0qF,YAAYlhD,EAAMn/B,KAAI,GAA9CsgF,EAAO3lF,EAAA,GAAE06E,EAAM16E,EAAA,GACjBulF,EAAcI,KACjBJ,EAAcI,GAAW,IAE3BnhD,EAAMk2C,OAASA,EAASkK,GAAYlK,GAAU,GAC9C6K,EAAcI,GAASnhD,EAAMohD,WAAWt3D,OAASkW,oGAGnD,IAAMqhD,EAAoC,OAC1C,IAA2B,IAAAlzE,EAAAhU,EAAAnE,OAAOiK,QAAQ8gF,IAAc/gF,EAAAmO,EAAA9V,QAAA2H,EAAAvH,KAAAuH,EAAAmO,EAAA9V,OAAE,CAA/C,IAAA6H,EAAA3F,EAAAyF,EAAA7H,MAAA,GAAC0I,EAAGX,EAAA,GAAE2iD,EAAK3iD,EAAA,GAKpBmhF,EAJsB7qF,KAAK8qF,iBACzBzgF,EACA7K,OAAOukB,OAAOsoC,GAAOzhD,KAAI,SAACmgF,GAAO,OAAAA,EAAGrL,YAEVrzB,oGAG9B,OAAOw+B,GAQDV,EAAAjqF,UAAAwqF,YAAA,SAAYM,GAAZ,IAAA3hF,EAAArJ,KACA8E,EAAAf,EAAgBinF,EAAcv0E,MAAM,KAAI,GAAvCpM,EAAGvF,EAAA,GAAEsH,EAAMtH,EAAA,GAEZmmF,EAAY,GAEd7+E,GACFA,EAAOqK,MAAM,KAAKlN,SAAQ,SAACqjB,GACzB,IAAMs+D,EAAWt+D,EAAMnW,MAAM,KAC7Bw0E,EAAUC,EAAS,IAAMA,EAAS,MAItC,IASMC,EATkB3rF,OAAO6f,KAAK4rE,GACjCvnE,OACApE,QAAO,SAAC/Q,EAAI68E,GAIX,OAHIA,IAAQ/hF,EAAK+gF,cACf77E,EAAG7K,KAAKunF,EAAUG,GAAUA,EAAG,IAAIH,EAAUG,GAASA,GAEjD78E,IACN,IAE6B2rB,KAAK,KAEvC,MAAO,CACLixD,EAAe9gF,EAAG,IAAI8gF,EAAc9gF,EACpC4gF,EAAUjrF,KAAKoqF,gBAUXD,EAAAjqF,UAAA4qF,iBAAA,SAAiBzgF,EAAaq1E,GACpC,IAAM2L,EAAe3B,GAAYhK,GAOjC,OALI2L,IACFhhF,GAAOA,EAAIgH,SAAS,KAAO,IAAM,IACjChH,GAAUrK,KAAKoqF,aAAY,IAAIiB,GAG1BhhF,qJAxFVpC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAjCL43B,EAAAA,gCCaP,SAAAuuD,EACY3uD,EACA4uD,GADAvrF,KAAA28B,KAAAA,EACA38B,KAAAurF,UAAAA,SASZD,EAAAprF,UAAAsrF,eAAA,SACEC,EACAC,GAFF,IAAAriF,EAAArJ,KAIQgC,EAAS,GAEV0pF,IACHA,EAAc,SAACrhF,GAAQ,OAAAhB,EAAKszB,KAAKtxB,IAAShB,KAG5C,IAAMwgF,EAAa7qF,KAAKurF,UAAUlB,oBAAoBoB,GAkCtD,OAhCAjsF,OAAOiK,QAAQohF,GAAYthF,SACzB,SAACzE,OAAAC,EAAAhB,EAAAe,EAAA,GAACuF,EAAGtF,EAAA,GAAE4mF,EAAgB5mF,EAAA,GAMf6mF,EAAgBpsF,OAAOukB,OAAO4nE,GAEpC,GAA6B,IAAzBC,EAAcjrF,OAEhBqB,EAAO0B,KAAIlE,OAAAqF,OAAArF,OAAAqF,OAAA,GACN+mF,EAAc,GAAGhB,YAAU,CAC9BiB,MAAOH,EAAYrhF,UAEhB,CAGL,IAAMyhF,EAAQJ,EAAYrhF,GAAKzC,KAAK2H,EAAAA,YAAY,IAEhDq8E,EAAcriF,SAAQ,SAACwiF,GACrB/pF,EAAO0B,KAAIlE,OAAAqF,OAAArF,OAAAqF,OAAA,GACNknF,EAAUnB,YAAU,CACvBiB,MAAOC,EAAMlkF,KACXgD,EAAAA,KAAI,SAAC2J,GAAS,OAAA01E,GAAiB11E,EAAMw3E,EAAUrM,sBAQpD19E,oKA3DViG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL43B,EAAAA,kBAHPotD,wBCQA,SAAA6B,EACYrvD,EACA7F,EACAgT,EACAmiD,GAHAjsF,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,EACA9pC,KAAAisF,kBAAAA,SAGZD,EAAA9rF,UAAA0c,KAAA,SAAKqvB,EAAqB3Y,GACxB,OAAOtzB,KAAK28B,KACTtxB,IAAIrL,KAAKkzB,YAAY+Y,EAAa3Y,IAClC1rB,KAAK5H,KAAK8pC,UAAUP,SAASgB,MAGlCyhD,EAAA9rF,UAAAgsF,SAAA,SAASljC,GAAT,IAAA3/C,EAAArJ,KACQyrF,EAA0CziC,EAASp+C,KAAI,SAAC4+B,GAAU,MAAA,CACtEohD,WAAYphD,EACZn/B,IAAKhB,EAAK6pB,YAAYsW,EAAMxlB,KAAMwlB,EAAMlW,WAG1C,OAAOtzB,KAAKisF,kBACTT,eAA4BC,GAC5B7gF,KACC,SAACuhF,GACC,OAAC3sF,OAAAqF,OAAArF,OAAAqF,OAAA,GACIsnF,GAAa,CAChBN,MAAOM,EAAcN,MAAMjkF,KACzByB,EAAKygC,UAAUP,SAASgB,WAM1ByhD,EAAA9rF,UAAAgzB,YAAA,SAAYlP,EAAcsP,GAClC,OAAOtzB,KAAK82B,aAAa3D,OACvB,UACA,CACE8Y,YAAajoB,QAEfzc,EACA+rB,8BAzCLrrB,EAAAA,uDAVQ80B,EAAAA,kBACAtK,UACAsW,UAMAuiD,UCXGc,MCIZ,gBCDA,gBCAA,gBCKA,cJRYA,GAAAA,EAAAA,eAAAA,EAAAA,aAAY,KACtB,KAAA,OACAA,GAAA,QAAA,UACAA,GAAA,WAAA,aACAA,GAAA,SAAA,eKDWC,GAAqC,CAChD/2E,QAAS,CACPC,IAAK,CACHsd,UAAW,CACT6X,QAAS,CACP4hD,QACE,qLACF1oE,KACE,sGACFiM,QACE,+OACF08D,WAAY,iDACZC,SACE,wHAEJC,eAAgB,kCAIhB5F,kBACE,qFAEF6F,cACE,4MAEFC,mBAAoB,yBAGxBC,cAAe,CACbliD,QAAS,CACP7a,QAAS,CACPg9D,QAAS,CAACT,EAAAA,aAAaU,KAAMV,EAAAA,aAAaW,kBC6BpD,kCA1CCtwD,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqB+lF,IACrB,CACEtmF,QAASinF,GACT3iD,SAAU2hD,IAEZ,CACEjmF,QAASwkC,GACTliC,YAAay9E,GACb7/E,OAAO,GAET,CACEF,QAASwkC,GACTliC,YAAa6/E,GACbjiF,OAAO,GAET,CACEF,QAASknF,GACT5iD,SAAUg+C,IAEZ,CACEtiF,QAASqiF,GACT//E,YAAa4/E,GACbhiF,OAAO,GAET,CACEF,QAASmnF,GACT7iD,SAAU8+C,IAEZ,CACEpjF,QAASijF,GACT3gF,YAAa4+E,GACbhhF,OAAO,GAET,CACEF,QAASonF,GACT9iD,SAAUm+C,aCtDH4E,GAAsB,IAAIloF,EAAAA,eACrC,sBAGWmoF,GAAsB,IAAInoF,EAAAA,eACrC,sBAGWooF,GAAqB,IAAIpoF,EAAAA,eACpC,qBAGWqoF,GAAoB,IAAIroF,EAAAA,eACnC,oBAGWsoF,GAAuB,IAAItoF,EAAAA,eAEtC,oCCHA,SAAAuoF,EACY9wD,EACAqN,EACAC,GAFAjqC,KAAA28B,KAAAA,EACA38B,KAAAgqC,oBAAAA,EACAhqC,KAAAiqC,iBAAAA,SAGZwjD,EAAAvtF,UAAAwtF,cAAA,WACE,OAAO1tF,KAAK28B,KACTtxB,IAAsBrL,KAAKgqC,oBAAoB7W,OAAO,cACtDvrB,KACCgD,EAAAA,KAAI,SAAC+iF,GAAiB,OAAAA,EAAa18D,aACnCjxB,KAAKiqC,iBAAiBN,aAAayjD,MAIzCK,EAAAvtF,UAAA0tF,eAAA,WACE,OAAO5tF,KAAK28B,KACTtxB,IAAsBrL,KAAKgqC,oBAAoB7W,OAAO,eACtDvrB,KACCgD,EAAAA,KAAI,SAACijF,GAAiB,OAAAA,EAAar9D,cACnCxwB,KAAKiqC,iBAAiBN,aAAa0jD,MAIzCI,EAAAvtF,UAAA4tF,cAAA,SAAcxgF,GACZ,OAAOtN,KAAK28B,KACTtxB,IACCrL,KAAKgqC,oBAAoB7W,OACvB,iBACA5rB,EACA+F,EAAO,CAAEA,KAAIA,QAAK/F,IAGrBK,KACCgD,EAAAA,KAAI,SAACmjF,GAAgB,OAAAA,EAAYC,aACjChuF,KAAKiqC,iBAAiBN,aAAa2jD,MAIzCG,EAAAvtF,UAAA+tF,YAAA,SAAYC,GACV,OAAOluF,KAAK28B,KACTtxB,IACCrL,KAAKgqC,oBAAoB7W,OAAO,UAAW,CAAEg7D,QAASD,KAEvDtmF,KACCgD,EAAAA,KAAI,SAACwjF,GAAe,OAAAA,EAAWC,WAC/BruF,KAAKiqC,iBAAiBN,aAAa4jD,MAQzCE,EAAAvtF,UAAAouF,aAAA,SAAaz8D,GACX,IAAKA,EAAS,CACZ,IACM08D,EADUvuF,KAAKgqC,oBAAoB/W,kBACfxc,MAAM,KAChCob,EAAU08D,EAAU9qF,MAGtB,OAAOzD,KAAK28B,KACTtxB,IACCrL,KAAKgqC,oBAAoBlX,eAAe,cAEzClrB,KACCgD,EAAAA,KAAI,SAAC4jF,GACH,OAAOA,EAASC,UAAU9hF,MAAK,SAACmlB,GAAS,OAAAA,EAAK7B,MAAQ4B,UAK9D47D,EAAAvtF,UAAAwuF,cAAA,WACE,OAAO1uF,KAAK28B,KACTtxB,IACCrL,KAAKgqC,oBAAoBlX,eAAe,cAEzClrB,KACCgD,EAAAA,KAAI,SAAC+jF,GAAiB,OAAAA,EAAaF,aACnCzuF,KAAKiqC,iBAAiBN,aAAa6jD,gCAjF1CvlF,EAAAA,uDAlBQ80B,EAAAA,kBAgBAtK,UAFAsW,aCVT,aCFa6lD,GAAyC,CACpDt5E,QAAS,CACPC,IAAK,CACHsd,UAAW,CACT5B,UAAW,YACXT,WAAY,aACZw9D,UAAW,YACXK,QACE,yEACFI,UACE,2JCYR,SAAAI,EACY7+E,EACVC,EACUpK,GAFA7F,KAAAgQ,MAAAA,EAEAhQ,KAAA6F,OAAAA,EAEV7F,KAAKyH,eAAiBwI,EAAOxI,sBAM/BonF,EAAA3uF,UAAAuxB,OAAA,WAAA,IAAApoB,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0+E,IACPtmE,EAAAA,KAAI,SAACgI,GACEA,GACHnnB,EAAK2G,MAAMU,SAAS,IAAIq+E,OAG5BjiF,EAAAA,QAAO,SAACkiF,GAAc,OAAAhjF,QAAQgjF,QAOlCH,EAAA3uF,UAAAoxB,UAAA,WACE,OAAOtxB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO6+E,IACPniF,EAAAA,QAAO,SAAC0kB,GAAW,OAAAxlB,QAAQwlB,QAO/Bq9D,EAAA3uF,UAAA8xB,UAAA,SAAUpB,GAAV,IAAAvnB,EAAArJ,KACEA,KAAKgQ,MACFpI,KAAKwI,EAAAA,OAAO6+E,IAAyCz8E,EAAAA,KAAK,IAC1DC,WAAU,SAAC6d,GACNA,IAAmBM,GACrBvnB,EAAK2G,MAAMU,SACT,IAAIw+E,GAAqCt+D,QAWnDi+D,EAAA3uF,UAAAgX,WAAA,WACE,IAAIvV,EAIJ,GAHA3B,KAAKsxB,YACF7e,WAAU,SAAC4B,GAAQ,OAAC1S,EAAQ0S,KAC5BF,eACCxS,EAAJ,CAKA,IAAMwtF,EACJnvF,KAAKyH,gBAAkBzH,KAAKyH,eAAewM,QAAQ,YAEnDk7E,GACA1iE,GAA0BzsB,KAAK6F,OAAQinB,IAAqBzb,SAC1D89E,GAGFnvF,KAAKgyB,UAAUm9D,GAEfnvF,KAAKgyB,UACHrF,GAA2B3sB,KAAK6F,OAAQinB,iCA9E/C7kB,EAAAA,uDAnBgB2J,EAAAA,aAIRxK,SAKAsN,wBCcP,SAAA06E,EACYp/E,EACVC,EACUpK,GAFA7F,KAAAgQ,MAAAA,EAEAhQ,KAAA6F,OAAAA,EAEV7F,KAAKyH,eAAiBwI,EAAOxI,sBAM/B2nF,EAAAlvF,UAAAuxB,OAAA,WAAA,IAAApoB,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOi/E,IACP7mE,EAAAA,KAAI,SAACyI,GACEA,GACH5nB,EAAK2G,MAAMU,SAAS,IAAI4+E,OAG5BxiF,EAAAA,QAAO,SAACmkB,GAAc,OAAAjlB,QAAQilB,QAOlCm+D,EAAAlvF,UAAAoxB,UAAA,WACE,OAAOtxB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOm/E,IACPziF,EAAAA,QAAO,SAAC0kB,GAAW,OAAAxlB,QAAQwlB,QAO/B49D,EAAAlvF,UAAA8xB,UAAA,SAAUpB,GAAV,IAAAvnB,EAAArJ,KACEA,KAAKgQ,MACFpI,KAAKwI,EAAAA,OAAOm/E,IAAyC/8E,EAAAA,KAAK,IAC1DC,WAAU,SAACqe,GACNA,IAAmBF,GACrBvnB,EAAK2G,MAAMU,SACT,IAAI8+E,GAAqC5+D,QAWnDw+D,EAAAlvF,UAAAgX,WAAA,WACE,IAAIvV,EAIJ,GAHA3B,KAAKsxB,YACF7e,WAAU,SAAC4B,GAAQ,OAAC1S,EAAQ0S,KAC5BF,eACCxS,EAAJ,CAKA,IAAM8tF,EACJzvF,KAAKyH,gBAAkBzH,KAAKyH,eAAewM,QAAQ,YAEnDw7E,GACAhjE,GAA0BzsB,KAAK6F,OAAQgnB,IAAqBxb,SAC1Do+E,GAGFzvF,KAAKgyB,UAAUy9D,GAEfzvF,KAAKgyB,UACHrF,GAA2B3sB,KAAK6F,OAAQgnB,iCA9E/C5kB,EAAAA,uDAnBgB2J,EAAAA,aAIRxK,SAKAsN,wBCcP,SAAAg7E,EACUC,EACAC,EACA94D,EACAjxB,GAJV,IAAAwD,EAAArJ,KACUA,KAAA2vF,gBAAAA,EACA3vF,KAAA4vF,gBAAAA,EACA5vF,KAAA82B,aAAAA,EACA92B,KAAA6F,OAAAA,EAER7F,KAAK6vF,WAAaljE,GAChB3sB,KAAK6F,OACLgnB,IAEF7sB,KAAK8vF,WAAanjE,GAChB3sB,KAAK6F,OACLinB,IAGF9sB,KAAK2vF,gBACFr+D,YACA7e,WAAU,SAAC8B,GAAS,OAAClL,EAAKwmF,WAAat7E,KAE1CvU,KAAK4vF,gBAAgBt+D,YAAY7e,WAAU,SAAC8B,GAC1ClL,EAAKymF,WAAav7E,YAItBm7E,EAAAxvF,UAAA62B,UAAA,SACEpC,EACA9yB,GAWA,OATI8yB,EAAQtqB,IAAIgH,SAASrR,KAAK82B,aAAa7D,qBACzC0B,EAAUA,EAAQE,MAAM,CACtBk7D,UAAW,CACTC,KAAMhwF,KAAK6vF,WACXI,KAAMjwF,KAAK8vF,eAKVjuF,EAAK00B,OAAO5B,yLA1CtB1sB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDATjBiqF,UADAP,UAEAp8D,UACA/d,aCYT,kCAfC+nB,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqBsoF,IACrB,CACE7oF,QAASmqF,GACT7lD,SAAUojD,IAEZ,CACE1nF,QAAS6xB,EAAAA,kBACTvvB,YAAaqnF,GACbzpF,OAAO,0BCZX,SAAAkqF,EAAsBC,GAAApwF,KAAAowF,yBAAAA,SAEtBD,EAAAjwF,UAAA2pC,QAAA,SAAQnlC,EAAgBpE,GAEtB,YAFsB,IAAAA,IAAAA,EAAA,IACtBA,EAASN,KAAKowF,yBAAyBzkE,qBAAqBjnB,4IAN/DuD,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJjB2iB,wBCWP,SAAAuoE,EAAoBvmD,GAAA9pC,KAAA8pC,UAAAA,SAEpBumD,EAAAnwF,UAAA2pC,QAAA,SAAQnlC,EAA2BpE,GAAnC,IAAA+I,EAAArJ,KAYE,YAXeuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAGbA,EAAO4rF,gBACThwF,EAAOgwF,cAAgB5rF,EAAO4rF,cAAc1lF,KAAI,SAAC6/B,GAAU,OAAAjrC,OAAAqF,OAAArF,OAAAqF,OAAA,GACtD4lC,GAAK,CACRyG,WAAY7nC,EAAK0nC,kBAAkBtG,EAAMyG,kBAItC5wC,GAGD+vF,EAAAnwF,UAAA6wC,kBAAA,SAAkBrsC,GACxB,OAAAlF,OAAAqF,OAAArF,OAAAqF,OAAA,GACKH,GAAM,CACTgmC,QAAS1qC,KAAK8pC,UAAUD,QAAQnlC,EAAOgmC,QAASH,+IAvBrDtiC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDALxB4jC,wBCSA,SAAAwnD,EAAoBzmD,GAAA9pC,KAAA8pC,UAAAA,SAEpBymD,EAAArwF,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAcE,YAVeuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAA,GAASH,IAEbA,GAAUA,EAAOsvE,UACnB1zE,EAAO0zE,QAAUtvE,EAAOsvE,QAAQppE,KAAI,SAAC5I,GAAW,OAAAxC,OAAAqF,OAAArF,OAAAqF,OAAA,GAC3C7C,GAAM,CACT0oC,QAASrhC,EAAKygC,UAAUD,QAAQ7nC,EAAO0oC,QAASH,UAI7CjqC,2IApBV2H,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJxB4jC,UCDWynD,GAA+B,IAAItrF,EAAAA,eAE9C,8BCFWurF,GAA8B,IAAIvrF,EAAAA,eAE7C,2CCaA,SAAAwrF,EACY/zD,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZ4mD,EAAAxwF,UAAAywF,8BAAA,WACE,IAAMtmF,EAAMrK,KAAK82B,aAAa3D,OAAO,6BACrC,OAAOnzB,KAAK28B,KAAKtxB,IAA6BhB,GAAKzC,KACjDqvB,EAAAA,YAAW,SAAChzB,GAAU,OAAAqzB,EAAAA,WAAWrzB,MACjC2G,EAAAA,KAAI,SAACgmF,GAAgB,OAAAA,EAAYC,oBACjC7wF,KAAK8pC,UAAUH,aAAa8mD,MAIhCC,EAAAxwF,UAAA4wF,sBAAA,WAEE,IAAMzmF,EAAMrK,KAAK82B,aAAa3D,OAAO,6BACrC,OAAOnzB,KAAK28B,KACTo0D,KAA8B1mF,EAAK,CAAE2mF,QAAS,aAC9CppF,KACCqvB,EAAAA,YAAW,SAAChzB,GAAU,OAAAqzB,EAAAA,WAAWrzB,MACjC2G,EAAAA,KAAI,SAAC4pC,GAAa,OAAAA,EAASjgB,QAAQlpB,IAAImQ,OACvCxb,KAAK8pC,UAAUP,SAASinD,gCA1B/BvoF,EAAAA,uDAhBQ80B,EAAAA,kBAcAtK,UAFAsW,UCRIkoD,GAA2C,IAAI/rF,EAAAA,eAE1D,sDCWA,SAAAgsF,EACYv0D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZonD,EAAAhxF,UAAAixF,mBAAA,SACEt5E,EACA2L,EACAC,EACAC,GAGA,GAAI7L,IAAW5Q,EACb,OAAOe,EAAAA,GAAG,IAGZ,IAAMqC,EAAMrK,KAAK82B,aAAa3D,OAAO,kBAAmB,CAAEtb,OAAMA,IAE5DzL,GAAS,IAAIynB,EAAAA,YAAaE,IAAI,OAAQrQ,GAAc,iBAEpDF,IACFpX,EAASA,EAAO2nB,IAAI,WAAYvQ,EAASa,aAEvCZ,IACFrX,EAASA,EAAO2nB,IAAI,cAAetQ,EAAYY,aAGjD,IAAMkQ,EAAUv0B,KAAKoxF,gBAErB,OAAOpxF,KAAK28B,KACTtxB,IAAoChB,EAAK,CAAEkqB,QAAOA,EAAEnoB,OAAMA,IAC1DxE,KAAK5H,KAAK8pC,UAAUP,SAAS0nD,MAGlCC,EAAAhxF,UAAAmxF,oBAAA,SAAoBx5E,EAAgBy5E,GAClC,IAAMjnF,EAAMrK,KAAK82B,aAAa3D,OAAO,qBAAsB,CACzDtb,OAAMA,EACNy5E,WAAUA,IAEN/8D,EAAUv0B,KAAKoxF,gBAErB,OAAOpxF,KAAK28B,KAAK7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,KAGxC28D,EAAAhxF,UAAAqxF,mBAAA,SACE15E,EACAy5E,GAEA,IAAMjnF,EAAMrK,KAAK82B,aAAa3D,OAAO,qBAAsB,CACzDtb,OAAMA,EACNy5E,WAAUA,IAEN/8D,EAAUv0B,KAAKoxF,gBAErB,OAAOpxF,KAAK28B,KAAKG,KAAKzyB,EAAK,CAAEkqB,QAAOA,KAGtC28D,EAAAhxF,UAAAsxF,oBAAA,SACE35E,EACAy5E,GAEA,IAAMjnF,EAAMrK,KAAK82B,aAAa3D,OAAO,cAAe,CAClDtb,OAAMA,EACNy5E,WAAUA,IAEN/8D,EAAUv0B,KAAKoxF,gBAErB,OAAOpxF,KAAK28B,KAAKG,KAAKzyB,EAAK,CAAEkqB,QAAOA,KAG9B28D,EAAAhxF,UAAAkxF,cAAA,WACN,OAAO,IAAI38D,EAAAA,YAAY,CACrBoI,eAAgB,gDA3ErB50B,EAAAA,uDAfQ80B,EAAAA,kBAYAtK,UAFAsW,wBCYP,SAAA0oD,EACY90D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZ2nD,EAAAvxF,UAAA6sC,QAAA,SAAQl1B,GACN,IAAMxN,EAAMrK,KAAK82B,aAAa3D,OAAO,YAAa,CAAEtb,OAAMA,IACpD0c,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACTtxB,IAAqBhB,EAAK,CAAEkqB,QAAOA,IACnC3sB,KACCqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtC2G,EAAAA,KAAI,SAAC8mF,GAAgB,OAAAA,EAAYC,aACjC3xF,KAAK8pC,UAAUH,aAAasJ,MAIlCw+C,EAAAvxF,UAAA8S,IAAA,SAAI6E,EAAgBi3B,GAClB,IAAMzkC,EAAMrK,KAAK82B,aAAa3D,OAAO,YAAa,CAAEtb,OAAMA,IACpD0c,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAIlB,OAFAiS,EAAU9uC,KAAK8pC,UAAUD,QAAQiF,EAASqE,IAEnCnzC,KAAK28B,KACTG,KAAKzyB,EAAKykC,EAAS,CAAEva,QAAOA,IAC5B3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAGhDwtF,EAAAvxF,UAAAmsC,OAAA,SAAOx0B,EAAgBm3B,EAAmBF,GACxC,IAAMzkC,EAAMrK,KAAK82B,aAAa3D,OAAO,gBAAiB,CACpDtb,OAAMA,EACNm3B,UAASA,IAELza,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAIlB,OAFAiS,EAAU9uC,KAAK8pC,UAAUD,QAAQiF,EAASqE,IAEnCnzC,KAAK28B,KACT6P,MAAMniC,EAAKykC,EAAS,CAAEva,QAAOA,IAC7B3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAGhDwtF,EAAAvxF,UAAA02D,OAAA,SAAO/+C,EAAgBi3B,GACrB,IAAMzkC,EAAMrK,KAAK82B,aAAa3D,OAAO,sBAAuB,CAAEtb,OAAMA,IAChE0c,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,qBAOlB,OALIhlB,IAAW5Q,IACbstB,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,IAEjEua,EAAU9uC,KAAK8pC,UAAUD,QAAQiF,EAASqE,IAEnCnzC,KAAK28B,KACTG,KAAwBzyB,EAAKykC,EAAS,CAAEva,QAAOA,IAC/C3sB,KACCqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtCjE,KAAK8pC,UAAUP,SAAS6J,MAI9Bq+C,EAAAvxF,UAAA4zB,OAAA,SAAOjc,EAAgBm3B,GACrB,IAAM3kC,EAAMrK,KAAK82B,aAAa3D,OAAO,gBAAiB,CACpDtb,OAAMA,EACNm3B,UAASA,IAELza,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACT7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,IACrB3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCA/EjDgE,EAAAA,uDApBQ80B,EAAAA,kBAaAtK,UAFAsW,wBCEP,SAAA6oD,EACYj1D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZ8nD,EAAA1xF,UAAA2xF,aAAA,SAAah6E,GACX,IAAMxN,EAAMrK,KAAK82B,aAAa3D,OAAO,mBAAoB,CAAEtb,OAAMA,IAC3D0c,EAAU,IAAIE,EAAAA,YAAY,CAAEq9D,gBAAiB,aACnD,OAAO9xF,KAAK28B,KACTtxB,IAA6BhB,EAAK,CAAEkqB,QAAOA,IAC3C3sB,KACCqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtC2G,EAAAA,KAAI,SAACgmF,GAAgB,OAAAA,EAAYC,oBACjC7wF,KAAK8pC,UAAUH,aAAa8mD,MAIlCmB,EAAA1xF,UAAAypB,YAAA,SACE9R,EACAk6E,EACAC,GAEA,IAAM3nF,EAAMrK,KAAK82B,aAAa3D,OAAO,WAAY,CAAEtb,OAAMA,IACnDu1B,GAAa,IAAIvZ,EAAAA,YACpBE,IAAI,oBAAqBg+D,GACzBh+D,IAAI,yBAA0Bi+D,EAAuB3tE,YAClDkQ,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,oCAChBi1D,gBAAiB,aAEnB,OAAO9xF,KAAK28B,KACTG,KAA0BzyB,EAAK+iC,EAAY,CAAE7Y,QAAOA,IACpD3sB,KACCqvB,EAAAA,YAAW,SAAChzB,GAAU,OAAAqzB,EAAAA,WAAWrzB,MACjCjE,KAAK8pC,UAAUP,SAASknD,MAI9BmB,EAAA1xF,UAAA+pB,gBAAA,SAAgBpS,EAAgBo6E,GAC9B,IAAM19D,EAAU,IAAIE,EAAAA,YAAY,CAC9Bq9D,gBAAiB,aAEbznF,EAAMrK,KAAK82B,aAAa3D,OAAO,gBAAiB,CACpDtb,OAAMA,EACNq6E,UAAWD,IAGb,OAAOjyF,KAAK28B,KAAK7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,+BAlDzCtsB,EAAAA,uDAXQ80B,EAAAA,kBASAtK,UAFAsW,UCHIopD,GAA+B,IAAIjtF,EAAAA,eAE9C,8BCSIqvB,GAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,mCAKhB,SAAAu1D,EACYz1D,EACA7F,EACAjxB,EACAikC,GAHA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA6F,OAAAA,EACA7F,KAAA8pC,UAAAA,SAGLsoD,EAAAlyF,UAAAmyF,aAAA,SACLx6E,EACA2L,EACAC,EACAC,EACAuoB,EACAqmD,GAEA,IAAIlmF,GAAS,IAAIynB,EAAAA,YAAaE,IAAI,OAAQrQ,GAAc,YAcxD,OAbIF,IACFpX,EAASA,EAAO2nB,IAAI,WAAYvQ,EAASa,aAEvCZ,IACFrX,EAASA,EAAO2nB,IAAI,cAAetQ,EAAYY,aAE7C4nB,IACF7/B,EAASA,EAAO2nB,IAAI,cAAekY,IAEjCqmD,IACFlmF,EAASA,EAAO2nB,IAAI,mBAAoBu+D,EAAiBjuE,aAGpDrkB,KAAK28B,KACTtxB,IAAIrL,KAAK82B,aAAa3D,OAAO,sBAAuB,CAAEtb,OAAMA,IAAK,CAChE0c,QAAOA,GACPnoB,OAAMA,IAEPxE,KACC5H,KAAK8pC,UAAUP,SAAS4oD,IACxBl7D,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAIrCmuF,EAAAlyF,UAAAqyF,eAAA,SACL16E,EACAxT,GAFK,IAAAgF,EAAArJ,KAICY,EAAuB,GAa7B,OAZAyD,EAAKmuF,qBAAqBjpF,SAAQ,SAACkhC,GACjC,IAAMr+B,GAAqB,IAAIynB,EAAAA,YAC5BE,IAAI,cAAe1vB,EAAKqmC,QAAQ1mB,MAChC+P,IAAI,mBAAoB0W,EAAMgoD,cACjC7xF,EAAE8C,KACA2F,EAAKszB,KACF7I,OAAOzqB,EAAKytB,aAAa3D,OAAO,mBAAoB,CAAEtb,OAAMA,IAAK,CAChEzL,OAAQA,IAETxE,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,WAG3CyuF,EAAAA,SAAS9xF,IAGXwxF,EAAAlyF,UAAAyyF,YAAA,SACL96E,EACAo0B,EACAqmD,GAEA,IAAMlmF,GAAS,IAAIynB,EAAAA,YAChBE,IAAI,cAAekY,GACnBlY,IAAI,mBAAoBu+D,EAAiBjuE,YAC5C,OAAOrkB,KAAK28B,KACTG,KACC98B,KAAK82B,aAAa3D,OAAO,mBAAoB,CAAEtb,OAAMA,IACrD,GACA,CACE0c,QAAOA,GACPnoB,OAAMA,IAGTxE,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCA/EjDgE,EAAAA,uDAlBQ80B,EAAAA,kBACAtK,UASAhe,UACAs0B,MCRF,IAAM6pD,GAAqC,IAAI1tF,EAAAA,eAEpD,oCAEW2tF,GAAqC,IAAI3tF,EAAAA,eAEpD,uCCPF,2BCME,SAAA4tF,EAAsB7kD,GAAAjuC,KAAAiuC,QAAAA,SAEtB6kD,EAAA5yF,UAAA6sC,QAAA,SAAQl1B,GACN,OAAO7X,KAAKiuC,QAAQlB,QAAQl1B,IAG9Bi7E,EAAA5yF,UAAAmsC,OAAA,SAAOx0B,EAAgBk7E,GACrB,OAAO/yF,KAAKiuC,QAAQ5B,OAAOx0B,EAAQk7E,4IAXtC9qF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJL6tF,MCcT,IAAMz+D,GAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,mCAMhB,SAAAo2D,EACYt2D,EACAmN,EACAhT,GAFA92B,KAAA28B,KAAAA,EACA38B,KAAA8pC,UAAAA,EACA9pC,KAAA82B,aAAAA,SAGZm8D,EAAA/yF,UAAA6sC,QAAA,SAAQl1B,GACN,OAAO7X,KAAK28B,KACTtxB,IACCrL,KAAK82B,aAAa3D,OAAO,yBAA0B,CAAEtb,OAAMA,IAC3D,CACE0c,QAAO2+D,KAGVtrF,KACCgD,EAAAA,KAAI,SAACgZ,GAAS,OAAAA,EAAKmvE,eACnB/yF,KAAK8pC,UAAUH,aAAakpD,IAC5B57D,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAI5CgvF,EAAA/yF,UAAAmsC,OAAA,SACEx0B,EACAk7E,GAMA,OAJAA,EAAc/yF,KAAK8pC,UAAUD,QAC3BkpD,EACAH,IAEK5yF,KAAK28B,KACT6P,MACCxsC,KAAK82B,aAAa3D,OAAO,yBAA0B,CAAEtb,OAAMA,IAC3D,CAAEk7E,YAAaA,GACf,CAAEx+D,QAAO2+D,KAEVtrF,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCAtCjDgE,EAAAA,uDApBQ80B,EAAAA,kBAaAgM,UACAtW,UCJI0gE,GAA2B,IAAIjuF,EAAAA,eAE1C,0BAEWkuF,GAAkC,IAAIluF,EAAAA,eAEjD,iCAEWmuF,GAAkC,IAAInuF,EAAAA,eAEjD,gCAEWouF,GAAwC,IAAIpuF,EAAAA,eAEvD,qCAEWquF,GAA2B,IAAIruF,EAAAA,eAE1C,wCCSA,SAAAsuF,EACY72D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGL0pD,EAAAtzF,UAAA0c,KAAA,SAAK/E,EAAgB47E,GAC1B,IAAMppF,EAAMrK,KAAK82B,aAAa3D,OAAO,cAAe,CAClDtb,OAAMA,EACN67E,QAASD,IAGPl/D,EAAU,IAAIE,EAAAA,YAKlB,OAJI5c,IAAW5Q,IACbstB,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,IAG1Dv0B,KAAK28B,KACTtxB,IAAehB,EAAK,CAAEkqB,QAAOA,IAC7B3sB,KAAK5H,KAAK8pC,UAAUP,SAASuE,MAG3B0lD,EAAAtzF,UAAAyzF,YAAA,SACL97E,EACA2L,EACAC,EACAC,GAEA,IAAMtX,EAAS,GACXoX,IACFpX,EAAiB,SAAIoX,EAASa,YAE5BZ,IACFrX,EAAoB,YAAIqX,EAAYY,YAElCX,IACFtX,EAAa,KAAIsX,EAAKW,YAGxB,IAAMha,EAAMrK,KAAK82B,aAAa3D,OAAO,eAAgB,CAAEtb,OAAMA,GAAIzL,GAEjE,OAAOpM,KAAK28B,KACTtxB,IAA0BhB,GAC1BzC,KAAK5H,KAAK8pC,UAAUP,SAAS4pD,MAG3BK,EAAAtzF,UAAA0zF,uBAAA,SACLH,EACAI,EACAh8E,QAAA,IAAAA,IAAAA,EAAA7Q,GAEA,IAAMqD,EAAMrK,KAAK82B,aAAa3D,OAAO,sBAAuB,CAC1Dtb,OAAMA,EACN47E,UAASA,EACTI,gBAAeA,IAEjB,OAAO7zF,KAAK28B,KACTtxB,IAAyBhB,GACzBzC,KAAK5H,KAAK8pC,UAAUP,SAAS6pD,MAG3BI,EAAAtzF,UAAA4zF,OAAA,SACLj8E,EACA47E,EACAM,GAEA,IAAM1pF,EAAMrK,KAAK82B,aAAa3D,OAAO,cAAe,CAClDtb,OAAMA,EACN67E,QAASD,IAELl/D,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACTG,KAAKzyB,EAAK0pF,EAAoB,CAAEx/D,QAAOA,IACvC3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAGzCuvF,EAAAtzF,UAAA8zF,oBAAA,SACLn8E,EACAo8E,GAEA,IAAM5pF,EAAMrK,KAAK82B,aAAa3D,OAAO,cAAe,CAClDtb,OAAMA,IAEF0c,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAQlB,OALAo3D,EAAqBj0F,KAAK8pC,UAAUD,QAClCoqD,EACAX,IAGKtzF,KAAK28B,KAAKG,KAAKzyB,EAAK4pF,EAAoB,CAAE1/D,QAAOA,IAAI3sB,KAC1DqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtCjE,KAAK8pC,UAAUP,SAAS8pD,MAIrBG,EAAAtzF,UAAAg0F,sBAAA,SACLr8E,EACA2L,EACAC,EACAC,GAEA,IAAMtX,EAAS,GACXoX,IACFpX,EAAiB,SAAIoX,EAASa,YAE5BZ,IACFrX,EAAoB,YAAIqX,EAAYY,YAElCX,IACFtX,EAAa,KAAIsX,EAAKW,YAGxB,IAAMha,EAAMrK,KAAK82B,aAAa3D,OAAO,eAAgB,CAAEtb,OAAMA,GAAIzL,GAEjE,OAAOpM,KAAK28B,KACTtxB,IAAuBhB,GACvBzC,KAAK5H,KAAK8pC,UAAUP,SAASgqD,MAG3BC,EAAAtzF,UAAAi0F,wBAAA,SACLt8E,EACAu8E,GAEA,IAAM/pF,EAAMrK,KAAK82B,aAAa3D,OAAO,oBAAqB,CACxDtb,OAAMA,EACNu8E,kBAAiBA,IAGnB,OAAOp0F,KAAK28B,KACTtxB,IAAmBhB,GACnBzC,KAAK5H,KAAK8pC,UAAUP,SAAS8pD,MAG3BG,EAAAtzF,UAAAm0F,oBAAA,SACLx8E,EACAu8E,EACAE,GAEA,IAAMjqF,EAAMrK,KAAK82B,aAAa3D,OAAO,eAAgB,CACnDtb,OAAMA,EACNu8E,kBAAiBA,IAEb7/D,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACT6P,MAAMniC,EAAKiqF,EAA2B,CAAE//D,QAAOA,IAC/C3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCA5JjDgE,EAAAA,uDAnCQ80B,EAAAA,kBAyBAtK,UAFAsW,wBCVP,SAAAwrD,EACY53D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZyqD,EAAAr0F,UAAA6sC,QAAA,SAAQl1B,GACN,IAAMxN,EACJrK,KAAK82B,aAAa3D,OAAO,oBAAqB,CAAEtb,OAAMA,IAAM,cACxD0c,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACTtxB,IAA4BhB,EAAK,CAAEkqB,QAAOA,IAC1C3sB,KACCqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,MACtC2G,EAAAA,KAAI,SAAC4pF,GAAe,OAAAA,EAAWC,YAC/Bz0F,KAAK8pC,UAAUH,aAAa0G,MAIlCkkD,EAAAr0F,UAAA4zB,OAAA,SAAOjc,EAAgB68E,GACrB,IAAMrqF,EAAMrK,KAAK82B,aAAa3D,OAAO,gBAAiB,CACpDtb,OAAMA,EACN88E,gBAAiBD,IAEbngE,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACT7I,OAAOzpB,EAAK,CAAEkqB,QAAOA,IACrB3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,QAGhDswF,EAAAr0F,UAAA00F,WAAA,SAAW/8E,EAAgB68E,GACzB,IAAMrqF,EAAMrK,KAAK82B,aAAa3D,OAAO,gBAAiB,CACpDtb,OAAMA,EACN88E,gBAAiBD,IAGbngE,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,qBAGlB,OAAO78B,KAAK28B,KACT6P,MACCniC,EAEA,CAAEirC,eAAgB,CAAEs5B,UAAW,MAAQj6B,gBAAgB,GACvD,CAAEpgB,QAAOA,IAEV3sB,KAAKqvB,EAAAA,YAAW,SAAChzB,GAAe,OAAAqzB,EAAAA,WAAWrzB,kCAvDjDgE,EAAAA,uDAXQ80B,EAAAA,kBASAtK,UAFAsW,UCHI8rD,GAAyC,IAAI3vF,EAAAA,eAExD,qDCUA,SAAA4vF,EACYn4D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAELgrD,EAAA50F,UAAA0c,KAAA,SACL/E,EACAk9E,GAEA,OAAO/0F,KAAK28B,KACTtxB,IACCrL,KAAK82B,aAAa3D,OAAO,4BAA6B,CACpDtb,OAAMA,EACNk9E,uBAAsBA,KAGzBntF,KAAK5H,KAAK8pC,UAAUP,SAASqH,MAG3BkkD,EAAA50F,UAAA80F,gCAAA,SACLn9E,EACAk9E,EACAvxE,EACAC,EACAC,GAEA,IAAMtX,EAAS,GAYf,OAVIoX,IACFpX,EAAiB,SAAIoX,EAASa,YAE5BZ,IACFrX,EAAoB,YAAIqX,EAAYY,YAElCX,IACFtX,EAAa,KAAIsX,EAAKW,YAGjBrkB,KAAK28B,KACTtxB,IACCrL,KAAK82B,aAAa3D,OAChB,mCACA,CACEtb,OAAMA,EACNk9E,uBAAsBA,GAExB3oF,IAGHxE,KAAK5H,KAAK8pC,UAAUP,SAAS4pD,MAG3B2B,EAAA50F,UAAA+0F,yBAAA,SACLp9E,EACAk9E,GAEA,IAAMxgE,GAAU,IAAIE,EAAAA,aAAcV,IAAI,eAAgB,oBAEtD,OAAO/zB,KAAK28B,KACT6P,MACCxsC,KAAK82B,aAAa3D,OAAO,2BAA4B,CACnDtb,OAAMA,EACNk9E,uBAAsBA,IAExB,GACA,CAAExgE,QAAOA,IAEV3sB,KAAK5H,KAAK8pC,UAAUP,SAASqH,MAG3BkkD,EAAA50F,UAAAyzF,YAAA,SACL97E,EACA2L,EACAC,EACAC,GAEA,IAAMtX,EAAS,GACXoX,IACFpX,EAAiB,SAAIoX,EAASa,YAE5BZ,IACFrX,EAAoB,YAAIqX,EAAYY,YAElCX,IACFtX,EAAa,KAAIsX,EAAKW,YAGxB,IAAMha,EAAMrK,KAAK82B,aAAa3D,OAC5B,4BACA,CAAEtb,OAAMA,GACRzL,GAGF,OAAOpM,KAAK28B,KACTtxB,IAAgChB,GAChCzC,KAAK5H,KAAK8pC,UAAUP,SAASsrD,gCAlGnC5sF,EAAAA,uDAXQ80B,EAAAA,kBASAtK,UAFAsW,UCLImsD,GAAkB,IAAIhwF,EAAAA,eACjC,kBAGWiwF,GAAkB,IAAIjwF,EAAAA,eACjC,kBAGWkwF,GAA0B,IAAIlwF,EAAAA,eAEzC,wBAEWmwF,GAAmB,IAAInwF,EAAAA,eAClC,iCCIA,SAAAowF,EACY34D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZwrD,EAAAp1F,UAAA0c,KAAA,SAAK/E,GACH,IAAMxN,EAAMrK,KAAK82B,aAAa3D,OAAO,OAAQ,CAAEtb,OAAMA,IACrD,OAAO7X,KAAK28B,KACTtxB,IAAchB,GACdzC,KAAK5H,KAAK8pC,UAAUP,SAAS2rD,MAGlCI,EAAAp1F,UAAAmsC,OAAA,SAAOx0B,EAAgB49C,GACrB,IAAMprD,EAAMrK,KAAK82B,aAAa3D,OAAO,OAAQ,CAAEtb,OAAMA,IAErD,OADA49C,EAAOz1D,KAAK8pC,UAAUD,QAAQ4rB,EAAM0/B,IAC7Bn1F,KAAK28B,KAAK6P,MAAMniC,EAAKorD,IAG9B6/B,EAAAp1F,UAAAmlC,SAAA,SAASowB,GACP,IAAMprD,EAAcrK,KAAK82B,aAAa3D,OAAO,gBACzCoB,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,qBAKlB,OAHAtI,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,GAC/DkhC,EAAOz1D,KAAK8pC,UAAUD,QAAQ4rB,EAAM2/B,IAE7Bp1F,KAAK28B,KACTG,KAAWzyB,EAAKorD,EAAM,CAAElhC,QAAOA,IAC/B3sB,KAAK5H,KAAK8pC,UAAUP,SAAS2rD,MAGlCI,EAAAp1F,UAAAq1F,cAAA,SAAcjwC,EAAcxtC,GAC1B,IAAMzN,EAAcrK,KAAK82B,aAAa3D,OAAO,gBACzCoB,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,sCAElBtI,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,GAE/D,IAAM6Y,GAAyB,IAAIvZ,EAAAA,YAChCE,IAAI,OAAQuxB,GACZvxB,IAAI,WAAYjc,GAEnB,OAAO9X,KAAK28B,KACTG,KAAWzyB,EAAK+iC,EAAY,CAAE7Y,QAAOA,IACrC3sB,KAAK5H,KAAK8pC,UAAUP,SAAS2rD,MAGlCI,EAAAp1F,UAAAs1F,2BAAA,SAA2BC,GACzB,IAAMprF,EAAMrK,KAAK82B,aAAa3D,OAAO,sBAC/Bia,GAAyB,IAAIvZ,EAAAA,YAAaE,IAC9C,SACA0hE,GAEElhE,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,sCAGlB,OADAtI,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,GACxDv0B,KAAK28B,KAAKG,KAAKzyB,EAAK+iC,EAAY,CAAE7Y,QAAOA,KAGlD+gE,EAAAp1F,UAAAw1F,cAAA,SAAc1hF,EAAe2hF,GAC3B,IAAMtrF,EAAMrK,KAAK82B,aAAa3D,OAAO,qBACjCoB,EAAU,IAAIE,EAAAA,YAAY,CAC5BoI,eAAgB,qBAIlB,OAFAtI,EAAUJ,GAAgBC,aAAaH,IAAkB,EAAMM,GAExDv0B,KAAK28B,KAAKG,KAAKzyB,EAAK,CAAE2J,MAAKA,EAAE2hF,YAAWA,GAAI,CAAEphE,QAAOA,KAG9D+gE,EAAAp1F,UAAA01F,YAAA,SACE/9E,EACAg+E,EACAC,GAEA,IAAMzrF,EAAMrK,KAAK82B,aAAa3D,OAAO,oBAAqB,CAAEtb,OAAMA,IAC5Du1B,GAAyB,IAAIvZ,EAAAA,YAChCE,IAAI,WAAY8hE,GAChB9hE,IAAI,WAAY+hE,GACbvhE,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAElB,OAAO78B,KAAK28B,KAAK0Q,IAAIhjC,EAAK+iC,EAAY,CAAE7Y,QAAOA,KAGjD+gE,EAAAp1F,UAAA61F,eAAA,SACEl+E,EACAm+E,EACAL,GAEA,IAAMtrF,EAAMrK,KAAK82B,aAAa3D,OAAO,qBAAsB,CAAEtb,OAAMA,IAC7Du1B,GAAyB,IAAIvZ,EAAAA,YAChCE,IAAI,MAAOiiE,GACXjiE,IAAI,MAAO4hE,GACRphE,EAAU,IAAIE,EAAAA,YAAY,CAC9BoI,eAAgB,sCAElB,OAAO78B,KAAK28B,KAAK0Q,IAAIhjC,EAAK+iC,EAAY,CAAE7Y,QAAOA,KAGjD+gE,EAAAp1F,UAAAgiC,OAAA,SAAOrqB,GACL,IAAMxN,EAAMrK,KAAK82B,aAAa3D,OAAO,OAAQ,CAAEtb,OAAMA,IACrD,OAAO7X,KAAK28B,KAAK7I,OAAazpB,IAGhCirF,EAAAp1F,UAAA+1F,WAAA,WACE,IAAM5rF,EAAMrK,KAAK82B,aAAa3D,OAAO,UACrC,OAAOnzB,KAAK28B,KAAKtxB,IAAmBhB,GAAKzC,KACvCgD,EAAAA,KAAI,SAACsrF,GAAc,OAAAA,EAAUC,UAC7Bn2F,KAAK8pC,UAAUH,aAAa0rD,gCAhHjCptF,EAAAA,uDAnBQ80B,EAAAA,kBAcAtK,UAFAsW,aCTT,gBCAA,gBCCA,gBCGA,gBCAA,gBCKA,gBCTA,gBCIA,2BCME,SAAAqtD,EAAsBnoD,GAAAjuC,KAAAiuC,QAAAA,SAEfmoD,EAAAl2F,UAAA0c,KAAA,SACL/E,EACAk9E,GAEA,OAAO/0F,KAAKiuC,QAAQrxB,KAAK/E,EAAQk9E,IAG5BqB,EAAAl2F,UAAA80F,gCAAA,SACLn9E,EACAk9E,EACAvxE,EACAC,EACAC,GAEA,OAAO1jB,KAAKiuC,QAAQ+mD,gCAClBn9E,EACAk9E,EACAvxE,EACAC,EACAC,IAIG0yE,EAAAl2F,UAAA+0F,yBAAA,SACLp9E,EACAk9E,GAEA,OAAO/0F,KAAKiuC,QAAQgnD,yBAClBp9E,EACAk9E,IAIGqB,EAAAl2F,UAAAyzF,YAAA,SACL97E,EACA2L,EACAC,EACAC,GAEA,OAAO1jB,KAAKiuC,QAAQ0lD,YAAY97E,EAAQ2L,EAAUC,EAAaC,4IA7ClEzb,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLkxF,aCJT,2BCYE,SAAAC,EAAoBxsD,GAAA9pC,KAAA8pC,UAAAA,SAEpBwsD,EAAAp2F,UAAA2pC,QAAA,SACEnlC,EACApE,GAFF,IAAA+I,EAAArJ,KAYE,YAReuH,IAAXjH,IACFA,EAAMd,OAAAqF,OAAArF,OAAAqF,OAAA,GACAH,GAAc,CAClBqf,OAAQrf,EAAOitF,UAAU/mF,KAAI,SAACkkC,GAAY,OAAAtvC,OAAAqF,OAAA,GACrCwE,EAAKygC,UAAUD,QAAQiF,EAASmE,WAIlC3yC,2IAnBV2H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALZ4jC,UCJWwtD,GAAkC,CAC7CjhF,QAAS,CACPC,IAAK,CACHsd,UAAW,CAET4iC,KAAM,kBACN+gC,aAAc,QACdC,mBAAoB,0BACpBC,kBAAmB,gBACnBC,kBAAmB,wBACnBC,mBAAoB,2BACpBT,OAAQ,SACRU,kBAAmB,iCACnBC,cAAe,oDACfC,aAAc,yBACdC,YAAa,gDACbC,0BAA2B,mCAC3BpG,iBAAkB,mCAClBlpE,SAAU,2BACVuvE,cAAe,wCACfvF,UAAW,4BACXwF,cAAe,yCACfxgB,oBAAqB,yCACrBygB,oBACE,+EACFC,gBAAiB,kCACjBC,YAAa,sDACbC,mBACE,6DACFC,uBAAwB,0CACxBC,iBAAkB,mCAClBC,oBACE,uGACFC,YAAa,iDACbC,YACE,iRACFC,aAAc,4CACdC,kBACE,sSACFC,aAAc,sEC3BpB,SAAAC,EACYr7D,EACA7F,EACAgT,GAFA9pC,KAAA28B,KAAAA,EACA38B,KAAA82B,aAAAA,EACA92B,KAAA8pC,UAAAA,SAGZkuD,EAAA93F,UAAA+3F,eAAA,SAAepgF,GACb,OAAO7X,KAAK28B,KACTtxB,IAAyBrL,KAAKk4F,uBAAuBrgF,IACrDjQ,KAAK5H,KAAK8pC,UAAUP,SAASi5C,MAGxBwV,EAAA93F,UAAAg4F,uBAAA,SACRrgF,EACAzL,GAEA,OAAOpM,KAAK82B,aAAa3D,OAAO,uBAAwB,CAAEtb,OAAMA,GAAIzL,8BAlBvEnE,EAAAA,uDAZQ80B,EAAAA,kBAUAtK,UAFAsW,aC4ET,kCAjDCtM,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,cACV7B,UAAW,CACT71B,EAAqBiwF,IACrB,CAAExwF,QAASoyF,GAAa9tD,SAAUirD,IAClC,CAAEvvF,QAAS8wD,GAAoBxsB,SAAUonD,IACzC,CAAE1rF,QAASqyF,GAAoB/tD,SAAUunD,IACzC,CACE7rF,QAASsyF,GACThuD,SAAUqmD,IAEZ,CACE3qF,QAASuyF,GACTjuD,SAAUkqD,IAEZ,CAAExuF,QAASwyF,GAAkBluD,SAAUmpD,IACvC,CAAEztF,QAASyyF,GAAuBnuD,SAAU6mD,IAC5C,CACEnrF,QAASitF,GACT3oD,SAAU4oD,IAEZ,CAAEltF,QAAS0yF,GAAsBpuD,SAAU+nD,IAC3C,CAAErsF,QAAS2yF,GAAuBruD,SAAU2tD,IAC5C,CACEjyF,QAASosF,GACT9pF,YAAakoF,GACbtqF,OAAO,GAET,CACEF,QAASstF,GACThrF,YAAagoF,GACbpqF,OAAO,GAET,CACEF,QAASyqF,GACTnoF,YAAa8nF,GACblqF,OAAO,GAET,CACEF,QAASmtC,GACT7qC,YAAaiuF,GACbrwF,OAAO,GAET,CACEF,QAASswF,GACThsD,SAAUyqD,2BC9EhB,SAAA6D,IAgBmB34F,KAAA44F,8BAAwC,gCAazDD,EAAAz4F,UAAA24F,WAAA,SAAWC,GACT,IAAM7sC,EAAQ6sC,EAAWhjC,MAAM91D,KAAK44F,+BACpC,IAAK3sC,EACH,OAAO,KAEH,IAAAnnD,EAAAf,EAA4BkoD,EAAK,GAA5B8sC,EAASj0F,EAAA,GAAEk0F,EAAQl0F,EAAA,GAC9B,IACE,OAAO,IAAIynB,OAAOysE,EAAUD,GAC5B,MAAO90F,GAMP,OALI4E,EAAAA,aACFC,QAAQF,KACN,4EAA4EkwF,EAAU,eAAe70F,GAGlG,+HA3CZgE,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,eCGb8zF,GAAqB,IAAI/zF,EAAAA,eACpC,sBAMWg0F,GAAwB,IAAIh0F,EAAAA,eACvC,uCCEA,SAAAi0F,EAAoBC,GAAAp5F,KAAAo5F,oBAAAA,SAEpBD,EAAAj5F,UAAAm5F,iBAAA,SAAiB5K,EAAuB6K,GAAxC,IAAAjwF,EAAArJ,KACQuvB,EAAWk/D,EAAU9hF,MAAK,SAACmlB,GAC/B,OAAAzoB,EAAKkwF,kBAAkBznE,EAAMwnE,MAE/B,IAAK/pE,EACH,MAAMvvB,KAAKw5F,SACT,gBAAgBF,EAAU,8DAK9B,IAAMG,EAAYlqE,EAASmqE,QAAUnqE,EAASmqE,OAAO,GACrD,IAAKD,EACH,MAAMz5F,KAAKw5F,SACT,sBAAsBjqE,EAASU,IAAG,kCAItC,MAAO,CACLV,SAAUA,EAASU,IACnBgB,UAAWjxB,KAAK25F,YACdF,EAAUxoE,UACV1B,EAASqqE,iBAAmBH,EAAUG,iBAExCppE,WAAYxwB,KAAK25F,YACfF,EAAUjpE,WACVipE,EAAUI,iBAEZC,cAAe95F,KAAK+5F,aAAaxqE,EAASyqE,yBAI9Cb,EAAAj5F,UAAA+5F,oBAAA,SAAoBn1F,SAClByqB,EAAQzqB,EAAAyqB,SACR0B,EAASnsB,EAAAmsB,UACTT,EAAU1rB,EAAA0rB,WAWV,MARe,CACbliB,SAAOvJ,EAAA,CACL+0F,cAJgCh1F,EAAAg1F,eAKhC/0F,EAAqB,SAAG,CAACwqB,GACzBxqB,EAAoB,SAAGksB,EACvBlsB,EAAoB,SAAGyrB,OAM7B2oE,EAAAj5F,UAAAg6F,aAAA,SAAap1F,GACX,MAAO,CAAEq1F,KAAM,CAAEC,aADKt1F,EAAAmsB,UACmB,MAGnCkoE,EAAAj5F,UAAAq5F,kBAAA,SAAkBznE,EAAoBwnE,GAAtC,IAAAjwF,EAAArJ,KASN,OAAkB,KARH8xB,EAAKuoE,aAAe,IAAIn1D,WAAU,SAACo1D,GAChD,IAAMC,EAAWlxF,EAAK+vF,oBAAoBP,WAAWyB,GACrD,GAAIC,EAEF,OADeA,EAASpvC,KAAKmuC,OAa3BH,EAAAj5F,UAAA65F,aAAA,SAAa3tF,GAGnB,OAAQA,GAAU,IAAIxB,KAAI,SAACgiB,GACzB,MAHuB,eAGvBA,EAA6BG,GAAuBH,MAOhDusE,EAAAj5F,UAAAy5F,YAAA,SACNa,EACAC,GAMA,OAJez6F,KAAK06F,YAClBF,GACA,SAACtvD,GAAO,OAAAA,EAAGta,UAAY6pE,EAAe7pE,WACtChmB,KAAI,SAACsgC,GAAO,OAAAA,EAAGta,YAUXuoE,EAAAj5F,UAAAw6F,YAAA,SAAYC,EAAcC,GAEhC,IAAMz4D,GADNw4D,EAAKz2F,EAAOy2F,IACQz1D,UAAU01D,GAC9B,IAAe,IAAXz4D,EAAc,CACV,IAAC+I,EAADnnC,EAAO42F,EAAMn7D,OAAO2C,EAAO,GAAE,GAA1B,GACTw4D,EAAM5uF,QAAQm/B,GAEhB,OAAOyvD,GAGDxB,EAAAj5F,UAAAs5F,SAAA,SAASl9D,GACf,OAAO,IAAI5iB,MAAM,uCAAuC4iB,4IAjH3Dr0B,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAHjBwzF,wBCAP,SAAAkC,EAAsBh1F,EAA6B82B,GAA7B38B,KAAA6F,OAAAA,EAA6B7F,KAAA28B,KAAAA,EAEhC38B,KAAAqW,SACjB,qMAEF7W,OAAAyB,eAAY45F,EAAA36F,UAAA,eAAY,KAAxB,WACE,OACGF,KAAK6F,OAAOyP,QAAQC,IAAIF,SAAW,IAAMrV,KAAK6F,OAAOyP,QAAQC,IAAIwd,wCAItEvzB,OAAAyB,eAAY45F,EAAA36F,UAAA,MAAG,KAAf,WACE,MAAO,GAAGF,KAAK86F,aAAe96F,KAAKqW,0CAGrCwkF,EAAA36F,UAAA0c,KAAA,WACE,OAAK5c,KAAK6F,QAAW7F,KAAK6F,OAAOyP,SAAYtV,KAAK6F,OAAOyP,QAAQC,IAI1DvV,KAAK28B,KACTtxB,IAAmBrL,KAAKqK,KACxBzC,KAAKgD,EAAAA,KAAI,SAAC9F,GAAkB,OAAPA,EAAA2pF,cALfn3D,EAAAA,WAAW,IAAI5d,MAAM,sMAnBjCzR,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAHjBsP,UALAsoB,EAAAA,kBCwBIg+D,GAAgDngE,EAAAA,aAE3D,oCAIA,SAAAogE,EACiCC,EACH5zF,EACFxB,EAChBq1F,EACApxD,EACYhP,EAIZqgE,GATqBn7F,KAAAi7F,SAAAA,EACHj7F,KAAAqH,SAAAA,EACFrH,KAAA6F,OAAAA,EAChB7F,KAAAk7F,kBAAAA,EACAl7F,KAAA8pC,UAAAA,EACY9pC,KAAA86B,cAAAA,EAIZ96B,KAAAm7F,iBAAAA,SAGZ37F,OAAAyB,eAAY+5F,EAAA96F,UAAA,aAAU,KAAtB,WACE,OAAI+6B,EAAAA,kBAAkBj7B,KAAKi7F,UAClBj7F,KAAKqH,SAASiK,SAAS28C,KAE5BjuD,KAAKm7F,iBACAn7F,KAAKm7F,sBAEVtyF,EAAAA,aACFC,QAAQ7E,MACN,8GAQN+2F,EAAA96F,UAAAk7F,WAAA,WAAA,IAAA/xF,EAAArJ,KACE,OAAOA,KAAKqL,MACTzD,KACC4gB,EAAAA,KAAI,SAAC6yE,GAAmB,OAAAhyF,EAAKiyF,SAASD,MACtCzwF,EAAAA,KAAI,SAACywF,GACH,OAAA92F,EAASpC,WAAA,EAAA+B,EAAA,CAAC,IAAOmF,EAAKkyF,gBAAgBF,SAGzCl8D,aAMK67D,EAAA96F,UAAAmL,IAAA,WACR,IAAMmwF,EAA2Bx7F,KAAK44B,YAEtC,OAAO4iE,EACHxzF,EAAAA,GAAGwzF,GACHx7F,KAAK4c,QAMDo+E,EAAA96F,UAAA0c,KAAA,WAAA,IAAAvT,EAAArJ,KACR,OAAOA,KAAKk7F,kBACTt+E,OACAhV,KACCgD,EAAAA,KAAI,SAAC6jF,GACH,OAAAplF,EAAKygC,UAAUuvD,iBAAiB5K,EAAWplF,EAAKiwF,iBAQ9C0B,EAAA96F,UAAA04B,UAAA,WACR,GAAI54B,KAAK86B,eAAiBG,EAAAA,kBAAkBj7B,KAAKi7F,UAC/C,OAAOj7F,KAAK86B,cAAczvB,IAAI0vF,QAA6BxzF,IASrDyzF,EAAA96F,UAAAo7F,SAAA,SAASD,GAEfr7F,KAAK86B,eACL1jB,EAAAA,iBAAiBpX,KAAKi7F,WACtBI,GAEAr7F,KAAK86B,cAAc/G,IAAIgnE,GAA6BM,IAI9CL,EAAA96F,UAAAq7F,gBAAA,SACRF,GAEA,IAAMI,EAAgB,CAACz7F,KAAK8pC,UAAUmwD,oBAAoBoB,IAM1D,OAJIr7F,KAAK07F,yBACPD,EAAO/3F,KAAK1D,KAAK8pC,UAAUowD,aAAamB,IAGnCI,GAGDT,EAAA96F,UAAAw7F,sBAAA,WACN,IAAMC,OAKE,KAHJ37F,KAAK6F,QACL7F,KAAK6F,OAAOs0F,MACZn6F,KAAK6F,OAAOs0F,KAAKC,cAOrB,OALIuB,GAAsB9yF,EAAAA,aACxBC,QAAQF,KACN,wHAGI+yF,iBCnIIC,GACdC,EACAh2F,GAKA,OAAKA,EAAOyI,SAAYzI,EAAOyI,QAA4B,SAMpD,KALE,CACLwwB,OAAQ,CAAC,UAAW,qBACpB34B,cAAe,WAAM,OAAA01F,EAAaT,+QDMvCnzF,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,8EAGrBgD,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,+CACPzQ,EAAAA,OAAMD,KAAA,CAACE,EAAAA,4CACPD,EAAAA,OAAMD,KAAA,CAACjD,YAZH41F,UADA1B,UATPr9D,EAAAA,cAAaz7B,WAAA,CAAA,CAAAiN,KAyBV5H,EAAAA,2CAEAA,EAAAA,UAAQ,CAAA4H,KACRnF,EAAAA,OAAMD,KAAA,CAAC+wF,2BCPZ,SAAA6C,YACSA,EAAA7/D,QAAP,WACE,MAAO,CACLC,SAAU4/D,EACV3/D,UAAW,CACT,CACEp2B,QAASw4B,GACTl4B,WAAYu1F,GACZx1F,KAAM,CAAC40F,GAAwBtmF,IAC/BzO,OAAO,gCAVhBw2B,EAAAA,eC1BYs/D,GAA6B,uBAC7BC,GAAoC,6BACpCC,GAA+B,yBAC/BC,GACX,wCAEcC,GAAkC//E,GAChD,IAAM/G,EAAU+mF,GAAkBL,GAA4B3/E,GAC9D,OAAO/G,GAAWA,IAAY2mF,GAC1B,CAAE1mF,QAAS,CAAEC,IAAK,CAAEF,QAAOA,KAC3B,YAGUgnF,GAAoCjgF,GAClD,IAAM/G,EAAU+mF,GAAkBH,GAA8B7/E,GAChE,OAAO/G,GAAWA,IAAY6mF,GAC1B,CAAE5mF,QAAS,CAAEqxE,MAAO,CAAEtxE,QAAOA,KAC7B,GAGN,SAAS+mF,GAAkBn2D,EAAc7pB,GACvC,IAAMkgF,EAAUlgF,EAAKmgF,OAAO,SAASt2D,EAAI,KACzC,OAAOq2D,GAAWA,EAAQE,YCzBfC,GAA8B,CACzCnnF,QAAS,CACPC,IAAK,CACHwd,OAAQ,YAEV4zD,MAAO,cCLK+V,GAAmB72F,GACjC,QACqB0B,IAAnB1B,EAAOyP,cACgB/N,IAAvB1B,EAAOyP,QAAQC,UACgBhO,IAA/B1B,EAAOyP,QAAQC,IAAIF,QAEnB,MAAO,4ECyvIGsnF,GArGAC,GApLAC,GAZAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAlCAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GAhBAC,GA19FGC,iBCef,SAAAC,EAAsBl7F,GAAA7F,KAAA6F,OAAAA,SAMtBk7F,EAAA7gG,UAAA62B,UAAA,SACEpC,EACA9yB,GAOA,OALI7B,KAAKghG,wBAAwBrsE,KAC/BA,EAAUA,EAAQE,MAAM,CACtBosE,iBAAiB,KAGdp/F,EAAK00B,OAAO5B,IAMXosE,EAAA7gG,UAAA8gG,wBAAA,SAAwBrsE,WAChC,OACgB,QAAd7vB,EAAA9E,KAAK8U,iBAAS,IAAAhQ,OAAA,EAAAA,EAAEo8F,qBAChBvsE,EAAQtqB,IAAIo1B,QAAsB,QAAf16B,EAAC/E,KAAK8U,iBAAS,IAAA/P,OAAA,EAAAA,EAAEguB,SAAW,GAInDvzB,OAAAyB,eAAY8/F,EAAA7gG,UAAA,YAAS,KAArB,WACE,OAAOF,KAAK6F,OAAOyP,QAAQC,6KA/B9BtN,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDALjBsP,MDo7FP,SAAY4G,GACVA,EAAA,IAAA,MACAA,EAAA,KAAA,OAFF,EA57FeylF,GAAAA,EAAAA,MAAAA,EAAAA,IAAG,KA47FNzlF,YAAAylF,GAAAzlF,UAAS,KAerB,SAAYH,GACVA,EAAA,QAAA,UACAA,EAAA,QAAA,UAFF,CAAY4lF,GAAA5lF,YAAA4lF,GAAA5lF,UAAS,MAeT2lF,GAAAC,GAAAD,SAAAC,GAAAD,OAAM,KAChB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAE,GAAAF,UAAAE,GAAAF,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAG,GAAAH,UAAAG,GAAAH,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAI,GAAAJ,UAAAI,GAAAJ,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAK,GAAAL,UAAAK,GAAAL,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAM,GAAAN,UAAAM,GAAAN,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAO,GAAAP,UAAAO,GAAAP,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,OAcF,SAAYvmF,GACVA,EAAA,aAAA,cACAA,EAAA,aAAA,cACAA,EAAA,cAAA,eACAA,EAAA,aAAA,cAJF,CAAY8mF,GAAA9mF,WAAA8mF,GAAA9mF,SAAQ,MAiBRsmF,GAAAQ,GAAAR,UAAAQ,GAAAR,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAS,GAAAT,UAAAS,GAAAT,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAU,GAAAV,UAAAU,GAAAV,QAAO,KACjB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAW,GAAAX,WAAAW,GAAAX,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAY,GAAAZ,WAAAY,GAAAZ,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAa,GAAAb,WAAAa,GAAAb,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAc,GAAAd,WAAAc,GAAAd,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAe,GAAAf,WAAAe,GAAAf,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgB,GAAAhB,WAAAgB,GAAAhB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiB,GAAAjB,WAAAiB,GAAAjB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkB,GAAAlB,WAAAkB,GAAAlB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmB,GAAAnB,WAAAmB,GAAAnB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoB,GAAApB,WAAAoB,GAAApB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqB,GAAArB,WAAAqB,GAAArB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsB,GAAAtB,WAAAsB,GAAAtB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuB,GAAAvB,WAAAuB,GAAAvB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwB,GAAAxB,WAAAwB,GAAAxB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyB,GAAAzB,WAAAyB,GAAAzB,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0B,GAAA1B,WAAA0B,GAAA1B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2B,GAAA3B,WAAA2B,GAAA3B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4B,GAAA5B,WAAA4B,GAAA5B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6B,GAAA7B,WAAA6B,GAAA7B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8B,GAAA9B,WAAA8B,GAAA9B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+B,GAAA/B,WAAA+B,GAAA/B,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgC,GAAAhC,WAAAgC,GAAAhC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiC,GAAAjC,WAAAiC,GAAAjC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkC,GAAAlC,WAAAkC,GAAAlC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmC,GAAAnC,WAAAmC,GAAAnC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoC,GAAApC,WAAAoC,GAAApC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqC,GAAArC,WAAAqC,GAAArC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsC,GAAAtC,WAAAsC,GAAAtC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuC,GAAAvC,WAAAuC,GAAAvC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwC,GAAAxC,WAAAwC,GAAAxC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyC,GAAAzC,WAAAyC,GAAAzC,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0C,GAAA1C,WAAA0C,GAAA1C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2C,GAAA3C,WAAA2C,GAAA3C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4C,GAAA5C,WAAA4C,GAAA5C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6C,GAAA7C,WAAA6C,GAAA7C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8C,GAAA9C,WAAA8C,GAAA9C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+C,GAAA/C,WAAA+C,GAAA/C,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgD,GAAAhD,WAAAgD,GAAAhD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAiD,GAAAjD,WAAAiD,GAAAjD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAkD,GAAAlD,WAAAkD,GAAAlD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAmD,GAAAnD,WAAAmD,GAAAnD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAoD,GAAApD,WAAAoD,GAAApD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAqD,GAAArD,WAAAqD,GAAArD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAsD,GAAAtD,WAAAsD,GAAAtD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAuD,GAAAvD,WAAAuD,GAAAvD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAwD,GAAAxD,WAAAwD,GAAAxD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAyD,GAAAzD,WAAAyD,GAAAzD,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA0D,GAAA1D,WAAA0D,GAAA1D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA2D,GAAA3D,WAAA2D,GAAA3D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA4D,GAAA5D,WAAA4D,GAAA5D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA6D,GAAA7D,WAAA6D,GAAA7D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA8D,GAAA9D,WAAA8D,GAAA9D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAA+D,GAAA/D,WAAA+D,GAAA/D,SAAQ,KAClB,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,QAaUD,GAAAgE,GAAAhE,OAAAgE,GAAAhE,KAAI,KACd,IAAA,MACAA,GAAA,QAAA,UACAA,GAAA,MAAA,SASUD,GAAAiE,GAAAjE,iBAAAiE,GAAAjE,eAAc,KACxB,wBAAA,QACAA,GAAA,4BAAA,YAgEF,SAAYphF,GACVA,EAAA,cAAA,gBADF,CAAYqlF,GAAArlF,mBAAAqlF,GAAArlF,iBAAgB,MAkHhBmhF,GAAAkE,GAAAlE,SAAAkE,GAAAlE,OAAM,KAChB,IAAA,MACAA,GAAA,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,QAAA,UACAA,GAAA,KAAA,OAsFF,SAAYrhF,GACVA,EAAA,OAAA,SACAA,EAAA,QAAA,UACAA,EAAA,UAAA,YACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SAPF,CAAYulF,GAAAvlF,aAAAulF,GAAAvlF,WAAU,MAUVohF,GAAAmE,GAAAnE,6BAAAmE,GAAAnE,2BAA0B,KACpC,QAAA,UACAA,GAAA,OAAA,aEjwISwE,GAAuB,IAAIj8F,EAAAA,eACtC,mCAeck8F,GACdC,GAEA,MAAO,CACLt7F,QAASo7F,GACTn7F,SAAUq7F,EACVp7F,OAAO,YAIKq7F,GACdz7F,EACA07F,eAEA,IAAuB,IAAAC,EAAA79F,EAAA49F,GAAgBE,EAAAD,EAAA3/F,QAAA4/F,EAAAx/F,KAAAw/F,EAAAD,EAAA3/F,OAAE,CAApC,IACG6/F,GAAUC,EADCF,EAAA9/F,OACQkE,GACrB67F,GACF54F,QAAQF,KAAK84F,wHCLnB,SAAAE,YACSA,EAAA3lE,QAAP,WACE,MAAO,CACLC,SAAU0lE,EACVzlE,UAAW,CACT,CACEp2B,QAAS6xB,EAAAA,kBACTvvB,YAAa04F,GACb96F,OAAO,GAETK,EAAqBm2F,IACrB2E,GAAuB1E,iCAxB9BjgE,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACP8jE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACArG,GAAsB7/D,UACtBmmE,0BCpBF,SAAAC,EAAsBx8F,GAAA7F,KAAA6F,OAAAA,SActBw8F,EAAAniG,UAAAoiG,OAAA,SAAO94D,EAAe1K,WACdyjE,EACJviG,KAAK6F,QACL7F,KAAK6F,OAAOyP,SACZtV,KAAK6F,OAAOyP,QAAQs3E,eACpB5sF,KAAK6F,OAAOyP,QAAQs3E,cAAcpjD,GAEpC,GAAI+4D,EAAc,CAIhB,IAHA,IAAMC,EAAct+F,EAAO46B,GACvB99B,EAAIwhG,EAAe7hG,OAEhBK,EAAI,GAAG,CAEZ,IAAMyhG,EACJF,EAAaC,IAFfxhG,KAGEuhG,EAAaC,EAAexhG,IAAI6rF,QAClC,GAAI4V,MACF,IAA4B,IAAAC,GAAAC,OAAA,EAAAh/F,EAAA8+F,IAAcG,EAAAF,EAAA7gG,QAAA+gG,EAAA3gG,KAAA2gG,EAAAF,EAAA7gG,OAAE,CAAvC,IAAMghG,EAAaD,EAAAjhG,MACjB6gG,EAAenxF,SAASwxF,KAC3BL,EAAehjE,OAAOx+B,EAAG,EAAG6hG,GAC5B7hG,wGAMR,OAAOwhG,EAGT,OAAO1jE,GASTujE,EAAAniG,UAAA4iG,UAAA,SAAUt5D,EAAelW,GACvB,IAAMivE,EACJviG,KAAK6F,QACL7F,KAAK6F,OAAOyP,SACZtV,KAAK6F,OAAOyP,QAAQs3E,eACpB5sF,KAAK6F,OAAOyP,QAAQs3E,cAAcpjD,GACpC,OAA6D,KAArD+4D,EAAajvE,IAAUivE,EAAajvE,GAAOyvE,SAAkB,2IA9DxE96F,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLsP,yBCOT,SAAAuuF,0DAAsDljG,EAAAkjG,EAAA1vF,MAAAmB,8HAJrDxM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBCgBb,SAAAg+F,EACU7S,EACAroE,EACA+O,EACAjxB,GAHA7F,KAAAowF,yBAAAA,EACApwF,KAAA+nB,YAAAA,EACA/nB,KAAA82B,aAAAA,EACA92B,KAAA6F,OAAAA,SAGVo9F,EAAA/iG,UAAA62B,UAAA,SACEpC,EACA9yB,GAFF,IAAAwH,EAAArJ,KAIE,OAAOA,KAAKowF,yBAAyBlnE,cAActhB,KACjD4K,EAAAA,KAAK,GACL8V,EAAAA,eAAetoB,KAAK+nB,YAAYhN,kBAChC0O,EAAAA,WAAU,SAAC3kB,OAAAC,EAAAhB,EAAAe,EAAA,GAAC6iB,EAAQ5iB,EAAA,GAAEgW,EAAchW,EAAA,GAClC,IAAKsE,EAAKo5B,SAAS9N,EAAQtqB,KACzB,OAAOxI,EAAK00B,OAAO5B,GAGrB,IAAMuuE,EAAgB75F,EAAK85F,cAAcx7E,EAAUgN,GACnD,OAAO9yB,EAAK00B,OAAO2sE,GAAet7F,KAChC4gB,EAAAA,KAAI,SAACvZ,GAEDA,aAAiBm0F,EAAAA,cACjBn0F,EAAM5E,IAAIN,WACRV,EAAKytB,aAAa3D,OAAO,+BAG3B9pB,EAAKg6F,eACHtoF,EACA9L,EAAMslB,QAAQlpB,IAAImQ,IAClBmM,YASNs7E,EAAA/iG,UAAAmjG,eAAA,SACNtoF,EACAuoF,EACAr3E,GAEA,IAAKlR,GAAkBuoF,EAAgB,CACrC,IAAIt3E,EAAkC,GACtCA,EAAchsB,KAAKowF,yBAAyBzkE,qBAC1C23E,GAEFt3E,EAAchsB,KAAKujG,qBAAqBv3E,GAGtChsB,KAAKowF,yBAAyBrkE,gBAC5BC,EACAC,IAGFjsB,KAAKowF,yBAAyBhnE,YAAY4C,KAKxCi3E,EAAA/iG,UAAAijG,cAAA,SACNx7E,EACAgN,SAEA,IAAKhN,EACH,OAAOgN,EAGT,IAAM/I,EAAc5rB,KAAKowF,yBAAyB5kE,mBAChD7D,GAEF,OAAOgN,EAAQE,MAAM,CACnB4B,YAAU3xB,EAAA,GACRA,EAAC0W,wBAA4BoQ,QAK3Bq3E,EAAA/iG,UAAAuiC,SAAA,SAASp4B,GACf,OAAOA,EAAIgH,SAASrR,KAAK82B,aAAa7D,oBAGhCgwE,EAAA/iG,UAAAqjG,qBAAA,SACN57E,WAEM67E,EAAat/F,EAAOyjB,GAE1B,GACE3b,QAAQhM,KAAK6F,OAAOY,oBACpBuF,QAAQhM,KAAK6F,OAAOY,kBAAkBG,sBAEtC,IAAsB,IAAA68F,EAAA9/F,EAAA6/F,GAAaE,EAAAD,EAAA5hG,QAAA6hG,EAAAzhG,KAAAyhG,EAAAD,EAAA5hG,OAAE,CAAhC,IAAMgmB,EAAO67E,EAAA/hG,MAEd3B,KAAK6F,OAAOY,kBAAkBG,iBAAiByK,SAC7CwW,EAAQ/B,gBAGV+B,EAAQkC,aAAe7P,EAAAA,yBAAyB8P,yGAItD,OAAOw5E,wLA1GVv7F,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjB2iB,UARA3N,UAMAsY,UACAuwE,UCbIrrE,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAa46F,GACbh9F,OAAO,ICLE09F,GAGT91F,EAAAA,sBAAiCyqD,OCOJ,SAACxqD,GAAqB,OAAAA,EAAM81F,kBAHhDC,GAGT71F,EAAAA,eAAe21F,GAAYG,OAO7B,SAACh2F,GAAiC,OAAAA,EAAM+Q,UAL7BklF,GAGT/1F,EAAAA,eACF61F,GAAwBG,OAOqB,SAAC9qB,GAC9C,OAAA15E,OAAO6f,KAAK65D,GAAStuE,KAAI,SAACgmB,GAAY,OAAAsoD,EAAQtoD,OAJnCqzE,GAGTj2F,EAAAA,eAAe+1F,GAA0BG,ICjBhCC,GAGTn2F,EAAAA,eACF21F,IACA,SAAC71F,GAAqB,OAAAA,EAAMspF,uBAGjBxD,GAGT5lF,EAAAA,eACFm2F,IACA,SAACr2F,GAAoC,OAAAA,EAAMs2F,YCThCC,GAGTr2F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMupF,mBAEhDiN,GAGTt2F,EAAAA,eACFq2F,IACA,SAACv2F,GACC,OAAA6Q,GAAsB7Q,MAGby2F,GAGTv2F,EAAAA,eACFq2F,IACA,SAACv2F,GACC,OAAA2Q,GAAsB3Q,SAQxB,SAACA,GAAmD,OAAA0Q,GAAoB1Q,IAL7DqjF,GAGTnjF,EAAAA,eACFq2F,GAAuBG,IC9BZC,GAGTz2F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMkgF,aAEhD0W,GAGT12F,EAAAA,eACFy2F,IACA,SAAC32F,GAAkC,OAAAA,EAAM+Q,YAG9B8lF,GAGT32F,EAAAA,eAAe02F,IAA6B,SAACxrB,GAC/C,OAAA15E,OAAO6f,KAAK65D,GAAStuE,KAAI,SAACgmB,GAAY,OAAAsoD,EAAQtoD,SAGnCg0E,GAAyB,SACpCh0E,GAEA,OAAA5iB,EAAAA,eAAe02F,IAA6B,SAAC7lF,GAC3C,OAAiC,IAAjCrf,OAAO6f,KAAKR,GAAUle,OAAeke,EAAS+R,GAAW,SCxBhDi0E,GAGT72F,EAAAA,eACF21F,IACA,SAAC71F,GAAqB,OAAAA,EAAMg3F,2BAGjBC,GAGT/2F,EAAAA,eACF62F,IACA,SAAC/2F,GAAiD,OAAA0Q,GAAoB1Q,MAG3Dk3F,GAGTh3F,EAAAA,eACF62F,IACA,SAAC/2F,GACC,OAAA0Q,GAAoB1Q,GAAOhB,QAAO,SAAClN,GAAM,OAAAA,EAAEqlG,cAGlCC,GAGTl3F,EAAAA,eACF62F,IACA,SAAC/2F,GAAiD,OAAA2Q,GAAsB3Q,MCjC7Dq3F,GAGTn3F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMs3F,SAEhDlnB,GAGTlwE,EAAAA,eAAem3F,IAAe,SAACr3F,GACjC,OAAA8Y,GAA+B9Y,MCTpBu3F,GAGTr3F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMw3F,eAEhDC,GAGTv3F,EAAAA,eACFq3F,IACA,SAACv3F,GAAsC,OAAA8Y,GAA+B9Y,MAG3D03F,GAGTx3F,EAAAA,eACFq3F,IACA,SAACv3F,GAAsC,OAAAgZ,GAAiChZ,MAG7D23F,GAGTz3F,EAAAA,eACFq3F,IACA,SAACv3F,GACC,OAAAkZ,GAAiClZ,KAChCgZ,GAAiChZ,SAML,SAACA,GAAqB,OAAAA,EAAM43F,iBAHhDC,GAGT33F,EAAAA,eAAe21F,GAAYiC,OAO7B,SAAC93F,GACC,OAAA8Y,GAA+B9Y,IANtB+3F,GAGT73F,EAAAA,eACF23F,GAA8BG,ICxCnBC,GAGT/3F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM2mF,YAEhDuR,GAGTh4F,EAAAA,eACF+3F,IACA,SAACj4F,GACC,OAAA8Y,GAA+B9Y,MAGtBm4F,GAGTj4F,EAAAA,eACF+3F,IACA,SAACj4F,GACC,OAAAgZ,GAAiChZ,MAGxBo4F,GAGTl4F,EAAAA,eACF+3F,IACA,SAACj4F,GACC,OAAAkZ,GAAiClZ,KAChCgZ,GAAiChZ,MC3BzBq4F,GAGTn4F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM2pF,oBAEhDpF,GAGTrkF,EAAAA,eACFm4F,IACA,SAACr4F,GACC,OAAA0Q,GAAoB1Q,MAGXs4F,GAGTp4F,EAAAA,eACFm4F,IACA,SAACr4F,GACC,OAAA2Q,GAAsB3Q,MCvBbu4F,GAGTr4F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMugF,WAEhDiY,GAGTt4F,EAAAA,eACFq4F,IACA,SAACv4F,GACC,OAAO8Y,GAA+B9Y,GAAO+Q,YAIpC0nF,GAQTv4F,EAAAA,eACFq4F,IACA,SAACv4F,GAAqC,MAAA,CACpC0mD,OAAQxtC,GAAiClZ,GACzCoQ,QAAS4I,GAAiChZ,GAC1CugF,QAASznE,GAA+B9Y,GAAO+Q,SAC/C02B,QAAS3uB,GAA+B9Y,GAAOynC,YAItCixD,GAGTx4F,EAAAA,eACFq4F,IACA,SAACv4F,GACC,OAAA8Y,GAA+B9Y,GAAOynC,WAG7BkxD,GAGTz4F,EAAAA,eAAeq4F,IAAuB,SAACv4F,GACzC,OAAAgZ,GAAiChZ,MAGtB44F,GAGT14F,EAAAA,eAAeq4F,IAAuB,SAACv4F,GACzC,OAAAkZ,GAAiClZ,MCrDtB64F,GAGT34F,EAAAA,eACF21F,IACA,SAAC71F,GAAqB,OAAAA,EAAM84F,sBAGjBC,GAGT74F,EAAAA,eACF24F,IACA,SAAC74F,GACC,OAAA8Y,GAA+B9Y,MAGtBg5F,GAGT94F,EAAAA,eACF24F,IACA,SAAC74F,GACC,OAAAgZ,GAAiChZ,MAGxBi5F,GAGT/4F,EAAAA,eACF24F,IACA,SAAC74F,GACC,OAAAkZ,GAAiClZ,MAGxBk5F,GAGTh5F,EAAAA,eACF24F,IACA,SAAC74F,GACC,OAAAoZ,GAA+BpZ,MC5CtBm5F,GAGTj5F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM4nF,iBCGhDwR,GAGTl5F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMqoF,UAEhDgR,GAGTn5F,EAAAA,eAAek5F,IAAgB,SAACp5F,GAAuB,OAAAA,EAAM+Q,YAEpDuoF,GAGTp5F,EAAAA,eAAem5F,IAAkB,SAACjuB,GACpC,OAAA15E,OAAO6f,KAAK65D,GAAStuE,KAAI,SAACoZ,GAAS,OAAAk1D,EAAQl1D,SCjBhCqjF,GAGTr5F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM6jF,aAEhD2V,GAGTt5F,EAAAA,eAAeq5F,IAAyB,SAACv5F,GAC3C,OAAA8Y,GAA+B9Y,MAGpBy5F,GAGTv5F,EAAAA,eAAeq5F,IAAyB,SAACv5F,GAC3C,OAAAgZ,GAAiChZ,MAGtB05F,GAGTx5F,EAAAA,eACFq5F,IACA,SAACv5F,GACC,OAAAkZ,GAAiClZ,KAChCgZ,GAAiChZ,MC1BzB25F,GAGTz5F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM6Z,YAEhD+/E,GAGT15F,EAAAA,eAAey5F,GAAkB7gF,IAExB+gF,GAAyB,SACpCp+E,GAEA,OAAAvb,EAAAA,eAAe05F,IAAkB,SAAClhF,GAChC,OAAAA,EAAU7Z,MAAK,SAACya,GAAa,OAAAA,EAAS7Y,KAAOgb,SAGpCq+E,GAGT55F,EAAAA,eAAey5F,GAAkB3gF,IAExB+gF,GAGT75F,EAAAA,eAAey5F,GAAkBzgF,IAExB8gF,GAGT95F,EAAAA,eAAey5F,GAAkBvgF,IC9BxB6gF,GAGT/5F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAM60E,eAEhDqlB,GAGTh6F,EAAAA,eAAe+5F,IAAqB,SAACj6F,GACvC,OAAA8Y,GAA+B9Y,MCXpBm6F,GAGTj6F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMo6F,WAEhDC,GAAoDn6F,EAAAA,eAC/Di6F,IACA,SAACn6F,GAA4B,OAAAA,EAAM+hB,WCLxBu4E,GAGTp6F,EAAAA,eAAe21F,IAAc,SAAC71F,GAAqB,OAAAA,EAAMu6F,UAEhDC,GAGTt6F,EAAAA,eAAeo6F,IAAgB,SAACt6F,GAClC,OAAAkZ,GAAiClZ,MAGtBy6F,GAGTv6F,EAAAA,eAAeo6F,IAAgB,SAACt6F,GAClC,OAAA8Y,GAA+B9Y,MChBpB06F,GAGTx6F,EAAAA,eACF21F,IACA,SAAC71F,GAAqB,OAAAA,EAAM26F,uBAGjBC,GAGT16F,EAAAA,eACFw6F,IACA,SAAC16F,GACC,OAAA8Y,GAA+B9Y,MAGtB66F,GAGT36F,EAAAA,eACFw6F,IACA,SAAC16F,GACC,OAAAgZ,GAAiChZ,MAGxB86F,GAGT56F,EAAAA,eACFw6F,IACA,SAAC16F,GACC,OAAAoZ,GAA+BpZ,MAGtB+6F,GAGT76F,EAAAA,eACFw6F,IACA,SAAC16F,GACC,OAAAkZ,GAAiClZ,40CNrBD,SAClCkW,GAEA,OAAAhW,EAAAA,eAAem5F,IAAkB,SAACtoF,GAChC,OAAiC,IAAjCrf,OAAO6f,KAAKR,GAAUle,OAAeke,EAASmF,GAAQ,ghBONxD,SAAA8kF,EACY94F,EACA+X,EACA3N,GAFApa,KAAAgQ,MAAAA,EACAhQ,KAAA+nB,YAAAA,EACA/nB,KAAAoa,cAAAA,SAMZ0uF,EAAA5oG,UAAA2xF,aAAA,WAAA,IAAAxoF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SAAS,IAAIq4F,GAA6BlxF,QAQzDixF,EAAA5oG,UAAAgpB,YAAA,SAAYf,GAAZ,IAAA9e,EAAArJ,KACE,YADU,IAAAmoB,IAAAA,GAAA,GACHC,EAAAA,KACL,WAAM,OAAAD,IACNnoB,KAAKgQ,MAAMpI,KACTwI,EAAAA,OAAO44F,IACP1gF,EAAAA,eACEtoB,KAAKipG,2BACLjpG,KAAKkpG,4BAEPp8F,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAAaoZ,GAAFnZ,EAAA,GAASA,EAAA,IAAUA,EAAA,GAAM,OAACmZ,KAC7CsK,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAYgY,GAAFhY,EAAA,GAASA,EAAA,IAC3ByhB,GAAkC,IAArBA,EAAU7lB,QAErBoc,GACH1T,EAAKwoF,kBAIX/kF,EAAAA,QAAO,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAUA,EAAA,GAAM,OAAAiH,QAAQwa,MAC1C5b,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0hB,EAASzhB,EAAA,GAAUA,EAAA,GAAM,OAAAyhB,MAEjCxmB,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO44F,OAO3BF,EAAA5oG,UAAA+oG,yBAAA,WACE,OAAOjpG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO+4F,MAMhCL,EAAA5oG,UAAAgpG,yBAAA,WACE,OAAOlpG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOg5F,MAMhCN,EAAA5oG,UAAAmpG,uBAAA,WACE,OAAOrpG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOk5F,MAMhCR,EAAA5oG,UAAAqpG,0BAAA,WACEvpG,KAAKgQ,MAAMU,SAAS,IAAI84F,KAU1BV,EAAA5oG,UAAAopB,WAAA,SAAWC,GAAX,IAAAlgB,EAAArJ,KACE,OAAOA,KAAK+nB,YAAYhN,iBAAiBnT,KACvCkF,EAAAA,OAAOd,SACPwc,EAAAA,KAAI,WAAM,OAAAnf,EAAK6f,aAAY,MAC3BO,EAAAA,WAAU,WACR,OAAApgB,EAAK2G,MAAMpI,KACTwI,EAAAA,OAAOq5F,GAAsClgF,QAGjDzc,EAAAA,QAAO,SAACsa,GAAa,OAAApb,QAAQob,MAC7Bxc,EAAAA,KAAI,SAACwc,GAAa,OAAAA,EAASsiF,oBAU/BZ,EAAA5oG,UAAA4pB,eAAA,SAAejC,GACb,OACE7b,QAAQ6b,IACR7b,QAAQ6b,EAAQ8hF,oBACf39F,QAAQ6b,EAAQ+hF,uBAUrBd,EAAA5oG,UAAAkqB,mBAAA,SAAmBvC,GACjB,OAAI7b,QAAQ6b,IACH7b,QAAQ6b,EAAQ+hF,uBAU3Bd,EAAA5oG,UAAAypB,YAAA,SAAYooE,EAA2BC,GAAvC,IAAA3oF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIm5F,GAA4B,CAC9BhyF,OAAMA,EACNk6E,kBAAiBA,EACjBC,uBAAsBA,SAS9B8W,EAAA5oG,UAAA4pG,4BAAA,WACE,OAAO9pG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyB7B,OAOpCkwC,EAAA5oG,UAAA6pG,4BAAA,WACE,OAAO/pG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyB9B,OAOpCkwC,EAAA5oG,UAAA8pG,0BAAA,WACE,OAAOhqG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuB/B,OAOlCkwC,EAAA5oG,UAAA+pG,6BAAA,WACE,OAAOjqG,KAAKgQ,MAAMU,SAAS,IAAIw5F,KAOjCpB,EAAA5oG,UAAA+pB,gBAAA,SAAgBgoE,GAAhB,IAAA5oF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIy5F,GAAgC,CAClCtyF,OAAMA,EACNo6E,YAAWA,SASnB6W,EAAA5oG,UAAAkqG,gCAAA,WACE,OAAOpqG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyB5B,OAOpCiwC,EAAA5oG,UAAAmqG,gCAAA,WACE,OAAOrqG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyB7B,OAOpCiwC,EAAA5oG,UAAAoqG,8BAAA,WACE,OAAOtqG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuB9B,OAOlCiwC,EAAA5oG,UAAAqqG,iCAAA,WACE,OAAOvqG,KAAKgQ,MAAMU,SAChB,IAAI85F,KAWR1B,EAAA5oG,UAAAuqG,uBAAA,SACEC,EACAC,WAEA,QAFA,IAAAA,IAAAA,EAAA,IAE+B,IAA3BA,EAAgBhqG,OAClB,OAAO+pG,EAGT,IAAME,EAAyC,OAC/C,IAAuB,IAAAC,EAAAlnG,EAAA+mG,GAAYI,EAAAD,EAAAhpG,QAAAipG,EAAA7oG,KAAA6oG,EAAAD,EAAAhpG,OAAE,CAAhC,IAAMulB,EAAQ0jF,EAAAnpG,OACHgpG,EAAgBt5F,SAAS+V,EAAS7Y,KAE9Cq8F,EAAoBlnG,KAAK0jB,qGAI7B,OAAOwjF,8KAzPV3iG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDArBGyM,EAAAA,aAGRuI,UACAlB,wBCIP,SAAA8xF,EAAsB98D,GAAAjuC,KAAAiuC,QAAAA,SAEtB88D,EAAA7qG,UAAAywF,8BAAA,WACE,OAAO3wF,KAAKiuC,QAAQ0iD,iCAGtBoa,EAAA7qG,UAAA4wF,sBAAA,WACE,OAAO9wF,KAAKiuC,QAAQ6iD,iKAXvB7oF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLkzF,wBCoOP,SAAA2S,EACUhuE,EACAiuE,EACAljF,EACAmjF,EACAC,EACAC,EACAhxF,GAPV,IAAA/Q,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAirG,mCAAAA,EACAjrG,KAAA+nB,YAAAA,EACA/nB,KAAAkrG,wBAAAA,EACAlrG,KAAAmrG,wBAAAA,EACAnrG,KAAAorG,mBAAAA,EACAprG,KAAAoa,cAAAA,EArNVpa,KAAAqrG,sBAIIrrG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOmuE,IACPhjF,EAAAA,eAAetoB,KAAKmrG,wBAAwBjiF,eAC5CipD,EAAAA,WAAU,SAACrtE,OAAAC,EAAAhB,EAAAe,EAAA,GAAIymG,GAAFxmG,EAAA,GAAiBA,EAAA,IAC5B,OAAOsE,EAAK4hG,mCACTna,wBACAlpF,KACCgD,EAAAA,KAAI,SAACohB,GACH,IAAKA,EAMH,OALInjB,EAAAA,aACFC,QAAQF,KACN,uHAGG,EAGT,IAAM4iG,EAAyBD,EAAgB3gG,KAC7C,SAACid,GAAY,OAAAA,EAAQ4jF,mBAEjBC,EAAqB1/E,EAAYphB,KACrC,SAACid,GAAY,OAAAA,EAAQ4jF,mBAGvB,OAAOpiG,EAAKsiG,qBACVH,EACAE,MAGJjiF,EAAAA,WAAU,SAACpD,GACT,OAAAA,EACIre,EAAAA,GAAG,IAAIigB,IACP+/B,EAAAA,SAEN/wB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4jG,GACFxvE,GAAmBn4B,aASjCjE,KAAA6rG,+BAEI7rG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO2uE,IACPxjF,EAAAA,eAAetoB,KAAKmrG,wBAAwBjjF,gBAC5CiqD,EAAAA,WAAU,SAACrtE,OAAAC,EAAAhB,EAAAe,EAAA,GAAIinG,GAAFhnG,EAAA,GAAyBA,EAAA,IACpC,OAAAsE,EAAK4hG,mCACFta,gCACA/oF,KACCysC,EAAAA,UAAS,SAAC23D,GACR,IAAI3lF,GAAU,EAWd,OATE0lF,GACmC,IAAnCA,EAAwBprG,SAExB0lB,EAAUhd,EAAK8hG,wBAAwBjgF,uBACrC6gF,EACAC,IAIG,CACL,IAAIC,GACFD,GAEF,IAAInhF,GACFxE,OAIN4Q,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4jG,GACFxvE,GAAmBn4B,aAUjCjE,KAAAksG,iCAEIlsG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAA0BmzB,IAC1BxjD,EAAAA,QAAO,WAAM,OAAAd,QAAQ3C,EAAK6hG,wBAAwBzkG,sBAClD6hB,EAAAA,eACEtoB,KAAKg9B,SAASp1B,KACZu1B,EAAAA,OACEgvE,MAINr/F,EAAAA,QAAO,SAAChI,OAAGsnG,EAAHroG,EAAAe,EAAA,GAAiB,GAAM,OAAAkH,QAAQogG,MACvC3iF,EAAAA,WAAU,WACR,OAAApgB,EAAK8hG,wBAAwBjiF,cAActhB,KACzC0gB,EAAAA,eACEjf,EAAK+Q,cAAcf,YACnBhQ,EAAK8hG,wBAAwBjjF,eAC7B7e,EAAK0e,YAAYhN,kBAEnBjO,EAAAA,QAAO,SAAChI,GAAqB,OAArBf,EAAAe,EAAA,GAAe,MACvBqtE,EAAAA,WAAU,SAACrtE,eAAA6S,EAAA5T,EAAAe,EAAA,GAAC6iB,EAAQhQ,EAAA,GAAEE,EAAMF,EAAA,GAAE6O,EAAS7O,EAAA,GAC/B00F,GAD0C10F,EAAA,GACQ,QACxD,IAAsB,IAAA20F,EAAA3oG,EAAAgkB,GAAQ4kF,EAAAD,EAAAzqG,QAAA0qG,EAAAtqG,KAAAsqG,EAAAD,EAAAzqG,OAAE,CAA3B,IAAMgmB,EAAO0kF,EAAA5qG,MAChB,GACE0H,EAAK8hG,wBAAwBrhF,eAAejC,MAC1Cxe,EAAK6hG,wBAAwBzkG,kBAC5BG,mBACAyC,EAAK6hG,wBAAwBzkG,kBAAkBG,iBAAiByK,SAC/DwW,EAAQ/B,mBAGZ,IAAuB,IAAA0mF,GAAAC,OAAA,EAAA9oG,EAAA6iB,IAASkmF,EAAAF,EAAA3qG,QAAA6qG,EAAAzqG,KAAAyqG,EAAAF,EAAA3qG,OAAE,CAA7B,IAAMulB,EAAQslF,EAAA/qG,MACjB,GAAIylB,EAAS7Y,KAAOsZ,EAAQ/B,aAAc,CACxCumF,EAAQ3oG,KACN,IAAIipG,GAAqC,CACvC90F,OAAMA,EACNk6E,kBAAmB3qE,EAAS7Y,GAC5ByjF,uBAAwB5qE,EAASmE,WAGrC,4MAKR,OAAI8gF,EAAQ1rG,OAAS,EACZ0rG,EAEFrkD,EAAAA,cAOfhoD,KAAA4sG,4BAEI5sG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAA0BmzB,IAC1BxjD,EAAAA,QACE,SAACuR,GACC,OAAArS,QAAQ3C,EAAK6hG,wBAAwBzkG,oBACrCuF,QACE3C,EAAK6hG,wBAAwBzkG,kBAAkBG,mBAEjDoF,QAAQqS,MAEZ8zD,EAAAA,WAAU,WACR,OAAA9oE,EAAK+hG,mBAAmBlC,2BAA2BthG,KACjD0gB,EAAAA,eACEjf,EAAK+Q,cAAcf,YACnBhQ,EAAK+hG,mBAAmBliF,cACxB7f,EAAK0e,YAAYhN,kBAEnBjO,EAAAA,QAAO,SAAChI,GAAqB,OAArBf,EAAAe,EAAA,GAAe,MACvB0jB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAAC0vD,EAAMzvD,EAAA,GAASA,EAAA,GAAYA,EAAA,GAAWA,EAAA,GACrCyvD,GACHnrD,EAAK+hG,mBAAmBvZ,kBAG5BjnF,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAAU+S,GAAF9S,EAAA,GAAQA,EAAA,IAAEyhB,EAASzhB,EAAA,GAAWA,EAAA,GACzC,MAAO,CAAE8S,OAAMA,EAAE2O,UAASA,MAE5B2rD,EAAAA,WAAU,SAACrtE,WAAE+S,EAAM/S,EAAA+S,OAAE2O,EAAS1hB,EAAA0hB,UACtB6lF,EAAyC,OAC/C,IAAuB,IAAAQ,EAAAlpG,EAAA6iB,GAASsmF,EAAAD,EAAAhrG,QAAAirG,EAAA7qG,KAAA6qG,EAAAD,EAAAhrG,OAAE,CAA7B,IAAMulB,EAAQ0lF,EAAAnrG,MAEf0H,EAAK+hG,mBAAmBhhF,mBACtBhD,EAASsiF,iBAEXrgG,EAAK6hG,wBAAwBzkG,kBAAkBG,iBAAiByK,SAC9D+V,EAAS7Y,KAGX89F,EAAQ3oG,KACN,IAAImmG,GAA4B,CAC9BhyF,OAAMA,EACNk6E,kBAAmB3qE,EAAS7Y,GAC5ByjF,uBAAwB5qE,EAASmE,6GAKzC,OAAI8gF,EAAQ1rG,OAAS,EACZ0rG,EAEFrkD,EAAAA,qBAuBPgjD,EAAA9qG,UAAAyrG,qBAAA,SACNoB,EACAC,GAEA,GAAID,EAAgBpsG,SAAWqsG,EAAYrsG,OACzC,OAAO,EAGT,IAAK,IAAIK,EAAI,EAAGA,EAAIgsG,EAAYrsG,OAAQK,IACtC,GAAI+rG,EAAgB/rG,KAAOgsG,EAAYhsG,GACrC,OAAO,EAIX,OAAO,6BAhPViH,EAAAA,uDArBQu1B,EAAAA,eAiBAutE,UALa5wF,UAIb6oF,UAEAl7E,UALAghF,UAD0B7vF,MAYjC7Y,EAAA,CADCq9B,EAAAA,uDAmDDr9B,EAAA,CADCq9B,EAAAA,gEA4CDr9B,EAAA,CADCq9B,EAAAA,kEAyDDr9B,EAAA,CADCq9B,EAAAA,iEC3KUC,GAAiB,CAACstE,kBCQ7B,SAAAiC,EAAsBh/D,GAAAjuC,KAAAiuC,QAAAA,SAEtBg/D,EAAA/sG,UAAAgtG,aAAA,WACE,OAAOltG,KAAKiuC,QAAQy/C,iBAGtBuf,EAAA/sG,UAAAitG,cAAA,WACE,OAAOntG,KAAKiuC,QAAQ2/C,kBAGtBqf,EAAA/sG,UAAAktG,aAAA,SAAa9/F,GACX,OAAOtN,KAAKiuC,QAAQ6/C,cAAcxgF,IAGpC2/F,EAAA/sG,UAAAmtG,WAAA,SAAWnf,GACT,OAAOluF,KAAKiuC,QAAQggD,YAAYC,IAGlC+e,EAAA/sG,UAAAotG,YAAA,SAAYz7E,GACV,OAAO7xB,KAAKiuC,QAAQqgD,aAAaz8D,IAGnCo7E,EAAA/sG,UAAAqtG,aAAA,WACE,OAAOvtG,KAAKiuC,QAAQygD,yJA3BvBzmF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL+qF,aCOT,sBAIgBsd,WACd,OAAA1oG,EAAA,IACsB,SAAGsqF,GACvBtqF,EAAoB,SAAG+pF,GACvB/pF,EAAqB,SAAGusB,SAIfo8E,GAAsC,CACjD1nG,QAAS2nG,GACTrnG,WAAYmnG,aCrBEG,GAAwB9nG,GACtC,QAAiE0B,IAA7DolB,GAA2B9mB,EAAQknB,IACrC,MAAO,yFCAK6gF,WACd,MAAO,CACLt/F,SAAOxJ,EAAA,GACLA,EAAoB,SAAG,CACrB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEFA,EAAoB,SAAG,CACrB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,6BCnCN,SAAA+oG,EACUhoG,EACA+gC,EACAknE,GAFA9tG,KAAA6F,OAAAA,EACA7F,KAAA4mC,SAAAA,EACA5mC,KAAA8tG,WAAAA,SAGVD,EAAA3tG,UAAA6tG,qBAAA,WACE,OAAI/tG,KAAK6F,OAAOyI,QACP9O,OAAO6f,KAAKrf,KAAK6F,OAAOyI,SAASxB,QACtC,SAAC8f,GAAU,MAAU,kBAAVA,KAGR,IAGTihF,EAAA3tG,UAAA8tG,yBAAA,WACE,OAAQhuG,KAAK6F,OAAOyI,SAAWtO,KAAK6F,OAAOyI,QAAQwrF,eAAkB,IAGvE+T,EAAA3tG,UAAA+tG,eAAA,SAAerhF,GACb,OAAOH,GAA0BzsB,KAAK6F,OAAQ+mB,IAGhDihF,EAAA3tG,UAAAguG,qBAAA,SAAqBthF,GACnB,OAAOD,GAA2B3sB,KAAK6F,OAAQ+mB,IAGjDihF,EAAA3tG,UAAAiuG,sBAAA,SAAsBvhF,GACpB,GAAI5sB,KAAK8tG,WAAWlhF,GAClB,OAAO5sB,KAAK4mC,SAASv7B,IAAsBrL,KAAK8tG,WAAWlhF,GAAQ,OAIvEihF,EAAA3tG,UAAAkuG,SAAA,SAASxhF,GACP,IAAIjrB,EAEE8kC,EAAUzmC,KAAKmuG,sBAAsBvhF,GAQ3C,OAPI6Z,GACFA,EACGnV,YACA7e,WAAU,SAAC4B,GAAQ,OAAC1S,EAAQ0S,KAC5BF,mBAGY5M,IAAV5F,EAAsBA,EAAQ3B,KAAKkuG,qBAAqBthF,IAGjEihF,EAAA3tG,UAAAmuG,SAAA,SAASzhF,EAAejrB,GACtB,IAAM8kC,EAAUzmC,KAAKmuG,sBAAsBvhF,GACvC6Z,GACFA,EAAQzU,UAAUrwB,IAWtBksG,EAAA3tG,UAAAouG,UAAA,SAAUliG,GAAV,IAAA/C,EAAArJ,KACE,OAAsB,IAAlBoM,EAAOzL,OACFqH,EAAAA,GAAG,IAGL+iB,EAAAA,cACL3e,EAAOxB,KAAI,SAACgiB,GACV,OAAAvjB,EAAK8kG,sBAAsBvhF,GACxB0E,YACA1pB,KAAKG,EAAAA,4BAEVH,KAAKkF,EAAAA,QAAO,SAACnL,GAAU,OAAAA,EAAMkL,OAAM,SAAC+f,GAAU,QAAEA,oCA1ErD3kB,EAAAA,uDAJQyM,UAPYyzB,EAAAA,gBASZulE,MCGT,IAAMa,GAAW,+BAYf,SAAAC,EAAoBC,GAApB,IAAAplG,EACEiK,EAAA9P,KAAAxD,OAAOA,YADWqJ,EAAAolG,kBAAAA,WATwB3uG,EAAA0uG,EAAAl7F,GAC5C9T,OAAAyB,eAAYutG,EAAAtuG,UAAA,wBAAqB,KAAjC,WACE,OAAOF,KAAKyuG,kBAAkBT,4DAGhCxuG,OAAAyB,eAAIutG,EAAAtuG,UAAA,qBAAkB,KAAtB,WACE,OAAOF,KAAK0uG,sBAAsB/tG,OAAS,mCAO7C6tG,EAAAtuG,UAAA2T,MAAA,SAAMxJ,GACJ,GAAIrK,KAAK2uG,mBAAoB,CAC3B,IAAMC,EAAgB5uG,KAAK6uG,4BAA4BxkG,GACjDykG,EAASx7F,EAAApT,UAAM2T,MAAKrQ,KAAAxD,KAAC4uG,EAAcvkG,KAEzC,OADArK,KAAK+uG,gCAAgCD,EAAQF,EAAcxiG,QACpD0iG,EAEP,OAAOx7F,EAAApT,UAAM2T,MAAKrQ,KAAAxD,KAACqK,IAIvBmkG,EAAAtuG,UAAA2uG,4BAAA,SACExkG,GAEM,IAAAvF,EAAAf,EAAyBsG,EAAIyrD,MAAMy4C,IAAS,GAAzC5jB,EAAO7lF,EAAA,GAAEkqG,EAASlqG,EAAA,GAErB6F,EAAWggF,EAAQl0E,MAAM,KACX,KAAhB9L,EAAS,IACXA,EAAShG,QAMX,IAJA,IAAMyH,EAAS,GAEX6iG,EAAU,EACVC,EAAY,EAEdD,EAAUjvG,KAAK0uG,sBAAsB/tG,QACrCuuG,EAAYvkG,EAAShK,QACrB,CACA,IAAM4L,EAAYvM,KAAK0uG,sBAAsBO,GACzBjvG,KAAKyuG,kBAAkBR,eAAe1hG,GAE1C8E,SAAS1G,EAASukG,MAChC9iG,EAAOG,GAAa5B,EAASukG,GAC7BA,KAEFD,IAIF,MAAO,CAAE5kG,IADTA,EAAMM,EAASV,MAAMzK,OAAO6f,KAAKjT,GAAQzL,QAAQu5B,KAAK,KAAO80E,EAC/C5iG,OAAMA,IAGdoiG,EAAAtuG,UAAA6uG,gCAAA,SACNzkG,EACA8B,GAEA9B,EAAQ6kG,YAAc/iG,GAGxBoiG,EAAAtuG,UAAAoxD,UAAA,SAAU5mD,GACR,IAAM0B,EAASpM,KAAKovG,gCAAgC1kG,GAC9CL,EAAMiJ,EAAApT,UAAMoxD,UAAS9tD,KAAAxD,KAAC0K,GAE5B,OADmB1K,KAAKqvG,4BAA4BhlG,EAAK+B,IAI3DoiG,EAAAtuG,UAAAkvG,gCAAA,SACE9kG,GAEA,OAAOA,EAAQ6kG,YAAc7kG,EAAQ6kG,YAAc,IAG7CX,EAAAtuG,UAAAmvG,4BAAA,SAA4BhlG,EAAa+B,GAAzC,IAAA/C,EAAArJ,KASN,OARyBA,KAAK0uG,sBAC3B9jG,KAAI,SAACgiB,GACJ,OAAOxgB,EAAOwgB,GACVxgB,EAAOwgB,GACPvjB,EAAKolG,kBAAkBL,SAASxhF,MAErCsN,KAAK,KAEkB7vB,MApFgBilG,EAAAA,2CAD7CrnG,EAAAA,uDAZQ4lG,wBCiBP,SAAA0B,EACUd,EACAe,EACA5oE,GAFA5mC,KAAAyuG,kBAAAA,EACAzuG,KAAAwvG,WAAAA,EACAxvG,KAAA4mC,SAAAA,EAGF5mC,KAAAq6B,aAAe,IAAIN,EAAAA,aAEnB/5B,KAAAyvG,cAEJ,GAUIzvG,KAAA6O,cAAe,SAKvB0gG,EAAArvG,UAAA2sD,KAAA,WACE7sD,KAAKmK,OAASnK,KAAK4mC,SAASv7B,IAAYL,EAAAA,QAExChL,KAAKsR,SAAWtR,KAAK4mC,SAASv7B,IAAcwlD,EAAAA,UAC5C,IAAM6+C,EAAgB1vG,KAAKyuG,kBAAkBT,2BAEzC0B,EAAc/uG,SAChBX,KAAK2vG,0BAA0B3vG,KAAKsR,SAASpI,MAAK,IAClDlJ,KAAK4vG,iBAAiBF,GACtB1vG,KAAK6vG,qBAQDN,EAAArvG,UAAA0vG,iBAAA,SAAiBxjG,GAAjB,IAAA/C,EAAArJ,KACNoM,EAAO7C,SAAQ,SAACqjB,GACd,IAAM6Z,EAAUp9B,EAAKolG,kBAAkBN,sBAAsBvhF,GACzD6Z,GACFp9B,EAAKgxB,aAAarnB,IAChByzB,EAAQnV,YAAY7e,WAAU,SAAC9Q,GAC7B,IACG0H,EAAKwF,cACNxF,EAAKomG,cAAc7iF,IACnBvjB,EAAKomG,cAAc7iF,KAAWjrB,EAC9B,CACA,IAAMmtG,EAASzlG,EAAKc,OAAOI,SAASlB,EAAKc,OAAOE,KAC1CohB,EAAapiB,EAAKc,OAAOgJ,aAAa27F,GAC5CzlG,EAAKiI,SAASw+F,aAAarkF,GAE7BpiB,EAAKomG,cAAc7iF,GAASjrB,UAW9B4tG,EAAArvG,UAAA2vG,iBAAA,WAAA,IAAAxmG,EAAArJ,KACNA,KAAKq6B,aAAarnB,IAChBhT,KAAKmK,OAAO6E,OACTpH,KACCkF,EAAAA,QACE,SAACmC,GACC,OAAAA,aAAiB8gG,EAAAA,iBACjB9gG,aAAiBC,EAAAA,eACjBD,aAAiB+gG,EAAAA,iBACjB/gG,aAAiBghG,EAAAA,qBAGtBx9F,WAAU,SAACxD,GACV5F,EAAKwF,aAAeI,aAAiB8gG,EAAAA,gBACjC1mG,EAAKwF,cACPxF,EAAKsmG,0BAA0B1gG,EAAM5E,UAWvCklG,EAAArvG,UAAAyvG,0BAAA,SAA0BtlG,GAA1B,IAAAhB,EAAArJ,KACEoM,EAAWpM,KAAKwvG,WAAWX,4BAA4BxkG,GAAI+B,OACnE5M,OAAO6f,KAAKjT,GAAQ7C,SAAQ,SAACqjB,GAC3B,OAAAvjB,EAAKolG,kBAAkBJ,SAASzhF,EAAOxgB,EAAOwgB,QAIlD2iF,EAAArvG,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,6BClHN+7F,GACdx9E,EACAy9E,EACAC,EACA5sE,EACA6sE,GALF,IAAAhnG,EAAArJ,KAOE,OAAO,WAAA,OAAAkB,EAAAmI,OAAA,OAAA,GAAA,6DACL,MAAA,CAAA,EAAMm6B,EAAW3E,gBAAgB,0BAAjC/5B,EAAAlC,OACAytG,EAAyBxjD,OACzBn6B,EAAgBxb,aAChBi5F,EAAYj5F,aACZk5F,EAAYl5F,kMDJfjP,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJL0oG,UACAW,UAZYrmE,EAAAA,gBCsBRmoE,GAAsC,CACjDj/E,GACA+9D,GACAP,GACA,CACE9oF,QAAS49B,EAAAA,gBACTt9B,WAAY6pG,GACZ9pG,KAAM,CACJirB,GACA+9D,GACAP,GACApwD,GACA8wE,IAEFtpG,OAAO,IC9BEsqG,GAAyC,CACpD1C,GACAW,GACA,CAAEzoG,QAASyqG,EAAAA,cAAenoG,YAAammG,QCmCvC,SACUxxE,EACAyzE,GAFV,IAAApnG,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EApCVzwG,KAAA0wG,cAEI1wG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwzE,IACPtzE,EAAAA,YAAW,WACT,OAAOh0B,EAAKonG,cAAcnD,cAAc1lG,KACtCgD,EAAAA,KAAI,SAAC2kB,GAAa,OAAA,IAAIqhF,GAAuCrhF,MAC7D0H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI6oG,GAAoCz0E,GAAmBn4B,aAOtEjE,KAAA8wG,eAGI9wG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO4zE,IACP1zE,EAAAA,YAAW,WACT,OAAOh0B,EAAKonG,cAAclD,eAAe3lG,KACvCgD,EAAAA,KACE,SAAC6jF,GAAc,OAAA,IAAIuiB,GAAwCviB,MAE7Dx3D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIipG,GAAqC70E,GAAmBn4B,mCA9BvEgE,EAAAA,uDAPQu1B,EAAAA,eAIAyvE,MAMP7sG,EAAA,CADCq9B,EAAAA,+CAgBDr9B,EAAA,CADCq9B,EAAAA,uDC2CD,SACUT,EACAyzE,EACAxgG,EACAnC,GAJV,IAAAzE,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EACAzwG,KAAAiQ,OAAAA,EACAjQ,KAAA8N,MAAAA,EAjDV9N,KAAAkxG,gBAGIlxG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOg0E,IACP9zE,EAAAA,YAAW,WACT,OAAOh0B,EAAKonG,cAActD,gBAAgBvlG,KACxCgD,EAAAA,KACE,SAAC4lB,GACC,OAAA,IAAI4gF,GAAyC5gF,MAEjDyG,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIqpG,GAAsCj1E,GAAmBn4B,aAQvEjE,KAAAsxG,SAA6BtxG,KAAKg9B,SAASp1B,KACzCu1B,EAAAA,OAAOo0E,IACP/oF,EAAAA,KAAI,SAACnK,GACChV,EAAK4G,OAAOxI,gBACd4B,EAAK4G,OAAOxI,eAAe6M,QAAQ,WAAY+J,EAAOhR,YAG1DymD,EAAAA,YAAY09C,EAAAA,QAIdxxG,KAAAyxG,kBAEIzxG,KAAK8N,MAAMsC,OAAOsgB,IAAmB9oB,KACvC8pG,EAAAA,YAAY,EAAG,GAGf5kG,EAAAA,QAAO,SAAChI,GAAe,QAAff,EAAAe,EAAA,GAAS,MACjB8F,EAAAA,KACE,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACid,EAAQhd,EAAA,GAAEid,EAAOjd,EAAA,GACjB,OAAA,IAAI4sG,GAAkC,CAAE5vF,SAAQA,EAAEC,QAAOA,8BA5ChE/Z,EAAAA,uDAnBQu1B,EAAAA,eAcAyvE,UADA7lG,SAZAwK,EAAAA,SAqBPxR,EAAA,CADCq9B,EAAAA,iDAsBDr9B,EAAA,CADCq9B,EAAAA,0CAYDr9B,EAAA,CADCq9B,EAAAA,0DCaD,SACUT,EACAyzE,EACAxgG,EACAnC,GAJV,IAAAzE,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EACAzwG,KAAAiQ,OAAAA,EACAjQ,KAAA8N,MAAAA,EAhDV9N,KAAA4xG,eAGI5xG,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO00E,IACPx0E,EAAAA,YAAW,WACT,OAAOh0B,EAAKonG,cAAcvD,eAAetlG,KACvCgD,EAAAA,KACE,SAACqmB,GAAc,OAAA,IAAI6gF,GAAwC7gF,MAE7DgG,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI+pG,GAAqC31E,GAAmBn4B,aAQtEjE,KAAAsxG,SAA6BtxG,KAAKg9B,SAASp1B,KACzCu1B,EAAAA,OAAO60E,IACPxpF,EAAAA,KAAI,SAACnK,GACChV,EAAK4G,OAAOxI,gBACd4B,EAAK4G,OAAOxI,eAAe6M,QAAQ,WAAY+J,EAAOhR,YAG1DymD,EAAAA,YAAY09C,EAAAA,QAIdxxG,KAAAiyG,kBAEIjyG,KAAK8N,MAAMsC,OAAO+gB,IAAmBvpB,KACvC8pG,EAAAA,YAAY,EAAG,GAGf5kG,EAAAA,QAAO,SAAChI,GAAe,QAAff,EAAAe,EAAA,GAAS,MACjB8F,EAAAA,KACE,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACid,EAAQhd,EAAA,GAAEid,EAAOjd,EAAA,GACjB,OAAA,IAAImtG,GAAkC,CAAEnwF,SAAQA,EAAEC,QAAOA,8BA3ChE/Z,EAAAA,uDAnBQu1B,EAAAA,eAcAyvE,UADA7lG,SAZAwK,EAAAA,SAqBPxR,EAAA,CADCq9B,EAAAA,gDAqBDr9B,EAAA,CADCq9B,EAAAA,0CAYDr9B,EAAA,CADCq9B,EAAAA,uDCjDUC,GAAiB,CAC5By0E,GACAC,GACAC,ICHWthD,GAA8B,CACzClyC,SAAU,KACVgR,QAAS,GACTH,WAAY,aAGEtR,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAwkG,IAGQj0F,EAAO/Q,MACb,KAAKilG,GACH,OAAA/yG,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+hB,QAASxR,EAAOhR,UAIpB,KAAKmlG,GAGH,IAAI3iF,EAAU,GAId,OAHI/hB,EAAM+Q,WACRgR,EAAU/hB,EAAM+Q,SAASR,EAAOhR,UAElC7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+hB,QAAOA,EACPH,WAAYrR,EAAOhR,UAIvB,KAAKolG,GACH,IACM5zF,EADoBR,EAAOhR,QACViS,QACrB,SAACozF,EAA2C5gF,SAC1C,OAAAtyB,OAAAqF,OAAArF,OAAAqF,OAAA,GACK6tG,KAAY5tG,EAAA,IACdgtB,EAAK7B,KAAM6B,EAAIhtB,MAEnBtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAKPgR,EAAUhR,EAAS/Q,EAAM4hB,YAE/B,OAAAlwB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+hB,QAAOA,EACPhR,SAAQA,IAKd,OAAO/Q,ECzDF,IAAMijD,GAAgC,CAC3ClyC,SAAU,KACVyR,eAAgB,eAGFlS,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA6kG,IAGQt0F,EAAO/Q,MACb,KAAKslG,GACH,IACM/zF,EADyBR,EAAOhR,QACViS,QAC1B,SAACuzF,EAA+CC,SAC9C,OAAAtzG,OAAAqF,OAAArF,OAAAqF,OAAA,GACKguG,KAAY/tG,EAAA,IACdguG,EAASliF,SAAUkiF,EAAQhuG,MAE/BtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAK0yF,GACH,IAAM3gF,EAAkBvS,EAAOhR,QAE/B,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRwiB,eAAgBM,IAKtB,OAAO9iB,ECxCF,IAAMijD,GAA+B,CAC1ClyC,SAAU,KACViS,eAAgB,eAGF1S,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAilG,IAGQ10F,EAAO/Q,MACb,KAAK0lG,GACH,IACMn0F,EADwBR,EAAOhR,QACViS,QACzB,SAAC2zF,EAA+CC,SAC9C,OAAA1zG,OAAAqF,OAAArF,OAAAqF,OAAA,GACKouG,KAAYnuG,EAAA,IACdouG,EAAStiF,SAAUsiF,EAAQpuG,MAE/BtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAKmzF,GACH,IAAMphF,EAAUvS,EAAOhR,QAEvB,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRgjB,eAAgBF,IAItB,OAAO9iB,WCpCO8vB,KACd,MAAO,CACL3M,UAAWkiF,GACX3iF,WAAY4iF,GACZ7jF,SAAU8jF,QAIDx1E,GAER,IAAI34B,EAAAA,eACP,uBAGW44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aCVE01E,WASd,MAP4B,CAC1BxlG,MAAO,CACLktB,YAAa,CACX3b,MAAIva,EAAA,GAAIA,EAAqB,YAAGqzB,EAAAA,kBAAkBiD,eAAct2B,aAkBxE,kCAXC23B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAE,EAAAA,YAAYC,WAAW/O,GAAsByO,IAC7CO,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CACT51B,EAA4B+sG,IAC5Bx1E,0BClBJ,SAAAy1E,YACSA,EAAAt3E,QAAP,WACE,MAAO,CACLC,SAAUq3E,EACVp3E,UAASj4B,EAAA,CACPqC,EAA4BqnG,IAC5BH,IACG6C,GACAC,GAA0B,CAC7BnP,GAAuBuM,kCAZ9BlxE,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAC/B,GAAaw3E,iBCTTp1F,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAH0B,OAMlBuQ,EAAO/Q,MACb,KAAKmmG,GACH,OAAOp1F,EAAO8H,UAIlB,OAAOrY,WCVOsQ,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAH0B,OAMlBuQ,EAAO/Q,MACb,KAAKomG,GACH,OAAOr1F,EAAOgI,QAIlB,OAAOvY,ECRF,IAAMijD,GAAmC,YAEhC4iD,GACdhsF,EACA7B,EACAsR,GAEA,OAAKzP,EAIEA,EAAS/c,KAAI,SAACid,GAOnB,OANIA,EAAQ/B,eAAiBA,IAC3B+B,EAAOroB,OAAAqF,OAAArF,OAAAqF,OAAA,GACFgjB,GAAO,CACVkC,aAAcqN,KAGXvP,KAVA,YAcKzJ,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA8lG,IAGQv1F,EAAO/Q,MACb,KAAKumG,GACH,OAAOF,GACL7lG,EACAuQ,EAAOyH,aACP5L,EAAAA,yBAAyB8P,OAI7B,KAAK8pF,GACH,OAAOH,GACL7lG,EACAuQ,EAAOyH,aACP5L,EAAAA,yBAAyBmQ,WAI7B,KAAK0pF,GACH,OAAO11F,EAAOhR,QAIlB,OAAOS,WClCO8vB,KACd,MAAO,CACLpX,UAAWrI,GAAiCoG,IAC5CoD,SAAUqsF,GACV1sF,GAAI2sF,EAAAA,gBAAgB,CAClB1sF,gBAAiB2sF,GACjB7tF,QAAS8tF,UAKFt2E,GAER,IAAI34B,EAAAA,eACP,6BAGW44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aAGEw2E,GACdh2F,GAEA,OAAO,SAAUtQ,EAAOuQ,GAUtB,OAREA,EAAO/Q,OAAS+iD,IAChBhyC,EAAO/Q,OAAS8iD,KAEhBtiD,EAAKtO,OAAAqF,OAAArF,OAAAqF,OAAA,GACAiJ,GAAK,CACR0Y,eAAWjf,KAGR6W,EAAQtQ,EAAOuQ,QAIbg2F,GAAmC,CAC9CD,kBClCA,SAAAE,EACYl6E,EACApqB,EACAogF,GAFApwF,KAAAo6B,wBAAAA,EACAp6B,KAAAgQ,MAAAA,EACAhQ,KAAAowF,yBAAAA,EALFpwF,KAAAq6B,aAAe,IAAIN,EAAAA,aAWnB/5B,KAAAO,IAAM,4BAKT+zG,EAAAp0G,UAAAo6B,SAAA,WAAA,IAAAjxB,EAAArJ,KACLA,KAAKq6B,aAAarnB,IAChBhT,KAAKo6B,wBAAwBV,gBAAgB,CAC3Cn5B,IAAKP,KAAKO,IACVo5B,OAAQ35B,KAAKu6B,eACbV,OAAQ,SAAC/rB,GAAU,OAAAzE,EAAKwwB,OAAO/rB,QAS3BwmG,EAAAp0G,UAAAq6B,aAAA,WACR,OAAOv6B,KAAKgQ,MAAMI,OAAOmW,KAOjB+tF,EAAAp0G,UAAA25B,OAAA,SAAO/rB,GACf,IAAM0Y,EAAY1Y,MAAAA,OAAK,EAALA,EAAO0Y,UACnBmB,EAAW7Z,MAAAA,OAAK,EAALA,EAAO6Z,SAClBL,EAAKxZ,MAAAA,OAAK,EAALA,EAAOwZ,IAGdd,MAAAA,OAAS,EAATA,EAAWzJ,UACb/c,KAAKgQ,MAAMU,SACT,IAAI4U,GAAqCkB,EAAU7kB,QAKnDgmB,GACF3nB,KAAKowF,yBAAyBhnE,YAAYzB,GAIxCL,IACFtnB,KAAKowF,yBAAyB9lE,sBAAsBhD,MAAAA,OAAE,EAAFA,EAAIC,iBACxDvnB,KAAKowF,yBAAyB5lE,uBAAuBlD,MAAAA,OAAE,EAAFA,EAAIjB,WAI7DiuF,EAAAp0G,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,6BC7ENogG,GACdC,GAGA,OADe,WAAM,OAAAA,EAAyCl6E,kLDO/DryB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAlBLs0B,UAFA7nB,EAAAA,aAGAkW,aCgCT,kCAnBC2U,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAhC,GACAkC,EAAAA,YAAYC,WAAW7Z,GAAkCuZ,GAAc,CACrEw2E,aAAYA,KAEdj2E,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CACT2B,GACA,CACE/3B,QAAS49B,EAAAA,gBACTt9B,WAAYkuG,GACZnuG,KAAM,CAACkuG,IACPruG,OAAO,0BCtBb,SAAAwuG,YACSA,EAAAx4E,QAAP,WACE,MAAO,CACLC,SAAUu4E,EACVt4E,UAASj4B,EACJyzB,GAAY,CACf7P,GACAxhB,EAAqBE,iCAV5Bi2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAC22E,YCAAC,GCNCC,GAA8B,CACzCC,IAAK,CACHC,kBAAmB,CACjBC,uBAAwB,KAE1B7qE,eAAgB,CACd8qE,WAAY,oBCkBhB,SAAAC,EACYjlG,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAMZ66F,EAAA/0G,UAAAmL,IAAA,WAAA,IAAAhC,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO8kG,IACP1sF,EAAAA,KAAI,SAACqH,GACiC,IAAhCrwB,OAAO6f,KAAKwQ,GAASlvB,QACvB0I,EAAKuT,YASbq4F,EAAA/0G,UAAA0c,KAAA,WAAA,IAAAvT,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,IAAW5Q,GACboC,EAAK2G,MAAMU,SAAS,IAAIykG,GAA4Bt9F,QAU1Do9F,EAAA/0G,UAAAmlC,SAAA,SAAS+vE,GACPp1G,KAAKgQ,MAAMU,SAAS,IAAI2kG,GAAyBD,KASnDH,EAAA/0G,UAAAq1F,cAAA,SAAcjwC,EAAcxtC,GAC1B9X,KAAKgQ,MAAMU,SAAS,IAAI4kG,GAA0B,CAAEhwD,KAAIA,EAAExtC,SAAQA,MAMpEm9F,EAAA/0G,UAAAq1G,6BAAA,WACE,OAAOv1G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyB/B,OAOpCu8C,EAAA/0G,UAAAs1G,6BAAA,WACE,OAAOx1G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBhC,OAOpCu8C,EAAA/0G,UAAAu1G,2BAAA,WACE,OAAOz1G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBjC,OAOlCu8C,EAAA/0G,UAAAw1G,8BAAA,WACE,OAAO11G,KAAKgQ,MAAMU,SAAS,IAAIilG,KAMjCV,EAAA/0G,UAAAgiC,OAAA,WAAA,IAAA74B,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SAAS,IAAIklG,GAAuB/9F,QAOnDo9F,EAAA/0G,UAAA21G,2BAAA,WACE,OAAO71G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyB9B,OAOpCs8C,EAAA/0G,UAAA41G,yBAAA,WACE,OAAO91G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBhC,OAOlCs8C,EAAA/0G,UAAA61G,2BAAA,WACE,OAAO/1G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyB/B,OAQpCs8C,EAAA/0G,UAAA81G,4BAAA,WACEh2G,KAAKgQ,MAAMU,SAAS,IAAIulG,KAM1BhB,EAAA/0G,UAAAg2G,UAAA,WAAA,IAAA7sG,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO+lG,IACP3tF,EAAAA,KAAI,SAAC2tE,GACgC,IAA/B32F,OAAO6f,KAAK82E,GAAQx1F,QACtB0I,EAAK4sF,kBASbgf,EAAA/0G,UAAA+1F,WAAA,WACEj2F,KAAKgQ,MAAMU,SAAS,IAAI0lG,KAM1BnB,EAAA/0G,UAAAm2G,gBAAA,WACE,OAAOr2G,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOkmG,MAOhCrB,EAAA/0G,UAAAq2G,sBAAA,SAAsBC,GAAtB,IAAAntG,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI+lG,GAA8B,CAChCC,SAAU7+F,EACV2+F,YAAWA,SASnBvB,EAAA/0G,UAAAy2G,sCAAA,WACE,OAAO32G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBhC,OAOpCw8C,EAAA/0G,UAAA02G,oCAAA,WACE,OAAO52G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBlC,OAOlCw8C,EAAA/0G,UAAA22G,sCAAA,WACE,OAAO72G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBjC,OAOpCw8C,EAAA/0G,UAAA42G,0CAAA,WACE92G,KAAKgQ,MAAMU,SAAS,IAAIqmG,KAQ1B9B,EAAA/0G,UAAAw1F,cAAA,SAAc1hF,EAAe8D,GAC3B9X,KAAKgQ,MAAMU,SAAS,IAAIsmG,GAA0B,CAAEhjG,MAAKA,EAAE8D,SAAQA,MAMrEm9F,EAAA/0G,UAAAs1F,2BAAA,SAA2BC,GACzBz1F,KAAKgQ,MAAMU,SACT,IAAIumG,GAAuCxhB,KAO/Cwf,EAAA/0G,UAAA01F,YAAA,SAAY99E,EAAkB0uD,GAA9B,IAAAn9D,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIwmG,GAA8B,CAChCjnF,IAAKpY,EACLC,SAAQA,EACR0uD,OAAMA,SASdyuC,EAAA/0G,UAAAi3G,4BAAA,WACE,OAAOn3G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBnC,OAOpC08C,EAAA/0G,UAAAk3G,0BAAA,WACE,OAAOp3G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBpC,OAOlC08C,EAAA/0G,UAAAm3G,4BAAA,WACE,OAAOr3G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBlC,OAOpC08C,EAAA/0G,UAAAo3G,4BAAA,WACEt3G,KAAKgQ,MAAMU,SAAS,IAAI6mG,KAQ1BtC,EAAA/0G,UAAA61F,eAAA,SAAeC,EAAqBL,GAApC,IAAAtsF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI8mG,GAA2B,CAC7B3/F,OAAMA,EACNm+E,YAAWA,EACXL,YAAWA,SASnBsf,EAAA/0G,UAAAu3G,+BAAA,WACE,OAAOz3G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBjC,OAOpCy8C,EAAA/0G,UAAAw3G,6BAAA,WACE,OAAO13G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBnC,OAOlCy8C,EAAA/0G,UAAAy3G,+BAAA,WACE,OAAO33G,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBlC,OAQpCy8C,EAAA/0G,UAAA03G,gCAAA,WACE53G,KAAKgQ,MAAMU,SAAS,IAAImnG,iKAlU3B5vG,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAvBTyM,EAAAA,aAGRqH,OFIG07F,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,QAAA,UACAA,GAAA,KAAA,0BASF,SAAAmD,IAAA,IAAAzuG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIYqJ,EAAA0uG,cAAyC,IAAIhmG,EAAAA,gBAErD4iG,EAAAA,YAAYqD,eAH2Bl4G,EAAAg4G,EAAAxkG,GAmBzCwkG,EAAA53G,UAAA+3G,eAAA,WACE,OAAOj4G,KAAK+3G,eAQdD,EAAA53G,UAAAg4G,eAAA,SAAeC,GACZn4G,KAAK+3G,cAA+Cl2G,KAAKs2G,IAQ5DL,EAAA53G,UAAAk4G,qBAAA,WACE,OAAOp4G,KAAKq4G,mBAQdP,EAAA53G,UAAAo4G,qBAAA,SAAqBtkG,GACnBhU,KAAKq4G,kBAAoBrkG,GAM3B8jG,EAAA53G,UAAAq4G,2BAAA,WACGv4G,KAAK+3G,cAA+Cl2G,KACnD8yG,EAAAA,YAAY6D,UAOhBV,EAAA53G,UAAAu4G,wBAAA,WACGz4G,KAAK+3G,cAA+Cl2G,KAAK8yG,EAAAA,YAAYqD,OAOxEF,EAAA53G,UAAAw4G,uBAAA,WACE14G,KAAKq4G,uBAAoB9wG,MAvEc8L,uHAH1CpL,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,WGjBP,IAAMwzG,GAAgB,kBAE7BC,GAEE,SAAmBvrG,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOqrG,ICHLE,GAAc,MACdC,GAAuB,6BCGvBC,GAAkB,wBAClBC,GAAuB,6BACvBC,GAA0B,gCAC1BC,GAAwB,8BAErCC,GAAA,SAAA7lG,GAEE,SAAA6lG,EAAmB9rG,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM84G,KAAqB94G,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOyrG,YADkBj5G,EAAAq5G,EAAA7lG,KAApC,CAAoC+R,IAOpC+zF,GAAA,SAAA9lG,GAEE,SAAA8lG,EAAmB/rG,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM84G,KAAqB94G,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO0rG,YADsBl5G,EAAAs5G,EAAA9lG,KAAxC,CAAwCmS,IAOxC4zF,GAAA,SAAA/lG,GAEE,SAAA+lG,EAAmBhsG,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAM84G,KAAqB94G,YADVqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO2rG,YADyBn5G,EAAAu5G,EAAA/lG,KAA3C,CAA2CiS,IAO3C+zF,GAAA,SAAAhmG,GAEE,SAAAgmG,IAAA,IAAAjwG,EACEiK,EAAA9P,KAAAxD,KAAM84G,KAAqB94G,YAFpBqJ,EAAAiE,KAAO4rG,YADuBp5G,EAAAw5G,EAAAhmG,KAAzC,CAAyCqS,IC/B5B4zF,GACX,uCAKFC,GAAA,WACWx5G,KAAAsN,KAAOisG,2UCmBhB,SAAAE,EACY1xF,EACAzN,EACAF,EACAC,EACArK,EACA0pG,GALA15G,KAAA+nB,YAAAA,EACA/nB,KAAAsa,mBAAAA,EACAta,KAAAoa,cAAAA,EACApa,KAAAqa,uBAAAA,EACAra,KAAAgQ,MAAAA,EACAhQ,KAAA05G,YAAAA,SAQND,EAAAv5G,UAAAy5G,8BAAA,SACJ9hG,EACAC,qGAGA9X,KAAKsa,mBACFxG,WACArB,WAAU,SAACuB,GAAU,OAACgH,EAAYhH,KAClCG,cAEHnU,KAAKsa,mBAAmBi+F,8CAEtB,6BAAA,CAAA,EAAMv4G,KAAKqa,uBAAuBzC,0BAChCC,EACAC,kBAFF/S,EAAAnC,OAMA5C,KAAK05G,YACFruG,MACAoH,WAAU,SAACgjD,GAAS,OAACmkD,EAAankD,MAAAA,OAAI,EAAJA,EAAM7P,cACxCzxC,cACHnU,KAAKgQ,MAAMU,SAAS,IAAIoK,IAEpB9O,QAAQ4tG,IAEV55G,KAAKoa,cAAchB,UAAUwgG,GAC7B55G,KAAKsa,mBAAmBg+F,qBAAqBt9F,GAC7Chb,KAAKgQ,MAAMU,SAAS,IAAIgK,MAGxB1a,KAAKoa,cAAchB,UAAUnS,GAC7BjH,KAAKsa,mBAAmBo+F,uDAG1B14G,KAAKsa,mBAAmBm+F,yDASrBgB,EAAAv5G,UAAA25G,8BAAA,SAA8Bj0D,GACnC5lD,KAAKsa,mBAAmBo+F,yBAGxB14G,KAAKgQ,MAAMU,SAAS,IAAIoK,IACxB9a,KAAKoa,cAAchB,UAAUwsC,GAC7B5lD,KAAKgQ,MAAMU,SAAS,IAAIgK,KAQnB++F,EAAAv5G,UAAA45G,+BAAA,WACL,OAAO/uF,EAAAA,cAAc,CACnB/qB,KAAKsa,mBAAmBxG,WACxB9T,KAAKsa,mBAAmB29F,mBACvBrwG,KACDgD,EAAAA,KAAI,SAAC7F,OAAAC,EAAAjB,EAAAgB,EAAA,GAACiP,EAAKhP,EAAA,GAAEmzG,EAAWnzG,EAAA,GACtB,OAAAgH,SAAQgI,MAAAA,OAAK,EAALA,EAAOiH,eAAgBk9F,IAAgBxD,EAAAA,YAAY6D,cAU1DiB,EAAAv5G,UAAA65G,mBAAA,WACL,OAAO/5G,KAAKoa,cAAcR,cAMrB6/F,EAAAv5G,UAAA85G,oCAAA,WAEL,OAAOhyG,EAAAA,IAAG,IAMNyxG,EAAAv5G,UAAA+5G,2BAAA,6GASJ,OARMC,EAAgBl6G,KAAKsa,mBAAmB89F,uBAG9Cp4G,KAAKoa,cACFR,aACAnH,WAAU,SAAC0nG,GAAa,OAACJ,EAAqBI,KAC9ChmG,cAEH,CAAA,EAAMnU,KAAKqa,uBAAuBpC,iCAAlClT,EAAAnC,OAEA5C,KAAKgQ,MAAMU,SAAS,IAAI0pG,IACxBp6G,KAAKsa,mBAAmB49F,eAAevD,EAAAA,YAAYqD,MAE/C+B,GAAsBG,GACxBl6G,KAAKgQ,MAAMU,SAAS,IAAIoK,IACxB9a,KAAKsa,mBAAmBvG,SAASmmG,GACjCl6G,KAAKoa,cAAchB,UAAUpS,GAC7BhH,KAAKsa,mBAAmBo+F,yBACxB14G,KAAKgQ,MAAMU,SAAS,IAAIgK,KAExB1a,KAAK+nB,YAAYzP,6OAhItBrQ,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDArBLgV,UAUP29F,UATO7+F,UACAnC,UALAlF,EAAAA,aAWAqjG,yBCaP,SAAAoF,EACYtyF,EACAzN,EACAggG,EACAjgG,EACAG,EACA+nB,EACAyH,GAPZ,IAAA3gC,EASEiK,EAAA9P,KAAAxD,KACE+nB,EACAzN,EACAD,EACAG,EACAwvB,EACAzH,IACDviC,YAfSqJ,EAAA0e,YAAAA,EACA1e,EAAAiR,mBAAAA,EACAjR,EAAAixG,mBAAAA,EACAjxG,EAAAgR,uBAAAA,EACAhR,EAAAmR,eAAAA,EACAnR,EAAAk5B,qBAAAA,EACAl5B,EAAA2gC,oBAAAA,WARgClqC,EAAAu6G,EAAA/mG,GAyBrC+mG,EAAAn6G,UAAAsiC,iBAAA,SAAiB7N,GACtB,OACErhB,EAAApT,UAAMsiC,iBAAgBh/B,KAAAxD,KAAC20B,IAAY30B,KAAKu6G,sBAAsB5lF,IAU3D0lF,EAAAn6G,UAAAwiC,aAAA,SAAa/N,GAClB,IAAMgO,IAA2B3iC,KAAK4iC,uBAAuBjO,GACvD6lF,EAAmBx6G,KAAKu6G,sBAAsB5lF,GAEhD8lF,EAAMnnG,EAAApT,UAAMwiC,aAAYl/B,KAAAxD,KAAC20B,GAE7B,OAAKgO,GAA0B63E,GAC7BC,EAAM9lF,EAAQE,MAAM,CAClB4B,WAAUj3B,OAAAqF,OAAA,GACL7E,KAAK6iC,+BAGL1O,GAAgBO,aACrBR,GACAumF,IAGGA,GAGCJ,EAAAn6G,UAAAq6G,sBAAA,SAAsB5lF,GAC9B,IAAM+lF,EAA4BvmF,GAAgBW,oBAChDZ,GACAS,EAAQJ,SAEV,OAAOvoB,QAAQ0uG,IASVL,EAAAn6G,UAAA+iC,0BAAA,WAAA,IAAA55B,EAAArJ,KACLA,KAAKs6G,mBACFR,iCACAlyG,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAACkoG,GACNA,GACFtxG,EAAKixG,mBAAmBL,6BACxB5wG,EAAKk5B,qBAAqBvvB,IACxB,CACEzS,IAAK,2BAEPigC,EAAAA,kBAAkB0C,iBAGpB5vB,EAAApT,UAAM+iC,0BAAyBz/B,KAAA6F,UArFKi5B,iOAH7Cr6B,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAnBLgV,UAEA9G,UAUAomG,UATA3iG,UAQA/G,UAPA6xB,UAEAnP,UCTGmoF,MCYZ,uIAJC3yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,MDVf,SAAY21G,GACVA,EAAAA,EAAA,SAAA,GAAA,UACAA,EAAAA,EAAA,YAAA,KAAA,cACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,SAAA,KAAA,WACAA,EAAAA,EAAA,YAAA,KAAA,cACAA,EAAAA,EAAA,gBAAA,KAAA,kBACAA,EAAAA,EAAA,sBAAA,KAAA,wBATF,CAAYA,KAAAA,GAAkB,uBES5B,SAAAC,EAAsBt4E,GAAAviC,KAAAuiC,qBAAAA,SAuBtBs4E,EAAA36G,UAAA02C,SAAA,SAASkkE,GACP,OAAOA,EAAc1jF,SAAWp3B,KAAK+6G,wJA5BxC9yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALLy8B,yBCKT,SAAAo5E,IAAA,IAAA3xG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmBK,qBADCn7G,EAAAk7G,EAAA1nG,GAGrC0nG,EAAA96G,UAAAg7G,YAAA,WACEl7G,KAAKuiC,qBAAqBvvB,IACxB,CAAEzS,IAAK,2BACPigC,EAAAA,kBAAkB0C,iBAItB83E,EAAA96G,UAAA22C,YAAA,WACE,OAAA,OAXmCgkE,uIAHtC5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,WCEd,mBAEA,SAAAg2G,IAAA,IAAA9xG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmBQ,qBADCt7G,EAAAq7G,EAAA7nG,GAGrC6nG,EAAAj7G,UAAAg7G,YAAA,SAAYvmF,EAA2B6f,GACrCx0C,KAAKq7G,kBAAkB1mF,EAAS6f,GAChCx0C,KAAKs7G,uBAAuB3mF,EAAS6f,GACrCx0C,KAAKu7G,qBAAqB5mF,EAAS6f,GACnCx0C,KAAKw7G,sBAAsB7mF,EAAS6f,GACpCx0C,KAAKy7G,4BAA4B9mF,EAAS6f,IAGlC2mE,EAAAj7G,UAAAm7G,kBAAA,SACR1mF,EACA6f,cAGc,QAAZ1vC,EAAA0vC,EAASnqC,WAAG,IAAAvF,OAAA,EAAAA,EAAEuM,SArBG,sCAsBS,mBAAZ,QAAdtM,EAAAyvC,EAASvwC,aAAK,IAAAc,OAAA,EAAAA,EAAEd,QACoB,cAAxB,QAAZe,EAAA2vB,EAAQtyB,YAAI,IAAA2C,OAAA,EAAAA,EAAEqG,IAAI,iBAElBrL,KAAKuiC,qBAAqBvvB,IACxB,CACEzS,IAAK,0CACL6L,OAAQ,CACNsvG,aACElnE,EAASvwC,MAAMu4B,mBAAqBgY,EAASlY,SAAW,KAG9DkE,EAAAA,kBAAkB0C,gBAEpBljC,KAAKuiC,qBAAqBL,OAAO1B,EAAAA,kBAAkBm7E,yBAI7CR,EAAAj7G,UAAAo7G,uBAAA,SACRM,EACApnE,GAFQ,IAAAnrC,EAAArJ,KAIRA,KAAK67G,UAAUrnE,GACZ1nC,QAAO,SAAC7I,GAAU,MAAe,0BAAfA,EAAMqJ,QACxB/D,SAAQ,WACPF,EAAKk5B,qBAAqBvvB,IACxB,CAAEzS,IAAK,+CACPigC,EAAAA,kBAAkB0C,oBAKhBi4E,EAAAj7G,UAAAs7G,sBAAA,SACRI,EACApnE,GAFQ,IAAAnrC,EAAArJ,KAIRA,KAAK67G,UAAUrnE,GACZ1nC,QAAO,SAAChL,GAAM,MAAW,oBAAXA,EAAEwL,QAChB/D,SAAQ,SAACtF,GACRoF,EAAKk5B,qBAAqBvvB,IACxB,CACEzS,IAAK,iCAAiC0D,EAAMuhD,OAAM,IAAIvhD,EAAMyhD,SAE9DllB,EAAAA,kBAAkB0C,oBAKhBi4E,EAAAj7G,UAAAq7G,qBAAA,SACRK,EACApnE,GAFQ,IAAAnrC,EAAArJ,KAIRA,KAAK67G,UAAUrnE,GACZ1nC,QAAO,SAAChL,GAAM,OAAAyjD,GAAoBzjD,MAClCyH,SAAQ,WACPF,EAAKk5B,qBAAqBvvB,IACxB,CAAEzS,IAAK,6BACPigC,EAAAA,kBAAkB0C,oBAKhBi4E,EAAAj7G,UAAAu7G,4BAAA,SACRG,EACApnE,GAFQ,IAAAnrC,EAAArJ,KAIRA,KAAK67G,UAAUrnE,GACZ1nC,QACC,SAAChL,GACC,MAAc,iCAAdA,EAAEw6B,SACS,0BAAXx6B,EAAEwL,QAEL/D,SAAQ,WACPF,EAAKk5B,qBAAqBvvB,IACxB,CAAEzS,IAAK,oCACPigC,EAAAA,kBAAkB0C,oBAKhBi4E,EAAAj7G,UAAA27G,UAAA,SAAUrnE,SAClB,QAAsB,QAAd1vC,EAAA0vC,EAASvwC,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,SAAU,IAAI3qB,QACpC,SAAC7I,GAAU,MAAe,iCAAfA,EAAMqJ,SAIrB6tG,EAAAj7G,UAAA22C,YAAA,WACE,OAAA,OAvGmCgkE,uIAHtC5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BCNd,SAAA22G,IAAA,IAAAzyG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmBmB,kBADDj8G,EAAAg8G,EAAAxoG,GAGnCwoG,EAAA57G,UAAAg7G,YAAA,WACEl7G,KAAKuiC,qBAAqBvvB,IACxB,CAAEzS,IAAK,yBACPigC,EAAAA,kBAAkB0C,iBAItB44E,EAAA57G,UAAA22C,YAAA,WACE,OAAA,OAXiCgkE,uIAHpC5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BC0BZ,SAAA62G,EACYz5E,EACAxa,EACA+O,GAHZ,IAAAztB,EAKEiK,EAAA9P,KAAAxD,KAAMuiC,IAAqBviC,YAJjBqJ,EAAAk5B,qBAAAA,EACAl5B,EAAA0e,YAAAA,EACA1e,EAAAytB,aAAAA,EAvBZztB,EAAA0xG,eAAiBH,GAAmBqB,mBADAn8G,EAAAk8G,EAAA1oG,GAGpC0oG,EAAA97G,UAAAg7G,YAAA,SAAYvmF,GAERA,EAAQtqB,IAAI2oB,SACVhzB,KAAK82B,aAAa3D,OAAO,OAAQ,CAAEtb,OAAQ,cAG7C7X,KAAK+nB,YAAYzP,SAEnBtY,KAAKuiC,qBAAqBvvB,IACxB,CAAEzS,IAAK,0BACPigC,EAAAA,kBAAkB0C,iBAItB84E,EAAA97G,UAAA22C,YAAA,WACE,OAAA,OAlBkCgkE,qKAHrC5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDANLy8B,UAHAznB,UACAsY,yBCIT,SAAAypF,IAAA,IAAA7yG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmBuB,yBADKr8G,EAAAo8G,EAAA5oG,GAGzC4oG,EAAAh8G,UAAAg7G,YAAA,WACEl7G,KAAKuiC,qBAAqBvvB,IACxB,CAAEzS,IAAK,+BACPigC,EAAAA,kBAAkB0C,iBAItBg5E,EAAAh8G,UAAA22C,YAAA,WACE,OAAA,OAXuCgkE,uIAH1C5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BCDd,SAAAi3G,IAAA,IAAA/yG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmByB,+BADUv8G,EAAAs8G,EAAA9oG,GAG9C8oG,EAAAl8G,UAAAg7G,YAAA,WACEl7G,KAAKuiC,qBAAqBvvB,IACxB,CAAEzS,IAAK,oCACPigC,EAAAA,kBAAkB0C,iBAItBk5E,EAAAl8G,UAAA22C,YAAA,WACE,OAAA,OAX4CgkE,uIAH/C5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BCFd,SAAAm3G,IAAA,IAAAjzG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmB2B,mBADDz8G,EAAAw8G,EAAAhpG,GAInCgpG,EAAAp8G,UAAAg7G,YAAA,aAEAoB,EAAAp8G,UAAA22C,YAAA,WACE,OAAA,OAPiCgkE,uIAHpC5yG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BCGd,SAAAq3G,IAAA,IAAAnzG,EAAAiK,EAAAnR,MAAAnC,KAAAkE,EAAAxD,aAAAV,YAIEqJ,EAAA0xG,eAAiBH,GAAmB6B,iBADG38G,EAAA08G,EAAAlpG,GAMvCkpG,EAAAt8G,UAAA02C,SAAA,SAAS8lE,GACP,OAAO,GAGTF,EAAAt8G,UAAAg7G,YAAA,WACMryG,EAAAA,aACFC,QAAQF,KAAK,gCAAgC5I,KAAK+6G,iBAOtDyB,EAAAt8G,UAAA22C,YAAA,WACE,OAAA,OApBqCgkE,aC4CzB8B,GACdC,EACAC,EACAC,QADA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,IAEA,IAAMC,GAAsBH,MAAAA,EAAAA,EAAe,IAAI9vG,QAC7C,SAACkwG,GAAe,OAACA,EAAWpmE,UAAYomE,EAAWpmE,SAAQz0C,MAAnB66G,EAAU94G,EAAa24G,OAGjE,GAAIE,EAAmBp8G,OAAS,EAC9B,OAAOo8G,EAAmB,GAG5B,IAAIE,GAAgBC,EAAAA,EACpB,OAAOH,EAAmBz9F,QAAO,SAACC,EAAK0wE,GACrC,IAAMktB,EAAeltB,EAAKp5C,YACtBo5C,EAAKp5C,YAAW10C,MAAhB8tF,EAAI/rF,EAAgB44G,IAAc,EAEtC,OAAIG,EAAeE,EACV59F,GAET09F,EAAeE,EACRltB,UACN1oF,sIDtEJU,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,6BEKZ,SAAAi4G,EACsCC,GAAAr9G,KAAAq9G,SAAAA,SAGtCD,EAAAl9G,UAAA62B,UAAA,SACEpC,EACA9yB,GAFF,IAAAwH,EAAArJ,KAIE,OAAO6B,EAAK00B,OAAO5B,GAAS/sB,KAC1BqvB,EAAAA,YAAW,SAACud,GACV,GAAIA,aAAoBrd,EAAAA,kBAEtB,OADA9tB,EAAKi0G,oBAAoB3oF,EAAS6f,GAC3Bld,EAAAA,WAAWkd,QAMhB4oE,EAAAl9G,UAAAo9G,oBAAA,SACR3oF,EACA6f,GAEA,IAAM+oE,EAAUv9G,KAAKw9G,mBAAmBhpE,GACpC+oE,GACFA,EAAQrC,YAAYvmF,EAAS6f,IAQvB4oE,EAAAl9G,UAAAs9G,mBAAA,SAAmBhpE,GAC3B,OAAOmoE,GAAkB38G,KAAKq9G,SAAU,CAAC7oE,6IAnC5CvsC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,6EAGrBgD,EAAAA,OAAMD,KAAA,CAAC2yG,aCDC4C,GAA4B,CACvC,CACE13G,QAAS80G,GACTxyG,YAAam0G,GACbv2G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAa2yG,GACb/0G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAa8yG,GACbl1G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAayzG,GACb71G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAa2zG,GACb/1G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAa6zG,GACbj2G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAa+zG,GACbn2G,OAAO,GAET,CACEF,QAAS80G,GACTxyG,YAAai0G,GACbr2G,OAAO,IAIEy3G,GAAoC,CAC/C,CACE33G,QAAS6xB,EAAAA,kBACTvvB,YAAa+0G,GACbn3G,OAAO,ICtDE8qD,GAAmC,CAC9ClyC,SAAU,aAGIT,GACdtQ,EACAuQ,eAEA,YAHA,IAAAvQ,IAAAA,EAAA6vG,IAGQt/F,EAAO/Q,MACb,KAAKswG,GACH,IAAMthF,EAAyBje,EAAOhR,QAEtC,QAAqC9F,IAAjCuG,EAAM+Q,SAASyd,EAAQhvB,MACzB,OAAA9N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GACHiJ,EAAM+Q,WAAQ/Z,EAAA,GACjBA,EAACw3B,EAAQhvB,MAAO,CAACgvB,EAAQwF,MAAKh9B,MAIlC,IAAM+4G,EAAkC/vG,EAAM+Q,SAASyd,EAAQhvB,MAC/D,OAAA9N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GACHiJ,EAAM+Q,WAAQ9Z,EAAA,GACjBA,EAACu3B,EAAQhvB,MAAIpJ,EAAO25G,EAAe,CAAEvhF,EAAQwF,OAAK/8B,MAM1D,KAAK+4G,GACH,IAAMC,EAA6B1/F,EAAOhR,QAAQC,KAC5C0wG,EAAmB3/F,EAAOhR,QAAQ80B,MACxC,GACyC,IAAvC3iC,OAAO6f,KAAKvR,EAAM+Q,UAAUle,SAC3BmN,EAAM+Q,SAASk/F,GAEhB,OAAOjwG,EAGT,IAAMmwG,EAAQ/5G,EAAO4J,EAAM+Q,SAASk/F,IAGpC,OAFAE,EAASz+E,OAAOw+E,EAAU,GAE1Bx+G,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GACHiJ,EAAM+Q,WAAQ7Z,EAAA,GACjBA,EAAC+4G,GAAUE,EAAQj5G,MAKzB,KAAKk5G,GACH,IAAMr/F,EAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GACTiJ,EAAM+Q,YAAQlH,EAAA,IAChB0G,EAAOhR,SAAU,GAAEsK,IAEtB,OAAAnY,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAKd,OAAO/Q,WCrEO8vB,KACd,OAAOugF,OAGItgF,GAER,IAAI34B,EAAAA,eACP,yBAGW44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,OCHd,sBCUgBwgF,GAAiBC,EAAcC,GAC7C,GAAID,IAASC,EACX,OAAO,EACF,GAAMD,aAAgB7+G,QAAa8+G,aAAgB9+G,OAEnD,CAAA,GAAI6+G,EAAKp+G,cAAgBq+G,EAAKr+G,YAGnC,OAAO,EAEP,IAAK,IAAMM,KAAO89G,EAChB,GAAKA,EAAKx+G,eAAeU,GAAzB,CAGA,IAAK+9G,EAAKz+G,eAAeU,GACvB,OAAO,EAET,GAAI89G,EAAK99G,KAAS+9G,EAAK/9G,GAAvB,CAGA,GAAyB,iBAAd89G,EAAK99G,GACd,OAAO,EAET,IAAK69G,GAAiBC,EAAK99G,GAAM+9G,EAAK/9G,IACpC,OAAO,GAGX,IAAK,IAAMA,KAAO+9G,EAChB,GAAIA,EAAKz+G,eAAeU,KAAS89G,EAAKx+G,eAAeU,GACnD,OAAO,EAGX,OAAO,EA5BP,OAAO,WAyCKg+G,GACdC,EACAC,GAEA,IAAK,IAAIt8E,EAAQ,EAAGA,EAAQs8E,EAAI99G,OAAQwhC,IACtC,GAAIi8E,GAAiBK,EAAIt8E,GAAQq8E,GAC/B,OAAOr8E,uBDpEZ1F,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACP/B,GACAkC,EAAAA,YAAYC,WAAWmD,GAAwBzD,KAEjD1B,UAAW,CAAC2B,eEkFZ,SACUd,EACAhtB,EACAnK,EACqBoR,GAJ/B,IAAA5N,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAgQ,MAAAA,EACAhQ,KAAA6F,OAAAA,EACqB7F,KAAAiX,WAAAA,EArE/BjX,KAAA0+G,kBAEI1+G,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOygF,IACP5wE,EAAAA,MAAM,WACNvjB,EAAAA,WAAU,SAAC6S,GACT,OAAAt0B,EAAAA,GAAGs0B,EAAQwF,MAAMl6B,KACf0gB,EAAAA,eACEjf,EAAK2G,MAAMpI,KACTwI,EAAAA,OACEuuG,GACEriF,EAAQhvB,SAKhBR,EAAAA,QACE,SAAChI,ODc6B05G,ECd7Bz5G,EAAAhB,EAAAe,EAAA,GAACg9B,EAAI/8B,EAAA,GAAEk5G,EAAQl5G,EAAA,GACd,ODa4By5G,ECbJ18E,EAAMm8E,EDc7B3+F,QAAO,SAACC,EAAK0wE,GAItB,OAHImuB,GAAiBI,EAAKvuB,IACxB1wE,IAEKA,IACN,GCnBiD,KAE9C3U,EAAAA,KACE,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACg9B,EAAI/8B,EAAA,GAAEk5G,EAAQl5G,EAAA,GACd,OAAA,IAAIq9B,GAAmC,CACrC90B,KAAMgvB,EAAQhvB,KACd60B,MAAOo8E,GAAuBz8E,EAAMm8E,aAQhDj+G,KAAA4+G,gBAEI3jF,EAAAA,kBAAkBj7B,KAAKiX,YACvBjX,KAAKg9B,SAASp1B,KACZu1B,EAAAA,OAAOygF,IACP5wE,EAAAA,MAAM,WACNmlC,EAAAA,WAAU,SAAC71C,GACT,IAAMz2B,EAASwD,EAAKxD,OAAOg5G,eAAeviF,EAAQhvB,MAClD,OAAOjE,EAAK2G,MAAMpI,KAChBwI,EAAAA,OACE0uG,GAAmDxiF,EAAQhvB,OAE7DkF,EAAAA,KAAK,GACL1F,EAAAA,QACE,SAACupD,GACC,OAAExwD,QAA6B0B,IAAnB1B,EAAOk8B,SAA0BzF,EAAQyF,UACrDs0B,GACAA,EAAQ,KAEZ0oD,EAAAA,MAAMziF,EAAQyF,SAAWl8B,EAAOk8B,SAChCtY,EAAAA,WAAU,WACR,OAAAzhB,EAAAA,GACE,IAAIo6B,GAAmC,CACrC90B,KAAMgvB,EAAQhvB,KACd60B,MAAO,aAOnB6lB,EAAAA,gBCzFUg3D,WACd,MAAO,CACLH,gBAAc/5G,EAAA,GACZA,EAAC07B,EAAAA,kBAAkBm7E,uBAAwB,CACzC55E,QAAS,KAEXj9B,EAAC07B,EAAAA,kBAAkBy+E,eAAgB,CACjCl9E,QAAS,KAEXj9B,EAAC07B,EAAAA,kBAAkB0C,gBAAiB,CAClCnB,QAAS,KAEXj9B,EAAC07B,EAAAA,kBAAkB0+E,kBAAmB,CACpCn9E,QAAS,8BDUhB95B,EAAAA,uDAxBQu1B,EAAAA,eACQ5rB,EAAAA,aAiBRutG,mCA8EJh3G,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,kBArEVxY,EAAA,CADCq9B,EAAAA,mDAiCDr9B,EAAA,CADCq9B,EAAAA,mEEzCH,SAAA2hF,YACSA,EAAAnjF,QAAP,WACE,MAAO,CACLC,SAAUkjF,EACVjjF,UAASj4B,EAAMu5G,GAAkBC,gCAXtCjhF,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPshF,GACAjhF,EAAAA,cAAcD,WAAW,CAACmhF,MAE5BnjF,UAAW,CAAC51B,EAA4By4G,4BCSxC,SAAAO,EACYvvG,EACAoK,EACAC,EACAC,EACAC,EACAgoB,EACA/nB,GAPZ,IAAAnR,EASEm2G,EAAAh8G,KAAAxD,KACEgQ,EACAoK,EACAC,EACAC,EACAC,EACAC,IACDxa,YAfSqJ,EAAA2G,MAAAA,EACA3G,EAAA+Q,cAAAA,EACA/Q,EAAAgR,uBAAAA,EACAhR,EAAAiR,mBAAAA,EACAjR,EAAAkR,oBAAAA,EACAlR,EAAAk5B,qBAAAA,EACAl5B,EAAAmR,eAAAA,WARsB1a,EAAAy/G,EAAAC,GAoBxBD,EAAAr/G,UAAAu/G,aAAA,WACR,IAAItH,EACAnkG,EAUJ,OARAhU,KAAKsa,mBACFxG,WACArB,WAAU,SAACqwB,GAAQ,OAAC9uB,EAAQ8uB,KAC5B3uB,cACHnU,KAAKsa,mBACF29F,iBACAxlG,WAAU,SAACitG,GAAc,OAACvH,EAAcuH,KACxCvrG,gBAEDnI,QAAQgI,MAAAA,OAAK,EAALA,EAAOiH,eAAiBk9F,IAAgBxD,EAAAA,YAAY6D,UAItD+G,EAAAr/G,UAAAy/G,uBAAA,WACR3/G,KAAKuiC,qBAAqBvvB,IACxB,CACEzS,IAAK,+BAEPigC,EAAAA,kBAAkB0C,iBAShBq8E,EAAAr/G,UAAA0a,qBAAA,SAAqB/C,EAAgBC,+MACrC9X,KAAKy/G,eACP,CAAA,EAAMnsG,EAAMsH,qBAAoBpX,KAAAxD,KAAC6X,EAAQC,IADvC,CAAA,EAAA,iBACFhT,EAAAlC,oBAEA5C,KAAK2/G,4DAOTJ,EAAAr/G,UAAAya,kBAAA,WACE,OAAI3a,KAAKy/G,gBACPD,EAAAt/G,UAAMya,kBAAiBnX,KAAAxD,OAChB,IAEPA,KAAK2/G,0BACE,IAQXJ,EAAAr/G,UAAA2a,WAAA,WAAA,IAAAxR,EAAArJ,KACE,OAAOA,KAAKoa,cACTR,aACAhS,KACC4K,EAAAA,KAAK,GACLiX,EAAAA,WAAU,SAAC7P,GACT,OAAIA,GACFvQ,EAAKiR,mBAAmBo+F,yBACxBrvG,EAAK+Q,cAAcT,cACnBtQ,EAAK2G,MAAMU,SAAS,IAAIoK,IACjB9S,EAAAA,IAAG,IAEH6/B,EAAAA,KAAK23E,EAAAt/G,UAAM2a,WAAUrX,KAAA6F,QAIjC81B,aAMLogF,EAAAr/G,UAAA6a,eAAA,WACE,OAAOgQ,EAAAA,cAAc,CACnB/qB,KAAKsa,mBAAmBxG,WACxB9T,KAAKoa,cAAcR,aACnB5Z,KAAKsa,mBAAmB29F,mBACvBrwG,KACDgD,EAAAA,KACE,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACkP,EAAKjP,EAAA,GAAE6U,EAAU7U,EAAA,GAAEozG,EAAWpzG,EAAA,GAC9B,OAAAiH,QAAQgI,MAAAA,OAAK,EAALA,EAAOiH,gBACdk9F,IAAgBxD,EAAAA,YAAYqD,MAC1BG,IAAgBxD,EAAAA,YAAY6D,SAAW5+F,WA5GhBO,sOAHnClS,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAtBLyM,EAAAA,aAKAqH,UAGAnC,UAOAghG,UARA3lG,UAIPyvB,UAGO7xB,wBCHP,SAAA6vG,EAAsBC,GAAA7/G,KAAA6/G,WAAAA,SAEtBD,EAAA1/G,UAAAgqC,eAAA,SACEC,GAEA,OAAOnqC,KAAK6/G,WAAW31E,eAAeC,4IATzCliC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLilC,aCqBP,SAAoBpN,EAA2B8iF,GAA/C,IAAAz2G,EAAArJ,KAAoBA,KAAAg9B,SAAAA,EAA2Bh9B,KAAA8/G,aAAAA,EAf/C9/G,KAAA+/G,gBAAyD//G,KAAKg9B,SAASp1B,KACrEu1B,EAAAA,OAAO6iF,IACPp1G,EAAAA,KAAI,SAACyT,GAAsC,OAAAA,EAAOhR,WAClDoc,EAAAA,WAAU,SAAC0gB,GACT,OAAA9gC,EAAKy2G,aAAa51E,eAAeC,GAASviC,KACxCgD,EAAAA,KAAI,SAACq1G,GACH,OAAO,IAAIC,GAAiCD,MAE9ChpF,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIm4G,GAA8B/jF,GAAmBn4B,mCAZjEgE,EAAAA,uDARQu1B,EAAAA,eAIAoiF,MAOPx/G,EAAA,CADCq9B,EAAAA,qDCTUC,GAAiB,CAAC0iF,ICClBrvD,GAA6B,CAAEsvD,WAAW,YAEvCjiG,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAwyG,IAGQjiG,EAAO/Q,MACb,KAAKizG,GACH,OAAA/gH,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GACAuQ,EAAOhR,SAGd,QACE,OAAOS,YCJG8vB,KACd,MAAO,CACL4iF,qBAAsBriG,GACpB26F,IAEF2H,MAAOC,QAIE7iF,GAER,IAAI34B,EAAAA,eAA2C,eAEvC44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aAGE+iF,GACdviG,GAEA,OAAO,SAAUtQ,EAAOuQ,GAOtB,OANIA,EAAO/Q,OAASszG,KAClB9yG,EAAKtO,OAAAqF,OAAArF,OAAAqF,OAAA,GACAiJ,GAAK,CACR0yG,0BAAsBj5G,KAGnB6W,EAAQtQ,EAAOuQ,QAIbg2F,GAAmC,CAC9CsM,IC3CWE,GAGThzG,EAAAA,sBAAgCgrG,OCClC,SAAC/qG,GAAoB,OAAAA,EAAM2yG,OAFhBK,GAAkD9yG,EAAAA,eAC7D6yG,GAAWE,ICAAC,GAGThzG,EAAAA,eACF6yG,IACA,SAAC/yG,GAAoB,OAAAA,EAAM0yG,2BAM2B,SAAC1yG,GACvD,OAAA8Y,GAA+B9Y,IAJpBmzG,GAGTjzG,EAAAA,eAAegzG,GAAmCE,OAOE,SAACpzG,GACvD,OAAAgZ,GAAiChZ,IAJtBqzG,GAGTnzG,EAAAA,eAAegzG,GAAmCI,8MCKpD,SAAAC,EACYjnF,EACApqB,EACAsK,GAFAta,KAAAo6B,wBAAAA,EACAp6B,KAAAgQ,MAAAA,EACAhQ,KAAAsa,mBAAAA,EALFta,KAAAq6B,aAAe,IAAIN,EAAAA,aAWnB/5B,KAAAO,IAAM,aAKT8gH,EAAAnhH,UAAAo6B,SAAA,WAAA,IAAAjxB,EAAArJ,KACLA,KAAKq6B,aAAarnB,IAChBhT,KAAKo6B,wBAAwBV,gBAAgB,CAC3Cn5B,IAAKP,KAAKO,IACVo5B,OAAQ35B,KAAK6gH,cACbhnF,OAAQ,SAAC/rB,GAAU,OAAAzE,EAAKwwB,OAAO/rB,QAS3BuzG,EAAAnhH,UAAA2gH,YAAA,WACR,OAAO91F,EAAAA,cAAc,CACnB/qB,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOkxG,KACvBt5G,EAAAA,GAAGhI,KAAKsa,mBAAmB89F,wBAC3Bp4G,KAAKsa,mBAAmB29F,mBACvBrwG,KACDgD,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACwiB,EAAEviB,EAAA,GAAEszG,EAAiBtzG,EAAA,GAAEozG,EAAWpzG,EAAA,GAClCm1G,EAAgB7B,EAMpB,OALI6B,UACFA,EAAa16G,OAAAqF,OAAA,GAAQwzG,IAEA59E,cAEhB,CACLnT,GAAEA,EACF+wF,kBAAmB6B,EACnB/B,YAAWA,QAUTkJ,EAAAnhH,UAAA25B,OAAA,SAAO/rB,GACXA,IACEA,EAAMwZ,IACRtnB,KAAKgQ,MAAMU,SAAS,IAAI6wG,GAAuBzzG,EAAMwZ,KAEnDxZ,EAAMuqG,mBACRr4G,KAAKsa,mBAAmBg+F,qBAAqBxqG,EAAMuqG,mBAEjDvqG,EAAMqqG,aACRn4G,KAAKsa,mBAAmB49F,eAAepqG,EAAMqqG,eAKnDkJ,EAAAnhH,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,0LA3ErBlM,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAnBLs0B,UAJQ7nB,EAAAA,aAORkmG,aCUT,sBCLgB0J,GACdC,GAGA,OADe,WAAM,OAAAA,EAA2BnnF,iCDPjDmC,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAhC,GACAkC,EAAAA,YAAYC,WAAW06E,GAAah7E,GAAc,CAAEw2E,aAAYqN,KAChEtjF,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CAAC2B,0BCOd,SAAA6jF,YACSA,EAAA1lF,QAAP,WACE,MAAO,CACLC,SAAUylF,EACVxlF,UAAW,CACT71B,EAAqBsuG,IACrB,CACE7uG,QAASsN,GACThL,YAAayvG,IAEf,CACE/xG,QAASoU,GACT9R,YAAak3G,IAEf,CACEx5G,QAASu8B,GACTj6B,YAAagyG,IAEf,CACEt0G,QAAS49B,EAAAA,gBACTt9B,WAAYm7G,GACZp7G,KAAM,CAACi7G,IACPp7G,OAAO,gCAzBhBw2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACC,EAAAA,aAAc4jF,0BCLxB,SAAAC,EAAsB7xG,GAAAhQ,KAAAgQ,MAAAA,SAMtB6xG,EAAA3hH,UAAAgqC,eAAA,SAAeC,GACbnqC,KAAKgQ,MAAMU,SAAS,IAAIoxG,GAA0B33E,KAMpD03E,EAAA3hH,UAAA6hH,oBAAA,WACE/hH,KAAKgQ,MAAMU,SAAS,IAAIsxG,KAM1BH,EAAA3hH,UAAA+gH,yBAAA,WACE,OAAOjhH,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO6xG,MAMhCJ,EAAA3hH,UAAAihH,gCAAA,WACE,OAAOnhH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO8xG,MAOXL,EAAA3hH,UAAAiiH,iBAAA,SAAiB1B,GACfzgH,KAAKgQ,MAAMU,SAAS,IAAI6wG,GAAuBd,KAMjDoB,EAAA3hH,UAAAkiH,cAAA,WACE,OAAOpiH,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOkxG,mJAhDjCr5G,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZGyM,EAAAA,2BCQf,SAAAywG,EAAsBp0E,GAAAjuC,KAAAiuC,QAAAA,SAEfo0E,EAAAniH,UAAA8S,IAAA,SACL6E,EACAm0B,EACAC,EACAC,GAEA,OAAOlsC,KAAKiuC,QAAQj7B,IAAI6E,EAAQm0B,EAAQC,EAAaC,IAGhDm2E,EAAAniH,UAAAmsC,OAAA,SACLx0B,EACAm0B,EACAM,EACAF,EACAG,GAEA,OAAOvsC,KAAKiuC,QAAQ5B,OAAOx0B,EAAQm0B,EAAQM,EAAaF,EAAKG,IAGxD81E,EAAAniH,UAAAgiC,OAAA,SACLrqB,EACAm0B,EACAM,GAEA,OAAOtsC,KAAKiuC,QAAQ/L,OAAOrqB,EAAQm0B,EAAQM,4IA9B9CrkC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLwoC,aCoIP,SACU3Q,EACAslF,GAFV,IAAAj5G,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAsiH,mBAAAA,EA3HFtiH,KAAAwuE,eAAiBxuE,KAAKg9B,SAASp1B,KACrCu1B,EAAAA,OACEsxC,GACAre,KAKJpwD,KAAAuiH,UAIIviH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOqlF,IACP53G,EAAAA,KAAI,SAACyT,GAAqC,OAAAA,EAAOhR,WACjD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAOhE,EAAKi5G,mBACTtvG,IACC3F,EAAQwK,OACRxK,EAAQ2+B,OACR3+B,EAAQ4+B,YACR5+B,EAAQ6+B,UAETtkC,KACCgD,EAAAA,KACE,SAAC63G,GACC,OAAA,IAAIC,GAA+BljH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC9BwI,GACCo1G,OAGVxrF,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAI86E,GAA4BnjH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC3BwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAIwkD,GAAqB,CACvBzc,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,kBAM5Bs2D,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAA4iH,aAII5iH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO0lF,IACPj4G,EAAAA,KAAI,SAACyT,GAAwC,OAAAA,EAAOhR,WACpD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAhE,EAAKi5G,mBACFpgF,OAAO70B,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQi/B,aAC/C1kC,KACCgD,EAAAA,KAAI,WACF,OAAO,IAAIk4G,GAAkCtjH,OAAAqF,OAAA,GACxCwI,OAGP4pB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIk7E,GAA+BvjH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC9BwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAIwkD,GAAqB,CACvBzc,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,kBAM5Bs2D,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAgjH,aAIIhjH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO8lF,IACPr4G,EAAAA,KAAI,SAACyT,GAAwC,OAAAA,EAAOhR,WACpD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAhE,EAAKi5G,mBACFj2E,OACCh/B,EAAQwK,OACRxK,EAAQ2+B,OACR3+B,EAAQi/B,YACRj/B,EAAQ6+B,UAETtkC,KACCgD,EAAAA,KAAI,WACF,OAAO,IAAIs4G,GAAkC1jH,OAAAqF,OAAA,GACxCwI,OAGP4pB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIs7E,GAA+B3jH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC9BwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAIwkD,GAAqB,CACvBzc,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,kBAM5Bs2D,GAAWnuE,KAAKwuE,uCAxHnBvmE,EAAAA,uDAVQu1B,EAAAA,eAOA6kF,MAaPjiH,EAAA,CADCq9B,EAAAA,2CA0CDr9B,EAAA,CADCq9B,EAAAA,8CAmCDr9B,EAAA,CADCq9B,EAAAA,gECvFD,SAAA2lF,EAAsBn1E,GAAAjuC,KAAAiuC,QAAAA,SAEfm1E,EAAAljH,UAAA8S,IAAA,SACL6E,EACAm0B,EACAa,GAEA,OAAO7sC,KAAKiuC,QAAQj7B,IAAI6E,EAAQm0B,EAAQa,IAGnCu2E,EAAAljH,UAAAgiC,OAAA,SACLrqB,EACAm0B,EACAa,GAEA,OAAO7sC,KAAKiuC,QAAQ/L,OAAOrqB,EAAQm0B,EAAQa,4IAnB9C5kC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLyoC,wBCUP,SAAAy1E,EACUrmF,EACAsmF,EACAC,GAHV,IAAAl6G,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAsjH,qBAAAA,EACAtjH,KAAAujH,eAAAA,EAIVvjH,KAAAwjH,gBAIIxjH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOsmF,IACP74G,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKi6G,qBACTtwG,IAAI3F,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQw/B,WAC5CjlC,KACCgD,EAAAA,KAAI,WAMF,OALAvB,EAAKq6G,kBACH,8BACAr2G,EAAQw/B,UACRrM,EAAAA,kBAAkBm7E,uBAEb,IAAIgI,GAAiCnkH,OAAAqF,OAAA,GACvCwI,OAGP4pB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAI+7E,GAA8BpkH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC7BwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAI4/G,GAAmCx2G,EAAQ2+B,QAC/C,IAAIyc,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,mBAS9BhsC,KAAA8jH,mBAEI9jH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO4mF,IACPn5G,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKi6G,qBACTphF,OAAO70B,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQw/B,WAC/CjlC,KACCgD,EAAAA,KAAI,WAMF,OALAvB,EAAKq6G,kBACH,+BACAr2G,EAAQw/B,UACRrM,EAAAA,kBAAkBy+E,eAEb,IAAI+E,GAAqC,CAC9CnsG,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,OAChBa,UAAWx/B,EAAQw/B,eAGvB5V,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIo8E,GAAkC,CACpChgH,MAAOm4B,GAAmBn4B,GAC1B+nC,OAAQ3+B,EAAQ2+B,OAChBn0B,OAAQxK,EAAQwK,OAChBg1B,UAAWx/B,EAAQw/B,YAErB,IAAI4b,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,0BAQtBq3E,EAAAnjH,UAAAwjH,kBAAA,SACN5hF,EACAlV,EACAs3F,GAEAlkH,KAAKujH,eAAevwG,IAClB,CAAEzS,IAAKuhC,EAAM11B,OAAQ,CAAE+3G,YAAav3F,IACpCs3F,8BA9FLj8G,EAAAA,uDATQu1B,EAAAA,eAMA4lF,UAHAxhF,MAePxhC,EAAA,CADCq9B,EAAAA,iDAwCDr9B,EAAA,CADCq9B,EAAAA,sEChDD,SAAA2mF,EAAsBn2E,GAAAjuC,KAAAiuC,QAAAA,SAEfm2E,EAAAlkH,UAAA6sC,QAAA,SAAQl1B,GACb,OAAO7X,KAAKiuC,QAAQlB,QAAQl1B,IAGvBusG,EAAAlkH,UAAA0c,KAAA,SAAK/E,EAAgBm0B,GAC1B,OAAOhsC,KAAKiuC,QAAQrxB,KAAK/E,EAAQm0B,IAG5Bo4E,EAAAlkH,UAAAC,OAAA,SACL0X,EACAo1B,EACAC,GAEA,OAAOltC,KAAKiuC,QAAQ9tC,OAAO0X,EAAQo1B,EAAWC,IAGzCk3E,EAAAlkH,UAAA4zB,OAAA,SAAOjc,EAAgBm0B,GAC5B,OAAOhsC,KAAKiuC,QAAQna,OAAOjc,EAAQm0B,IAG9Bo4E,EAAAlkH,UAAAwrC,SAAA,SACL7zB,EACAm0B,EACAmB,GAEA,OAAOntC,KAAKiuC,QAAQvC,SAAS7zB,EAAQm0B,EAAQmB,4IA/BhDllC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLuoC,aCwUP,SACU1Q,EACAqnF,EACAr0G,GAHV,IAAA3G,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAqkH,cAAAA,EACArkH,KAAAgQ,MAAAA,EAlTFhQ,KAAAwuE,eAAiBxuE,KAAKg9B,SAASp1B,KACrCu1B,EAAAA,OACEsxC,GACAre,KAKJpwD,KAAAskH,UAIItkH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOonF,IACP35G,EAAAA,KAAI,SAACyT,GAAiC,OAAAA,EAAOhR,WAC7Cm3G,EAAAA,SAAQ,SAACn3G,GAAY,OAAAA,EAAQ2+B,UAC7BqI,EAAAA,UAAS,SAACowE,GACR,OAAAA,EAAO78G,KACL6hB,EAAAA,WAAU,SAACpc,GACT,OAAOrF,EAAAA,GAAGqF,GAASzF,KACjB0gB,EAAAA,eACEjf,EAAK2G,MAAMpI,KACTwI,EAAAA,OACE42C,GAA0C35C,EAAQ2+B,eAM5Dl/B,EAAAA,QAAO,SAAC/H,OAAAC,EAAAjB,EAAAgB,EAAA,GAA6B,OAA3BC,EAAA,IAAqBA,EAAA,MAC/B4F,EAAAA,KAAI,SAAC7F,GAAc,OAAdhB,EAAAgB,EAAA,GAAQ,MACb0kB,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKg7G,cAAcznG,KAAKvP,EAAQwK,OAAQxK,EAAQ2+B,QAAQpkC,KAC7DysC,EAAAA,UAAS,SAAChJ,GACR,IAAIghE,EAAU,GAyBd,OAxBIhhE,GACFghE,EAAQ3oG,KACN,IAAIyvE,GAA2B3zE,OAAAqF,OAAArF,OAAAqF,OAAA,GAC1BwI,GAAO,CACVg+B,KAAIA,EACJW,OAAQqZ,GAAkBha,EAAMh+B,EAAQwK,YAIxCxK,EAAQ2+B,SAAW7kC,GAGrBklG,EAAQ3oG,KACN,IAAIytE,GAAuB,CAAEnlC,OAAQ7kC,MAIzCklG,EAAU,CACR,IAAIqY,GAAwBllH,OAAAqF,OAAArF,OAAAqF,OAAA,GACvBwI,GAAO,CACVpJ,MAAO,OAINooG,KAETp1E,EAAAA,YAAW,SAAChzB,SACV,GAAgB,QAAhBa,EAAIb,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,OAAQ,CAIxB,GAH4BxzB,EAAMA,MAAMwzB,OAAO3qB,QAC7C,SAAC63G,GAAQ,MAAe,YAAfA,EAAIn/D,UAES7kD,OAAS,EAE/B,OAAOqH,EAAAA,GAAG,IAAIygD,GAAoBjpD,OAAAqF,OAAA,GAAMwI,KAQ1C,GAL2BpJ,EAAMA,MAAMwzB,OAAO3qB,QAC5C,SAAC63G,GACC,OAAAp/D,GAAoBo/D,IACL,yBAAfA,EAAIn/D,UAEe7kD,OAAS,EAE9B,OAAOqH,EAAAA,GACL,IAAImpE,GAAuB,CAAEnlC,OAAQ3+B,EAAQ2+B,UAInD,OAAOhkC,EAAAA,GACL,IAAI08G,GAAwBllH,OAAAqF,OAAArF,OAAAqF,OAAA,GACvBwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,kBAQxCkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAA4kH,YAKI5kH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO81B,IACProD,EAAAA,KAAI,SAACyT,GAAmC,OAAAA,EAAOhR,WAC/CgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKg7G,cACTlkH,OAAOkN,EAAQwK,OAAQxK,EAAQ4/B,UAAW5/B,EAAQ6/B,iBAClDtlC,KACC6hB,EAAAA,WAAU,SAAC4hB,GACT,IAAMw5E,EAAqB,GAY3B,OAXIx3G,EAAQ4/B,WACV43E,EAAmBnhH,KACjB,IAAIohH,GAA6B,CAC/B18D,UAAW/6C,EAAQ+6C,UACnBvwC,OAAQxK,EAAQwK,OAChB8rC,WAAYt2C,EAAQs2C,WACpB3X,OAAQqZ,GAAkBha,EAAMh+B,EAAQwK,QACxCo1B,UAAW5/B,EAAQ4/B,aAIzB/oC,EAAA,CACE,IAAI6gH,GAA6BvlH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC5BwI,GAAO,CACVg+B,KAAIA,EACJW,OAAQqZ,GAAkBha,EAAMh+B,EAAQwK,WAE1C,IAAImtG,GAAwB,CAC1B35E,KAAIA,EACJsY,WAAYt2C,EAAQs2C,cAEnBkhE,MAGP5tF,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIi9G,GAA0BzlH,OAAAqF,OAAArF,OAAAqF,OAAA,GACzBwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,cAMtCkqE,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAklH,WAAiDllH,KAAKg9B,SAASp1B,KAC7Du1B,EAAAA,OAAOgoF,IACPv6G,EAAAA,KAAI,SAACyT,GAAkC,OAAAA,EAAOhR,WAC9CgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKg7G,cAAcznG,KAAKvP,EAAQwK,OAAQ1Q,GAAqBS,KAClEysC,EAAAA,UAAS,SAAC+wE,GACR,MAAO,CACL,IAAI/8D,GAAuB,CACzBxwC,OAAQxK,EAAQwK,OAChBo1B,UAAW5/B,EAAQ2+B,OACnBkB,gBAAiBk4E,EAAcA,EAAY9/D,UAAO/9C,EAClD6gD,UAAW/6C,EAAQ+6C,UACnBzE,WAAYt2C,EAAQs2C,qBAM9BwqB,GAAWnuE,KAAKwuE,iBAKlBxuE,KAAAqlH,SAEIrlH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOmoF,IACP16G,EAAAA,KAAI,SAACyT,GAA8C,OAAAA,EAAOhR,WAC1D8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAw6B,EAAAA,KAAK,CACH,IAAIg8E,GAAmCx2G,EAAQ2+B,QAC/C,IAAIyc,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,eAQxBhsC,KAAAulH,yBAEIvlH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OACEqoF,GACAC,GACAC,GACAC,GACAC,IAEFh7G,EAAAA,KACE,SACEyT,GAMG,OAAAA,EAAOhR,WAEdzC,EAAAA,KACE,SAACyC,GACC,OAAA,IAAIo7C,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAMxBhsC,KAAA6lH,qCAEI7lH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OACEizB,GACAqe,IAEFp6B,EAAAA,UAAS,WACP,MAAO,CAAC,IAAIyxE,QAKhB9lH,KAAA+lH,UAII/lH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO6oF,IACPp7G,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAAhE,EAAKg7G,cACF34E,SAASr+B,EAAQwK,OAAQxK,EAAQ2+B,OAAQ3+B,EAAQ8/B,OACjDvlC,KACCysC,EAAAA,UAAS,WACP,MAAO,CACL,IAAI4xE,GAAiCzmH,OAAAqF,OAAA,GAChCwI,IAEL,IAAIo7C,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,aAItB/U,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIq+E,GAA8B1mH,OAAAqF,OAAArF,OAAAqF,OAAA,GAC7BwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAE5B,IAAIwkD,GAAqB,CACvB5wC,OAAQxK,EAAQwK,OAChBm0B,OAAQ3+B,EAAQ2+B,kBAM5BmiC,GAAWnuE,KAAKwuE,iBAIlBxuE,KAAAmmH,YAIInmH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOipF,IACPx7G,EAAAA,KAAI,SAACyT,GAAmC,OAAAA,EAAOhR,WAC/CgnC,EAAAA,UAAS,SAAChnC,GACR,OAAAhE,EAAKg7G,cAAcvwF,OAAOzmB,EAAQwK,OAAQxK,EAAQ2+B,QAAQpkC,KACxDgD,EAAAA,KAAI,WACF,OAAO,IAAIy7G,GAA6B7mH,OAAAqF,OAAA,GAAMwI,OAEhD4pB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIy+E,GAA0B9mH,OAAAqF,OAAArF,OAAAqF,OAAA,GACzBwI,GAAO,CACVpJ,MAAOm4B,GAAmBn4B,MAI5B,IAAIwkD,GAAoBjpD,OAAAqF,OAAA,GACnBwI,oCAzShBpF,EAAAA,uDAzBQu1B,EAAAA,eAmBA4mF,UAlBQxyG,EAAAA,SAkCfxR,EAAA,CADCq9B,EAAAA,2CA2FDr9B,EAAA,CADCq9B,EAAAA,6CAqDDr9B,EAAA,CADCq9B,EAAAA,4CAwBDr9B,EAAA,CADCq9B,EAAAA,0CAmBDr9B,EAAA,CADCq9B,EAAAA,0DA+BDr9B,EAAA,CADCq9B,EAAAA,sEAcDr9B,EAAA,CADCq9B,EAAAA,2CAyCDr9B,EAAA,CADCq9B,EAAAA,+DCpSD,SAAA8oF,EAAsBt4E,GAAAjuC,KAAAiuC,QAAAA,SAEfs4E,EAAArmH,UAAA2rC,SAAA,SACLh0B,EACAm0B,EACAwB,EACAC,GAEA,OAAOztC,KAAKiuC,QAAQpC,SAClBh0B,EACAm0B,EACAwB,EACAC,4IAhBLxlC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL0oC,aCkJP,SACU7Q,EACAqnF,EACAmC,EACApsG,EACApK,GALV,IAAA3G,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAqkH,cAAAA,EACArkH,KAAAwmH,kBAAAA,EACAxmH,KAAAoa,cAAAA,EACApa,KAAAgQ,MAAAA,EAlIVhQ,KAAAymH,gBAEIzmH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOupF,IACP97G,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKg7G,cAAclkH,OAAOkN,EAAQwK,QAAQjQ,KAC/C6hB,EAAAA,WAAU,SAAC4hB,GACT,OAAOhiC,EAAKm9G,kBACT36E,SACCx+B,EAAQwK,OACRwzB,EAAKrnB,KACL3W,EAAQ44B,KACR54B,EAAQs5G,aAET/+G,KACC6hB,EAAAA,WAAU,SAACm9F,GAAmB,MAAA,CAC5B,IAAIC,GAAkC,CACpCx7E,KAAMu7E,EAAeE,cACrBjvG,OAAQxK,EAAQwK,aAGpBof,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIk/E,GAA+B,CACjC/6E,OAAQX,EAAKrnB,KACb/f,MAAOm4B,GAAmBn4B,mBAW5CjE,KAAAgnH,cAKIhnH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO8pF,IACPr8G,EAAAA,KAAI,SAACyT,GAAqC,OAAAA,EAAOhR,WACjD8kE,EAAAA,WAAU,SAAC9kE,GACD,IAAAwK,EAAmCxK,EAAOwK,OAAlC+tC,EAA2Bv4C,EAAOu4C,WAAtBjC,EAAet2C,EAAOs2C,WAClD,OAAOt6C,EAAKg7G,cAAct3E,QAAQl1B,GAAQjQ,KACxC6hB,EAAAA,WAAU,SAAC2hB,GACT,GAAIA,EAAO,CACT,IAAMic,EAAWjc,EAAMz+B,MACrB,SAAC0+B,GAAS,OAAAA,EAAKpF,OAAS0f,GAAgBC,MAE1C,OAAI55C,QAAQq7C,GACH,CACL,IAAI6/D,GAAgC,CAClC77E,KAAMgc,EACNxvC,OAAMA,EACN8rC,WAAUA,EACViC,WAAUA,EACV5Z,OAAQqZ,GAAkBgC,EAAUxvC,KAEtC,IAAIs5D,GAAuB,CAAEnlC,OAAQ2X,KAGhC,CACL,IAAIwjE,GAA2B,CAC7BtvG,OAAMA,EACNouB,KAAM0f,GAAgBC,UAMhC3uB,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIu/E,GAA6B,CAC/BvvG,OAAMA,EACNm0B,OAAQ2X,EACRiC,WAAUA,EACV3hD,MAAOm4B,GAAmBn4B,eAStCjE,KAAAqnH,eAEIrnH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OACEizB,GACAqe,IAEFnmD,EAAAA,eACEtoB,KAAKoa,cAAcf,YACnBrZ,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOk3G,MAEzB79F,EAAAA,WAAU,SAAC3kB,OAAAC,EAAAhB,EAAAe,EAAA,GAAG+S,EAAM9S,EAAA,GAAEwiH,EAAUxiH,EAAA,GAC9B,OAAIiH,QAAQu7G,GACHl+G,EAAKg7G,cAAcznG,KAAK/E,EAAQ0vG,GAAY3/G,KACjD6hB,EAAAA,WAAU,SAAC49B,GAAa,MAAA,CACtB,IAAI6/D,GAAgC,CAClC77E,KAAMgc,EACNxvC,OAAMA,EACNm0B,OAAQqZ,GAAkBgC,EAAUxvC,SAGxCof,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KAAK,CACH,IAAIu/E,GAA6B,CAC/BvvG,OAAMA,EACNm0B,OAAQu7E,EACRtjH,MAAOm4B,GAAmBn4B,WAM7B+jD,EAAAA,oBCrIGw/D,GACdppG,GAEA,OAAO,SAAUtQ,EAAOuQ,GAItB,OAHIA,EAAO/Q,OAAS+iD,KAClBviD,OAAQvG,GAEH6W,EAAQtQ,EAAOuQ,yBDEzBpW,EAAAA,uDApBQu1B,EAAAA,eAaA4mF,UACAmC,UAJAttG,UATQrH,EAAAA,SAsBfxR,EAAA,CADCq9B,EAAAA,iDAsCDr9B,EAAA,CADCq9B,EAAAA,+CAqDDr9B,EAAA,CADCq9B,EAAAA,oDCzFUgqF,GAA4C,CAACD,IAE7CE,GAER,IAAIxiH,EAAAA,eAAiD,8BAE1CyiH,KACd,MAAO,CACLv8E,MAAOzpB,GACLy2B,GACAkb,IAEF9hC,OAAQshC,GACRzL,SAAUqM,QAIDk0D,GAAqC,CAChD7hH,QAAS2hH,GACTrhH,WAAYshH,kBC1BZ,SAAAE,EACYztF,EACApqB,EACA83G,GAFA9nH,KAAAo6B,wBAAAA,EACAp6B,KAAAgQ,MAAAA,EACAhQ,KAAA8nH,yBAAAA,EALF9nH,KAAAq6B,aAAe,IAAIN,EAAAA,oBAQtB8tF,EAAA3nH,UAAAo6B,SAAA,WAAA,IAAAjxB,EAAArJ,KACLA,KAAKq6B,aAAarnB,IAChBhT,KAAKo6B,wBAAwBV,gBAAgB,CAC3Cn5B,IAAK,OACLo5B,OAAQ35B,KAAK+nH,eACbnuF,SAAU55B,KAAK8nH,yBAAyBxZ,UAAU,CAChDvhF,KAEF8M,OAAQ,SAAC/rB,GAAU,OAAAzE,EAAKwwB,OAAO/rB,QAK3B+5G,EAAA3nH,UAAA6nH,aAAA,WACR,OAAO/nH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO43G,IACPl7G,EAAAA,QAAO,SAACgB,GAAU,QAAEA,KACpBm6G,EAAAA,wBAAwB,UACxBr9G,EAAAA,KAAI,SAACkD,GACH,MAAO,CACL0jB,OAAQ1jB,EAAM0jB,aAMZq2F,EAAA3nH,UAAA25B,OAAA,SAAO/rB,GACf9N,KAAKgQ,MAAMU,SAAS,IAAIw3G,IACpBp6G,EACF9N,KAAKgQ,MAAMU,SAAS,IAAIy3G,GAA4Br6G,EAAM0jB,SAE1DxxB,KAAKgQ,MAAMU,SAAS,IAAIy3G,GAA4B,MAIxDN,EAAA3nH,UAAAw6B,YAAA,WACE16B,KAAKq6B,aAAalmB,6BCpDNi0G,GACdC,EACA7kF,GAMA,OAJe,WACb,OAAAA,EAAW3E,gBAAgB,WAAW38B,MAAK,WACzCmmH,EAA4B/tF,wBAWlBguF,KAWd,OAVoB,SAAClqG,GAAgC,OAAA,SAACtQ,EAAOuQ,GAC3D,IAAMsB,EAAQngB,OAAAqF,OAAA,GAAQiJ,GAOtB,MANoB,qBAAhBuQ,EAAO/Q,OACTqS,EAAS0rB,KAAI7rC,OAAAqF,OAAArF,OAAAqF,OAAA,GACR8a,EAAS0rB,MACT,CAAE7Z,OAAQqhC,MAGVz0C,EAAQuB,EAAUtB,2KDtB5BpW,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALLs0B,UALQ7nB,EAAAA,aAIRi8F,wBCqCT,SAAA0a,YACSA,EAAAtsF,QAAP,WACE,MAAO,CACLC,SAAUqsF,EACVpsF,UAAW,CACT,CACEp2B,QAAS49B,EAAAA,gBACTt9B,WAAY+hH,GACZhiH,KAAM,CAACyhH,GAAkCppF,IACzCx4B,OAAO,GAET,CACEF,QAASg2B,EAAAA,cACT11B,WAAYiiH,GACZriH,OAAO,gCAfhBw2B,EAAAA,kBC5BD,gBAQA,gBAWA,gBAQA,gBAOA,2BCxBE,SAAA+rF,EACYzxE,EACA9nC,EACAgnD,GAFAj2D,KAAA+2C,eAAAA,EACA/2C,KAAAiP,MAAAA,EACAjP,KAAAi2D,kBAAAA,EAEVj2D,KAAKqlC,kBAMGmjF,EAAAtoH,UAAAmlC,SAAA,WACRrlC,KAAKyoH,mBACLzoH,KAAK0oH,sBACL1oH,KAAK2oH,uBAMGH,EAAAtoH,UAAAuoH,iBAAA,WACRzoH,KAAK4oH,eAAe,CAClBvqG,OAAQmkG,GACRvzG,MAAO45G,KAET7oH,KAAK4oH,eAAe,CAClBvqG,OAAQmnG,GACRv2G,MAAO65G,KAET9oH,KAAK4oH,eAAe,CAClBvqG,OAAQ0qG,GACR95G,MAAO+5G,MAIDR,EAAAtoH,UAAAwoH,oBAAA,WACR1oH,KAAK4oH,eAAe,CAClBvqG,OAAQonG,GACRx2G,MAAOg6G,MAIDT,EAAAtoH,UAAAyoH,oBAAA,WACR3oH,KAAK4oH,eAAe,CAClBvqG,OAAQqnG,GACRz2G,MAAOi6G,MAUDV,EAAAtoH,UAAA0oH,eAAA,SAAkB3xE,GAAlB,IAAA5tC,EAAArJ,KACFmpH,EAAenpH,KAAKopH,UAAUnyE,EAAQ54B,QAAQzW,KAClD6hB,EAAAA,WAAU,SAACpL,GAIT,OAAOrW,EAAAA,GAAGqW,GAAQzW,KAChB0gB,EAAAA,eACEjf,EAAK4sD,kBAAkB3kC,YACvBjoB,EAAK4sD,kBAAkB9O,uBAI7Br6C,EAAAA,QACE,SAAChI,OAAAC,EAAAhB,EAAAe,EAAA,GAACuZ,EAAMtZ,EAAA,GAAe+0E,GAAF/0E,EAAA,GAAcA,EAAA,IACjC,OAAAsZ,EAAOhR,QAAgB,SAAMysE,KAEjClvE,EAAAA,KAAI,SAAC9F,OAAAC,EAAAhB,EAAAe,EAAA,GAACuZ,EAAMtZ,EAAA,GAAE2wD,EAAU3wD,EAAA,GACtB,OAAAs/B,GAAW4S,EAAQhoC,MAAKzP,OAAAqF,OAAArF,OAAAqF,OAAA,GACnBwZ,EAAOhR,SAAO,CACjBolD,SAAUiD,EAAW1xC,KACrBymB,MAAOpsB,EAAOhR,QAAQo9B,MAClBpsB,EAAOhR,QAAQo9B,MACfirB,EAAWjsD,QAAQ05E,OAAO9kE,EAAOhR,QAAQi/B,qBAInD,OAAOtsC,KAAKiP,MAAMo2B,SAAS4R,EAAQhoC,MAAOk6G,IAQlCX,EAAAtoH,UAAAkpH,UAAA,SACRC,GAEA,OAAOrpH,KAAK+2C,eAAenvC,KAAKu1B,EAAAA,OAAMh7B,WAAA,EAAA+B,EAAI,GAAGC,OAAOklH,2LA/FvDphH,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAnBjBiyC,EAAAA,sBAGAjS,UAGAyuB,aCHP,SAAY01D,0BAFb7sF,EAAAA,SAAQv0B,KAAA,CAAC,gDAFDsgH,UCIIe,GAAc,MACdC,GAA2B,0BAC3BC,GAAmB,yBCFnBC,GAAqB,uBACrBC,GAA0B,4BAC1BC,GAA6B,+BAC7BC,GAA8B,gCAE3CC,GAAA,SAAAx2G,GAEE,SAAAw2G,EACSz8G,GADT,IAAAhE,EAMEiK,EAAA9P,KAAAxD,KAAMypH,GAAkBp8G,EAAQ4iB,MAAIjwB,YAL7BqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOo8G,YADoB5pH,EAAAgqH,EAAAx2G,KAAtC,CAAsC0oC,IAYtC+tE,GAAA,SAAAz2G,GAEE,SAAAy2G,EACS18G,GADT,IAAAhE,EAGEiK,EAAA9P,KAAAxD,KAAMypH,GAAkBp8G,EAAQ4iB,IAAK5iB,EAAQpJ,QAAMjE,YAF5CqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOq8G,YADwB7pH,EAAAiqH,EAAAz2G,KAA1C,CAA0C4oC,IAS1C8tE,GAAA,SAAA12G,GAIE,SAAA02G,EACS38G,GADT,IAAAhE,EAOEiK,EAAA9P,KAAAxD,KAAMypH,GAAkBp8G,EAAQ4iB,KAAO5iB,EAAQqhD,UAAUz+B,KAAO,KAAGjwB,YAN5DqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOs8G,YADR9pH,EAAAkqH,EAAA12G,KAFV,CAEU8oC,IAaV6tE,GAAA,SAAA32G,GAIE,SAAA22G,EACS58G,GADT,IAAAhE,EAKEiK,EAAA9P,KAAAxD,KACEypH,GACA,GAAGtlH,OAAOkJ,GAASzC,KAAI,SAACs/G,GAAQ,OAAAA,EAAIx7D,UAAUz+B,SAC/CjwB,YAPMqJ,EAAAgE,QAAAA,EAFAhE,EAAAiE,KAAOu8G,YADR/pH,EAAAmqH,EAAA32G,KAFV,CAEU8oC,IC7CG+tE,GAA4B,mCAC5BC,GACX,wCACWC,GACX,2CAEFC,GAAA,SAAAh3G,GAEE,SAAAg3G,EAAmBj9G,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMwpH,GAA0Bn8G,EAAQk9G,SAAOvqH,YAD9BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO68G,YAD0BrqH,EAAAwqH,EAAAh3G,KAA5C,CAA4C0oC,IAO5CwuE,GAAA,SAAAl3G,GAEE,SAAAk3G,EAAYD,EAAuBl9G,GAAnC,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMwpH,GAA0Be,EAAQl9G,IAAQrN,YADfqJ,EAAAgE,QAAAA,EAD1BhE,EAAAiE,KAAO88G,YAD8BtqH,EAAA0qH,EAAAl3G,KAAhD,CAAgD4oC,IAOhDuuE,GAAA,SAAAn3G,GAEE,SAAAm3G,EAAmBp9G,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMwpH,GAA0Bn8G,EAAQk9G,SAAOvqH,YAD9BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAO+8G,YADiCvqH,EAAA2qH,EAAAn3G,KAAnD,CAAmD8oC,ICnBtCsuE,GAAqB,uBACrBC,GAA0B,4BAC1BC,GAA6B,+BAC7BC,GAA6B,+BAC7BC,GAA0B,4BAEvCC,GAAA,SAAAz3G,GAEE,SAAAy3G,EAAmB19G,GAAnB,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMqN,EAAQC,KAAMD,EAAQkB,KAAGvO,YADdqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo9G,YADmB5qH,EAAAirH,EAAAz3G,KAArC,CAAqC0oC,IAOrCgvE,GAAA,SAAA13G,GAEE,SAAA03G,EAAYv6G,EAA0BxM,GAAtC,IAAAoF,EACEiK,EAAA9P,KAAAxD,KAAMyQ,EAAYnD,KAAMmD,EAAYlC,GAAItK,IAAMjE,YAFvCqJ,EAAAiE,KAAOq9G,YADuB7qH,EAAAkrH,EAAA13G,KAAzC,CAAyC4oC,IAOzC+uE,GAAA,SAAA33G,GAEE,SAAA23G,EAAYx6G,EAA0BpD,GAAtC,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMyQ,EAAYnD,KAAMmD,EAAYlC,GAAIlB,IAAQrN,YAFzCqJ,EAAAiE,KAAOs9G,YAD0B9qH,EAAAmrH,EAAA33G,KAA5C,CAA4C8oC,IAO5C8uE,GAAA,SAAA53G,GAEE,SAAA43G,EAAYz6G,EAA0BpD,GAAtC,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMyQ,EAAYnD,KAAMmD,EAAYlC,GAAIlB,IAAQrN,YAFzCqJ,EAAAiE,KAAOu9G,YAD0B/qH,EAAAorH,EAAA53G,KAA5C,CAA4C8oC,IAO5C+uE,GAAA,SAAA73G,GAEE,SAAA63G,EAAY16G,EAAiCpD,GAA7C,IAAAhE,EACEiK,EAAA9P,KAAAxD,KAAMyQ,EAAYnD,KAAMmD,EAAYlC,KAAGvO,YADIqJ,EAAAgE,QAAAA,EADpChE,EAAAiE,KAAOw9G,YADuBhrH,EAAAqrH,EAAA73G,KAAzC,CAAyC4oC,irBCnC5BkvE,GAGTv9G,EAAAA,sBAAgC07G,OCGJ,SAACz7G,GAAU,OAAAA,EAAMqzE,YAHpCkqC,GAGTr9G,EAAAA,eAAeo9G,GAAWE,IAEjBC,GAAmC,SAC9Ct7F,GAEA,OAAOjiB,EAAAA,eAAeq9G,IAAoB,SAACG,GACzC,OAAAC,GAA0BD,EAAiBv7F,OAIlCy7F,GAAuC,SAClDz7F,EACA3hB,GAEA,OAAON,EAAAA,eACLu9G,GAAiCt7F,IACjC,SAAC07F,GACC,OAACA,GACCA,EAAkBl7G,aAClBk7G,EAAkBl7G,YAAYnC,IAChCs9G,OAaOC,GAAyC,SACpD57F,EACA3hB,GAEA,OAAON,EAAAA,eACL09G,GAAqCz7F,EAAK3hB,IAC1C,SAACgT,GAAgB,OAAAsF,GAA+BtF,OAIvCwqG,GAAgC,SAC3C77F,GAEA,OAAOjiB,EAAAA,eAAeu9G,GAAiCt7F,IAAM,SAACniB,GAC5D,OAAAA,EAAQA,EAAM4gD,eAAYnnD,MAajBwkH,GAA4B,SACvC97F,EACA3hB,GAEA,OAAON,EAAAA,eACL89G,GAA8B77F,GAC9B47F,GAAuC57F,EAAK3hB,IAC5C,SAAC09G,EAAgBC,GACf,OAAQA,GACN,KAAK,EACH,OAAOD,EACT,KAAK,EACH,OAAO,KACT,UAAKzkH,EACH,YC7EG2kH,GAGTl+G,EAAAA,eAAeo9G,IAAa,SAACt9G,GAAoB,OAAAA,EAAMoF,cAE9Ci5G,GAAsC,SACjD5B,GAEA,OAAOv8G,EAAAA,eAAek+G,IAA6B,SAACE,GAClD,OAAA5xD,GAAqC4xD,EAAO7B,OAInC8B,GAA0B,SACrC9B,GAEA,OAAOv8G,EAAAA,eACLm+G,GAAoC5B,IACpC,SAAC+B,GAAc,OAAA1lG,GAA+B0lG,OCf5CC,GAA0B,SAACz+G,GAAqB,OAAAA,EAAM0+G,SAAS3tG,UAC/D4tG,GAAiB,SACrBtqF,EACA70B,GAEA,OAAQA,GACN,KAAK0M,EAAAA,SAAS43C,aACZ,OAAOzvB,EAAMq6D,QAEf,KAAKxiF,EAAAA,SAAS63C,aACZ,OAAO1vB,EAAMuI,QAEf,KAAK1wB,EAAAA,SAAS83C,cACZ,OAAO3vB,EAAMuqF,SAEf,KAAK1yG,EAAAA,SAASgmE,aACZ,OAAO79C,EAAMwqF,QAGjB,MAAO,CAAE9tG,SAAU,WAGf+tG,GAA0D,SAC9DzoG,eAEM0oG,EAAiB,IAAIv6G,IAC3B,GAAI6R,GAAQA,EAAK68D,UACf,IAAmB,IAAAh8E,EAAArB,EAAAnE,OAAO6f,KAAK8E,EAAK68D,QAAMrpE,EAAA3S,EAAAnD,QAAA8V,EAAA1V,KAAA0V,EAAA3S,EAAAnD,OAAE,CAAvC,IAAMo/E,EAAItpE,EAAAhW,UACb,IAAwB,IAAA6H,GAAAijG,OAAA,EAAA9oG,EAAAwgB,EAAK68D,MAAMC,GAAME,YAAc,KAAEz3E,EAAAF,EAAA3H,QAAA6H,EAAAzH,KAAAyH,EAAAF,EAAA3H,OAAE,CAAtD,IAAM6sD,EAAShlD,EAAA/H,MAClBkrH,EAAe75G,IAAI07C,EAAU4yB,+MAInC,OAAO3hF,MAAMkoC,KAAKglF,aAMY,SAAC/+G,GAAoB,OAAAA,EAAMqW,MAH9C2oG,GAGT9+G,EAAAA,eAAeo9G,GAAW2B,OAKG,SAAC5oG,GAAoB,OAAAA,EAAKge,OAH9C6qF,GAGTh/G,EAAAA,eAAe8+G,GAAYG,IAElBC,GAAqC,SAChDz8G,GAEA,OAAAzC,EAAAA,eAAeg/G,IAAmB,SAAC7qF,GACjC,OAAAsqF,GAAetqF,EAAO1xB,EAAYnD,UAGzB6/G,GAA+B,SAC1C18G,GAEA,OAAAzC,EAAAA,eACEk/G,GAAmCz8G,IACnC,SAAC28G,GACC,OAAA5yD,GAAqC4yD,EAAY38G,EAAYlC,QAGtD8+G,GAAyB,SACpC58G,GAEA,OAAAzC,EAAAA,eAAem/G,GAA6B18G,IAAc,SAAC6N,GACzD,OAAAsI,GAAuCtI,OAG9BgvG,GAGTt/G,EAAAA,eAAe8+G,GAAcP,IAEpBgB,GAAc,SACzB98G,GAEA,OAAAzC,EAAAA,eACEs/G,GACAD,GAAuB58G,IACvB,SAACoO,EAAkC2uG,GACjC,OAAA3uG,EAAS2uG,OAGFC,GAAwB,SACnCh9G,GAEA,OAAAzC,EAAAA,eAAeu/G,GAAY98G,IAAc,SAAC+7G,GACxC,OAAAI,GAA8BJ,OAGrBkB,GAAgC,SAC3Cj9G,EACAywE,GAEA,OAAOlzE,EAAAA,eAAeu/G,GAAY98G,IAAc,SAAC6N,GAC/C,GAAIA,EACF,OAAOA,EAAO0iE,MAAME,IAAa,CAAEC,WAAY,unBC5FrCwsC,GACdl9G,EACAm9G,GAEA,OAAKn9G,EAIDm9G,GAAuBn9G,EAAYnD,OAAS0M,EAAAA,SAAS43C,aAChD,GAAGnhD,EAAYnD,KAGdmD,EAAYnD,KAAI,IAAImD,EAAYlC,GAvBT,4BCgCjC,SAAAs/G,EACY79G,EACAwK,GADAxa,KAAAgQ,MAAAA,EACAhQ,KAAAwa,eAAAA,EARJxa,KAAAmhF,WAIJ,UAUJ0sC,EAAA3tH,UAAA4tH,eAAA,WAAA,IAAAzkH,EAAArJ,KACE,OAAOA,KAAKwa,eACThM,iBACA5G,KACC6hB,EAAAA,WAAU,SAAChZ,GACT,OAAApH,EAAK2G,MAAMI,OAAO29G,GAAyBt9G,SAkBnDo9G,EAAA3tH,UAAA8tH,iBAAA,SACE/9F,EACAxf,GAEA,IAAMnC,EAAUq/G,GAAqBl9G,GAAa,GAC7CzQ,KAAKmhF,WAAWlxD,KAEnBjwB,KAAKmhF,WAAWlxD,GAAO,IAGzB,IAAMy+B,EAAY1uD,KAAKmhF,WAAWlxD,GAMlC,OALKy+B,EAAUpgD,KAEbogD,EAAUpgD,GAAWtO,KAAKiuH,oBAAoBh+F,EAAKxf,IAG9Ci+C,EAAUpgD,IAGXu/G,EAAA3tH,UAAA+tH,oBAAA,SACNh+F,EACAxf,GAFM,IAAApH,EAAArJ,KAIN,IAAKyQ,EACH,OAAOzQ,KAAKwa,eAAehM,iBAAiB5G,KAC1CkF,EAAAA,QAAO,SAACohH,GAAmB,QAAEA,KAC7BzkG,EAAAA,WAAU,SAACykG,GACT,OAAA7kH,EAAK2kH,iBAAoB/9F,EAAKi+F,OAKpC,IAAM5/G,EAAUq/G,GAAqBl9G,GAAa,GAE5C09G,EAAWpjG,EAAAA,cAAc,CAC7B/qB,KAAKwa,eAAe7L,qBACpB3O,KAAKgQ,MAAMpI,KACTwI,EAAAA,OAAOg+G,GAAkDn+F,EAAK3hB,OAE/D1G,KACDmuB,EAAAA,UAAUC,EAAAA,gBACVxN,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACupH,EAAWtpH,EAAA,GAAEo1E,EAAYp1E,EAAA,GACvBupH,EACJn0C,EAAaj8D,SAAWi8D,EAAap9D,SAAWo9D,EAAal2E,MAIzDsqH,IAA4BF,GAC9BV,GAAqBU,GAAa,KAAU//G,EAG3CggH,GAAkBC,GACrBllH,EAAK2G,MAAMU,SACT,IAAI89G,GAA4B,CAAEv+F,IAAGA,EAAExf,YAAWA,SAMpDg+G,EAAazuH,KAAKgQ,MAAMpI,KAC5BwI,EAAAA,OAAOs+G,GAAuCz+F,EAAK3hB,IACnDxB,EAAAA,QAAO,SAAC4hD,GAAc,YAAcnnD,IAAdmnD,MAGxB,OAAOkG,EAAAA,OACL,WAAM,OAAAu5D,EAAS17G,eACf,WAAM,OAAAg8G,KACN7mH,KAAK2H,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAOhDo+G,EAAA3tH,UAAAyuH,eAAA,SAAeztC,GAAf,IAAA73E,EAAArJ,KACE,OAAOA,KAAKwa,eACThM,iBACA5G,KACC6hB,EAAAA,WAAU,SAAChZ,GACT,OAAApH,EAAK2G,MAAMpI,KACTwI,EAAAA,OACEw+G,GAA2Cn+G,EAAaywE,IAE1Dp0E,EAAAA,OAAOd,eAUjB6hH,EAAA3tH,UAAAmsH,wBAAA,SAAwBwC,GACtB,OAAO7uH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0+G,GAAqCD,MAShDhB,EAAA3tH,UAAA6uH,oBAAA,SACEC,EACA/jF,GAEAjrC,KAAKgQ,MAAMU,SACT,IAAIu+G,GAAkC,CACpC1E,OAAQyE,EACRE,MAAOjkF,MAQb4iF,EAAA3tH,UAAAivH,kBAAA,WAAA,IAAA9lH,EAAArJ,KACEA,KAAKwa,eACFhM,iBACA5G,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAAChC,GACV,OAAApH,EAAK2G,MAAMU,SAAS,IAAI0+G,GAA2B3+G,QAQzDo9G,EAAA3tH,UAAAmvH,gBAAA,SAAgB1uC,GACd,IAAMlwE,EAA2B,CAAElC,GAAIoyE,GACvC3gF,KAAKgQ,MAAMU,SAAS,IAAI0+G,GAA2B3+G,KASrDo9G,EAAA3tH,UAAAovH,iBAAA,SAAiBr/F,EAAaxf,GAC5BzQ,KAAKgQ,MAAMU,SAAS,IAAI89G,GAA4B,CAAEv+F,IAAGA,EAAExf,YAAWA,MAOxEo9G,EAAA3tH,UAAA4sH,aAAA,SAAar8G,GACX,OAAOzQ,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO29G,GAAyBt9G,MAOzDo9G,EAAA3tH,UAAAutH,sBAAA,SAAsBh9G,GACpB,OAAOzQ,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOm/G,GAAmC9+G,MAQ9Co9G,EAAA3tH,UAAAsvH,QAAA,SAAQ/+G,EAA0Bg/G,GAAlC,IAAApmH,EAAArJ,KACE,YADgC,IAAAyvH,IAAAA,GAAA,GACzBzvH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOs/G,GAA0Cj/G,IACjD+X,EAAAA,KAAI,SAAClK,GACH,IAAMgwG,EAAgBhwG,EAAOJ,SAAWI,EAAOvB,SAAWuB,EAAOra,MAC3D0rH,EAAeF,IAAgBnxG,EAAOJ,QACvCowG,IAAiBqB,IACpBtmH,EAAK2G,MAAMU,SAAS,IAAI0+G,GAA2B3+G,IACnDg/G,GAAc,MAGlB3iH,EAAAA,QAAO,SAACwR,GACN,QAAKA,EAAOze,eAAe,WAKpBye,EAAOvB,SAAYuB,EAAOra,QAAUqa,EAAOJ,YAEpD8uB,EAAAA,MAAM,WACN/V,EAAAA,YAAW,WAAM,OAAAjvB,EAAAA,IAAG,QAOxB6lH,EAAA3tH,UAAA0vH,QAAA,SAAQn/G,EAA0Bg/G,GAAlC,IAAApmH,EAAArJ,KACE,YADgC,IAAAyvH,IAAAA,GAAA,GACzBzvH,KAAKwvH,QAAQ/+G,EAAag/G,GAAa7nH,KAC5C6hB,EAAAA,WAAU,SAAC+lG,GACT,OAAAA,EAAUnmH,EAAKyjH,aAAar8G,GAAezI,EAAAA,GAAG,WAKpD6lH,EAAA3tH,UAAA2vH,aAAA,SAAap/G,GACX,OAAOzQ,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0/G,GAAoCr/G,MAI/Co9G,EAAA3tH,UAAA6vH,iBAAA,SAAiBt/G,EAA0B9O,GACzC3B,KAAKgQ,MAAMU,SAAS,IAAIs/G,GAA+Bv/G,EAAa9O,iKA5PvEsG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAzBGyM,EAAAA,aAaR7B,yBCeP,SAAAkgH,EAAsBC,GAAtB,IAAA7mH,EACEiK,EAAA9P,KAAAxD,OAAOA,YADaqJ,EAAA6mH,IAAAA,EAJZ7mH,EAAA8mH,KAAyB9mH,EAAK6mH,IACrCpC,iBACAlmH,KAAKkF,EAAAA,QAAO,SAACqX,GAAS,QAAEA,MAIzB9a,EAAKqtC,SAAW18B,EAAAA,SAAS43C,aACzBvoD,EAAKstC,aAAe,4BATd72C,EAAAmwH,EAAA38G,GAeR28G,EAAA/vH,UAAAi2D,aAAA,WACE,OAAOn2D,KAAKmwH,KAAKvoH,KAAKgD,EAAAA,KAAI,SAAChL,GAAM,OAAAA,EAAEghF,WAMrCqvC,EAAA/vH,UAAAq2D,cAAA,WACE,OAAOvuD,EAAAA,GAAG,CAAC2rD,EAAAA,eAAe6C,SAAU7C,EAAAA,eAAe8C,cAvB7ClgB,uIAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAjBL0oH,aCuBP,SAAoB7wF,GAAAh9B,KAAAg9B,SAAAA,EAjBpBh9B,KAAAowH,aAAepwH,KAAKg9B,SAASp1B,KAC3Bu1B,EAAAA,OAAOs2B,IACP7oD,EAAAA,KAAI,SAACyT,GACH,OAAO,IAAI8yD,GAAuB,CAAEnlC,OAAQ3tB,EAAOhR,QAAQs2C,iBAM/D3jD,KAAAqwH,oBAEIrwH,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOsmF,IACP74G,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDzC,EAAAA,KAAI,SAACyC,GAAY,OAAA,IAAIijH,GAAmCjjH,EAAQ2+B,kCAjBnE/jC,EAAAA,uDALQu1B,EAAAA,WAQPp9B,EAAA,CADCq9B,EAAAA,8CAUDr9B,EAAA,CADCq9B,EAAAA,qDCAH,IAAMC,GAAiB,CACrB6yF,GACAC,GACAnN,GACAoN,GACAC,OAcF,kCAXCj0F,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAhC,GACAkC,EAAAA,YAAYC,WAAWga,GAAoBuvE,GAAuB,CAChErT,aAAcoT,KAEhBrpF,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CAACyrF,0BCpBd,SAAA+I,YACSA,EAAA10F,QAAP,WACE,MAAO,CACLC,SAAUy0F,EACVx0F,UAAW,CACT,CACEp2B,QAASwwC,GACTluC,YAAa4nH,GACbhqH,OAAO,gCAfhBw2B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACP6yF,GACAC,GACAtI,GAAsBtsF,sBCJ1B,uIAJCh0B,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBCcb,SAAA6rH,EACY9gH,EACAimD,EACA77C,GAFApa,KAAAgQ,MAAAA,EACAhQ,KAAAi2D,kBAAAA,EACAj2D,KAAAoa,cAAAA,SAGZ02G,EAAA5wH,UAAA6wH,WAAA,SAAWlkF,EAAmBb,GAA9B,IAAA3iC,EAAArJ,KACEA,KAAKgxH,qBAAqBhlF,GAAQv5B,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACw2E,EAASv2E,EAAA,GAAEksH,EAAclsH,EAAA,GACrE,OAAAsE,EAAK2G,MAAMU,SACT,IAAIwgH,GAA2B,CAC7Br5G,OAAQyjE,EACRtvC,OAAQilF,EACRpkF,UAAWA,SAMnBikF,EAAA5wH,UAAAixH,cAAA,SAActkF,EAAmBb,GAAjC,IAAA3iC,EAAArJ,KACEA,KAAKgxH,qBAAqBhlF,GAAQv5B,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACw2E,EAASv2E,EAAA,GAAEksH,EAAclsH,EAAA,GACrE,OAAAsE,EAAK2G,MAAMU,SACT,IAAI0gH,GAA8B,CAChCv5G,OAAQyjE,EACRtvC,OAAQilF,EACRpkF,UAAWA,SAWnBikF,EAAA5wH,UAAAmxH,yBAAA,WACE,OAAOrxH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBtiB,OASlCy4E,EAAA5wH,UAAAoxH,2BAAA,WACE,OAAOtxH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBriB,OASpCy4E,EAAA5wH,UAAAqxH,2BAAA,WACE,OAAOvxH,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBpiB,OASpCy4E,EAAA5wH,UAAAsxH,+BAAA,WACExxH,KAAKgQ,MAAMU,SAAS,IAAI+gH,KAGlBX,EAAA5wH,UAAA8wH,qBAAA,SAAqBhlF,GAC3B,OAAIA,EACKhsC,KAAKoa,cAAcf,YAAYzR,KACpC4K,EAAAA,KAAK,GACL5H,EAAAA,KAAI,SAACiN,GAAW,MAAA,CAACA,EAAQm0B,OAGpBjhB,EAAAA,cAAc,CACnB/qB,KAAKoa,cAAcf,YACnBrZ,KAAKi2D,kBAAkB9O,oBACtBv/C,KAAK4K,EAAAA,KAAK,gLAtFlBvK,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAfGyM,EAAAA,aAYRgiD,UATA36C,wBCGP,SAAAy4G,EAAsB7rH,GAAA7F,KAAA6F,OAAAA,SAEtB6rH,EAAAxxH,UAAAyxH,uBAAA,qBACE,OAAO3lH,QAAwC,QAAjChH,EAAkB,QAAlBD,EAAY,QAAZD,EAAC9E,KAAK6F,cAAM,IAAAf,OAAA,EAAAA,EAAEumC,YAAI,IAAAtmC,OAAA,EAAAA,EAAE6sH,qBAAa,IAAA5sH,OAAA,EAAAA,EAAEigG,kJAPpDh9F,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL0sH,wBCqCP,SAAAC,EACY9hH,EACA0pG,EACAnnD,EACA7/B,EACAq/F,EACA33G,GANZ,IAAA/Q,EAAArJ,KACYA,KAAAgQ,MAAAA,EACAhQ,KAAA05G,YAAAA,EACA15G,KAAAuyD,iBAAAA,EACAvyD,KAAA0yB,gBAAAA,EACA1yB,KAAA+xH,kBAAAA,EACA/xH,KAAAoa,cAAAA,EArBJpa,KAAAgyH,QAAmC,IAAIjgH,EAAAA,qBAC7CxK,GAGevH,KAAAiyH,+BACf,iCACMjyH,KAAAm0D,eAAiBn0D,KAAKiyH,+BAEtBjyH,KAAAg0D,cAAgBh0D,KAAKgyH,QAAQpqH,KACnC6hB,EAAAA,WAAU,SAACuiB,GAET,OADA3iC,EAAK2iC,OAASA,EACP3iC,EAAKkpD,iBAAiB5K,cAAc3b,OAY7CjhB,EAAAA,cAAc,CACZ/qB,KAAK05G,YAAYruG,MACjBrL,KAAK0yB,gBAAgBpB,cACpB7e,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAAC2wD,EAAI1wD,EAAA,GAAEktB,EAAcltB,EAAA,GAC7B0wD,GAAQA,EAAK7P,YAAc3zB,GAC7B5oB,EAAKu8C,WAAa6P,EAAK7P,WACvBv8C,EAAK2oH,QAAQnwH,KAAK,gBAAgBowB,EAAiB5oB,EAAKu8C,aAC/C6P,IAASA,EAAK7P,YACvBv8C,EAAK2oH,QAAQnwH,UAAK0F,MAItBvH,KAAKoa,cAAcf,YAAY5G,WAAU,SAACoF,GACxCxO,EAAKwO,OAASA,EAEVxO,EAAK+qD,eAAev8C,IACtBxO,EAAKuT,OAGPvT,EAAK8qD,eAAiBt8C,KAGxB7X,KAAKkyH,eAAiBlyH,KAAKg0D,cAAcpsD,KACvCgD,EAAAA,KAAI,SAAC2pD,GAKH,MAAO,CACLlpB,KAAMkpB,EAAW5yD,MACjBuc,QAASq2C,EAAWr2C,QACpBs2C,QACGD,EAAWtwD,OAASswD,EAAWx3C,WAAaw3C,EAAWr2C,YAG9DpR,EAAAA,QAAO,SAAChI,GAAgB,OAAPA,EAAAoZ,WACjBsK,EAAAA,KAAI,SAAC1jB,OAAEumC,EAAIvmC,EAAAumC,KAAEmpB,EAAM1vD,EAAA0vD,OACbnrD,EAAK2iC,QAAU3iC,EAAKorD,QAAQppB,KAAUmpB,GACxCnrD,EAAKuT,UAGThS,EAAAA,KAAI,SAAC9F,OAAEumC,EAAIvmC,EAAAumC,KAAO,OAACA,GAAc,MACjC97B,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAI3CqiH,EAAA5xH,UAAAunD,QAAA,WACE,OAAOznD,KAAKkyH,gBAGdJ,EAAA5xH,UAAAwoD,WAAA,WACE,OAAO1oD,KAAKuyD,iBAAiB7J,WAAW1oD,KAAKgsC,SAG/C8lF,EAAA5xH,UAAAiyH,UAAA,WACE,OAAOnyH,KAAKg0D,cAAcpsD,KACxBgD,EAAAA,KAAI,SAACygC,GAAS,OAACA,EAAKtuB,SAAWsuB,EAAKpnC,SAAWonC,EAAKntB,aAIhD4zG,EAAA5xH,UAAA0c,KAAA,WACF5c,KAAKk7B,WAAWl7B,KAAK6X,SAAW7X,KAAKgsC,QACvChsC,KAAKuyD,iBAAiB/J,SAAS,CAC7B3wC,OAAQ7X,KAAK6X,OACbm0B,OAAQhsC,KAAKgsC,UAKnB8lF,EAAA5xH,UAAA4oD,SAAA,SAAS7c,EAAqBC,GAA9B,IAAA7iC,EAAArJ,KACMoyH,GAAgB,EACpBpyH,KAAKg0D,cACFpsD,KACCkF,EAAAA,QAAO,WAAM,OAACslH,KACd3oG,EAAAA,WAAU,SAAC2rC,GAKT,OAJI/rD,EAAKorD,QAAQW,EAAUzzD,SAAWyzD,EAAUl3C,UAC9Ck0G,GAAgB,EAChB/oH,EAAKuT,QAEA5U,EAAAA,GAAGotD,MAEZtoD,EAAAA,QAAO,SAACsoD,GAAc,OAAC/rD,EAAKorD,QAAQW,EAAUzzD,UAC9C6Q,EAAAA,KAAK,IAENC,WAAU,WACTpJ,EAAKkpD,iBAAiBzJ,SACpBz/C,EAAKwO,OACLxO,EAAK2iC,OACLC,EACAC,OAKR4lF,EAAA5xH,UAAA+oD,YAAA,SAAYxe,GACVzqC,KAAKuyD,iBAAiBtJ,YACpBjpD,KAAK6X,OACL7X,KAAKgsC,OACLvB,EAAM6B,cAIVwlF,EAAA5xH,UAAAipD,YAAA,SAAY7c,EAAqBJ,GAC/BlsC,KAAKuyD,iBAAiBpJ,YACpBnpD,KAAK6X,OACL7X,KAAKgsC,OACLM,EACAJ,IAIJ4lF,EAAA5xH,UAAAmpD,SAAA,SAASpd,GACP,OAAOjsC,KAAKuyD,iBAAiBlJ,SAASrpD,KAAKgsC,OAAQC,IAMrD6lF,EAAA5xH,UAAAwjF,UAAA,WACE,OAAO1jF,KAAK+xH,kBAAkBJ,0BAGxBG,EAAA5xH,UAAAu0D,QAAA,SAAQppB,GACd,OACGA,GAAyB,iBAATA,GAAkD,IAA7B7rC,OAAO6f,KAAKgsB,GAAM1qC,QAIpDmxH,EAAA5xH,UAAAk0D,eAAA,SAAev8C,GACrB,OACE7X,KAAKk7B,WAAWrjB,IAChB7X,KAAKm0D,iBAAmBt8C,GACxB7X,KAAKm0D,iBAAmBn0D,KAAKiyH,gCAIzBH,EAAA5xH,UAAAg7B,WAAA,SAAWrjB,GACjB,YAAyB,IAAXA,GAA0BA,IAAW5Q,2NAxKtDgB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAfLyM,EAAAA,aASAqjG,UAGAztD,UALAn2B,UAGAqgG,UAPAz4G,wBCsBP,SAAAo5G,EACYriH,EACA0pG,EACAnnD,EACAn4C,GAHApa,KAAAgQ,MAAAA,EACAhQ,KAAA05G,YAAAA,EACA15G,KAAAuyD,iBAAAA,EACAvyD,KAAAoa,cAAAA,SAGZi4G,EAAAnyH,UAAAoyH,eAAA,SAAez6G,EAAgBouB,EAAe0gF,GAC5C3mH,KAAKgQ,MAAMU,SACT,IAAIy2G,GAA2B,CAAEtvG,OAAMA,EAAEouB,KAAIA,EAAE0gF,YAAWA,MAI9D0L,EAAAnyH,UAAAqyH,YAAA,WAAA,IAAAlpH,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKsnD,gBACLtnD,KAAK05G,YAAYruG,MACjBrL,KAAKoa,cAAcf,cAClBzR,KACDG,EAAAA,uBACAygB,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACyiH,EAAUxiH,EAAA,GAAE0wD,EAAI1wD,EAAA,GAAE8S,EAAM9S,EAAA,IAEzBiH,QAAQu7G,IACT1vG,IAAW5Q,GACX+E,QAAQypD,IACRzpD,QAAQypD,EAAK7P,aAEbv8C,EAAKmpH,aAAa36G,EAAQ49C,EAAK7P,eAGnC94C,EAAAA,QAAO,SAAChI,OAACyiH,EAADxjH,EAAAe,EAAA,GAAW,GAAM,OAAAkH,QAAQu7G,MACjC99F,EAAAA,WAAU,SAAC3kB,OAACyiH,EAADxjH,EAAAe,EAAA,GAAW,GAAM,OAAAuE,EAAKkpD,iBAAiB9K,QAAQ8/D,QAI9D8K,EAAAnyH,UAAAsyH,aAAA,SAAa36G,EAAgB+tC,GAC3B5lD,KAAKgQ,MAAMU,SACT,IAAI+hH,GAAyB,CAC3B56G,OAAMA,EACN+tC,WAAUA,EACVjC,WAAYgC,GAAgBC,OAKlCysE,EAAAnyH,UAAA4oD,SAAA,SAAS7c,GAAT,IAAA5iC,EAAArJ,KACEA,KAAKsnD,gBACF1/C,KACCG,EAAAA,uBACAugB,EAAAA,eAAetoB,KAAKoa,cAAcf,YAAarZ,KAAK05G,YAAYruG,OAChEmd,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACyiH,EAAUxiH,EAAA,GAAE8S,EAAM9S,EAAA,GAAE0wD,EAAI1wD,EAAA,IAEzBiH,QAAQu7G,IACTv7G,QAAQypD,IACRzpD,QAAQypD,EAAK7P,aAEbv8C,EAAKmpH,aAAa36G,EAAQ49C,EAAK7P,eAGnC94C,EAAAA,QAAO,SAAChI,OAACyiH,EAADxjH,EAAAe,EAAA,GAAW,GAAM,OAAAkH,QAAQu7G,MACjC/0G,EAAAA,KAAK,IAENC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACyiH,EAAUxiH,EAAA,GAAE8S,EAAM9S,EAAA,GAC7B,OAAAsE,EAAKkpD,iBAAiBzJ,SAASjxC,EAAQ0vG,EAAYt7E,EAAa,OAItEomF,EAAAnyH,UAAA+oD,YAAA,SAAYxe,GAAZ,IAAAphC,EAAArJ,KACEA,KAAKsnD,gBACF1/C,KACCG,EAAAA,uBACAugB,EAAAA,eAAetoB,KAAKoa,cAAcf,YAAarZ,KAAK05G,YAAYruG,OAChEmd,EAAAA,KAAI,SAAC1jB,OAAAC,EAAAhB,EAAAe,EAAA,GAACyiH,EAAUxiH,EAAA,GAAE8S,EAAM9S,EAAA,GAAE0wD,EAAI1wD,EAAA,IAEzBiH,QAAQu7G,IACTv7G,QAAQypD,IACRzpD,QAAQypD,EAAK7P,aAEbv8C,EAAKmpH,aAAa36G,EAAQ49C,EAAK7P,eAGnC94C,EAAAA,QAAO,SAAChI,OAACyiH,EAADxjH,EAAAe,EAAA,GAAW,GAAM,OAAAkH,QAAQu7G,MACjC/0G,EAAAA,KAAK,IAENC,WAAU,SAAC3N,OAAAC,EAAAhB,EAAAe,EAAA,GAACyiH,EAAUxiH,EAAA,GAAE8S,EAAM9S,EAAA,GAC7B,OAAAsE,EAAKkpD,iBAAiBtJ,YAAYpxC,EAAQ0vG,EAAY98E,EAAM6B,iBAIlE+lF,EAAAnyH,UAAAwyH,mBAAA,WAAA,IAAArpH,EAAArJ,KACE,OAAOA,KAAKsnD,gBAAgB1/C,KAC1B6hB,EAAAA,WAAU,SAAC89F,GACT,OAAAl+G,EAAKkpD,iBACFxzB,SAASwoF,GACT3/G,KAAKgD,EAAAA,KAAI,SAAC+nH,GAAW,OAACA,WAKrBN,EAAAnyH,UAAAonD,cAAA,WACR,OAAOtnD,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOk3G,gMAxGjCr/G,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAtBGyM,EAAAA,aAcRqjG,UAKAztD,UARAvuC,UCVI25G,GAAoC,CAC/Ct9G,QAAS,CACPC,IAAK,CACHsd,UAAW,CACT67B,UAAW,uBACXyyB,WAAY,iBACZ0xC,MAAO,YACP1uG,KAAM,qBAIZ2uG,cAAe,kBCIf,SAAAC,EAAsB/8D,GAAAh2D,KAAAg2D,YAAAA,SAWtB+8D,EAAA7yH,UAAA8yH,mBAAA,SAAmBluH,OACjBuF,EAAGvF,EAAAuF,IACH4oH,EAAcnuH,EAAAmuH,eAERC,EAAmBD,MAAAA,OAAc,EAAdA,EAAgBE,WAEzC,OAAKD,EAI2B,iBAArBA,GAAiCA,EAAiBjxF,IACpDj6B,EAAAA,GAAG,CAAC,CAAEorH,KAAM/oH,EAAK1H,MAAOuwH,EAAiBjxF,OAG3CjiC,KAAKqzH,yBAAyBH,GAAkBtrH,KACrDgD,EAAAA,KAAI,SAACjI,GAAU,MAAA,CAAC,CAAEA,MAAKA,EAAEywH,KAAM/oH,QARxBrC,EAAAA,GAAG,KAeJ+qH,EAAA7yH,UAAAmzH,yBAAA,SACRH,GADQ,IAAA7pH,EAAArJ,KAGFszH,EACwB,iBAArBJ,EACHA,EACAA,EAAiB/4B,KAEvB,OAAOn6F,KAAK4M,YAAYhF,KACtB6hB,EAAAA,WAAU,SAACrd,GAAW,OAAA/C,EAAK2sD,YAAYI,UAAUk9D,EAASlnH,MAAAA,EAAAA,EAAU,SAO9D2mH,EAAA7yH,UAAA0M,UAAA,WACR,OAAO5E,EAAAA,GAAG,6IArDbC,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAXjBuxD,wBC6BP,SAAA68D,EACY5jH,EACAi3B,GAFZ,IAAAv9B,EAAArJ,KACYA,KAAA2P,uBAAAA,EACA3P,KAAA4mC,SAAAA,EAMO5mC,KAAA+O,QAAU/O,KAAK2P,uBAAuBZ,QAAQnH,KAE/DgD,EAAAA,KAAI,SAACjC,GAAW,OAAUA,EAAOsB,MAAM,EAAGtB,EAAOhI,YAehCX,KAAAwzH,kBAEfxzH,KAAK+O,QAAQnH,KACfgD,EAAAA,KAAI,SAACjC,GACH,OAAAA,EAAO2W,QAA0B,SAAC00D,EAAS7kE,SACnCskH,EAASz/C,EAAQrzE,OACnBqzE,EAAQA,EAAQrzE,OAAS,GACzB,CACEwO,MAAO,KACPukH,SAAUrqH,EAAKu9B,SAASv7B,IAAI0nH,IAC5B1oH,IAAK,IAGLqpH,EAAkC,QAA1B5uH,EAAGuE,EAAKsqH,YAAYxkH,UAAM,IAAArK,EAAAA,EAAI2uH,EAAOC,SAE7C/oC,EAAUthF,EAAKuqH,WAAWzkH,GAC1B9E,EAAMopH,EAAOppH,KAAOsgF,EAAU,IAAIA,EAAY,IAEpD,OAAO3W,EAAQ7vE,OAAO,CAAEgL,MAAKA,EAAEukH,SAAQA,EAAErpH,IAAGA,MAC3C,OAELkF,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAOzC8jH,EAAArzH,UAAA8yH,mBAAA,SACE7oF,GADF,IAAA9gC,EAAArJ,KAGE,OAAOA,KAAKwzH,kBAAkB5rH,KAC5BgD,EAAAA,KAAI,SAACipH,GACH,OAAA1pF,MAAAA,OAAO,EAAPA,EAAS2pF,qBACLD,EACAxqH,EAAK0qH,iBAAiBF,MAE5BpqG,EAAAA,WAAU,SAACoqG,GACT,OAAAA,EAAiBlzH,OACboqB,EAAAA,cACE8oG,EAAiBjpH,KAAI,SAACopH,GACpB,OAAA3qH,EAAK4qH,uBAAuBD,OAGhChsH,EAAAA,GAAG,OAET4C,EAAAA,KAAI,SAACspH,GAAqB,OAAAA,EAAiBC,YAUrCZ,EAAArzH,UAAAyzH,YAAA,SAAYxkH,GACpB,IAAM8jH,EAAiBjzH,KAAKo0H,kBAAkBjlH,GAE9C,MAA8B,iBAAnB8jH,IAA+BA,MAAAA,OAAc,EAAdA,EAAgBS,UACjD1zH,KAAK4mC,SAASv7B,IAAI4nH,EAAeS,SAAU,MAE7C,MAMCH,EAAArzH,UAAA+zH,uBAAA,SAAuBjvH,OAC/BmK,EAAKnK,EAAAmK,MACLukH,EAAQ1uH,EAAA0uH,SACRrpH,EAAGrF,EAAAqF,IAEGgqH,EAAqBX,EAE3B,MAAqD,mBAA1CW,EAAmBrB,mBACrBqB,EAAmBrB,mBAAmB,CAC3C7jH,MAAKA,EACL9E,IAAGA,EACH4oH,eAAgBjzH,KAAKo0H,kBAAkBjlH,KAGpCnH,EAAAA,GAAG,KAcJurH,EAAArzH,UAAA6zH,iBAAA,SACNF,GAOA,YADI7yH,EAAI6yH,EAAiBlzH,OAAS,EACgB,KAAjB,QAA1BoE,EAAmB,QAAnBD,EAAA+uH,EAAiB7yH,UAAE,IAAA8D,OAAA,EAAAA,EAAEqK,aAAK,IAAApK,OAAA,EAAAA,EAAEsF,IAAI1J,SAAgBK,GAAK,GAC1DA,IAIF,OAAO6yH,EAAiB5pH,MAAM,EAAGjJ,IAO3BuyH,EAAArzH,UAAA0zH,WAAA,SAAWzkH,GACjB,OAAOA,EAAM9E,IAAIO,KAAI,SAAC4mD,GAAe,OAAAA,EAAWtoD,QAAMgxB,KAAK,MAMnDq5F,EAAArzH,UAAAk0H,kBAAA,SACRjlH,WAUA,OAA+B,QAA/BpK,EAAyB,QAAzBD,EAAOqK,MAAAA,OAAK,EAALA,EAAO1G,mBAAW,IAAA3D,OAAA,EAAAA,EAAEyP,YAAI,IAAAxP,OAAA,EAAAA,EAAEuvH,2KAjKpCrsH,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDA1BjB2K,UAJYq4B,EAAAA,+BCmDnB,SAAAosF,EACYrE,EACAl6D,EACAw+D,GAHZ,IAAAnrH,EAKEiK,EAAA9P,KAAAxD,OAAOA,YAJGqJ,EAAA6mH,IAAAA,EACA7mH,EAAA2sD,YAAAA,EACA3sD,EAAAmrH,wBAAAA,EA7BFnrH,EAAA8mH,KAAyB9mH,EAAK6mH,IACrCpC,iBACAlmH,KAAKkF,EAAAA,QAAO,SAAClN,GAAM,OAAAoM,QAAQpM,OAKpByJ,EAAAorH,gBAENprH,EAAK2sD,YACNI,UAAU,eACVxuD,KAAKgD,EAAAA,KAAI,SAACjI,GAAU,MAAA,CAAC,CAAEA,MAAOA,EAAOywH,KAAM,UAKtC/pH,EAAAqrH,aAA6C3pG,EAAAA,cAAc,CACjE1hB,EAAKorH,gBACLE,EAAAA,OAAM,WAAM,OAAAtrH,EAAKmrH,wBAAwBxB,0BACxCprH,KACDgD,EAAAA,KACE,SAACgqH,GAAgB,OAAAA,EAAYT,SAC7B5kH,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAUzCpG,EAAKqtC,SAAW18B,EAAAA,SAAS43C,sBAnCnB9xD,EAAAy0H,EAAAjhH,GA0CRihH,EAAAr0H,UAAAi2D,aAAA,WACE,OAAOn2D,KAAKmwH,KAAKvoH,KAAKgD,EAAAA,KAAI,SAAChL,GAAM,OAAAA,EAAEghF,WAOrC2zC,EAAAr0H,UAAA8yH,mBAAA,WACE,OAAOhzH,KAAK00H,iBAnDNn+E,qKAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAdL0oH,UAFAn3D,UAMA68D,aCIT,sBCVgBsB,GACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAA,GAGO,SAACpwH,GACN,IAAIswH,EAAsB,GAE1B,OAAOtwH,EAAOkD,KACZ4gB,EAAAA,KAAI,SAAC7mB,GAAU,OAAAqzH,EAAetxH,KAAK/B,MACnCkG,EAAAA,aAAaitH,EAAMC,GACnBnqH,EAAAA,KAAI,WAAM,OAAAoqH,KACVxsG,EAAAA,KAAI,WAAM,OAACwsG,EAAiB,6BDVjCv4F,EAAAA,SAAQv0B,KAAA,CAAC,CACRi0B,UAAW,CACT,CACEp2B,QAASwwC,GACTluC,YAAaksH,GACbtuH,OAAO,2BE+Db,SAAAgvH,0DAAiDn1H,EAAAm1H,EAAA3hH,MAAA+sE,8HAJhDp4E,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBC9Cb,SAAAiwH,EAAsBC,GAAAn1H,KAAAm1H,cAAAA,SAOtBD,EAAAh1H,UAAAk1H,mBAAA,SACEz0C,EACA00C,GAFF,IAAAhsH,EAAArJ,KAIE,OAAOA,KAAKs1H,UAAU30C,EAAQ00C,GAAeztH,KAC3C6hB,EAAAA,WAAU,SAACtF,GAAS,OAAA9a,EAAKksH,WAAWpxG,QAaxC+wG,EAAAh1H,UAAAs1H,oBAAA,SAAoB70C,GAClB,OAAO3gF,KAAKy1H,kBAAkB90C,GAAQ/4E,KACpCgD,EAAAA,KAAI,SAACuZ,GAAS,QAAEA,KAAUA,EAAKuxG,mBAOnCR,EAAAh1H,UAAAy1H,uBAAA,SACEC,GAEA,OAAO5tH,EAAAA,GAAGhI,KAAK61H,iBAAiBD,KAMlCV,EAAAh1H,UAAA41H,wBAAA,SACE72G,GADF,IAAA5V,EAAArJ,KAGE,OAAOgI,EAAAA,GAAGiX,EAAIrU,KAAI,SAAC2D,GAAO,OAAAlF,EAAKwsH,iBAAiBtnH,QAMxC2mH,EAAAh1H,UAAAu1H,kBAAA,SAAkB90C,GAC1B,OAAO34E,EAAAA,GACLhI,KAAKm1H,cAAcY,cAAgB/1H,KAAKm1H,cAAcY,aAAalD,MAC/D7yH,KAAKm1H,cAAcY,aAAalD,MAAMlmH,MAAK,SAAC/M,GAAM,OAAAA,EAAE+gF,SAAWA,KAC/D,OASEu0C,EAAAh1H,UAAAo1H,UAAA,SACR30C,EACA00C,GAFQ,IAAAhsH,EAAArJ,KAIR,OAAOA,KAAKy1H,kBAAkB90C,GAAQ/4E,KACpC6hB,EAAAA,WAAU,SAACtF,GACT,OAAIA,GAEGkxG,EAAclxG,OACjBkxG,EAAclxG,KAAI3kB,OAAAqF,OAAA,GACbsf,GAELkxG,EAAclxG,KAAK68D,MAAQ,IAExBq0C,EAAclxG,KAAK68D,QACtBq0C,EAAclxG,KAAK68D,MAAQ,IAEtB33E,EAAKksH,WAAWF,EAAelxG,EAAK68D,QAEpCh5E,EAAAA,GAAGqtH,QAaRH,EAAAh1H,UAAAq1H,WAAA,SACRF,EACAr0C,eAWA,IAPGA,GACDhhF,KAAKm1H,cAAcY,cACnB/1H,KAAKm1H,cAAcY,aAAa/0C,QAEhCA,EAAQhhF,KAAKm1H,cAAcY,aAAa/0C,QAGrCA,EACH,OAAOh5E,EAAAA,GAAGqtH,OAGZ,IAAuB,IAAArwH,EAAArB,EAAAnE,OAAO6f,KAAK2hE,IAAMrpE,EAAA3S,EAAAnD,QAAA8V,EAAA1V,KAAA0V,EAAA3S,EAAAnD,OAAE,CAAtC,IAAMq/E,EAAQvpE,EAAAhW,MACjB,IAAKnC,OAAO6f,KAAKg2G,EAAclxG,KAAK68D,OAAO3vE,SAAS6vE,GAAW,CAE7Dm0C,EAAclxG,KAAK68D,MAAME,GAAY,OAErC,IAAwB,IAAA13E,GAAAijG,OAAA,EAAA9oG,EAAA3D,KAAKg2H,wBAAwBh1C,EAAOE,KAASx3E,EAAAF,EAAA3H,QAAA6H,EAAAzH,KAAAyH,EAAAF,EAAA3H,OAAE,CAAlE,IAAM6sD,EAAShlD,EAAA/H,MACb0zH,EAAclxG,KAAK68D,MAAME,GAAUC,aACtCk0C,EAAclxG,KAAK68D,MAAME,GAAUC,WAAa,IAElDk0C,EAAclxG,KAAK68D,MAAME,GAAUC,WAAWz9E,KAAK,CACjDusB,IAAKy+B,EAAUz+B,IACfqxD,SAAU5yB,EAAU4yB,SACpB3xC,SAAU+e,EAAU/e,WAEjB0lF,EAAcl0C,aACjBk0C,EAAcl0C,WAAa,IAG7Bk0C,EAAcl0C,WAAWz9E,KAAKgrD,yMAKpC,OAAO1mD,EAAAA,GAAGqtH,IAGFH,EAAAh1H,UAAA81H,wBAAA,SACRh1C,EACAE,WAEMC,EAAa,GACnB,GAAIH,EAAME,IAAaF,EAAME,GAAU+0C,iBACrC,IAA0B,IAAAlxH,EAAApB,EAAAq9E,EAAME,GAAU+0C,cAAYjxH,EAAAD,EAAAlD,QAAAmD,EAAA/C,KAAA+C,EAAAD,EAAAlD,OAAE,CAAnD,IAAM+zH,EAAW5wH,EAAArD,MACpB,GACE3B,KAAKm1H,cAAcY,cACnB/1H,KAAKm1H,cAAcY,aAAa50C,WAChC,CACA,IAAMzyB,EAAY1uD,KAAKm1H,cAAcY,aAAa50C,WAChDy0C,GAEElnE,GACFyyB,EAAWz9E,KAAIlE,OAAAqF,OAAA,CAAGorB,IAAK2lG,GAAgBlnE,uGAK/C,OAAOyyB,GAGC+zC,EAAAh1H,UAAA21H,iBAAA,SAAiBD,GACzB,OAAO51H,KAAKm1H,cAAcY,cACxB/1H,KAAKm1H,cAAcY,aAAa50C,WAC9BnhF,KAAKm1H,cAAcY,aAAa50C,WAAWy0C,QAC3CruH,2IA3KPU,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAfZ8vH,wBCOA,SAAAiB,EACYC,EACAC,EACAvwH,GAFA7F,KAAAm2H,0BAAAA,EACAn2H,KAAAo2H,oBAAAA,EACAp2H,KAAA6F,OAAAA,SAGZqwH,EAAAh2H,UAAAmL,IAAA,SACEkD,EACAkC,GAFF,IAAApH,EAAArJ,KAIE,OAAOA,KAAKm2H,0BACTR,uBAAuBpnH,GACvB3G,KACC6hB,EAAAA,WAAU,SAAC4sG,GACT,OAAAA,EACIruH,EAAAA,GAAGquH,GACHhtH,EAAK+sH,oBAAoBx5G,KAAKrO,EAAIkC,QAK9CylH,EAAAh2H,UAAAo2H,QAAA,SAAQr3G,EAAexO,GAAvB,IAAApH,EAAArJ,KACE,OAAOA,KAAKm2H,0BAA0BL,wBAAwB72G,GAAKrX,KACjE6hB,EAAAA,WAAU,SAAC8sG,GAET,IAAMC,EAAaD,EAAqBj3G,QACtC,SAACC,EAAKmvC,EAAWvsB,GAIf,YAHkB56B,IAAdmnD,GACFnvC,EAAI7b,KAAKub,EAAIkjB,IAER5iB,IAET,IAGF,OAAIi3G,EAAW71H,OAAS,EACf0I,EAAK+sH,oBACT32C,oBAAoB+2C,EAAY/lH,GAChC7I,KACCgD,EAAAA,KAAI,SAAC6rH,GAAqB,OAAAvyH,EACrBqyH,EAAqBzpH,OAAOd,SAC5ByqH,OAIFzuH,EAAAA,GAAGuuH,8KAjDnBtuH,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJL+vH,UACAnzC,UAHAttE,wBCcP,SAAAiiH,EACU15F,EACA25F,GAFV,IAAAttH,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA22H,sBAAAA,EAGF32H,KAAAwuE,eAAqCxuE,KAAKg9B,SAASp1B,KACzDu1B,EAAAA,OACEizB,GACAC,GACAC,KAIJtwD,KAAA42H,eAAiBC,EAAAA,cACf,WAAM,OAAA,SAAC/xH,OAAAC,OAAA,IAAAD,EAA8B,GAAEA,EAA9BiwH,EAAShwH,EAAAgwH,UAAE/vH,EAAAD,EAAA+iD,SAAAA,OAAQ,IAAA9iD,EAAG,EAACA,EAI9B,OAAAqE,EAAK2zB,SAASp1B,KACZu1B,EAAAA,OAAoC25F,IACpCtS,EAAAA,SAAQ,SAACnY,GAAY,OAAAshB,GAAqBthB,EAAQh/F,QAAQoD,gBAC1D4jC,EAAAA,UAAS,SAAC0iF,GACR,OAAAA,EAAYnvH,KACVitH,GAAmB/sE,EAAUitE,GAC7B1gF,EAAAA,UAAS,SAACg4D,GACR,OAAAhjG,EAAK2tH,qBACH3qB,EAAQzhG,KAAI,SAACyT,GAAW,OAAAA,EAAOhR,QAAQ4iB,OACvCo8E,EAAQ,GAAGh/F,QAAQoD,oBAK3B09D,GAAW9kE,EAAKmlE,4BAIdkoD,EAAAx2H,UAAA82H,qBAAA,SACNC,EACAxmH,GAKA,OAAOzQ,KAAK22H,sBAAsBL,QAAQW,EAAexmH,GAAa7I,KACpE6hB,EAAAA,WAAU,SAAC03D,WACHkrB,EAGA,GACA6qB,EAAW,IAAI5kH,IAAY2kH,OACjC,IAAwB,IAAAE,EAAAxzH,EAAAw9E,GAAUi2C,EAAAD,EAAAt1H,QAAAu1H,EAAAn1H,KAAAm1H,EAAAD,EAAAt1H,OAAE,CAA/B,IAAM6sD,EAAS0oE,EAAAz1H,MAClB0qG,EAAQ3oG,KACN,IAAI2zH,GAAmC,CACrC3oE,UAASA,EACTz+B,IAAKy+B,EAAUz+B,IACfxf,YAAWA,KAGfymH,EAASpjG,OAAO46B,EAAUz+B,uGAY5B,OARAinG,EAAS3tH,SAAQ,SAAC0mB,GAChBo8E,EAAQ3oG,KACN,IAAI4zH,GAAgC,CAClCrnG,IAAGA,EACHxf,YAAWA,QAIVo3B,EAAAA,KAAKwkE,MAEdp1E,EAAAA,YAAW,SAAChzB,GACV,OAAA4jC,EAAAA,KACEovF,EAAcrsH,KACZ,SAACqlB,GACC,OAAA,IAAIqnG,GAAgC,CAClCrnG,IAAGA,EACHhsB,MAAOm4B,GAAmBn4B,GAC1BwM,YAAWA,uCAjF1BxI,EAAAA,uDAfQu1B,EAAAA,eAWA04F,wBC8EP,SAAAqB,EACUv6F,EACA25F,EACAn8G,GAHV,IAAAnR,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA22H,sBAAAA,EACA32H,KAAAwa,eAAAA,EAjFVxa,KAAAw3H,qBAGIx3H,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOs6F,IACP7sH,EAAAA,KAAI,SAACyT,GAA8C,OAAAA,EAAOhR,WAC1DzC,EAAAA,KAAI,SAACyC,GACH,MAAO,CACL4R,IAAK5V,EAAKquH,oBAAoBrqH,EAAQ6hH,OACtC3E,OAAQl9G,EAAQk9G,WAGpBl2E,EAAAA,UAAS,SAAC9/B,GACR,GAAIA,EAAK0K,IAAIg3G,aAAat1H,OAAS,EACjC,OAAO0I,EAAKmR,eAAezM,iBAAiBnG,KAC1CkF,EAAAA,QAAO,SAACsC,GAAgB,YAAgB7H,IAAhB6H,KACxBxE,EAAAA,KAAI,SAACwE,GAAgB,OAAAA,EAAYtB,MAAMQ,WACvCkE,EAAAA,KAAK,GACL6hC,EAAAA,UAAS,SAAC5jC,GAER,OAAApH,EAAKstH,sBACFL,QAAQ/hH,EAAK0K,IAAIg3G,aAAcxlH,GAC/B7I,KACCgD,EAAAA,KACE,SAACu2E,GACC,OAAA,IAAIw2C,GAAyC,CAC3CpN,OAAQh2G,EAAKg2G,OACbppC,WAAYA,OAGlBlqD,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4vH,GACFrjH,EAAKg2G,OACLnuF,GAAmBn4B,aAO5B,GAAIsQ,EAAK0K,IAAI44G,QAAQl3H,OAAS,QAG9B,KAAI4T,EAAK0K,IAAI64G,SAASn3H,OAAS,GAIpC,OAAOqH,EAAAA,GACL,IAAI4vH,GACFrjH,EAAKg2G,OACL,0CAQVgN,EAAAr3H,UAAAw3H,oBAAA,SACEzsF,GAEA,IAAM4sF,EAAoB,GACpB5B,EAAyB,GACzB6B,EAAqB,GAW3B,OATA7sF,EAAS1hC,SAAQ,SAAClF,GACO,yBAAnBA,EAAK0zH,UACP9B,EAAavyH,KAAKW,EAAKkK,IACK,iBAAnBlK,EAAK0zH,UACdF,EAAQn0H,KAAKW,EAAKkK,IACU,kBAAnBlK,EAAK0zH,WACdD,EAASp0H,KAAKW,EAAKkK,OAGhB,CAAEspH,QAASA,EAAS5B,aAAcA,EAAc6B,SAAUA,8BA9EpE7vH,EAAAA,uDARQu1B,EAAAA,eAKA04F,UAFAnmH,MAQP3P,EAAA,CADCq9B,EAAAA,wECED,SAAAu6F,EACYC,EACA9B,GADAn2H,KAAAi4H,eAAAA,EACAj4H,KAAAm2H,0BAAAA,SAQZ6B,EAAA93H,UAAAmL,IAAA,SAAIoF,GAAJ,IAAApH,EAAArJ,KACE,OAAOA,KAAKm2H,0BACTX,oBAAoB/kH,EAAYlC,IAChC3G,KACC6hB,EAAAA,WAAU,SAACyuG,GACT,OAAKA,EAcIlwH,EAAAA,GAAG,IAbHqB,EAAK4uH,eAAer7G,KAAKnM,GAAa7I,KAC3CqvB,EAAAA,YAAW,SAAChzB,GACV,OACEA,aAAiBkzB,EAAAA,mBACA,MAAjBlzB,EAAMmzB,OAECpvB,EAAAA,GAAG,IAEHsvB,EAAAA,WAAWrzB,UAQ5BwlB,EAAAA,WAAU,SAACtF,GAAS,OAAA9a,EAAK8uH,0BAA0B1nH,EAAa0T,QAU9D6zG,EAAA93H,UAAAi4H,0BAAA,SACN1nH,EACA4kH,GAEA,OAAOr1H,KAAKm2H,0BAA0Bf,mBACpC3kH,EAAYlC,GACZ8mH,2JApDLptH,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL28E,UADAozC,aC4FP,SACUl4F,EACAo7F,EACA59G,GAHV,IAAAnR,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAo4H,iBAAAA,EACAp4H,KAAAwa,eAAAA,EA5EVxa,KAAAq4H,aAAmCr4H,KAAKg9B,SAASp1B,KAC/Cu1B,EAAAA,OACEizB,GACAC,GACAC,IAEF7mC,EAAAA,WAAU,WACR,OAAApgB,EAAKmR,eAAezM,iBAAiBnG,KACnCkF,EAAAA,QACE,SAACsC,GACC,OAAAA,GACAA,EAAYtB,OACZsB,EAAYtB,MAAMkjD,cACjB5hD,EAAYV,aAEjB8D,EAAAA,KAAK,GACL5H,EAAAA,KAAI,SAACwE,GAAgB,OAAAA,EAAYtB,MAAMQ,WACvC+lC,EAAAA,UAAS,SAAC/lC,GAAY,OAAAtG,EAAAA,GAAG,IAAIonH,GAA2B9gH,YAM9DtO,KAAAs4H,cAAoCt4H,KAAKg9B,SAASp1B,KAChDu1B,EAAAA,OAAOo7F,IACP3tH,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDm3G,EAAAA,SAAQ,SAAC/zG,GAAgB,OAAAk9G,GAAqBl9G,MAC9C4jC,EAAAA,UAAS,SAACgY,GACR,OAAAA,EAAMzkD,KACJ6hB,EAAAA,WAAU,SAAChZ,GACT,OAAApH,EAAK+uH,iBAAiB/sH,IAAIoF,GAAa7I,KACrCysC,EAAAA,UAAS,SAAC0hF,GACR,IAAM1pB,EAAoB,CACxB,IAAImsB,GACFzC,EAAa50C,WAAWv2E,KAAI,SAAC8jD,GAAc,MAAA,CACzCA,UAASA,EACTj+C,YAAWA,OAGf,IAAIgoH,GACFhoH,EACAslH,EAAa5xG,OAIX4tC,EAAYgkE,EAAa5xG,KAAKxhB,MAYpC,OATIovD,GAAaA,IAActhD,EAAYlC,IACzC89F,EAAQtgG,QACN,IAAI2sH,GACF,CAAEnqH,GAAIwjD,EAAWzkD,KAAMmD,EAAYnD,MACnCyoH,EAAa5xG,OAKZkoF,KAETp1E,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI2wH,GACFloH,EACA2rB,GAAmBn4B,uCAlEpCgE,EAAAA,uDArBQu1B,EAAAA,eAgBAw6F,UAHAjoH,MAWP3P,EAAA,CADCq9B,EAAAA,8CAwBDr9B,EAAA,CADCq9B,EAAAA,mDC3CUC,GAAiB,CAC5Bk7F,GACAlC,GACAa,ICFWxmE,GAAkC,CAC7CrC,eAAWnnD,EACXkJ,YAAa,IAGf,SAASooH,GACP/qH,EACAuQ,GAEA,OAAQA,EAAO/Q,MACb,KAAKwrH,GACH,OAAO,EAET,KAAKC,GACL,KAAKC,GACH,OAAO,EAEX,OAAOlrH,WAGOsQ,GACdtQ,EACAuQ,eAEA,YAHA,IAAAvQ,IAAAA,EAAAmrH,IAGQ56G,EAAO/Q,MACb,KAAKwpH,GACH,IAAMoC,EAAqB/6G,GACzBE,EAAOjC,KAAKN,WACZ+8G,IAEIvqH,EAAUq/G,GAAqBtvG,EAAOhR,QAAQoD,aAAa,GACjE,OAAAjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR2C,YAAWjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACNiJ,EAAM2C,cAAW3L,EAAA,GACpBA,EAACwJ,GAAU4qH,EAAmBprH,EAAM2C,YAAYnC,GAAU+P,GAAOvZ,MAIvE,KAAKg0H,GACGI,EAAqB/6G,GACzBE,EAAOjC,KAAKN,WACZ+8G,IAEIvqH,EAAUq/G,GAAqBtvG,EAAOhR,QAAQoD,aAAa,GACjE,OAAAjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR2C,YAAWjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACNiJ,EAAM2C,cAAW1L,EAAA,GACpBA,EAACuJ,GAAU4qH,EAAmBprH,EAAM2C,YAAYnC,GAAU+P,GAAOtZ,MAIvE,KAAKi0H,GACGE,EAAqB/6G,GACzBE,EAAOjC,KAAKN,WACZ+8G,IAEIvqH,EAAUq/G,GAAqBtvG,EAAOhR,QAAQoD,aAAa,GACjE,OAAAjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR4gD,UAAWrwC,EAAOhR,QAAQqhD,UAC1Bj+C,YAAWjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACNiJ,EAAM2C,cAAWzL,EAAA,GACpBA,EAACsJ,GAAU4qH,EAAmBprH,EAAM2C,YAAYnC,GAAU+P,GAAOrZ,MAIvE,KAAK+zH,GACGG,EAAqB/6G,GACzBE,EAAOjC,KAAKN,WACZ+8G,IAEF,IAAKl5H,MAAM2E,QAAQ+Z,EAAOhR,SAAU,CAC5BiB,EAAUq/G,GAAqBtvG,EAAOhR,QAAQoD,aAAa,GACjE,OAAAjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR4gD,UAAWrwC,EAAOhR,QAAQqhD,UAC1Bj+C,YAAWjR,OAAAqF,OAAArF,OAAAqF,OAAA,GACNiJ,EAAM2C,cAAWkH,EAAA,GACpBA,EAACrJ,GAAU4qH,EAAmBprH,EAAM2C,YAAYnC,GAAU+P,GAAO1G,OAM3E,OAAO7J,WCtFOsQ,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAHoCvG,WAM5B8W,EAAO/Q,MACb,KAAK6rH,GACH,GAAI96G,EAAOhR,QAAQ8zE,WAAY,CAC7B,IACMi4C,EADa/6G,EAAOhR,QAAQ8zE,WACG7hE,QACnC,SAAC+5G,EAAwC3qE,SACvC,OAAAlvD,OAAAqF,OAAArF,OAAAqF,OAAA,GACKw0H,KAASv0H,EAAA,IACR4pD,EAAUz+B,IAAG,yBAA0By+B,EAAS5pD,MAEvDtF,OAAAqF,OAEI,KAIP,OAAArF,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GACAsrH,IAMX,OAAOtrH,EC7BF,IAAMijD,GAAkC,CAAElyC,SAAU,aAE3CT,GACdtQ,EACAuQ,SAEA,YAHA,IAAAvQ,IAAAA,EAAAwrH,IAGQj7G,EAAO/Q,MACb,KAAKisH,GACH,IAAMp1G,EAAa9F,EAAOhR,QAC1B,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYiJ,GAAK,CAAE+Q,SAAQrf,OAAAqF,OAAArF,OAAAqF,OAAA,GAAOiJ,EAAM+Q,WAAQ/Z,EAAA,GAAEA,EAACqf,EAAKw8D,QAASx8D,EAAIrf,MAGzE,OAAOgJ,ECdF,IAAMijD,QAAexpD,WAEZ6W,GACdtC,GAQA,OAAO,SACLhO,EACAuQ,GAMA,QAPA,IAAAvQ,IAAAA,EAAA0rH,IAOIn7G,EAAOjC,MAAQiC,EAAOjC,KAAKN,aAAeA,EAC5C,OAAQuC,EAAO/Q,MACb,KAAKisH,GACH,OAAOl7G,EAAOhR,QAAQszE,OAGxB,KAAK84C,GACH,OAAO1oE,GAGT,KAAK2oE,GACH,OAAOr7G,EAAOhR,QAGhB,KAAKssH,GACH,OAAOt7G,EAAOhR,QAAQszE,OAI5B,OAAO7yE,YCfK8vB,KACd,MAAO,CACLzZ,KAAM8vF,EAAAA,gBAAgB,CACpBuY,SAAUoN,GACVz3F,MAAO8xE,EAAAA,gBAAgB,CACrBzX,QAAS58E,GACP5F,EAAAA,SAAS43C,aACTioE,GAA6B7/G,EAAAA,SAAS43C,eAExClnB,QAAS9qB,GACP5F,EAAAA,SAAS63C,aACTgoE,GAA6B7/G,EAAAA,SAAS63C,eAExC66D,SAAU9sG,GACR5F,EAAAA,SAAS83C,cACT+nE,GAA6B7/G,EAAAA,SAAS83C,gBAExC66D,QAAS/sG,GACP5F,EAAAA,SAASgmE,aACT65C,GAA6B7/G,EAAAA,SAASgmE,mBAI5CmB,WAAYniE,GAAcyqG,GAAkBqQ,IAC5C5mH,WAAY0M,GACV4pG,GACAuQ,SAKOl8F,GAER,IAAI34B,EAAAA,eAA2C,eAEvC44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aAGEo8F,GACd57G,GAEA,OAAO,SAAUtQ,EAAOuQ,GAQtB,OANEA,EAAO/Q,OAAS8iD,IAChB/xC,EAAO/Q,OAAS+iD,IAChBhyC,EAAO/Q,OAASgjD,KAEhBxiD,OAAQvG,GAEH6W,EAAQtQ,EAAOuQ,QAIbg2F,GAA4C,CAAC2lB,aClE1CC,WASd,MAP4B,CAC1BnsH,MAAO,CACLktB,YAAa,CACX3b,MAAIva,EAAA,GAAIA,EAAY,IAAGqzB,EAAAA,kBAAkBiD,eAAct2B,aAmB/D,kCAZC23B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAhC,GACAkC,EAAAA,YAAYC,WAAWorF,GAAa1rF,GAAc,CAAEw2E,aAAY6lB,KAChE97F,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CACT51B,EAA4B0zH,IAC5Bn8F,0BCzBJ,SAAAq8F,YACSA,EAAAl+F,QAAP,WACE,MAAO,CACLC,SAAUi+F,EACVh+F,UAAW,CAAC0xF,GAAYvnH,EAAqBssH,qBCKnCwH,GACd51H,GAEA,OAAOmwH,EAAAA,OAAM,WACX,IAAI0F,EAAQ,EACNC,EAAU,IAAI51F,EAAAA,YAAW,SAAC61F,GAC9B,IAAMl8G,EAAS,WACbk8G,EAAW14H,OACX04H,EAAWh1C,YAGT80C,EACFG,EAAAA,cAAcC,SAASp8G,GAEvBA,IAEFg8G,OAGF,OAAOtvG,EAAAA,cAAcvmB,GAASoD,KAAK8yH,EAAAA,OAAM,WAAM,OAAAJ,8BD/BlD79F,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAC48F,GAAgBC,0BEc1B,SAAAC,EACY3K,EACAlnF,GADAhpC,KAAAkwH,IAAAA,EACAlwH,KAAAgpC,gBAAAA,EAVJhpC,KAAA86H,WAEJ96H,KAAKgpC,gBACNP,SAAS8N,IACT3uC,KAAK2H,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,KAerCzP,KAAA+6H,gBAA6C,CACrDn6C,MAAO,eACPo6C,QAAS,iBACTrU,YAAa,qBACbiO,YAAa,qBACbzuC,MAAO,eACP80C,OAAQ,wBAGVJ,EAAA36H,UAAAg7H,QAAA,WAAA,IAAA7xH,EAAArJ,KACE,OAAOA,KAAKkwH,IAAIpC,iBAAiBlmH,KAC/BkF,EAAAA,OAAOd,SACPyd,EAAAA,WAAU,SAACtF,GAAe,OAAA9a,EAAK8xH,gBAAgBh3G,MAC/CsF,EAAAA,WAAU,SAAC2xG,GACT,OAAAA,EAAe/xH,EAAK7H,QAAQ45H,GAAgBpzH,EAAAA,GAAG,WAU3C6yH,EAAA36H,UAAAsB,QAAA,SAAQ45H,GAAR,IAAA/xH,EAAArJ,KAaR,OAAOo6H,GAZwC56H,OAAO6f,KACpDrf,KAAK+6H,iBAEJjuH,QAAO,SAACvM,GAAQ,OAAA66H,EAAa/xH,EAAK0xH,gBAAgBx6H,OAClDqK,KAAI,SAACrK,GACJ,OAAA66H,EAAa/xH,EAAK0xH,gBAAgBx6H,MAAQqH,KACxCgD,EAAAA,KAAI,SAAC2J,SAAS,OAAAzP,EAAA,IACXvE,GAAMgU,YAKoB3M,KACjCgD,EAAAA,KAAI,SAAC2J,GAAS,OAAA/U,OAAOqF,OAAM1C,MAAb3C,OAAM0E,EAAA,CAAQ,IAAOqQ,SAU7BsmH,EAAA36H,UAAAi7H,gBAAA,SAAgBh3G,GACxB,OAAOnkB,KAAK86H,WAAWlzH,KACrBgD,EAAAA,KAAI,SAACywH,GAAc,OAAA1e,GAAkB0e,EAAW,CAACl3G,GAAO,CAACA,gKAzE9Dlc,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALL0oH,UACAzlF,wBCgBP,SAAAkzF,EACYC,EACA/gH,EACAkY,EACA8oG,EACAvrH,GALZ,IAAA5G,EAAArJ,KASE,GARUA,KAAAu7H,WAAAA,EACAv7H,KAAAwa,eAAAA,EACAxa,KAAA0yB,gBAAAA,EACA1yB,KAAAw7H,KAAAA,EACAx7H,KAAAiQ,OAAAA,EAZJjQ,KAAAy7H,eAAgB,EAEhBz7H,KAAA07H,sBAAuB,EAY7B17H,KAAK27H,eAED1rH,EAAOzI,aAAc,CACvB,IAAMF,EAAS2I,EAAOzI,aAEtBF,EAAOs0H,UAAYt0H,EAAOs0H,WAAa,GACvCt0H,EAAOs0H,UAAUC,gBAAkB,SACjCjG,EACAkG,EACAC,GAEA,OAAO1yH,EAAKwyH,gBAAgBjG,EAAakG,EAAeC,IAI1Dz0H,EAAOs0H,UAAUI,cAAgBh8H,KAAKg8H,sBAI1Cx8H,OAAAyB,eAAIq6H,EAAAp7H,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKi8H,8CAGJX,EAAAp7H,UAAAy7H,aAAA,WAAA,IAAAtyH,EAAArJ,KACR+qB,EAAAA,cAAc,CACZ/qB,KAAKu7H,WAAWzN,iBAChB9tH,KAAKwa,eAAezM,mBAEnBnG,KACCs0H,EAAAA,WAAU,SAACp3H,GAAc,YAAYyC,IAA1BxD,EAAAe,EAAA,GAAQ,MACnBgI,EAAAA,QAAO,SAAChI,OAAGsK,EAAHrL,EAAAe,EAAA,GAAc,GACpB,SAAIsK,EAAYV,WAAcrF,EAAK4yH,eACjC5yH,EAAK4yH,aACH7sH,EAAYV,UAAU2kB,YAAyB,aAC7ChqB,EAAK4yH,kBAMbzpH,EAAAA,KAAK,IAENC,WAAU,WACTpJ,EAAKqyH,sBAAuB,EAC5BryH,EAAK8yH,4BAIDb,EAAAp7H,UAAAi8H,sBAAA,WAAA,IAAA9yH,EAAArJ,KACRA,KAAK0yB,gBACFrnB,MACAzD,KAAKkF,EAAAA,OAAOd,SAAUwG,EAAAA,KAAK,IAC3BC,WAAU,SAACqf,GACVzoB,EAAK+yH,2BAA6BtqG,EAAKsqG,2BACvC/yH,EAAKgzH,0BAA4BvqG,EAAKuqG,0BAEtChzH,EAAKizH,sBAIDhB,EAAAp7H,UAAAo8H,gBAAA,WAAA,IAAAjzH,EAAArJ,KACRA,KAAKu7H,WAAWzN,iBAAiBr7G,WAAU,SAAC8pH,GAC1C,GAAIA,GAAWlzH,EAAK4yH,aAAc,CAChC5yH,EAAKmzH,eAAiBD,EAAQ57C,OAG9Bt3E,EAAKozH,gBAAgBF,GAGrB,IAAMG,EAAmB,GASzB,GARA/8H,MAAMkoC,KAAKx+B,EAAK4G,OAAO5I,SAAShF,KAAKs6H,WAAWpzH,SAAQ,SAACqzH,GACvD,OAAAF,EAAiBh5H,KAAKk5H,MAExBF,EAAiBnzH,SAAQ,SAACqzH,GACxB,OAAAvzH,EAAK4G,OAAO5I,SAAShF,KAAKs6H,UAAUz6F,OAAO06F,MAIzCL,EAAQ17C,YAAc07C,EAAQ17C,WAAW+6C,UACzBW,EAAQ17C,WAAW+6C,UAAUiB,QAAQpmH,MAAM,KACnDlN,SAAQ,SAACuzH,GACjBzzH,EAAK4G,OAAO5I,SAAShF,KAAKs6H,UAAU3pH,IAAI8pH,WAOxCxB,EAAAp7H,UAAAu8H,gBAAA,SAAgBF,GAEnBv8H,KAAKy7H,gBACRz7H,KAAKy7H,eAAgB,EAEnBc,EAAQjvH,OAAS0M,EAAAA,SAAS63C,cAC1B7xD,KAAKq8H,0BAELr8H,KAAKwa,eAAe3J,GAAG,CACrB5E,QAAS,UACTG,OAAQ,CAAE4X,KAAMhkB,KAAKq8H,0BAA2Bp2F,KAAM,MAGxDs2F,EAAQjvH,OAAS0M,EAAAA,SAAS83C,eAC1B9xD,KAAKo8H,4BAELp8H,KAAKwa,eAAe3J,GAAG,CACrB5E,QAAS,WACTG,OAAQ,CAAE4X,KAAMhkB,KAAKo8H,gCAMnBd,EAAAp7H,UAAA27H,gBAAA,SACRjG,EACAkG,EACAC,GAHQ,IAAA1yH,EAAArJ,KAoBR,OAfI41H,GACF51H,KAAKw7H,KAAKuB,KAAI,WAEPhB,EAMMD,GACTzyH,EAAKkyH,WAAWjM,iBAAiBsG,GAN7BvsH,EAAKmzH,eACPnzH,EAAKkyH,WAAWlM,gBAAgBhmH,EAAKmzH,gBAErCnzH,EAAKkyH,WAAWpM,wBAQjB,GAGCmM,EAAAp7H,UAAA87H,cAAA,aAOVV,EAAAp7H,UAAA88H,sBAAA,WACE,OAAOh9H,KAAK07H,+NAlKfzzH,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATL0oH,UAIA99G,UACAshB,UARY4rG,EAAAA,cASZ71H,uBCAP,SAAA81H,EAAsBC,GAAAn9H,KAAAm9H,iBAAAA,SAUtBD,EAAAh9H,UAAAk9H,qBAAA,SACEC,EACAC,EACAC,WAKM18C,GAC6B,QAAjC/7E,EAAAy4H,EAAoBC,qBAAa,IAAA14H,OAAA,EAAAA,EAAE+7E,cACP,QADiB97E,EAC7Cw4H,EAAoBE,gBAAQ,IAAA14H,OAAA,EAAAA,EAAE87E,YAE5BA,GAAc7gF,KAAKm9H,iBAAiBH,yBAEtCx9H,OAAO6f,KAAKwhE,GAAYt3E,SAAQ,SAAC8iD,GAC/B,IAAMpmB,EAAO,QAAUomB,EAAQ,IACzBqxE,EAAa78C,EAAWx0B,GAG9B7sD,OAAO6f,KAAKq+G,GAAYn0H,SAAQ,SAACo0H,GAC/B,IAAMC,EAAYF,EAAWC,GACZ,YAAbA,EACcC,EAAUnnH,MAAM,KACxBlN,SAAQ,SAACuzH,GACfO,EAAQV,UAAU3pH,IAAI8pH,MAGxBQ,EAASO,aACPR,EACAp3F,EACE03F,EACGlnH,MAAM,aACNyjB,KAAK,KACLy4B,cACLirE,wBCvCEE,GACdC,EACA79F,GAGA,OADgB,WAAM,OAAA69F,EAAkB7mH,WAAWgpB,aAIrC89F,GACdD,GAEA,OAAOA,EAAkBl/F,qJDpB1B52B,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALLm2H,wBC4BT,SAAA2C,YACSA,EAAAhiG,QAAP,WACE,MAAO,CACLC,SAAU+hG,EACV9hG,UAAW,CACT,CACEp2B,QAASy4B,GACTx4B,UAAU,GAEZ,CACED,QAAS49B,EAAAA,gBACT19B,OAAO,EACPI,WAAYy3H,GACZ13H,KAAM,CACJq4B,GACA,CAAC,IAAI/4B,EAAAA,SAAY64B,MAGrB,CAEEx4B,QAASm4H,EAAAA,qBACT73H,WAAY23H,GACZ53H,KAAM,CAACq4B,sBCrCD0/F,GACdJ,EACAK,GASA,OAPiB,WACXv1H,EAAAA,aACFk1H,EACGl/F,kBACA38B,MAAK,SAAC2D,GAAW,OAAAy7F,GAAez7F,EAAQu4H,GAAc,6BDM9D3hG,EAAAA,SAAQv0B,KAAA,CAAC,wBCOV,SAAAm2H,YACSA,EAAApiG,QAAP,WACE,MAAO,CACLC,SAAUmiG,EACVliG,UAAW,CACT,CACEp2B,QAAS49B,EAAAA,gBACT19B,OAAO,EACPI,WAAY83H,GACZ/3H,KAAM,CACJq4B,GACA,CAAC,IAAI/4B,EAAAA,SAAYy7F,mCAZ5B1kE,EAAAA,eCxBY6hG,GAA0B,IAAIp5H,EAAAA,eACzC,oCAWcq5H,GACdC,EACAvjC,EACA5zF,GAGE,IC5BsBo3H,EAElBz8H,EDyBN,OAAIi5B,EAAAA,kBAAkBggE,IAAaujC,WAbL34H,GAC9B,IACE,OAAO6N,KAAKG,MAAMiY,mBAAmBjmB,IACrC,MAAOnD,GACP,MAAO,IAWAg8H,EC7BeD,ED4BGp3H,EAASo3H,QC1B9Bz8H,EADS,IAAIuqB,OAAO,cD2BkBiyG,EC3BK,WAAY,KACtBG,KAAKF,KAE1B3yG,mBAAmB9pB,EAAO,KAAQ,KD2B7C,qBAaT,SAAA48H,YAQSA,EAAA3iG,QAAP,SACEkO,GAEA,MAAO,CACLjO,SAAU0iG,EACVziG,UAAW,CACT,CACEp2B,QAASu4H,GACTt4H,SAAUmkC,GAAWA,EAAQs0F,QAE/Bv4H,EAAqBq4H,GAAyB,CAC5CD,GACA1lH,EAAAA,YACAxQ,EAAAA,wCAtBTq0B,EAAAA,SAAQv0B,KAAA,CAAC,yBEpCR,SAAA22H,EAAsB3rB,GAAtB,IAAA7pG,EACEiK,EAAA9P,KAAAxD,KAAM,OAAKA,YADSqJ,EAAA6pG,SAAAA,WADQpzG,EAAA++H,EAAAvrH,GAS9BurH,EAAA3+H,UAAAoL,UAAA,SAAU3J,EAAY+kF,EAAiBo4C,GACrC,OAAOxrH,EAAApT,UAAMoL,UAAS9H,KAAAxD,KAAC2B,EAAO+kF,EAAQo4C,EAAU9+H,KAAK++H,YAG/CF,EAAA3+H,UAAA6+H,QAAA,WACN,IAAM/uC,EAAOhwF,KAAKg/H,gBAClB,IAEE,OADAC,EAAAA,YAAYjvC,GACLA,EACP,MAAAlrF,GAEA,OADA9E,KAAKk/H,wBAAwBlvC,GACtB,OAIH6uC,EAAA3+H,UAAA8+H,cAAA,WACN,IAAIh9H,EAKJ,OAJAhC,KAAKkzG,SACF5hF,YACA7e,WAAU,SAACu9E,GAAS,OAAChuF,EAASguF,KAC9B77E,cACInS,GAGD68H,EAAA3+H,UAAAg/H,wBAAA,SAAwBlvC,GAC1BnnF,EAAAA,aACFC,QAAQF,KACN,+CAA+ConF,EAAI,iEApC3BmvC,EAAAA,+BAD/BxxE,EAAAA,KAAIzlD,KAAA,CAAC,CAAE+9B,KAAM,uDAHLmpD,wBCiBP,SAAAgwC,EACY34F,EACA44F,GADAr/H,KAAAymC,QAAAA,EACAzmC,KAAAq/H,GAAAA,SAGZD,EAAAl/H,UAAAoL,UAAA,SACE8qC,EACAjM,GAEA,QAFA,IAAAA,IAAAA,EAAA,IAEKiM,EAAL,CASA,GAAKA,EAAuBnU,IAC1B,OAAQmU,EAAuBnU,IAGjC,IAAM1hC,EAAuB,iBAAV61C,EAAqBA,EAAQA,EAAM71C,IAMtD,MALqB,iBAAV61C,IACTjM,EAAO3qC,OAAAqF,OAAArF,OAAAqF,OAAA,GAAQslC,GAAYiM,EAAMhqC,SAGnCpM,KAAKo2D,UAAU71D,EAAK4pC,GACbnqC,KAAKs/H,gBAlBNz2H,EAAAA,aACFC,QAAQ7E,MACN,6CAA6CmyC,EAAK,0CAmBlDgpF,EAAAl/H,UAAAk2D,UAAA,SAAU71D,EAAU4pC,GAApB,IAAA9gC,EAAArJ,KAEJO,IAAQP,KAAKu/H,kBhFpDiBlhB,EAAcC,GAChD,GAAID,IAASC,EACX,OAAO,EAET,IAAKD,IAASC,EACZ,OAAO,EAET,IAAMkhB,EAAQhgI,OAAO6f,KAAKg/F,GACpBohB,EAAQjgI,OAAO6f,KAAKi/F,GACpBohB,EAAWF,EAAM7+H,OAGvB,GAAI++H,IAFaD,EAAM9+H,OAGrB,OAAO,EAET,IAAK,IAAIK,EAAI,EAAGA,EAAI0+H,EAAU1+H,IAAK,CACjC,IAAMT,EAAMi/H,EAAMx+H,GAClB,GAAIq9G,EAAK99G,KAAS+9G,EAAK/9G,GACrB,OAAO,EAGX,OAAO,EgFgCFo/H,CAAoBx1F,EAASnqC,KAAK4/H,eAEnC5/H,KAAKu/H,QAAUh/H,EACfP,KAAK4/H,YAAcz1F,EAEfnqC,KAAKs0C,KACPt0C,KAAKs0C,IAAIngC,cAEXnU,KAAKs0C,IAAMt0C,KAAKymC,QACb2vB,UAAU71D,EAAK4pC,GAAS,GACxB13B,WAAU,SAAC4B,GAAQ,OAAAhL,EAAKw2H,aAAaxrH,QAIpC+qH,EAAAl/H,UAAA2/H,aAAA,SAAal+H,GACnB3B,KAAKs/H,gBAAkB39H,EACvB3B,KAAKq/H,GAAGQ,gBAGVT,EAAAl/H,UAAAw6B,YAAA,WACM16B,KAAKs0C,KACPt0C,KAAKs0C,IAAIngC,yCA9Ddw5C,EAAAA,KAAIzlD,KAAA,CAAC,CAAE+9B,KAAM,cAAe65F,MAAM,gDAF1BppE,UATPqpE,EAAAA,4BCOF,uIAJC93H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,wBCGb,SAAA+6H,EAAsBn6H,GAAtB,IAAAwD,EAAArJ,KAAsBA,KAAA6F,OAAAA,EAFZ7F,KAAAigI,WAA0C,GAC1CjgI,KAAAy7F,OAAoC,GAoB3Bz7F,KAAAkgI,cAAgB,IAlBjC,IAAMzkC,EAAU51F,EAAOs0F,MAAQt0F,EAAOs0F,KAAKsB,QAAW,GACtDj8F,OAAO6f,KAAKo8E,GAAQlyF,SAAQ,SAAC42H,GAC3B1kC,EAAO0kC,GAAO52H,SAAQ,SAAChJ,GACjB8I,EAAKoyF,OAAO57F,eAAeU,IACxB8I,EAAK42H,WAAW1/H,KACnB8I,EAAK42H,WAAW1/H,GAAO,CAAC8I,EAAKoyF,OAAOl7F,KAEtC8I,EAAK42H,WAAW1/H,GAAKmD,KAAKy8H,IAE1B92H,EAAKoyF,OAAOl7F,GAAO4/H,QAIrB3gI,OAAO6f,KAAKrf,KAAKigI,YAAYt/H,OAAS,GAAKkI,EAAAA,aAC7C7I,KAAKogI,eAAepgI,KAAKigI,mBAM7BD,EAAA9/H,UAAAmgI,mBAAA,SAAmB9/H,GACjB,IAAM+/H,GAAW//H,GAAO,IAAIkW,MAAMzW,KAAKkgI,eAAe,GAChDC,EAAQngI,KAAKy7F,QAAUz7F,KAAKy7F,OAAO6kC,GAEzC,OAAKH,GACIG,GAKHN,EAAA9/H,UAAAkgI,eAAA,SAAelR,GAAf,IAAA7lH,EAAArJ,KACAugI,EAAkB,GACxB/gI,OAAO6f,KAAK6vG,GAAO3lH,SAAQ,SAAChJ,GAC1BggI,EAAM78H,KACJ,MAAMnD,EAAG,sBAAsB2uH,EAAM3uH,GAAK25B,KAAK,MAAK,WAClD7wB,EAAKoyF,OAAOl7F,GACd,IAAIA,EAAG,SAGXuI,QAAQF,KACN,iEAAiE23H,EAAMrmG,KACrE,gJAhDPjyB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLq7H,UCCIC,GAAgC,CAC3CtmC,KAAM,CACJC,cAAc,EACdsmC,OAAO,aCEKC,GACdn9F,EACAmsD,EACAixC,EACAC,GAEA,OAAO,WACL,OAAAr9F,EAAW3E,gBAAgB,QAAQ38B,MAAK,SAAC2D,GACvC,IAAIi7H,EAA6B,CAC/BC,GAAI,GACJC,YAAan7H,EAAOs0F,KAAKC,aACzBsmC,MAAO76H,EAAOs0F,KAAKumC,MACnBO,cAAe,CACbC,aAAa,IAGjB,GAAIr7H,EAAOs0F,KAAK7kF,QAAS,CACvB6rH,EAAAA,QAAQC,IAAIC,EAAAA,SACZ,IAIM/rH,EAAU,CACdgsH,kBA0DkBp4H,EAAc23H,GACxC,IAAK33H,EACH,OAEF,GAAI23H,IAAwB33H,EAAK4sD,MAAM,kBAAmB,CAQxD,OAPI5sD,EAAKa,WAAW,OAClBb,EAAOA,EAAKe,MAAM,IAEhBf,EAAKa,WAAW,QAClBb,EAAOA,EAAKe,MAAM,IAEF42H,EAAmB,IAAI33H,EAG3C,OAAOA,EA7EgBq4H,CACf17H,EAAOs0F,KAAK7kF,QAAQgsH,SACpBT,GAIAW,KAAMC,GAAqBb,IAE7BE,EAAathI,OAAAqF,OAAArF,OAAAqF,OAAA,GAAQi8H,GAAa,CAAExrH,QAAOA,IAG7C,OAAO6rH,EAAAA,QAAQt0E,KAAKi0E,GAAe,qBASFY,QAAA,IAAAA,IAAAA,EAAA,IACrCliI,OAAO6f,KAAKqiH,GAAWn4H,SAAQ,SAACymF,GAC9BxwF,OAAO6f,KAAKqiH,EAAU1xC,IAAOzmF,SAAQ,SAACo4H,GACpCR,EAAAA,QAAQS,kBACN5xC,EACA2xC,EACAD,EAAU1xC,GAAM2xC,IAChB,GACA,SAdAE,CAAuBh8H,EAAOs0F,KAAKunC,WACR/xC,EAqBxBr+D,YAAY7e,WAAU,SAACu9E,GAAS,OAAAmxC,EAAAA,QAAQW,eAAe9xC,sBAUlDyxC,GACdb,GAEA,OAAO,SAACv2H,EAAa03H,EAAkBC,EAAoBxvD,GACzDouD,EAAWv1H,IAAIhB,EAAK,CAAEkM,aAAc,SAAU9D,WAC5C,SAAC8B,GAAS,OAAAytH,EAASztH,EAAM,CAAE6iB,OAAQ,SACnC,SAACnzB,GAAU,OAAA+9H,EAAS,KAAM,CAAE5qG,OAAQnzB,EAAMmzB,oBCnEhCupG,GAHHsB,GAA+B,CAC1C,CACEl8H,QAAS49B,EAAAA,gBACTt9B,WAAU67H,GACV97H,KAAM,CACJq4B,GACA2wD,GACAryD,EAAAA,WACA,CAAC,IAAIr3B,EAAAA,SAAYwzF,KAEnBjzF,OAAO,kBCLT,SAAAk8H,EACYt8H,EACAu8H,GADApiI,KAAA6F,OAAAA,EACA7F,KAAAoiI,iBAAAA,EALKpiI,KAAAqiI,mBAAqBC,OAAOC,aAAa,KACvCviI,KAAAwiI,oBAAsB,WAOzCL,EAAAjiI,UAAAk2D,UAAA,SACE71D,EACA4pC,EACAs4F,GAHF,IAAAp5H,EAAArJ,UAEE,IAAAmqC,IAAAA,EAAA,SACA,IAAAs4F,IAAAA,GAAA,GASA,IAAMd,EAAY3hI,KAAKoiI,iBAAiB/B,mBAAmB9/H,GACrDmiI,EAAgB1iI,KAAK2iI,iBAAiBpiI,EAAKohI,GAEjD,OAAO,IAAIj9F,EAAAA,YAAmB,SAAC61F,GAC7B,IAAMnkE,EAAY,WACX+qE,EAAAA,QAAQyB,gBAGTzB,EAAAA,QAAQlV,OAAOyW,EAAev4F,GAChCowF,EAAW14H,KAAKs/H,EAAAA,QAAQ3+H,EAAEkgI,EAAev4F,KAErCs4F,GACFlI,EAAW14H,KAAKwH,EAAKg5H,oBAEvBlB,EAAAA,QAAQ0B,eAAelB,GAAW,WAC3BR,EAAAA,QAAQlV,OAAOyW,EAAev4F,GAIjCowF,EAAW14H,KAAKs/H,EAAAA,QAAQ3+H,EAAEkgI,EAAev4F,KAHzC9gC,EAAKy5H,iBAAiBviI,EAAKohI,GAC3BpH,EAAW14H,KAAKwH,EAAK05H,iBAAiBL,WAU9C,OAFAtsE,IACA+qE,EAAAA,QAAQ6B,GAAG,kBAAmB5sE,GACvB,WAAM,OAAA+qE,EAAAA,QAAQ8B,IAAI,kBAAmB7sE,QAIhD+rE,EAAAjiI,UAAAgjI,WAAA,SAAWC,GACT,OAAOhC,EAAAA,QAAQ0B,eAAeM,IAOtBhB,EAAAjiI,UAAA6iI,iBAAA,SAAiBxiI,GACzB,OAAOsI,EAAAA,YAAc,IAAItI,EAAG,IAAMP,KAAKqiI,oBAGjCF,EAAAjiI,UAAA4iI,iBAAA,SAAiBviI,EAAaohI,GAChC94H,EAAAA,aACFC,QAAQF,KACN,4BAA4BrI,EAAG,mBAAmBohI,EAAS,MAKzDQ,EAAAjiI,UAAAyiI,iBAAA,SAAiBpiI,EAAa4/H,GACpC,OAAOA,EAAQngI,KAAKwiI,oBAAsBjiI,0JA1E7C0H,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAJjBq7H,UACAR,wBCST,SAAAoD,YACSA,EAAAnnG,QAAP,WACE,MAAO,CACLC,SAAUknG,EACVjnG,UAASj4B,EAAA,CACPoC,EAAqBm6H,IACrB,CAAE16H,QAAS2wD,GAAoBruD,YAAa85H,KACzCF,oBCpBKoB,GAAc9iI,EAAa4pC,QAAA,IAAAA,IAAAA,EAAA,IACzC,IAAMm5F,EAAgB9jI,OAAO6f,KAAK8qB,GAC/BzmB,OACA9Y,KAAI,SAAC24H,GAAe,OAAGA,EAAU,IAAIp5F,EAAQo5F,MAC7CrpG,KAAK,KACR,OAAOopG,EAAmB/iI,EAAG,IAAI+iI,EAAkB/iI,uBDIpDk8B,EAAAA,SAAQv0B,KAAA,CAAC,CACR4lD,aAAc,CAACsxE,GAAeP,IAC9B9wE,QAAS,CAACqxE,GAAeP,0BEN3B,SAAA2E,YACEA,EAAAtjI,UAAAoL,UAAA,SAAU8qC,EAA8BjM,GACtC,QADsC,IAAAA,IAAAA,EAAA,IACjCiM,EAAuBnU,IAC1B,OAAQmU,EAAuBnU,IAGjC,IAAM1hC,EAAuB,iBAAV61C,EAAqBA,EAAQA,EAAM71C,IAItD,MAHqB,iBAAV61C,IACTjM,EAAO3qC,OAAAqF,OAAArF,OAAAqF,OAAA,GAAQslC,GAAYiM,EAAMhqC,SAE5Bi3H,GAAc9iI,EAAK4pC,8BAX7BwjB,EAAAA,KAAIzlD,KAAA,CAAC,CAAE+9B,KAAM,oCCEd,SAAAw9F,YACEA,EAAAvjI,UAAAk2D,UAAA,SACE71D,EACA4pC,EACAu5F,GAEA,YAHA,IAAAv5F,IAAAA,EAAA,SACA,IAAAu5F,IAAAA,GAAA,GAEO,IAAIh/F,EAAAA,YAAmB,SAAC61F,GAC7B,IAAM54H,EAAQ0hI,GAAc9iI,EAAK4pC,GACjCowF,EAAW14H,KAAKF,GAChB44H,EAAWh1C,eAIfk+C,EAAAvjI,UAAAgjI,WAAA,SAAWS,GACT,OAAOpiI,QAAQC,qCAflByG,EAAAA,gCCDD,SAAA27H,0DAAkC9jI,EAAA8jI,EAAAtwH,GAGhCswH,EAAA1jI,UAAAoL,UAAA,SAAU3J,EAAY+kF,EAAiBo4C,GACrC,OAAOxrH,EAAApT,UAAMoL,UAAS9H,KAAAxD,KAAC2B,EAAO+kF,EAAQo4C,EAAU,UAJlBK,EAAAA,+BADjCxxE,EAAAA,KAAIzlD,KAAA,CAAC,CAAE+9B,KAAM,oBCUd,kCAPCxJ,EAAAA,SAAQv0B,KAAA,CAAC,CACR4lD,aAAc,CAAC01E,GAAmBI,IAClC71E,QAAS,CAACy1E,GAAmBI,IAC7BznG,UAAW,CACT,CAAEp2B,QAAS2wD,GAAoBrsB,SAAUo5F,2BCP7C,SAAAI,YACSA,EAAA5nG,QAAP,WACE,MAAO,CACLC,SAAU2nG,EACV1nG,UAAW,+BALhBM,EAAAA,SAAQv0B,KAAA,CAAC,UCAG47H,GAAsD,CACjEC,gBAAiB,CACf9+B,SAAS,EACT++B,eAAgB,CACdz1H,GAAI,yBACJ01H,UAAW,4BAEb31H,QAAS,CACP41H,aAAc,yBACdtO,YAAa,uCCJnB,uIAJC3tH,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,OACZkD,YAAapD,MCWf,IAAMk/H,GAAyB,mCAQ7B,SAAAC,EACUv+H,EACAixB,EACA7mB,EACqBgrF,GAHrBj7F,KAAA6F,OAAAA,EACA7F,KAAA82B,aAAAA,EACA92B,KAAAiQ,OAAAA,EACqBjQ,KAAAi7F,SAAAA,EANvBj7F,KAAAilG,SAAU,EAQZhqE,EAAAA,kBAAkBj7B,KAAKi7F,YACzBj7F,KAAKilG,QACFjlG,KAAKiQ,OAAOvI,cAAgB1H,KAAK6F,OAAOk+H,gBAAgB9+B,UACzD,EAEEjlG,KAAKilG,SACPjlG,KAAKqkI,cAAgBrkI,KAAK6F,OAAOk+H,gBAAgBC,eAAez1H,GAAGokD,cACnE3yD,KAAKskI,kBAAoBtkI,KAAKiQ,OAAOvI,aAAauM,QAChDkwH,KAEOnkI,KAAKiQ,OAAOvI,aAAauM,QAAQkwH,KAC1CnkI,KAAKiQ,OAAOvI,aAAa0M,WAAW+vH,YAK1CC,EAAAlkI,UAAA62B,UAAA,SACEpC,EACA9yB,SAFFwH,EAAArJ,KAIE,OAAKA,KAAKilG,SAKRjlG,KAAKskI,mBACL3vG,EAAQtqB,IAAIgH,SAASrR,KAAK82B,aAAa7D,qBAEvC0B,EAAUA,EAAQE,MAAM,CACtB4B,YAAU3xB,EAAA,GACRA,EAAC9E,KAAKqkI,eAAgBrkI,KAAKskI,wBAK1BziI,EAAK00B,OAAO5B,GAAS/sB,KAC1B4gB,EAAAA,KAAI,SAACvZ,GACH,GAAIA,aAAiBm0F,EAAAA,cACfn0F,EAAMslB,QAAQlV,OAAOhO,SAAShI,EAAKg7H,eAAgB,CACrD,IAAME,EAAat1H,EAAMslB,QAAQlpB,IAAIhC,EAAKg7H,eACtCh7H,EAAKi7H,oBAAsBC,IAC7Bl7H,EAAKi7H,kBAAoBC,EACzBl7H,EAAK4G,OAAOvI,aAAa4M,QACvB6vH,GACA96H,EAAKi7H,0BAvBRziI,EAAK00B,OAAO5B,mMAjCxB1sB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDANjBq/H,UADA/xG,UAEArrB,kCAeJe,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,kBCZZ,IAAM6rH,GAA2B,qCAQ/B,SAAAC,EACU7+H,EACAixB,EACA7mB,EACqBgrF,GAHrBj7F,KAAA6F,OAAAA,EACA7F,KAAA82B,aAAAA,EACA92B,KAAAiQ,OAAAA,EACqBjQ,KAAAi7F,SAAAA,EANvBj7F,KAAAilG,SAAU,EAQZhqE,EAAAA,kBAAkBj7B,KAAKi7F,YACzBj7F,KAAKilG,QACFjlG,KAAKiQ,OAAOvI,cAAgB1H,KAAK6F,OAAOk+H,gBAAgB9+B,UACzD,EAEEjlG,KAAKilG,SACPjlG,KAAKqkI,cAAgBrkI,KAAK6F,OAAOk+H,gBAAgBC,eAAeC,UAAUtxE,cAC1E3yD,KAAKikI,UAAYjkI,KAAKiQ,OAAOvI,aAAauM,QACxCwwH,KAEOzkI,KAAKiQ,OAAOvI,aAAauM,QAAQwwH,KAC1CzkI,KAAKiQ,OAAOvI,aAAa0M,WAAWqwH,YAK1CC,EAAAxkI,UAAA62B,UAAA,SACEpC,EACA9yB,SAFFwH,EAAArJ,KAIE,OAAKA,KAAKilG,SAKRjlG,KAAKikI,WACLtvG,EAAQtqB,IAAIgH,SAASrR,KAAK82B,aAAa7D,qBAEvC0B,EAAUA,EAAQE,MAAM,CACtB4B,YAAU3xB,EAAA,GACRA,EAAC9E,KAAKqkI,eAAgBrkI,KAAKikI,gBAK1BpiI,EAAK00B,OAAO5B,GAAS/sB,KAC1B4gB,EAAAA,KAAI,SAACvZ,GACH,GAAIA,aAAiBm0F,EAAAA,cACfn0F,EAAMslB,QAAQlV,OAAOhO,SAAShI,EAAKg7H,eAAgB,CACrD,IAAMM,EAAoB11H,EAAMslB,QAAQlpB,IAAIhC,EAAKg7H,eAC7Ch7H,EAAK46H,YAAcU,IACrBt7H,EAAK46H,UAAYU,EACjBt7H,EAAK4G,OAAOvI,aAAa4M,QACvBmwH,GACAp7H,EAAK46H,kBAvBRpiI,EAAK00B,OAAO5B,mMAjCxB1sB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDANjBq/H,UADA/xG,UAEArrB,kCAeJe,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,sBCtBC+e,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAa+7H,GACbn+H,OAAO,GAET,CACEF,QAAS6xB,EAAAA,kBACTvvB,YAAaq8H,GACbz+H,OAAO,kBCRX,SAAA2+H,YACSA,EAAA3oG,QAAP,WACE,MAAO,CACLC,SAAU0oG,EACVzoG,UAASj4B,EAAA,CACPoC,EAAqBw9H,KAClBnsG,gCAPV8E,EAAAA,SAAQv0B,KAAA,CAAC,wBCQR,SAAA28H,EACYh/H,EACA01H,GADAv7H,KAAA6F,OAAAA,EACA7F,KAAAu7H,WAAAA,SAGZsJ,EAAA3kI,UAAA4kI,0BAAA,WAAA,IAAAz7H,EAAArJ,KACE,OAAOA,KAAKu7H,WAAWzN,iBAAiBlmH,KACtCkF,EAAAA,OAAOd,SACPpB,EAAAA,KACE,SAACuZ,GACC,OAAAA,EAAK68D,MAAM33E,EAAKxD,OAAOk+H,gBAAgBz1H,QAAQ41H,iBAEnDp3H,EAAAA,OAAOd,SACPpB,EAAAA,KAAI,SAACq2E,GACH,OAAAA,EAAKE,WAAWx0E,MACd,SAAC3L,GAAM,OAAAA,EAAEivB,MAAQ5mB,EAAKxD,OAAOk+H,gBAAgBz1H,QAAQsnH,kBAGzD9oH,EAAAA,OAAOd,SACPpB,EAAAA,KAAI,SAAC8jD,GACH,OAAArlD,EAAK07H,4BAA4Br2E,EAAUmyB,WAAWmkD,OAAOzwH,WAK3DswH,EAAA3kI,UAAA6kI,4BAAA,SAA4BxwH,GAClC,IAAMjG,EAAUoF,KAAKG,MAAMoxH,KAAK1wH,IAChCjG,EAAQ+9F,QAAQ9iG,SAAQ,SAAC8U,GACvB7e,OAAO6f,KAAKhB,GAAQ9U,SAAQ,SAAChJ,GAC3B8d,EAAO9d,GAAO0kI,KAAK5mH,EAAO9d,UAG9B,IAAK,IAAIS,EAAI,EAAGA,EAAIsN,EAAQ3D,SAAShK,OAAQK,IAC3CsN,EAAQ3D,SAAS3J,GAAKikI,KAAK32H,EAAQ3D,SAAS3J,IAE9C,OAAOsN,iBC3CKsvB,KACd,OAAOhe,GAAoB04B,sJDG5BrwC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLq/H,UAJA3W,UCOIhwF,GAER,IAAI34B,EAAAA,eACP,mBAGW44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,OCRd,kCAJCnB,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAC/B,GAAakC,EAAAA,YAAYC,WAAWma,GAAiBza,KAC/D1B,UAAW,CAAC2B,0BCFd,SAAAonG,YACSA,EAAAjpG,QAAP,WACE,MAAO,CACLC,SAAUgpG,EACV/oG,UAAW,+BAPhBM,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAConG,0BCMV,SAAAC,EAAsBn3F,GAAAjuC,KAAAiuC,QAAAA,SAEtBm3F,EAAAllI,UAAAmL,IAAA,SAAI4gC,EAAqB3Y,GACvB,YADuB,IAAAA,IAAAA,EAAA,IAChBtzB,KAAKiuC,QAAQrxB,KAAKqvB,EAAa3Y,IAGxC8xG,EAAAllI,UAAAmlI,QAAA,SAAQr8E,GAAR,IAAA3/C,EAAArJ,KACE,OAAKA,KAAKiuC,QAAQi+C,SAOXlsF,KAAKiuC,QAAQi+C,SAASljC,GANpBA,EAASp+C,KAAI,SAAC8/B,GAAY,OAAAlrC,OAAAqF,OAAArF,OAAAqF,OAAA,GAC5B6lC,GAAO,CACVmhD,MAAOxiF,EAAK4kC,QAAQrxB,KAAK8tB,EAAQ1mB,KAAM0mB,EAAQpX,qJAdtDrrB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJL6nF,wBCMP,SAAAs4C,EAAsBr3F,GAAAjuC,KAAAiuC,QAAAA,SAEtBq3F,EAAAplI,UAAAmL,IAAA,SACE4gC,EACA+6C,EACAxjE,GAEA,OAAOxjB,KAAKiuC,QAAQrxB,KAAKqvB,EAAa+6C,EAAexjE,4IAXxDvb,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHL8nF,wBCMP,SAAAs4C,EAAsBt3F,GAAAjuC,KAAAiuC,QAAAA,SAEtBs3F,EAAArlI,UAAAmL,IAAA,SAAI4gC,EAAqBw8C,GACvB,OAAOzoF,KAAKiuC,QAAQrxB,KAAKqvB,EAAaw8C,IAGxC88C,EAAArlI,UAAA8S,IAAA,SAAIi5B,EAAqBy8C,GACvB,OAAO1oF,KAAKiuC,QAAQnR,KAAKmP,EAAay8C,4IAXzCzgF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLgoF,wBCWP,SAAAq4C,EAAsBv3F,GAAAjuC,KAAAiuC,QAAAA,SAEtBu3F,EAAAtlI,UAAAkpF,OAAA,SACEt4E,EACAsT,GAEA,OAAOpkB,KAAKiuC,QAAQm7C,OAAOt4E,EAAOsT,IAGpCohH,EAAAtlI,UAAAulI,eAAA,SAAel8C,EAAc/lE,GAC3B,OAAOxjB,KAAKiuC,QAAQq7C,gBAAgBC,EAAM/lE,4IAd7Cvb,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATL+nF,MCGF,ICSUw4C,GDTJC,GAA0B,yCAC1BC,GACX,8CACWC,GACX,iDACWC,GAA2B,qCAExCC,GAEE,SACS14H,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOq4H,IAUlBK,GAEE,SAAmB34H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOs4H,IAIlBK,GAEE,SACS54H,GAAArN,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAOu4H,IASlBK,GAAA,WACWlmI,KAAAsN,KAAOw4H,IElCLK,GAAuB,sCACvBC,GACX,2CACWC,GACX,8CACWC,GAAsB,gCACtBC,GAA2B,qCAC3BC,GACX,wCAEFC,GAEE,SAAmBp5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO64H,IAIlBO,GAEE,SAAmBr5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO84H,IAIlBO,GAEE,SAAmBt5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO+4H,IAIlBO,GAEE,SAAmBv5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOg5H,IAIlBO,GAEE,SAAmBx5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOi5H,IAIlBO,GAEE,SAAmBz5H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAOk5H,IC/BLO,GAAkB,4BAClBC,GAAuB,iCACvBC,GAA0B,oCAC1BC,GAA0B,oCAC1BC,GACX,4CACWC,GACX,yCACWC,GACX,wCAEFC,GAEE,SACSj6H,EACAk6H,GADAvnI,KAAAqN,QAAAA,EACArN,KAAAunI,UAAAA,EAHAvnI,KAAAsN,KAAOy5H,IAOlBS,GAEE,SAAmBn6H,EAA4Bk6H,GAA5BvnI,KAAAqN,QAAAA,EAA4BrN,KAAAunI,UAAAA,EADtCvnI,KAAAsN,KAAO05H,IAIlBS,GAEE,SAAmBp6H,EAAmCk6H,GAAnCvnI,KAAAqN,QAAAA,EAAmCrN,KAAAunI,UAAAA,EAD7CvnI,KAAAsN,KAAO25H,IAIlBS,GAEE,SAAmBr6H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO45H,IAIlBS,GAEE,SAAmBt6H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO65H,IAIlBS,GAEE,SAAmBv6H,GAAArN,KAAAqN,QAAAA,EADVrN,KAAAsN,KAAO85H,IAIlBS,GAEE,SACSx6H,QAAA,IAAAA,IAAAA,EAAA,CACLy6H,kBAAkB,EAClBC,uBAAuB,IAFlB/nI,KAAAqN,QAAAA,EAFArN,KAAAsN,KAAO+5H,IC/CLW,GAAkB,UAClBC,GAAwB,2BHKrC,SAAiBvC,GAUf,SAAgBwC,EACdpsH,EACAvN,EACA+kB,GAEA,OAAA9zB,OAAAqF,OAAArF,OAAAqF,OAAA,GACK4Y,GAAe3B,EAAYvN,IAAG,CACjC+kB,MAAKA,IAIT,SAAgB60G,EACdrsH,EACAvN,EACA+kB,EACArvB,GAEA,OAAAzE,OAAAqF,OAAArF,OAAAqF,OAAA,GACK6Y,GAAe5B,EAAYvN,EAAItK,IAAM,CACxCqvB,MAAKA,IAIT,SAAgB80G,EACdtsH,EACAvN,EACA+kB,GAEA,OAAA9zB,OAAAqF,OAAArF,OAAAqF,OAAA,GACK8Y,GAAkB7B,EAAYvN,IAAG,CACpC+kB,MAAKA,IAIT,SAAgB+0G,EACdvsH,EACAvN,EACA+kB,GAEA,OAAA9zB,OAAAqF,OAAArF,OAAAqF,OAAA,GACK+Y,GAAgB9B,EAAYvN,IAAG,CAClC+kB,MAAKA,IAzCOoyG,EAAAwC,qBAAoBA,EAWpBxC,EAAAyC,qBAAoBA,EAYpBzC,EAAA0C,wBAAuBA,EAWvB1C,EAAA2C,sBAAqBA,EAWrC,IAAAC,EAGE,SAAYxsH,EAAoBvN,EAAuB+kB,GAFvDtzB,KAAAsN,KAAO+P,GAGLrd,KAAKoc,KAAO8rH,EAAqBpsH,EAAYvN,EAAI+kB,IAJxCoyG,EAAA4C,uBAAsBA,EAQnC,IAAAC,EAGE,SACEzsH,EACAvN,EACA+kB,EACArvB,GANFjE,KAAAsN,KAAOgQ,GAQLtd,KAAKoc,KAAO+rH,EAAqBrsH,EAAYvN,EAAI+kB,EAAOrvB,IAT/CyhI,EAAA6C,uBAAsBA,EAanC,IAAAC,EAGE,SACE1sH,EACAvN,EACA+kB,EACOjmB,GAAArN,KAAAqN,QAAAA,EANTrN,KAAAsN,KAAOiQ,GAQLvd,KAAKoc,KAAOgsH,EAAwBtsH,EAAYvN,EAAI+kB,IAT3CoyG,EAAA8C,0BAAyBA,EAatC,IAAAC,EAGE,SAAY3sH,EAAoBvN,EAAuB+kB,GAFvDtzB,KAAAsN,KAAOkQ,GAGLxd,KAAKoc,KAAOisH,EAAsBvsH,EAAYvN,EAAI+kB,IAJzCoyG,EAAA+C,wBAAuBA,EAzFtC,CAAiB/C,KAAAA,GAAyB,KIPnC,IAAMgD,GAAe,8BACfC,GAAoB,mCACpBC,GAAuB,sCAWpCC,GAAA,SAAAv1H,GAEE,SAAAu1H,EAAmBx7H,EAAiBimB,QAAA,IAAAA,IAAAA,EAAA,IAApC,IAAAjqB,EACEiK,EAAA9P,KAAAxD,KAAMioI,GAAuB56H,EAASimB,IAAMtzB,YAD3BqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOo7H,YADe5oI,EAAA+oI,EAAAv1H,KAAjC,CAAiCoyH,GAA0B4C,wBAO3DQ,GAAA,SAAAx1H,GAEE,SAAAw1H,EAAY78F,EAA4B5+B,EAAcimB,QAAA,IAAAA,IAAAA,EAAA,IAAtD,IAAAjqB,EACEiK,EAAA9P,KAAAxD,KAAMioI,GAAuBh8F,EAAa3Y,EAAOjmB,IAAQrN,YADnBqJ,EAAAgE,QAAAA,EAD/BhE,EAAAiE,KAAOq7H,YADmB7oI,EAAAgpI,EAAAx1H,KAArC,CAAqCoyH,GAA0B6C,wBAO/DQ,GAAA,SAAAz1H,GAEE,SAAAy1H,EAAmB17H,EAAkBimB,QAAA,IAAAA,IAAAA,EAAA,IAArC,IAAAjqB,EACEiK,EAAA9P,KAAAxD,KAAMioI,GAAuB56H,EAAQ2W,KAAMsP,IAAMtzB,YADhCqJ,EAAAgE,QAAAA,EADVhE,EAAAiE,KAAOs7H,YADsB9oI,EAAAipI,EAAAz1H,KAAxC,CAAwCoyH,GAA0B8C,olCCKhE,SACUxrG,EACAgsG,GAFV,IAAA3/H,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAgpI,2BAAAA,EA7BVhpI,KAAAipI,uBAGIjpI,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+rG,IACPt+H,EAAAA,KAAI,SAACyT,GAAiD,OAAAA,EAAOhR,WAC7DgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAK2/H,2BACT39H,IAAIgC,EAAQ4+B,YAAa5+B,EAAQ25E,cAAe35E,EAAQmW,UACxD5b,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAI40H,GAA4C,CACrDl9F,YAAa5+B,EAAQ4+B,YACrBroB,KAAMrP,OAGV0iB,EAAAA,YAAW,SAACmyG,GACV,OAAAphI,EAAAA,GACE,IAAIqhI,GAAyC,CAC3C/sG,QAASjvB,EAAQ4+B,6CAtBhChkC,EAAAA,uDAPQu1B,EAAAA,eAIA8nG,MAMPllI,EAAA,CADCq9B,EAAAA,+DC8DD,SACUT,EACAssG,EACA/mG,GAHV,IAAAl5B,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAspI,wBAAAA,EACAtpI,KAAAuiC,qBAAAA,EA5DVviC,KAAAupI,oBAGIvpI,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOqsG,IACP5+H,EAAAA,KAAI,SAACyT,GAA8C,OAAAA,EAAOhR,WAC1DgnC,EAAAA,UAAS,SAACpI,GACR,OAAO5iC,EAAKigI,wBAAwBj+H,IAAI4gC,GAAarkC,KACnDgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAIk1H,GAAyC,CAClDx9F,YAAWA,EACXroB,KAAMrP,OAGV0iB,EAAAA,YAAW,SAACmyG,GACV,OAAAphI,EAAAA,GACE,IAAI0hI,GAAsC,CACxCptG,QAAS2P,aASrBjsC,KAAA2pI,kBAGI3pI,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOysG,IACPh/H,EAAAA,KAAI,SAACyT,GAA6C,OAAAA,EAAOhR,WACzDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKigI,wBACTt2H,IAAI3F,EAAQ4+B,YAAa5+B,EAAQq7E,QACjC9gF,KACCgD,EAAAA,KAAI,SAACi/H,GACH,OAAO,IAAIC,GAAwCD,MAErD5yG,EAAAA,YAAW,SAACmyG,GACV,OAAAphI,EAAAA,GAAG,IAAI+hI,GAAqC18H,EAAQ4+B,sBAO9DjsC,KAAAgqI,6CAA+ChqI,KAAKg9B,SAASp1B,KAC3Du1B,EAAAA,OAAO8sG,IACPzhH,EAAAA,KAAI,WACFnf,EAAKk5B,qBAAqBvvB,IACxB,CAAEzS,IAAK,mCACPigC,EAAAA,kBAAkBm7E,iDAvDzB1zG,EAAAA,uDAXQu1B,EAAAA,eAIA+nG,UAGP3jG,MAOAxhC,EAAA,CADCq9B,EAAAA,qDA2BDr9B,EAAA,CADCq9B,EAAAA,mDAsBDr9B,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,gFCSpB,SACUssB,EACAktG,GAFV,IAAA7gI,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAkqI,uBAAAA,EA7DVlqI,KAAAmqI,gBAEInqI,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOitG,IACP5lB,EAAAA,SAAQ,SAACnmG,GAA0C,OAAAA,EAAOkpH,aAC1DlzF,EAAAA,UAAS,SAACgY,GACR,OAAAA,EAAMzkD,KACJ6hB,EAAAA,WAAU,SAACpL,GACT,OAAOhV,EAAK6gI,uBACT9gD,OAAO/qE,EAAOhR,QAAQg9H,UAAWhsH,EAAOhR,QAAQ+W,cAChDxc,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAI+1H,GACT/1H,EACA8J,EAAOkpH,cAGXtwG,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIuiI,GACFnuG,GAAmBn4B,GACnBoa,EAAOkpH,wBAWzBvnI,KAAAwqI,uBAGIxqI,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOstG,IACP7/H,EAAAA,KAAI,SAACyT,GAAiD,OAAAA,EAAOhR,WAC7Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK6gI,uBACTzE,eAAep4H,EAAQk8E,KAAMl8E,EAAQ+W,aAAaZ,UAClD5b,KACCgD,EAAAA,KAAI,SAAC8/H,GACH,OACS,IAAIC,QADOpjI,IAAhBmjI,EACqD,GAEFA,MAEzDzzG,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4iI,GACFxuG,GAAmBn4B,mCAtDlCgE,EAAAA,uDAPQu1B,EAAAA,eAIAgoG,MAMPplI,EAAA,CADCq9B,EAAAA,iDAiCDr9B,EAAA,CADCq9B,EAAAA,0EC8BD,SAAAotG,EACU7tG,EACA8tG,GAFV,IAAAzhI,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA8qI,iBAAAA,EA1DF9qI,KAAAwuE,eAAqCxuE,KAAKg9B,SAASp1B,KACzDu1B,EAAAA,OACEsxC,GACAre,KAIJpwD,KAAA+qI,aAAelU,EAAAA,cACb,WAAM,OAAA,SAAC/xH,OAAAC,OAAA,IAAAD,EAA8B,GAAEA,EAA9BiwH,EAAShwH,EAAAgwH,UAAE/vH,EAAAD,EAAA+iD,SAAAA,OAAQ,IAAA9iD,EAAG,EAACA,EAG9B,OAAAqE,EAAK2zB,SAASp1B,KACZu1B,EAAAA,OAAO6tG,IACPpgI,EAAAA,KAAI,SAACyT,GAAuC,MAAA,CAC1C2F,KAAM3F,EAAOhR,QACbimB,MAAOjV,EAAOjC,KAAKkX,UAIrBuhG,GAAmB/sE,EAAUitE,GAC7B1gF,EAAAA,UAAS,SAAC2U,GACR,OAAAiiF,EAAAA,MAAK9oI,WAAA,EAAA+B,EACAmF,EAAKyhI,iBACLzF,QAAQr8E,GACRp+C,IAAIvB,EAAK6hI,wBAGhB/8D,GAAW9kE,EAAKmlE,4BAIdq8D,EAAA3qI,UAAAgrI,kBAAA,SACNC,GAIA,OAAOA,EAAYt/C,MAAMjkF,KACvBgD,EAAAA,KACE,SAAC2J,GACC,OAAA,IAAI62H,GAAiC5rI,OAAAqF,OAAA,CACjCmf,KAAMmnH,EAAYnnH,MAASzP,GAC7B42H,EAAY73G,UAGlB2D,EAAAA,YAAW,SAAChzB,GACV,OAAO+D,EAAAA,GACL,IAAIqjI,GACFF,EAAYnnH,KACZoY,GAAmBn4B,GACnBknI,EAAY73G,uCApDvBrrB,EAAAA,uDAZQu1B,EAAAA,eAIA4nG,UCAI1nG,GAAiB,CAC5B4tG,GACAT,GACAU,GACAC,ICLWz6E,GAAuC,CAClD9kB,YAAa,GACbroB,KAAM,aAGQxF,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA29H,IAGQptH,EAAO/Q,MACb,KAAKo+H,GACH,IAAMz/F,EAAc5tB,EAAOhR,QAAQ4+B,YAC7BroB,EAAOvF,EAAOhR,QAAQuW,KAE5B,OAAApkB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR8V,KAAM1f,EAAI4J,EAAM8V,KAAUA,GAAc,IAAKtE,QAC3C,SACEunE,EACA8kD,GAWA,OARG9kD,EAAkB57B,MACjB,SAACuzD,GACC,OAAAA,EAAIx3B,gBAAkB2kD,EAAiB3kD,eACvCw3B,EAAIl+G,OAAO0jB,OAAS2nH,EAAiBrrI,OAAO0jB,SAGhD6iE,EAAkBnjF,KAAKioI,GAElB9kD,IAET,IAEF56C,YAAWA,IAIf,KAAK2/F,GACH,OAAO76E,GAIX,OAAOjjD,EAGF,IC9CMijD,GAAoC,CAC/C9kB,YAAa,GACbroB,KAAM,aAGQxF,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA+9H,IAGQxtH,EAAO/Q,MACb,KAAKw+H,GACH,IAAM7/F,EAAc5tB,EAAOhR,QAAQ4+B,YAC7BroB,EAAOvF,EAAOhR,QAAQuW,KAE5B,OAAApkB,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRm+B,YAAWA,EACXroB,KAAIA,IAKV,OAAO9V,EAGF,ICtBMijD,GAAoC,CAC/CijB,QAAS,GACT02D,YAAa,GACbqB,WAAY,aAGE3tH,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAk+H,IAGQ3tH,EAAO/Q,MACb,KAAK2+H,GACH,IAAMj4D,EAAU31D,EAAOhR,QACjByW,EAAMzF,EAAOkpH,UAAY,CAAEwE,WAAY/3D,GAAY,CAAEA,QAAOA,GAClE,OAAAx0E,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GACAgW,GAIP,KAAKooH,GACH,IAAMxB,EAA4BrsH,EAAOhR,QAEzC,OAAA7N,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR48H,YAAWA,IAIf,KAAKyB,GACH,OAAA3sI,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACRkmE,QAAS31D,EAAOhR,QAAQy6H,iBAAmB,GAAKh6H,EAAMkmE,QACtD02D,YAAarsH,EAAOhR,QAAQ06H,sBACxB,GACAj6H,EAAM48H,YACVqB,WAAY1tH,EAAOhR,QAAQ06H,sBACvB,GACAj6H,EAAMi+H,aAIhB,OAAOj+H,EAGF,IC/CMs+H,GAAmD,YAQhDC,GACdvwH,EACAsC,GAKA,IAAMzB,EAASwB,GAAiBrC,EAAYsC,GAE5C,OAAO,SACLtQ,EACAuQ,WAEA,YAHA,IAAAvQ,IAAAA,EAAAs+H,IAGI/tH,GAAUA,EAAOjC,MAAQiC,EAAOjC,KAAKN,aAAeA,EACtDtc,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,KAAK/I,EAAA,IACU,QAAlBD,EAACuZ,EAAOjC,KAAKkX,aAAK,IAAAxuB,EAAAA,EAAI,IAAK6X,EAAO7O,EAAMuQ,EAAOjC,KAAKkX,OAAQjV,GAAOtZ,IAGhE+I,YClBKw+H,GACdxwH,EACAsC,GAKA,OAAOY,GACLlD,EACAuwH,GAAuBvwH,EAAYsC,aCbvBwf,KACd,MAAO,CACLwrD,OAAQmjD,GACR18G,QAASy8G,GAAmCrE,IAC5CuE,QAASC,GACT3lD,WAAY4lD,QAIH7uG,GAER,IAAI34B,EAAAA,eAAgD,mBAE5C44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aAGE+uG,GACdvuH,GAEA,OAAO,SAAUtQ,EAAOuQ,GAOtB,OALEA,EAAO/Q,OAASmhE,IAChBpwD,EAAO/Q,OAAS8iD,KAEhBtiD,OAAQvG,GAEH6W,EAAQtQ,EAAOuQ,QAIbg2F,GAAmC,CAACs4B,ICnCpCC,GAGT/+H,EAAAA,sBAAqCm6H,OCIvC,SAACl6H,GAAyB,OAAAA,EAAMg5E,YALrB+lD,GAGT7+H,EAAAA,eACF4+H,GAAgBE,IAILC,GAAsC,SACjD9gG,EACA+6C,GAEA,OAAOh5E,EAAAA,eAAe6+H,IAA2B,SAACG,GAChD,GAAIA,EAAkB/gG,cAAgBA,EACpC,OAAM+gG,EAAkBppH,KAClBojE,EACKgmD,EAAkBppH,KAAK9W,QAC5B,SAACzI,GAAS,OAAAA,EAAK2iF,gBAAkBA,KAI9BgmD,EAAkBppH,KAElB,OCvBFqpH,GAGTj/H,EAAAA,eAAe4+H,IAAkB,SAAC9+H,GAAyB,OAAAA,EAAM0+H,WAExDU,GAAmC,SAC9CjhG,GAEA,OAAOj+B,EAAAA,eAAei/H,IAAwB,SAACE,GAC7C,GAAIA,EAAWlhG,cAAgBA,EAC7B,OAAOkhG,EAAWvpH,SCNXwpH,GAGTp/H,EAAAA,eAAe4+H,IAAkB,SAAC9+H,GAAyB,OAAAA,EAAMs7E,UAExDikD,GAGTr/H,EAAAA,eAAeo/H,IP+Ba,SAC9Bt/H,GACsB,OAAAA,EAAMkmE,WO/BjBs5D,GAGTt/H,EAAAA,eACFo/H,IP4BiC,SACjCt/H,GACsB,OAAAA,EAAMi+H,cO1BjBwB,GAGTv/H,EAAAA,eACFo/H,IPuBmC,SACnCt/H,GACiB,OAAAA,EAAM48H,eQtDZ8C,GAGTx/H,EAAAA,eAAe4+H,IAAkB,SAAC9+H,GAAyB,OAAAA,EAAM+hB,WAExD49G,GAAiC,SAC5CzpH,EACAsP,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtlB,EAAAA,eACLw/H,IACA,SAAC39G,GACC,OAAA2qC,GAAqC3qC,EAAS7L,GAAMsP,IACpDs4F,OAIO8hB,GAA4B,SACvC1pH,EACAsP,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtlB,EAAAA,eACLy/H,GAA+BzpH,EAAMsP,IACrC,SAACq6G,GAAiB,OAAA/mH,GAA+B+mH,OAIxCC,GAAmC,SAC9C5pH,EACAsP,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtlB,EAAAA,eACLy/H,GAA+BzpH,EAAMsP,IACrC,SAACq6G,GAAiB,OAAA7mH,GAAiC6mH,OAI1CE,GAAmC,SAC9C7pH,EACAsP,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtlB,EAAAA,eACLy/H,GAA+BzpH,EAAMsP,IACrC,SAACq6G,GAAiB,OAAA3mH,GAAiC2mH,OAI1CG,GAAiC,SAC5C9pH,EACAsP,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtlB,EAAAA,eACLy/H,GAA+BzpH,EAAMsP,IACrC,SAACq6G,GAAiB,OAAAzmH,GAA+BymH,UAOjB,SAAC99G,GACnC,OAAOrwB,OAAO6f,KAAKwQ,EAAQhR,WAJhBkvH,GAGT//H,EAAAA,eAAew/H,GAAeQ,2gBCtDhC,SAAAC,EAAsBj+H,GAAAhQ,KAAAgQ,MAAAA,SAEtBi+H,EAAA/tI,UAAAguI,sBAAA,SACEjiG,EACA+6C,EACAxjE,GAEAxjB,KAAKgQ,MAAMU,SACT,IAAIy9H,GAAqC,CACvCliG,YAAWA,EACX+6C,cAAaA,EACbxjE,SAAQA,MAKdyqH,EAAA/tI,UAAAkuI,qBAAA,SACEniG,EACA+6C,GAEA,OAAOhnF,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACEi+H,GACEpiG,EACA+6C,MAMRinD,EAAA/tI,UAAAouI,gBAAA,WACEtuI,KAAKgQ,MAAMU,SAAS,IAAI69H,kJAnC3BtmI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDARGyM,EAAAA,2BCYf,SAAA48H,EAAsBx+H,GAAAhQ,KAAAgQ,MAAAA,SAEtBw+H,EAAAtuI,UAAAuuI,iBAAA,SAAiBxiG,GAAjB,IAAA5iC,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOs+H,GAAkDziG,IACzDzjB,EAAAA,KAAI,SAACgkH,QACajlI,IAAZilI,QAAyCjlI,IAAhB0kC,GAC3B5iC,EAAK2G,MAAMU,SACT,IAAIi+H,GAAkC1iG,SAOhDuiG,EAAAtuI,UAAA8S,IAAA,SAAIi5B,EAAqBy8C,GACvB1oF,KAAKgQ,MAAMU,SACT,IAAIk+H,GAAiC,CACnC3iG,YAAaA,EACby8C,OAAMA,mJAvBbzgF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATGyM,EAAAA,2BCYf,SAAAi9H,EAAsB7+H,GAAAhQ,KAAAgQ,MAAAA,SAEtB6+H,EAAA3uI,UAAAkpF,OAAA,SAAOt4E,EAAesT,GACpBpkB,KAAKgQ,MAAMU,SACT,IAAIo+H,GAA8B,CAChCzE,UAAWv5H,EACXsT,aAAcA,MAKpByqH,EAAA3uI,UAAA6uI,WAAA,WACE,OAAO/uI,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO4+H,MAGhCH,EAAA3uI,UAAA+uI,aAAA,WACEjvI,KAAKgQ,MAAMU,SACT,IAAIw+H,GAAwC,CAC1CpH,kBAAkB,mJAtBzB7/H,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATGyM,EAAAA,2BCgCf,SAAAu9H,EACYn/H,EACA48E,EACA5vD,EACqB/lB,GAHrBjX,KAAAgQ,MAAAA,EACAhQ,KAAA4sF,cAAAA,EACA5sF,KAAAg9B,SAAAA,EACqBh9B,KAAAiX,WAAAA,EARvBjX,KAAAgpD,SAEN,UASJmmF,EAAAjvI,UAAAmL,IAAA,SAAI4gC,EAAqBnN,GAIvB,OAHAA,EAAS9+B,KAAK4sF,cAAc0V,OAAO,UAAWxjE,GAE9C9+B,KAAKovI,kBAAkBnjG,EAAanN,GAC7B9+B,KAAKgpD,SAAS/c,GAAajsC,KAAKqvI,eAAevwG,KAG9CqwG,EAAAjvI,UAAAkvI,kBAAA,SAAkBnjG,EAAqBnN,WAAvCz1B,EAAArJ,KACHA,KAAKgpD,SAAS/c,KACjBjsC,KAAKgpD,SAAS/c,GAAe,QAG/B,IAAoB,IAAA3M,EAAA37B,EAAAm7B,GAAMS,EAAAD,EAAAz9B,QAAA09B,EAAAt9B,KAAAs9B,EAAAD,EAAAz9B,OAAE,CAAvB,IAAMyxB,EAAKiM,EAAA59B,MACT3B,KAAKgpD,SAAS/c,GAAa3Y,KAC9BtzB,KAAKgpD,SAAS/c,GAAa3Y,GAAStzB,KAAKsvI,mBACvCrjG,EACA3Y,sGAKFwL,EAAOn+B,OAAS,IAClBX,KAAKgpD,SAAS/c,GAAajsC,KAAKqvI,eAAevwG,IAAWs7F,GACxDt7F,EAAOl0B,KAAI,SAAC0oB,GAAU,OAAAjqB,EAAK2/C,SAAS/c,GAAa3Y,OACjD1rB,KACAgD,EAAAA,KAAI,SAAC2kI,GACH,OAAAA,EAAa1iI,MAAMb,SACfzH,EAASpC,WAAA,EAAA+B,EAAA,CAAC,IAAOqrI,SACjBhoI,KAENQ,EAAAA,0BAKIonI,EAAAjvI,UAAAmvI,eAAA,SAAevwG,GACvB,OAAOA,EAAO5E,KAAK,MASXi1G,EAAAjvI,UAAAovI,mBAAA,SACRrjG,EACA3Y,GAFQ,IAAAjqB,EAAArJ,KAIFwvI,EAAcxvI,KAAKgQ,MAAMpI,KAC7BwI,EAAAA,OACEq/H,GAAgDxjG,EAAa3Y,IAE/D1oB,EAAAA,KACE,SAAC+iI,GACC,OAACA,EAAazvH,UAAYyvH,EAAa5wH,UAAY4wH,EAAa1pI,SAEpE8D,EAAAA,uBACA+E,EAAAA,QAAO,SAAC2kD,GAAM,OAAAA,MAGVi+E,EAAa1vI,KAAKgQ,MAAMpI,KAC5BwI,EAAAA,OACEu/H,GAAkD1jG,EAAa3Y,KAI7Ds8G,EAAoB3E,EAAAA,MAAK9oI,WAAA,EAAA+B,EAAA,CAC7BsrI,GACGxvI,KAAK6vI,yBAAyB5jG,EAAa3Y,KAC9C1rB,KACAC,EAAAA,aAAa,GACbygB,EAAAA,eAAeonH,GACflnH,EAAAA,KAAI,SAAC1jB,GAAAf,EAAAe,EAAA,GAAY,IAEbuE,EAAK2G,MAAMU,SACT,IAAIo/H,GAA2B7jG,EAAa3Y,QAM9Cy8G,EAAe/vI,KAAKgQ,MAAMpI,KAC9BwI,EAAAA,OAAO4/H,GAA2C/jG,EAAa3Y,KAGjE,OAAOshC,EAAAA,OACL,WAAM,OAAAg7E,EAAkBn9H,eACxB,WAAM,OAAAs9H,KACNnoI,KAAK2H,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,MAStC0/H,EAAAjvI,UAAA2vI,yBAAA,SACR5jG,EACA3Y,GAEA,IAAM28G,EAAW,GAGXltC,EAAS/iG,KAAK4sF,cAAckW,UAAU,UAAWxvE,GACvD,GAAIyvE,GAAU9nE,EAAAA,kBAAkBj7B,KAAKiX,YAAa,CAEhD,IAAMi5H,EAAclwI,KAAKg9B,SAASp1B,KAChCkF,EAAAA,QACE,SACEuR,GAIA,OAACA,EAAO/Q,OAAS6iI,IACf9xH,EAAO/Q,OAAS8iI,KAClB/xH,EAAOjC,KAAKL,WAAakwB,GACzB5tB,EAAOjC,KAAKkX,QAAUA,MAItB+8G,EAAarwI,KAAKg9B,SAASp1B,KAC/Bu1B,EAAAA,OAAO6tG,IACPl+H,EAAAA,QACE,SAACuR,GACC,OAAAA,EAAOhR,UAAY4+B,GAAe5tB,EAAOjC,KAAKkX,QAAUA,MAI9D28G,EAASvsI,KAAK1D,KAAKswI,iBAAiBD,EAAYH,EAAantC,IAG/D,OAAOktC,GAaDd,EAAAjvI,UAAAowI,iBAAA,SACND,EACAH,EACAntC,EACAgyB,GAEA,IAAIkP,EAAY,EAEVsM,EAAM,WAAM,OAACxb,EAAYA,EAAUwb,MAAQ3rI,KAAK2rI,OAEhDC,EAAaN,EAAYtoI,KAAK4gB,EAAAA,KAAI,WAAM,OAACy7G,EAAYsM,QA2B3D,OAzB2C5b,EAAAA,OAAM,WAC/C,IAAM8b,EAAMF,IAAQtM,EAEdyM,EAAoBF,EAAW5oI,KACnCm3G,EAAAA,MAAMhc,EAAQgyB,GACd71F,EAAAA,OAAM,GACNivC,GAAWkiE,IAGb,OAAII,EAAM1tC,EAEDkoC,EAAAA,MAAMjjI,EAAAA,IAAG,GAAO0oI,GACN,IAARD,EAGFC,EAGAzF,EAAAA,MACLjjI,EAAAA,IAAG,GAAMJ,KAAKm3G,EAAAA,MAAMhc,EAAS0tC,EAAK1b,IAClC2b,mNAjMTzoI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAvBGyM,EAAAA,aAeRywF,UAhBA7kE,EAAAA,wCAmCJr1B,EAAAA,OAAMD,KAAA,CAAC0Q,EAAAA,oCCtBV,SAAA+3H,EACY3gI,EACA4gI,GADA5wI,KAAAgQ,MAAAA,EACAhQ,KAAA4wI,eAAAA,SAgBZD,EAAAzwI,UAAAmL,IAAA,SACE4gC,EACAnN,GAEA,YAFA,IAAAA,IAAAA,EAAAtM,IAEOyZ,EACHjsC,KAAK4wI,eAAevlI,IAAI4gC,EAAa,GAAG9nC,OAAO26B,IAC/C92B,EAAAA,QAAGT,IAMTopI,EAAAzwI,UAAA2wI,UAAA,SACE5kG,EACA3Y,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtzB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACEu/H,GAAkD1jG,EAAa3Y,MAQrEq9G,EAAAzwI,UAAA4wI,UAAA,SACE7kG,EACA3Y,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtzB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACE2gI,GAAkD9kG,EAAa3Y,MAQrEq9G,EAAAzwI,UAAA8wI,SAAA,SACE/kG,EACA3Y,GAEA,YAFA,IAAAA,IAAAA,EAAA,IAEOtzB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OACE6gI,GAAgDhlG,EAAa3Y,MAUnEq9G,EAAAzwI,UAAAgxI,OAAA,SAAOjlG,EAAqB3Y,QAAA,IAAAA,IAAAA,EAAA,IAC1BtzB,KAAKgQ,MAAMU,SAAS,IAAIo/H,GAA2B7jG,EAAa3Y,iKA/EnErrB,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXGyM,EAAAA,aAKRu9H,yBCMT,SAAAgC,0DAAsCrxI,EAAAqxI,EAAA79H,GAIpC69H,EAAAjxI,UAAAkpF,OAAA,SAAOt4E,EAAesT,GACpBpkB,KAAKgQ,MAAMU,SACT,IAAIo+H,GACF,CACEzE,UAAWv5H,EACXsT,aAAcA,IAEhB,KAKN+sH,EAAAjxI,UAAA6uI,WAAA,WACE,OAAO/uI,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOghI,MAMhCD,EAAAjxI,UAAA+uI,aAAA,WACEjvI,KAAKgQ,MAAMU,SACT,IAAIw+H,GAAwC,CAC1CnH,uBAAuB,MAK7BoJ,EAAAjxI,UAAAmxI,qBAAA,WACE,OAAOrxI,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOkhI,MAGhCH,EAAAjxI,UAAAqxI,kBAAA,SAAkBzgI,EAAesT,GAC/BpkB,KAAKgQ,MAAMU,SACT,IAAI8gI,GAAqC,CACvCjoD,KAAMz4E,EACNsT,aAAcA,SAvCgByqH,4IAHrC5mI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8BC8BZ,SAAAssI,EACYC,EACAxhB,EACAl6D,GAHZ,IAAA3sD,EAKEiK,EAAA9P,KAAAxD,OAAOA,YAJGqJ,EAAAqoI,qBAAAA,EACAroI,EAAA6mH,IAAAA,EACA7mH,EAAA2sD,YAAAA,EAhBF3sD,EAAAsoI,YAENtoI,EAAK6mH,IAAIpC,iBAAiBlmH,KAC5BkF,EAAAA,OAAOd,SACPyd,EAAAA,WAAU,SAACtF,GAGT,OAAA9a,EAAKuoI,wBAAwBztH,GACzB9a,EAAKqoI,qBAAqB3C,aAAannI,KAAKkF,EAAAA,OAAOd,UACnDhE,EAAAA,GAAGmc,OAUT9a,EAAKqtC,SAAW18B,EAAAA,SAAS83C,uBAtBnBhyD,EAAA2xI,EAAAn+H,GAyBRm+H,EAAAvxI,UAAAi2D,aAAA,WAAA,IAAA9sD,EAAArJ,KACE,OAAOA,KAAK2xI,YAAY/pI,KACtBkF,EAAAA,QAAO,SAACqX,GAA4B,QAAEA,EAAKF,cAC3CwF,EAAAA,WAAU,SAAC7pB,SACT,OAAAyJ,EAAK2sD,YAAYI,UAAU,kCAAmC,CAC5DC,MAAOz2D,EAAEqkB,WAAWujE,aACpB12E,OAAoB,QAAbhM,EAAAlF,EAAEg1H,mBAAW,IAAA9vH,OAAA,EAAAA,EAAEnE,QAClBf,EAAEg1H,YAAY,GAAGid,oBACjBtqI,SAMZkqI,EAAAvxI,UAAA8yH,mBAAA,WAAA,IAAA3pH,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAK2xI,YAAY/pI,OACjB5H,KAAKg2D,YAAYI,UAAU,iBAC1BxuD,KACDgD,EAAAA,KAAI,SAAC7F,OAAAC,EAAAjB,EAAAgB,EAAA,GAACnF,EAACoF,EAAA,GAAErC,EAAKqC,EAAA,GACZ,OAAApF,EAAEg1H,YACEvrH,EAAKyoI,sBAAyClyI,EAAG+C,GACjD,UAKA8uI,EAAAvxI,UAAA4xI,sBAAA,SACR3tH,EACAxhB,WAEMiyH,EAAgC,GACtCA,EAAYlxH,KAAK,CAAEf,MAAOA,EAAOywH,KAAM,UAEvC,IAAiB,IAAApuH,EAAArB,EAAAwgB,EAAKywG,aAAWj9G,EAAA3S,EAAAnD,QAAA8V,EAAA1V,KAAA0V,EAAA3S,EAAAnD,OAAE,CAA9B,IAAMkwI,EAAEp6H,EAAAhW,MACU,aAAjBowI,EAAGC,WAA6C,kBAAjBD,EAAGC,WACpCpd,EAAYlxH,KAAK,CACff,MAAOovI,EAAGF,eACVze,KAAM,MAAM2e,EAAGE,iBAGE,UAAjBF,EAAGC,WACLpd,EAAYlxH,KAAK,CACff,MAAOovI,EAAGF,eACVze,KAAM,WAAW2e,EAAGF,eAAc,MAAME,EAAGE,mHAIjD,OAAOrd,GAGC6c,EAAAvxI,UAAA0xI,wBAAA,SAAwBztH,GAChC,QAAS3kB,OAAO6f,KAAK8E,EAAK68D,OAAOr0E,MAC/B,SAACpM,SACC,SAA4B,QAA3BuE,EAACqf,EAAK68D,MAAMzgF,GAAK4gF,kBAAU,IAAAr8E,OAAA,EAAAA,EAAE6H,MAC5B,SAAC00E,GACC,MAAkB,4BAAlBA,EAAK1xC,UACa,yBAAlB0xC,EAAK1xC,oBAlFP4G,qKAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDARL0pI,UAVAhhB,UAOAn3D,yBC0BP,SAAAw7E,EACYR,EACA17E,EACAjuC,EACA5Y,EACAe,GALZ,IAAA7G,EAOEiK,EAAA9P,KAAAxD,OAAOA,YANGqJ,EAAAqoI,qBAAAA,EACAroI,EAAA2sD,YAAAA,EACA3sD,EAAA0e,YAAAA,EACA1e,EAAA8F,MAAAA,EACA9F,EAAA6G,oBAAAA,EAZF7G,EAAA8oI,OAEN9oI,EAAKqoI,qBAAqB3C,aAAannI,KACzCkF,EAAAA,QAAO,SAACyH,GAAS,SAAEA,MAAAA,OAAI,EAAJA,EAAM0P,eACzBrZ,EAAAA,KAAI,SAACopE,GAAY,OAAAA,EAAQ/vD,WAAWujE,iBAWpCn+E,EAAKqtC,SAAW18B,EAAAA,SAAS43C,aACzBvoD,EAAKstC,aAAe,yCAlBd72C,EAAAoyI,EAAA5+H,GAqBR4+H,EAAAhyI,UAAA8yH,mBAAA,WAAA,IAAA3pH,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKg2D,YAAYI,UAAU,eAC3Bp2D,KAAKg2D,YAAYI,UAAU,uBAC3Bp2D,KAAK+nB,YAAYhN,mBAChBnT,KACDgD,EAAAA,KAAI,SAAC5F,OAAA2S,EAAA5T,EAAAiB,EAAA,GAACotI,EAASz6H,EAAA,GAAE06H,EAAW16H,EAAA,GAAEujB,EAAUvjB,EAAA,GAChCi9G,EAAc,GAUpB,OATAA,EAAYlxH,KAAK,CAAEf,MAAOyvI,EAAWhf,KAAM,MACvCl4F,GACF05F,EAAYlxH,KAAK,CACff,MAAO0vI,EACPjf,KAAM/pH,EAAK6G,oBAAoB5E,UAAU,CACvCW,QAAS,cAIR2oH,OAKbsd,EAAAhyI,UAAAi2D,aAAA,WAAA,IAAA9sD,EAAArJ,KACE,OAAOA,KAAKmyI,OAAOvqI,KACjB6hB,EAAAA,WAAU,SAAC6oH,GACT,OAAAjpI,EAAK2sD,YAAYI,UAAU,2CAA4C,CACrEC,MAAOi8E,EACPC,OAAQlpI,EAAKioF,kBAMrB4gD,EAAAhyI,UAAAs2C,SAAA,SAASryB,GACP,OAAO7Q,EAAApT,UAAMs2C,SAAQhzC,KAAAxD,KAACmkB,IAASnkB,KAAKsxF,WAAa,GAAK,IAGxD9xF,OAAAyB,eAAcixI,EAAAhyI,UAAA,aAAU,KAAxB,mBACE,OAAuC,QAAvC6E,EAA0B,QAA1BD,EAAO9E,KAAKmP,MAAME,gBAAQ,IAAAvK,OAAA,EAAAA,EAAEuuB,mBAAW,IAAAtuB,OAAA,EAAAA,EAAEytI,+CA3DnCj8F,gNAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXL0pI,UAFAn4E,UAPAv8C,UAHAs4H,EAAAA,sBAaAxnI,wBCiCP,SAAAynI,EACYl4H,EACAm4H,EACA38E,GAHZ,IAAA3sD,EAKEiK,EAAA9P,KAAAxD,OAAOA,YAJGqJ,EAAAmR,eAAAA,EACAnR,EAAAspI,eAAAA,EACAtpI,EAAA2sD,YAAAA,EAVF3sD,EAAAupI,SAAWvpI,EAAKmR,eAAezM,iBAAiBnG,KACxDgD,EAAAA,KAAI,SAACkD,GAAU,OAAAA,EAAMA,MAAM1B,OAAoB,eAC/CU,EAAAA,QAAO,SAACkX,GAAS,QAAEA,KACnByF,EAAAA,WAAU,SAACzF,GAAS,OAAA3a,EAAKspI,eAAetnI,IAAI2Y,EAAMooE,EAAAA,aAAaymD,YAC/D/lI,EAAAA,OAAOd,UASP3C,EAAKqtC,SAAW18B,EAAAA,SAAS63C,sBAtBnB/xD,EAAA4yI,EAAAp/H,GA8BRo/H,EAAAxyI,UAAA4yI,eAAA,WAAA,IAAAzpI,EAAArJ,KACE,OAAOA,KAAK4yI,SAAShrI,KACnB6hB,EAAAA,WAAU,SAAC7pB,GACT,OAAAyJ,EAAK2sD,YAAYI,UAAU,mCAAoC,CAC7D4kE,QAASp7H,EAAEqmC,YAWnBysG,EAAAxyI,UAAAi2D,aAAA,WAAA,IAAA9sD,EAAArJ,KACE,OAAOA,KAAK4yI,SAAShrI,KACnB6hB,EAAAA,WAAU,SAAC7pB,GACT,IAAIghF,EAAQhhF,EAAEqmC,KAGd,OAFA26C,GAASv3E,EAAK0pI,qBAAqBnzI,GACnCghF,GAASv3E,EAAK2pI,oBAAoBpzI,GAC3ByJ,EAAK2sD,YAAYI,UAAU,iCAAkC,CAClEwqB,MAAOA,SAUf8xD,EAAAxyI,UAAA+yI,mBAAA,WAAA,IAAA5pI,EAAArJ,KACE,OAAOA,KAAK4yI,SAAShrI,KACnB6hB,EAAAA,WAAU,SAAC7pB,GACT,OAAAyJ,EAAK2sD,YAAYI,UAAU,uCAAwC,CACjEuwD,YAAa/mH,EAAEszI,eAUvBR,EAAAxyI,UAAA8yH,mBAAA,WACE,OAAOjoG,EAAAA,cAAc,CACnB/qB,KAAK4yI,SAAShrI,OACd5H,KAAKg2D,YAAYI,UAAU,iBAC1BxuD,KACDgD,EAAAA,KAAI,SAAC+M,WAAAjO,EAAA3F,EAAA4T,EAAA,GAAC/X,EAAC8J,EAAA,GAAE/G,EAAK+G,EAAA,GACNkrH,EAAc,GACpBA,EAAYlxH,KAAK,CAAEf,MAAOA,EAAOywH,KAAM,UACvC,IAAkC,IAAAzpH,EAAAhG,EAAA/D,EAAEuzI,YAAc,IAAE/xD,EAAAz3E,EAAA9H,QAAAu/E,EAAAn/E,KAAAm/E,EAAAz3E,EAAA9H,OAAE,CAA3C,IAAAuxI,EAAAhyD,EAAAz/E,MAAEskC,EAAImtG,EAAAntG,KAAEjiB,EAAIovH,EAAApvH,KAAE3Z,EAAG+oI,EAAA/oI,IAC1BuqH,EAAYlxH,KAAK,CACff,MAAOsjC,GAAQjiB,EACfovG,KAAM/oH,sGAGV,OAAOuqH,OASb8d,EAAAxyI,UAAAmzI,aAAA,WACE,OAAOrzI,KAAK4yI,SAAShrI,KACnBgD,EAAAA,KAAI,SAAChL,aACH,OAA8B,QAA9BoF,EAAwB,QAAxBD,EAAc,QAAbD,EAAKlF,EAAEmmF,cAAM,IAAAjhF,OAAA,EAAAA,EAAEwuI,eAAQ,IAAAvuI,OAAA,EAAAA,EAAEwuI,YAAI,IAAAvuI,OAAA,EAAAA,EAAEqF,KACtBzK,EAAEmmF,OAAOutD,QAASC,KAAKlpI,IAC7B,UAKAqoI,EAAAxyI,UAAA6yI,qBAAA,SAAqBroG,SACzB8oG,EAIJ,OAHsB,QAAlB1uI,EAAA4lC,EAAQyoG,kBAAU,IAAAruI,OAAA,EAAAA,EAAEnE,QAAS,IAC/B6yI,EAAgB9oG,EAAQyoG,WAAW,IAE9BK,EACH,OAAMA,EAAcvtG,MAAQutG,EAAcxvH,MAC1C,IAGI0uH,EAAAxyI,UAAA8yI,oBAAA,SAAoBtoG,GAC5B,OAAOA,EAAQ+oG,aAAe,MAAM/oG,EAAQ+oG,aAAiB,IAQ/Df,EAAAxyI,UAAAq2D,cAAA,WACE,OAAOvuD,EAAAA,GAAG,CAAC2rD,EAAAA,eAAe+/E,OAAQ//E,EAAAA,eAAeggF,YAjI3Cp9F,qKAJTtuC,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAZL4K,UACA4gI,UAJAj6E,yBCqBP,SAAAk9E,EACYp5H,EACAk3H,EACA17E,GAHZ,IAAA3sD,EAKEiK,EAAA9P,KAAAxD,OAAOA,YAJGqJ,EAAAmR,eAAAA,EACAnR,EAAAqoI,qBAAAA,EACAroI,EAAA2sD,YAAAA,EAhBF3sD,EAAA8oI,OAEN9oI,EAAKqoI,qBAAqB3C,aAAannI,KACzCkF,EAAAA,QAAO,SAACyH,GAAS,SAAEA,MAAAA,OAAI,EAAJA,EAAM0P,eACzBrZ,EAAAA,KAAI,SAACopE,GAAY,OAAAA,EAAQ/vD,WAAWujE,iBAG5Bn+E,EAAAwqI,OAENxqI,EAAKmR,eACNzM,iBACAnG,KAAKgD,EAAAA,KAAI,SAACkD,GAAU,OAAAA,EAAMA,MAAM1B,OAAc,UAQ/C/C,EAAKqtC,SAAW18B,EAAAA,SAAS43C,aACzBvoD,EAAKstC,aAAe,yCAtBd72C,EAAA8zI,EAAAtgI,GAyBRsgI,EAAA1zI,UAAAi2D,aAAA,WAAA,IAAA9sD,EAAArJ,KACQwE,EAAU,CAACxE,KAAKmyI,OAAQnyI,KAAK6zI,QACnC,OAAO9oH,EAAAA,cAAcvmB,GAASoD,KAC5B6hB,EAAAA,WAAU,SAAC3kB,OAAAC,EAAAhB,EAAAe,EAAA,GAACtC,EAACuC,EAAA,GAAE+uI,EAAC/uI,EAAA,GACd,OAAAsE,EAAK2sD,YAAYI,UAAU,gCAAiC,CAC1DC,MAAO7zD,EACPsO,MAAOgjI,YA/BPv9F,aCNMw9F,WASd,MAP4B,CAC1BjmI,MAAO,CACLktB,YAAa,CACX3b,MAAIva,EAAA,GAAIA,EAAgB,QAAGqzB,EAAAA,kBAAkBiD,eAAct2B,uKDHlEmD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAVL4K,UACA8+H,UAHAn4E,aCgCT,kCAXCj6B,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAE,EAAAA,YAAYC,WAAW6pG,GAAiBnqG,GAAc,CAAEw2E,aAAY2/B,KACpE51G,EAAAA,cAAcD,WAAWT,KAE3BvB,UAAW,CACT51B,EAA4BwtI,IAC5Bj2G,QCzBJ,IAAMm2G,GAAqB,CACzB,CACEluI,QAASwwC,GACTluC,YAAaqqI,GACbzsI,OAAO,GAET,CACEF,QAASwwC,GACTluC,YAAaopI,GACbxrI,OAAO,GAET,CACEF,QAASwwC,GACTluC,YAAaurI,GACb3tI,OAAO,GAET,CACEF,QAASwwC,GACTluC,YAAa6pI,GACbjsI,OAAO,kBAOX,SAAAiuI,YACSA,EAAAj4G,QAAP,WACE,MAAO,CACLC,SAAUg4G,EACV/3G,UAASj4B,EAAM+vI,gCAPpBx3G,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAACo2G,0BCnBV,SAAAC,EAAoB3tG,GAAAzmC,KAAAymC,QAAAA,SAEpB2tG,EAAAl0I,UAAA62B,UAAA,SACEpC,EACA9yB,GAUA,OARI8yB,EAAQtqB,IAAIgH,SAAS,UAAYrR,KAAKymC,QAAQ4tG,cAChD1/G,EAAUA,EAAQE,MAAM,CACtBk7D,UAAW,CACTskD,YAAar0I,KAAKymC,QAAQ4tG,gBAKzBxyI,EAAK00B,OAAO5B,4IAhBtB1sB,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAFjBm2H,UCJI3jG,GAA2B,CACtC,CACE5xB,QAAS6xB,EAAAA,kBACTvvB,YAAa+rI,GACbnuI,OAAO,kBCJX,SAAAquI,YACSA,EAAAr4G,QAAP,WACE,MAAO,CACLC,SAAUo4G,EACVn4G,UAASj4B,EAAMyzB,gCALpB8E,EAAAA,SAAQv0B,KAAA,CAAC,wBCKR,SAAAqsI,EAAsBtmG,GAAAjuC,KAAAiuC,QAAAA,SAEtBsmG,EAAAr0I,UAAA2xF,aAAA,SAAah6E,GACX,OAAO7X,KAAKiuC,QAAQ4jD,aAAah6E,IAGnC08H,EAAAr0I,UAAAypB,YAAA,SACE9R,EACAk6E,EACAC,GAEA,OAAOhyF,KAAKiuC,QAAQtkB,YAClB9R,EACAk6E,EACAC,IAIJuiD,EAAAr0I,UAAA+pB,gBAAA,SAAgBpS,EAAgBo6E,GAC9B,OAAOjyF,KAAKiuC,QAAQhkB,gBAAgBpS,EAAQo6E,4IAvB/ChqF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLizF,wBCQP,SAAAo8C,EAAsBvmG,GAAAjuC,KAAAiuC,QAAAA,SAEtBumG,EAAAt0I,UAAAu0I,cAAA,SAAc58H,GACZ,OAAO7X,KAAKiuC,QAAQgqD,eAAepgF,4IAPtC5P,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAJLuzF,wBCUP,SAAAg8C,EAAsBzmG,GAAAjuC,KAAAiuC,QAAAA,SAEtBymG,EAAAx0I,UAAAixF,mBAAA,SACEt5E,EACA2L,EACAC,EACAC,GAEA,OAAO1jB,KAAKiuC,QAAQkjD,mBAAmBt5E,EAAQ2L,EAAUC,EAAaC,IAGxEgxH,EAAAx0I,UAAAqxF,mBAAA,SACE15E,EACAy5E,GAEA,OAAOtxF,KAAKiuC,QAAQsjD,mBAAmB15E,EAAQy5E,IAGjDojD,EAAAx0I,UAAAmxF,oBAAA,SAAoBx5E,EAAgBy5E,GAClC,OAAOtxF,KAAKiuC,QAAQojD,oBAAoBx5E,EAAQy5E,IAGlDojD,EAAAx0I,UAAAsxF,oBAAA,SACE35E,EACAy5E,GAEA,OAAOtxF,KAAKiuC,QAAQujD,oBAAoB35E,EAAQy5E,4IA9BnDrpF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLqzF,wBCMP,SAAAm8C,EAAsB1mG,GAAAjuC,KAAAiuC,QAAAA,SACtB0mG,EAAAz0I,UAAAmyF,aAAA,SACEx6E,EACA2L,EACAC,EACAC,EACAuoB,EACAqmD,GAEA,OAAOtyF,KAAKiuC,QAAQokD,aAClBx6E,EACA2L,EACAC,EACAC,EACAuoB,EACAqmD,IAIJqiD,EAAAz0I,UAAAqyF,eAAA,SACE16E,EACAxT,GAEA,OAAOrE,KAAKiuC,QAAQskD,eAAe16E,EAAQxT,IAG7CswI,EAAAz0I,UAAAyyF,YAAA,SACE96E,EACAo0B,EACAqmD,GAEA,OAAOtyF,KAAKiuC,QAAQ0kD,YAAY96E,EAAQo0B,EAAaqmD,4IAnCxDrqF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDATLszF,wBCiBP,SAAAm8C,EAAsB3mG,GAAAjuC,KAAAiuC,QAAAA,SAEf2mG,EAAA10I,UAAAmL,IAAA,SAAIwM,EAAgB47E,GACzB,OAAOzzF,KAAKiuC,QAAQrxB,KAAK/E,EAAQ47E,IAG5BmhD,EAAA10I,UAAA20I,WAAA,SACLh9H,EACA2L,EACAC,EACAC,GAEA,OAAO1jB,KAAKiuC,QAAQ0lD,YAAY97E,EAAQ2L,EAAUC,EAAaC,IAG1DkxH,EAAA10I,UAAA0zF,uBAAA,SACLH,EACAI,EACAh8E,GAEA,OAAO7X,KAAKiuC,QAAQ2lD,uBAClBH,EACAI,EACAh8E,IAIG+8H,EAAA10I,UAAA4zF,OAAA,SACLj8E,EACA47E,EACAM,GAEA,OAAO/zF,KAAKiuC,QAAQ6lD,OAAOj8E,EAAQ47E,EAAWM,IAGzC6gD,EAAA10I,UAAA+C,OAAA,SACL4U,EACAo8E,GAEA,OAAOj0F,KAAKiuC,QAAQ+lD,oBAAoBn8E,EAAQo8E,IAG3C2gD,EAAA10I,UAAA40I,uBAAA,SACLj9H,EACAu8E,GAEA,OAAOp0F,KAAKiuC,QAAQkmD,wBAAwBt8E,EAAQu8E,IAG/CwgD,EAAA10I,UAAA60I,qBAAA,SACLl9H,EACA2L,EACAC,EACAC,GAEA,OAAO1jB,KAAKiuC,QAAQimD,sBAClBr8E,EACA2L,EACAC,EACAC,IAIGkxH,EAAA10I,UAAAm0F,oBAAA,SACLx8E,EACAu8E,EACAE,GAEA,OAAOt0F,KAAKiuC,QAAQomD,oBAClBx8E,EACAu8E,EACAE,4IA3ELrsF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLozF,wBCHP,SAAAy8C,EAAsB/mG,GAAAjuC,KAAAiuC,QAAAA,SAEtB+mG,EAAA90I,UAAAuxB,OAAA,SAAO5Z,GACL,OAAO7X,KAAKiuC,QAAQlB,QAAQl1B,IAG9Bm9H,EAAA90I,UAAA4zB,OAAA,SAAOjc,EAAgB68E,GACrB,OAAO10F,KAAKiuC,QAAQna,OAAOjc,EAAQ68E,IAGrCsgD,EAAA90I,UAAA00F,WAAA,SAAW/8E,EAAgB68E,GACzB,OAAO10F,KAAKiuC,QAAQ2mD,WAAW/8E,EAAQ68E,4IAf1CzsF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDALLmzF,wBCQP,SAAA28C,EAAsBhnG,GAAAjuC,KAAAiuC,QAAAA,SAEtBgnG,EAAA/0I,UAAAmL,IAAA,SAAIwM,GACF,OAAO7X,KAAKiuC,QAAQrxB,KAAK/E,IAG3Bo9H,EAAA/0I,UAAAmsC,OAAA,SAAOqqE,EAAkBjhD,GACvB,OAAOz1D,KAAKiuC,QAAQ5B,OAAOqqE,EAAUjhD,IAGvCw/E,EAAA/0I,UAAAmlC,SAAA,SAASowB,GACP,OAAOz1D,KAAKiuC,QAAQ5I,SAASowB,IAG/Bw/E,EAAA/0I,UAAAq1F,cAAA,SAAcjwC,EAAcxtC,GAC1B,OAAO9X,KAAKiuC,QAAQsnD,cAAcjwC,EAAMxtC,IAG1Cm9H,EAAA/0I,UAAAs1F,2BAAA,SAA2BC,GACzB,OAAOz1F,KAAKiuC,QAAQunD,2BAA2BC,IAGjDw/C,EAAA/0I,UAAAw1F,cAAA,SAAc1hF,EAAe2hF,GAC3B,OAAO31F,KAAKiuC,QAAQynD,cAAc1hF,EAAO2hF,IAG3Cs/C,EAAA/0I,UAAA01F,YAAA,SACE/9E,EACAg+E,EACAC,GAEA,OAAO91F,KAAKiuC,QAAQ2nD,YAAY/9E,EAAQg+E,EAAiBC,IAG3Dm/C,EAAA/0I,UAAA61F,eAAA,SACEl+E,EACAm+E,EACAL,GAEA,OAAO31F,KAAKiuC,QAAQ8nD,eAAel+E,EAAQm+E,EAAaL,IAG1Ds/C,EAAA/0I,UAAAgiC,OAAA,SAAOrqB,GACL,OAAO7X,KAAKiuC,QAAQ/L,OAAOrqB,IAG7Bo9H,EAAA/0I,UAAAg2G,UAAA,WACE,OAAOl2G,KAAKiuC,QAAQgoD,sJAnDvBhuF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAHLgzF,wBCSP,SAAA+8C,EACY9kD,EACAgb,GADAprG,KAAAowF,yBAAAA,EACApwF,KAAAorG,mBAAAA,SAOZ8pC,EAAAh1I,UAAAopB,WAAA,SAAWxD,GACT,OAAOmlH,EAAAA,MACLjrI,KAAKorG,mBAAmB9hF,WAAWxD,GACnC9lB,KAAKowF,yBAAyB9mE,WAAWxD,KAU7CovH,EAAAh1I,UAAAi1I,8BAAA,SAA8B5rH,GAA9B,IAAAlgB,EAAArJ,KACE,OAAOA,KAAKspB,WAAWC,GAAY3hB,KACjCgD,EAAAA,KAAI,SAACid,GACH,QAAKA,IAIExe,EAAK+rI,uBAAuBvtH,GAC/Bxe,EAAK+mF,yBAAyBtmE,eAAejC,GAC7Cxe,EAAK+hG,mBAAmBthF,eAAejC,OAE7C9f,EAAAA,yBAUJmtI,EAAAh1I,UAAAm1I,kCAAA,SAAkC9rH,GAAlC,IAAAlgB,EAAArJ,KACE,OAAOA,KAAKspB,WAAWC,GAAY3hB,KACjCgD,EAAAA,KAAI,SAACid,GACH,OAAKA,IAIExe,EAAK+rI,uBAAuBvtH,GAC/Bxe,EAAK+mF,yBAAyBhmE,mBAAmBvC,GACjDxe,EAAK+hG,mBAAmBhhF,mBAAmBvC,OAEjD9f,EAAAA,yBAUJmtI,EAAAh1I,UAAA4pB,eAAA,SAAejC,GACb,OAAO7nB,KAAKo1I,uBAAuBvtH,GAC/B7nB,KAAKowF,yBAAyBtmE,eAAejC,GAC7C7nB,KAAKorG,mBAAmBthF,eAAejC,IAS7CqtH,EAAAh1I,UAAAkqB,mBAAA,SAAmBvC,GACjB,OAAO7nB,KAAKo1I,uBAAuBvtH,GAC/B7nB,KAAKowF,yBAAyBhmE,mBAAmBvC,GACjD7nB,KAAKorG,mBAAmBhhF,mBAAmBvC,IAMjDqtH,EAAAh1I,UAAAk1I,uBAAA,SACEvtH,GAEA,QAAKA,QAIiDtgB,IAA9CsgB,EAA6B/B,cAMvCovH,EAAAh1I,UAAAo1I,cAAA,SAAcztH,GACZ,QAAKA,QAIgCtgB,IAA7BsgB,EAAoB7D,6JAzG/B/b,EAAAA,WAAUC,KAAA,CAAC,CAAE/C,WAAY,qDAPjB2iB,UAEAghF,wBCoBP,SAAAysC,EACYvlI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SASZm7H,EAAAr1I,UAAAs1I,oBAAA,SACEhyH,EACAC,EACAC,GAHF,IAAAra,EAAArJ,KAKEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI+kI,GAAgC,CAClC59H,OAAMA,EACN2L,SAAUA,EACVC,YAAaA,EACbC,KAAMA,SAUd6xH,EAAAr1I,UAAAixF,mBAAA,SAAmB3tE,GAAnB,IAAAna,EAAArJ,KACE,OAAO+qB,EAAAA,cAAc,CACnB/qB,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOslI,KACvB11I,KAAK21I,wCACJ/tI,KACDkF,EAAAA,QAAO,SAAChI,GAAgB,OAAhBf,EAAAe,EAAA,GAAU,MAClB0jB,EAAAA,KAAI,SAAC1jB,OAAC8wI,EAAD7xI,EAAAe,EAAA,GAAqB,GAEtB8wI,EAAqB13H,SACrB03H,EAAqB74H,SACrB64H,EAAqB3xI,OAErBoF,EAAKmsI,oBAAoBhyH,MAG7B5Y,EAAAA,KAAI,SAAC9F,GAA2B,OAA3Bf,EAAAe,EAAA,GAAqB,GAA2BnD,WAOzD4zI,EAAAr1I,UAAAokG,yBAAA,WACE,OAAOtkG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOylI,MAMhCN,EAAAr1I,UAAAqkG,0BAAA,WACE,OAAOvkG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO0lI,MAOhCP,EAAAr1I,UAAA61I,wBAAA,SAAwBzkD,GAAxB,IAAAjoF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIslI,GAAoC,CACtCn+H,OAAMA,EACNy5E,WAAYA,SASpBikD,EAAAr1I,UAAA+1I,wCAAA,WACE,OAAOj2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBT,OAOpCu7E,EAAAr1I,UAAAg2I,wCAAA,WACE,OAAOl2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBV,OAOpCu7E,EAAAr1I,UAAAi2I,sCAAA,WACE,OAAOn2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBX,OAQlCu7E,EAAAr1I,UAAAk2I,0BAAA,SAA0B9kD,GAA1B,IAAAjoF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI2lI,GAAsC,CACxCx+H,OAAMA,EACNy5E,WAAYA,SASpBikD,EAAAr1I,UAAAo2I,0CAAA,WACE,OAAOt2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBR,OAOpCs7E,EAAAr1I,UAAAq2I,0CAAA,WACE,OAAOv2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBT,OAOpCs7E,EAAAr1I,UAAAs2I,wCAAA,WACE,OAAOx2I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBV,OAQlCs7E,EAAAr1I,UAAAsxF,oBAAA,SAAoBF,GAApB,IAAAjoF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI+lI,GAAgC,CAClC5+H,OAAMA,EACNy5E,WAAUA,SASlBikD,EAAAr1I,UAAAw2I,oCAAA,WACE,OAAO12I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBR,OAOpCq7E,EAAAr1I,UAAAy1I,oCAAA,WACE,OAAO31I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBP,mKAtLrCjyD,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDArBGyM,EAAAA,aAGRqH,wBCqBP,SAAA09H,EACY3mI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAQZu8H,EAAAz2I,UAAA02I,yBAAA,SACE3iD,GADF,IAAA5qF,EAAArJ,KAGEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAImmI,GAAqC,CACvCh/H,OAAMA,EACNo8E,mBAAkBA,SAS1B0iD,EAAAz2I,UAAAqlG,sBAAA,WACE,OAAOvlG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO0mI,MAMhCH,EAAAz2I,UAAA2lG,0BAAA,SAA0BriF,GAA1B,IAAAna,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO2mI,IACPvuH,EAAAA,KAAI,SAACwuH,GAEDA,EAAgB94H,SAChB84H,EAAgBj6H,SAChBi6H,EAAgB/yI,OAEhBoF,EAAK4tI,2BAA2BzzH,MAGpC5Y,EAAAA,KAAI,SAACosI,GAAoB,OAAAA,EAAgBr1I,WAQ7Cg1I,EAAAz2I,UAAAg3I,6BAAA,SAA6B9iD,GAA7B,IAAA/qF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIymI,GAAmC,CACrCt/H,OAAMA,EACNu8E,kBAAiBA,SAYzBuiD,EAAAz2I,UAAA+2I,2BAAA,SACEzzH,EACAC,EACAC,GAHF,IAAAra,EAAArJ,KAKEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,IAAW5Q,GACboC,EAAK2G,MAAMU,SACT,IAAI0mI,GAAuC,CACzCv/H,OAAMA,EACN2L,SAAQA,EACRC,YAAWA,EACXC,KAAIA,SAUdizH,EAAAz2I,UAAAm3I,4BAAA,WACEr3I,KAAKgQ,MAAMU,SAAS,IAAI4mI,KAM1BX,EAAAz2I,UAAAq3I,wBAAA,WACE,OAAOv3I,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOonI,MAMhCb,EAAAz2I,UAAAu3I,wBAAA,WACE,OAAOz3I,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOsnI,MAMhCf,EAAAz2I,UAAAy3I,8BAAA,WACE33I,KAAKgQ,MAAMU,SAAS,IAAIknI,KAM1BjB,EAAAz2I,UAAA23I,yBAAA,SACEzjD,EACAE,GAFF,IAAAjrF,EAAArJ,KAIEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIonI,GAAqC,CACvCjgI,OAAMA,EACNu8E,kBAAiBA,EACjBE,0BAAyBA,SASjCqiD,EAAAz2I,UAAA63I,8BAAA,WACE,OAAO/3I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBvB,OAOpCy9E,EAAAz2I,UAAA83I,8BAAA,WACE,OAAOh4I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBxB,OAOpCy9E,EAAAz2I,UAAA+3I,qCAAA,WACE,OAAOj4I,KAAKgQ,MAAMU,SAAS,IAAIwnI,iKAjKlCjwI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDArBGyM,EAAAA,aAGRqH,wBCWP,SAAAk/H,EACYnoI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAMZ+9H,EAAAj4I,UAAAk4I,cAAA,WAAA,IAAA/uI,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SAAS,IAAIo+D,GAA8Bj3D,QAQ1DsgI,EAAAj4I,UAAAm4I,eAAA,SAAevpG,GAAf,IAAAzlC,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI4nI,GAA2B,CAC7BzgI,OAAMA,EACNi3B,QAAOA,SAUfqpG,EAAAj4I,UAAAq4I,oBAAA,SAAoBvpG,GAApB,IAAA3lC,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI8nI,GAA8B,CAChC3gI,OAAMA,EACNm3B,UAASA,EACTF,QAAS,CAAE2pG,gBAAgB,UAWnCN,EAAAj4I,UAAAw4I,kBAAA,SAAkB1pG,EAAmBF,GAArC,IAAAzlC,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI8nI,GAA8B,CAChC3gI,OAAMA,EACNm3B,UAASA,EACTF,QAAOA,SAUfqpG,EAAAj4I,UAAAy4I,kBAAA,SAAkB3pG,GAAlB,IAAA3lC,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIkoI,GAA8B,CAChC/gI,OAAMA,EACNm3B,UAASA,SASjBmpG,EAAAj4I,UAAAonG,aAAA,WACE,OAAOtnG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOyoI,MAMhCV,EAAAj4I,UAAAqnG,oBAAA,WACE,OAAOvnG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO0oI,MAGhCX,EAAAj4I,UAAAsnG,0BAAA,WACE,OAAOxnG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO2oI,MAKhCZ,EAAAj4I,UAAA84I,sBAAA,WACEh5I,KAAKgQ,MAAMU,SAAS,IAAIuoI,KAM1Bd,EAAAj4I,UAAAg5I,qBAAA,WACE,OAAOl5I,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO+oI,MAOhChB,EAAAj4I,UAAAk5I,WAAA,SAAWxoH,GACT,OAAO5wB,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOipI,GAAsCzoH,MAQjDunH,EAAAj4I,UAAA+tF,YAAA,SAAYC,GACVluF,KAAKgQ,MAAMU,SAAS,IAAI4oI,GAAwBprD,KAMlDiqD,EAAAj4I,UAAAq5I,aAAA,WACEv5I,KAAKgQ,MAAMU,SAAS,IAAI8oI,KAM1BrB,EAAAj4I,UAAAmtG,WAAA,SAAWnf,GAAX,IAAA7kF,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqpI,IACP7uI,EAAAA,KAAI,SAAC9F,OAAEupF,EAAOvpF,EAAAupF,QAAE94C,EAAOzwC,EAAAywC,QAAEr3B,EAAOpZ,EAAAoZ,QAAEs2C,EAAM1vD,EAAA0vD,OACtC,OAAK05B,IAAmBhwE,IAAWs2C,EAGxBt2C,IAAYs2C,EAEd,IACGt2C,GAAWgwE,IAAmB34C,GAAW24C,GAE/C34C,GACFlsC,EAAKkwI,eAEPlwI,EAAK4kF,YAAYC,GACV,IAEFG,GAbLhlF,EAAKkwI,eACE,qKAlJhBtxI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXGyM,EAAAA,aAGRqH,wBCcP,SAAAygI,EACY1pI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAMZs/H,EAAAx5I,UAAAy5I,sBAAA,WAAA,IAAAtwI,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,GAAUA,IAAW5Q,GACvBoC,EAAK2G,MAAMU,SAAS,IAAIkpI,GAAkC/hI,QAKxD6hI,EAAAx5I,UAAA6nG,oBAAA,WACN,OAAO/nG,KAAKgQ,MAAMI,OAAOypI,KAM3BH,EAAAx5I,UAAA2lF,qBAAA,WAAA,IAAAx8E,EAAArJ,KACE,OAAOA,KAAK+nG,sBAAsBngG,KAChCmuB,EAAAA,UAAUC,EAAAA,gBACVxN,EAAAA,KAAI,SAACsxH,GACGA,EAAQ57H,SAAW47H,EAAQ/8H,SAAW+8H,EAAQ71I,OAClDoF,EAAKswI,2BAGT7sI,EAAAA,QACE,SAACgtI,GAAuC,OAAAA,EAAQ/8H,SAAW+8H,EAAQ71I,SAErE2G,EAAAA,KAAI,SAAC5I,GAAW,OAAAA,EAAOL,WAQ3B+3I,EAAAx5I,UAAA65I,uBAAA,SAAuBrrG,GACrB,OAAO1uC,KAAK6lF,uBAAuBj+E,KACjCgD,EAAAA,KAAI,SAAC+3E,GACH,IAAMjO,EAAaiO,EAAYh2E,MAAK,SAACqtI,GAAO,OAAAA,EAAGh2H,OAAS0qB,KACxD,OAAIgmC,GAAcA,EAAWulE,KACpBvlE,EAAWulE,KAAKtoD,UAEhB,oKArDhB1pF,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAdLyM,EAAAA,aAGAqH,wBCwBP,SAAAihI,EACYlqI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SASZ8/H,EAAAh6I,UAAAi6I,qBAAA,SACE32H,EACAC,EACAC,EACAuoB,EACAqmD,GALF,IAAAjpF,EAAArJ,KAOEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI0pI,GAAiC,CACnCviI,OAAMA,EACN2L,SAAUA,EACVC,YAAaA,EACbC,KAAMA,EACNuoB,YAAaA,EACbqmD,iBAAkBA,SAS1B4nD,EAAAh6I,UAAAw3F,oBAAA,WACE,OAAO13F,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOiqI,MAOhCH,EAAAh6I,UAAAo6I,2BAAA,SACE92H,GADF,IAAAna,EAAArJ,KAGE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOmqI,IACP/xH,EAAAA,KAAI,SAACgyH,GAEDA,EAAkBt8H,SAClBs8H,EAAkBz9H,SAClBy9H,EAAkBv2I,OAElBoF,EAAK8wI,qBAAqB32H,MAG9B5Y,EAAAA,KAAI,SAAC4vI,GAAsB,OAAAA,EAAkB74I,WAOjDu4I,EAAAh6I,UAAAu6I,0BAAA,WACE,OAAOz6I,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOsqI,MAQhCR,EAAAh6I,UAAAy6I,qBAAA,SACEt2I,EACAu2I,GAFF,IAAAvxI,EAAArJ,KAIEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAImqI,GAAkC,CACpChjI,OAAMA,EACNxT,KAAMA,EACNu2I,aAAcA,SAStBV,EAAAh6I,UAAA46I,+BAAA,WACE,OAAO96I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBzB,OAOpCkhF,EAAAh6I,UAAA66I,+BAAA,WACE,OAAO/6I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyB1B,OAUpCkhF,EAAAh6I,UAAA86I,mBAAA,SACE/uG,EACAqmD,GAFF,IAAAjpF,EAAArJ,KAIEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIuqI,GAA+B,CACjCpjI,OAAMA,EACNo0B,YAAaA,EACbqmD,iBAAkBA,SAS1B4nD,EAAAh6I,UAAAg7I,6BAAA,WACE,OAAOl7I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyB3B,OAOpCmhF,EAAAh6I,UAAAi7I,2BAAA,WACE,OAAOn7I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuB5B,OAOlCmhF,EAAAh6I,UAAAk7I,sBAAA,WACEp7I,KAAKgQ,MAAMU,SAAS,IAAI2qI,KAM1BnB,EAAAh6I,UAAAo7I,yBAAA,WACEt7I,KAAKgQ,MAAMU,SAAS,IAAI6qI,KAM1BrB,EAAAh6I,UAAAs7I,sBAAA,WACEx7I,KAAKgQ,MAAMU,SAAS,IAAI+qI,iKAvK3BxzI,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAxBGyM,EAAAA,aAGRqH,wBCcP,SAAAyiI,EACY1rI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAMZshI,EAAAx7I,UAAA6kG,eAAA,WACE,OAAO/kG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOurI,MAMhCD,EAAAx7I,UAAA8kG,sBAAA,WACE,OAAOhlG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOwrI,MAMhCF,EAAAx7I,UAAA27I,gBAAA,WAAA,IAAAxyI,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SAAS,IAAIorI,GAAwCjkI,QAOpE6jI,EAAAx7I,UAAA67I,iBAAA,WACE/7I,KAAKgQ,MAAMU,SAAS,IAAIsrI,KAM1BN,EAAAx7I,UAAAglG,sBAAA,WACE,OAAOllG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO6rI,MAOhCP,EAAAx7I,UAAAg8I,kBAAA,SAAkBnpD,GAAlB,IAAA1pF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIyrI,GAA0C,CAC5CtkI,OAAMA,EACNk7E,YAAaA,SASrB2oD,EAAAx7I,UAAAk8I,kCAAA,WACE,OAAOp8I,KAAKgQ,MAAMI,OAChBqqD,GAAyB3B,MAQ7B4iF,EAAAx7I,UAAAm8I,6BAAA,WACEr8I,KAAKgQ,MAAMU,SAAS,IAAI4rI,iKA3E3Br0I,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAdGyM,EAAAA,aAERqH,wBCuBP,SAAAsjI,EACYvsI,EACAoK,EACAI,GAFAxa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,EACApa,KAAAwa,eAAAA,SAMZ+hI,EAAAr8I,UAAAg+E,gBAAA,WACE,OAAOl+E,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOosI,MAQhCD,EAAAr8I,UAAAu8I,iBAAA,SAAiBhpD,GAAjB,IAAApqF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIgsI,GAA6B,CAC/B7kI,OAAMA,EACN47E,UAASA,SASjB8oD,EAAAr8I,UAAAy8I,kBAAA,WACE38I,KAAKgQ,MAAMU,SAAS,IAAIksI,KAM1BL,EAAAr8I,UAAA28I,oBAAA,SAAoBr5H,GAApB,IAAAna,EAAArJ,KACE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO0sI,IACPt0H,EAAAA,KAAI,SAACu0H,GAEDA,EAAe7+H,SACf6+H,EAAehgI,SACfggI,EAAe94I,OAEfoF,EAAK2zI,cAAcx5H,MAGvB5Y,EAAAA,KAAI,SAACmyI,GAAmB,OAAAA,EAAep7I,WAO3C46I,EAAAr8I,UAAA+8I,0BAAA,WACE,OAAOj9I,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO8sI,MAShCX,EAAAr8I,UAAA88I,cAAA,SAAcx5H,EAAkBC,EAAsBC,GAAtD,IAAAra,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAEjC,IAAIslI,EADFtlI,IAAW5Q,IAGboC,EAAKmR,eACFzM,iBACAnG,KAAK4K,EAAAA,KAAK,IACVC,WAAU,SAAC8B,WACV4oI,EACqB,QADCp4I,EACT,QADSD,EACpByP,MAAAA,OAAI,EAAJA,EAAMzG,aAAK,IAAAhJ,OAAA,EAAAA,EAAEsH,cAAM,IAAArH,OAAA,EAAAA,EAAEgwF,0BAExB5gF,cAEH9K,EAAK2G,MAAMU,SACT,IAAI0sI,GAA2B,CAC7BvlI,OAAMA,EACN2L,SAAQA,EACRC,YAAWA,EACXC,KAAIA,EACJqxE,uBAAsBooD,UAUhCZ,EAAAr8I,UAAAm9I,eAAA,WACEr9I,KAAKgQ,MAAMU,SAAS,IAAI4sI,KAM1Bf,EAAAr8I,UAAA0zF,uBAAA,WACE,OAAO5zF,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOmtI,MAQhChB,EAAAr8I,UAAAs9I,wBAAA,SAAwB/pD,EAAmBI,GAA3C,IAAAxqF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI+sI,GAAoC,CACtC5lI,OAAMA,EACN47E,UAASA,EACTI,gBAAeA,SASvB0oD,EAAAr8I,UAAAw9I,yBAAA,WACE19I,KAAKgQ,MAAMU,SAAS,IAAIitI,KAM1BpB,EAAAr8I,UAAAy3F,YAAA,SACElE,EACAM,GAFF,IAAA1qF,EAAArJ,KAIEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIktI,GAAwB,CAC1B/lI,OAAMA,EACN47E,UAASA,EACTM,mBAAkBA,SAS1BwoD,EAAAr8I,UAAA29I,sBAAA,WACE,OAAO79I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBxB,OAOpCsjF,EAAAr8I,UAAA49I,sBAAA,WACE,OAAO99I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBzB,OAOpCsjF,EAAAr8I,UAAA69I,6BAAA,WACE,OAAO/9I,KAAKgQ,MAAMU,SAAS,IAAIstI,gLAjLlC/1I,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAtBGyM,EAAAA,aAGRqH,UAaAlJ,wBCFP,SAAAkuI,EACYjuI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAMZ6jI,EAAA/9I,UAAAg+I,mBAAA,WAAA,IAAA70I,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SAAS,IAAIigE,GAAmC94D,QAO/DomI,EAAA/9I,UAAA8lG,kBAAA,WACE,OAAOhmG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAO+tI,MAMhCF,EAAA/9I,UAAA+lG,yBAAA,WACE,OAAOjmG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOguI,MAGhCH,EAAA/9I,UAAAgmG,+BAAA,WACE,OAAOlmG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOiuI,MAOXJ,EAAA/9I,UAAAo+I,0BAAA,SAA0BC,GAA1B,IAAAl1I,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAI8tI,GAAwC,CAC1C3mI,OAAMA,EACN0mI,gBAAeA,SAWvBN,EAAA/9I,UAAAu+I,oBAAA,SAAoBF,GAApB,IAAAl1I,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GACnCxO,EAAK2G,MAAMU,SACT,IAAIguI,GAAoC,CACtC7mI,OAAMA,EACN0mI,gBAAeA,SASvBN,EAAA/9I,UAAA+jG,uBAAA,WACE,OAAOjkG,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOuuI,MAMhCV,EAAA/9I,UAAA0+I,qBAAA,WACE5+I,KAAKgQ,MAAMU,SAAS,IAAImuI,iKA/E3B52I,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAXGyM,EAAAA,aAERqH,wBCwBP,SAAA6lI,EACY9uI,EACAoK,GADApa,KAAAgQ,MAAAA,EACAhQ,KAAAoa,cAAAA,SAQZ0kI,EAAA5+I,UAAA6+I,8BAAA,SAA8BhqD,GAA9B,IAAA1rF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,IAAW5Q,GACboC,EAAK2G,MAAMU,SACT,IAAIsuI,GAA0C,CAC5CnnI,OAAMA,EACNk9E,uBAAsBA,SAUhC+pD,EAAA5+I,UAAA++I,6BAAA,WACE,OAAOj/I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO8uI,MAOXJ,EAAA5+I,UAAA4mG,oCAAA,WACE,OAAO9mG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO+uI,MAOXL,EAAA5+I,UAAA6mG,oCAAA,WACE,OAAO/mG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOgvI,MAOXN,EAAA5+I,UAAA8mG,kCAAA,WACE,OAAOhnG,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOivI,MAOXP,EAAA5+I,UAAAo/I,+BAAA,WACEt/I,KAAKgQ,MAAMU,SAAS,IAAI6uI,KAQ1BT,EAAA5+I,UAAA+0F,yBAAA,SAAyBF,GAAzB,IAAA1rF,EAAArJ,KACEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,IAAW5Q,GACboC,EAAK2G,MAAMU,SACT,IAAI8uI,GAAqC,CACvC3nI,OAAMA,EACNk9E,uBAAsBA,SAUhC+pD,EAAA5+I,UAAAu/I,mCAAA,WACE,OAAOz/I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOqqD,GAAyBtB,OAOpC2lF,EAAA5+I,UAAAw/I,mCAAA,WACE,OAAO1/I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOsqD,GAAyBvB,OAOpC2lF,EAAA5+I,UAAAy/I,iCAAA,WACE,OAAO3/I,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOuqD,GAAuBxB,OAOlC2lF,EAAA5+I,UAAA0/I,0CAAA,WACE5/I,KAAKgQ,MAAMU,SAAS,IAAImvI,KAM1Bf,EAAA5+I,UAAA4/I,iCAAA,SACEt8H,GADF,IAAAna,EAAArJ,KAGE,OAAOA,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO2vI,IACPv3H,EAAAA,KAAI,SAACw3H,GAEDA,EAA4B9hI,SAC5B8hI,EAA4BjjI,SAC5BijI,EAA4B/7I,OAE5BoF,EAAK42I,2BAA2Bz8H,MAGpC5Y,EAAAA,KAAI,SAACo1I,GAAgC,OAAAA,EAA4Br+I,WAOrEm9I,EAAA5+I,UAAAggJ,wCAAA,WACE,OAAOlgJ,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAO+vI,MAOXrB,EAAA5+I,UAAAkgJ,sCAAA,WACE,OAAOpgJ,KAAKgQ,MAAMpI,KAAKwI,EAAAA,OAAOiwI,MAMhCvB,EAAA5+I,UAAAogJ,wCAAA,WACE,OAAOtgJ,KAAKgQ,MAAMpI,KAChBwI,EAAAA,OAAOmwI,MAUXzB,EAAA5+I,UAAA+/I,2BAAA,SACEz8H,EACAC,EACAC,GAHF,IAAAra,EAAArJ,KAKEA,KAAKoa,cAAcd,kBAAiB,SAACzB,GAC/BA,IAAW5Q,GACboC,EAAK2G,MAAMU,SACT,IAAI8vI,GAAwC,CAC1C3oI,OAAMA,EACN2L,SAAQA,EACRC,YAAWA,EACXC,KAAIA,SAUdo7H,EAAA5+I,UAAAugJ,4BAAA,WACEzgJ,KAAKgQ,MAAMU,SAAS,IAAIgwI,iKArM3Bz4I,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,qDAvBGyM,EAAAA,aAGRqH,MCDF,IAAM83C,GAAsC,CACjDlyC,SAAU,aAGIT,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA6yI,IAGQtiI,EAAO/Q,MACb,KAAKszI,GACH,IACM/hI,EADmBR,EAAOhR,QACEiS,QAChC,SAACuhI,EAA6C56G,SAC5C,OAAAzmC,OAAAqF,OAAArF,OAAAqF,OAAA,GACKg8I,KAAe/7I,EAAA,IACjBmhC,EAAKrV,SAAUqV,EAAInhC,MAEvBtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAKiiI,GACH,OAAO/vF,GAIX,OAAOjjD,ECjCF,IAAMijD,GAAyC,YAEtC3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAizI,IAGQ1iI,EAAO/Q,MACb,KAAK0zI,GAEH,MAAO,CACL58C,SAFoC/lF,EAAOhR,SAK/C,KAAK4zI,GACH,OAAOlwF,GAGX,OAAOjjD,ECfF,IAAMijD,GAA2C,CACtDmwF,QAAS,GACTh9H,MAAO,GACPD,WAAY,aAEE7F,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAqzI,IAGQ9iI,EAAO/Q,MACb,KAAK8zI,GACH,OAAO/iI,EAAOhR,QAGhB,KAAKg0I,GACH,IAAMC,EAAwBjjI,EAAOhR,QAAQklI,OACvCgP,EAAkB,IAAI5hJ,MAAsBmO,EAAMozI,QAAQvgJ,QAMhE,OALAmN,EAAMozI,QAAQ33I,SAAQ,SAACi4I,EAAgCr/G,GACrD,OAAAq/G,EAAeC,WAAaH,EAAsBG,SAC7CF,EAAgBp/G,GAASm/G,EACzBC,EAAgBp/G,GAASq/G,KAEhChiJ,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYiJ,GAAK,CAAEozI,QAASK,IAG9B,KAAKG,GACH,IAAMC,EAAoBtjI,EAAOhR,QAC3Bu0I,EAAkB,IAAIjiJ,MAAsBmO,EAAMozI,QAAQvgJ,QAShE,OARAmN,EAAMozI,QAAQ33I,SAAQ,SAACi4I,EAAgCr/G,GACrD,OAAAq/G,EAAeC,WAAaE,EACvBC,EAAgBz/G,GAAM3iC,OAAAqF,OAAArF,OAAAqF,OAAA,GAClB28I,GAAc,CACjBK,gBAAgB,IAEjBD,EAAgBz/G,GAASq/G,KAEhChiJ,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYiJ,GAAK,CAAEozI,QAASU,IAGhC,OAAO9zI,ECzCF,IAAMijD,GAAuC,CAClDlyC,SAAU,aAGIT,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAg0I,IAGQzjI,EAAO/Q,MACb,KAAKy0I,GACH,IACMljI,EADoBR,EAAOhR,QACEiS,QACjC,SAACuhI,EAAiDtrG,SAChD,OAAA/1C,OAAAqF,OAAArF,OAAAqF,OAAA,GACKg8I,KAAe/7I,EAAA,IACjBywC,EAAQ3kB,SAAU2kB,EAAOzwC,MAE7BtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAKiiI,GACH,OAAO/vF,GAIX,OAAOjjD,ECnCF,IAAMijD,GAAyC,YAEtC3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAk0I,IAGQ3jI,EAAO/Q,MACb,KAAK20I,GACH,OAAOlxF,GAGT,KAAKmxF,GACL,KAAKC,GACH,OAAO9jI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAI7C,OAAOjjD,ECjBF,IAAMijD,GAAsB,YAEnB3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAs0I,IAGQ/jI,EAAO/Q,MACb,KAAK+0I,GAEH,OADqBhkI,EAAOhR,QAIhC,OAAOS,ECZF,IAAMijD,GAAkC,CAC7CuxF,eAAgB,GAChBr+H,WAAY,GACZC,MAAO,aAGO9F,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAy0I,IAGQlkI,EAAO/Q,MACb,KAAKk1I,GACH,OAAOnkI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAI7C,OAAOjjD,EChBF,IAAMijD,GAAiC,YAE9B3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA20I,IAGQpkI,EAAO/Q,MACb,KAAKo1I,GACH,OAAOrkI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAG3C,KAAK4xF,GACH,OAAO5xF,GAGX,OAAOjjD,ECfF,IAAMijD,GAA4C,CACvDijB,QAAS,GACT/vD,WAAY,GACZC,MAAO,aAGO9F,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA80I,IAGQvkI,EAAO/Q,MACb,KAAKu1I,GACH,OAAOxkI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAE3C,KAAK+xF,GACH,OAAO/xF,GAGX,OAAOjjD,ECjBF,IAAMijD,GAA6B,CACxClyC,SAAU,GACV02B,QAAS,eAGKn3B,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAi1I,IAGQ1kI,EAAO/Q,MACb,KAAK01I,GACH,IAAMnkI,EAAqBR,EAAOhR,QAAQwR,SACpC02B,EAAkBl3B,EAAOhR,QAAQkoC,QACvC,OAAI12B,GAAY02B,EACd/1C,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,EACR02B,QAAOA,IAGJwb,GAIX,OAAOjjD,ECzBF,IAAMijD,GAAmC,YAEhC3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAm1I,IAGQ5kI,EAAO/Q,MACb,KAAK41I,GACL,KAAKC,GACH,OAAO9kI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAG3C,QACE,OAAOjjD,YCZGsQ,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAH0B,OAMlBuQ,EAAO/Q,MACb,KAAK81I,GACH,OAAO,EAGX,OAAOt1I,ECTF,IAAMijD,GAA4B,CACvClyC,SAAU,aAGIT,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAu1I,IAGQhlI,EAAO/Q,MACb,KAAKg2I,GACH,IACMzkI,EADSR,EAAOhR,QACEiS,QACtB,SAACikI,EAA0Ct9G,SACzC,OAAAzmC,OAAAqF,OAAArF,OAAAqF,OAAA,GACK0+I,KAAaz+I,EAAA,IACfmhC,EAAKjiB,MAAOiiB,EAAInhC,MAEpBtF,OAAAqF,OAAA,GAEIiJ,EAAM+Q,WAIb,OAAArf,OAAAqF,OAAArF,OAAAqF,OAAA,GACKiJ,GAAK,CACR+Q,SAAQA,IAIZ,KAAKiiI,GACH,OAAO/vF,GAIX,OAAOjjD,ECnCF,IAAMijD,GAA0B,YAEvB3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA01I,IAGQnlI,EAAO/Q,MACb,KAAKm2I,GACH,OAAO1yF,GAGT,KAAK2yF,GACH,OAAOrlI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAG7C,OAAOjjD,ECfF,IAAMijD,GAAkC,YAE/B3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAA61I,IAGQtlI,EAAO/Q,MACb,KAAKs2I,GACH,IAAMj8H,EAAWtJ,EAAOhR,QACxB,OAAOsa,GAAsBopC,GAG/B,KAAK8yF,GACH,IAAMC,EAAyBzlI,EAAO0rD,gBACtC,OAAOj8D,EAAMlD,KAAI,SAACm/D,GAChB,OAAAA,EAAgBx7D,KAAOu1I,EAAuBv1I,GAC1Cu1I,EACA/5E,KAKV,OAAOj8D,ECtBF,IAAMijD,GAA6B,YAE1B3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAi2I,IAGQ1lI,EAAO/Q,MACb,KAAK02I,GACH,OAAOjzF,GAGT,KAAKkzF,GACH,OAAO5lI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAG7C,OAAOjjD,ECfF,IAAMijD,GAA2B,YAExB3yC,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAo2I,IAGQ7lI,EAAO/Q,MACb,KAAK62I,GACH,OAAO9lI,EAAOhR,QAGhB,KAAK+2I,GACH,IAAMC,EAAc7kJ,OAAAqF,OAAArF,OAAAqF,OAAA,GACfiJ,GACAuQ,EAAOotD,aAEZ,OAAAjsE,OAAAqF,OAAArF,OAAAqF,OAAA,GACKw/I,GAAc,CACjBp+G,KAASo+G,EAAe7uG,UAAS,IAAI6uG,EAAe5uG,WAK1D,OAAO3nC,ECvBF,IAAMijD,GAAiC,CAC5Cs3C,OAAQ,GACRpkF,WAAY,GACZC,MAAO,aAGO9F,GACdtQ,EACAuQ,GAEA,YAHA,IAAAvQ,IAAAA,EAAAw2I,IAGQjmI,EAAO/Q,MACb,KAAKi3I,GACH,OAAOlmI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAE3C,KAAKyzF,GACH,OAAOzzF,GAIX,OAAOjjD,ECjBF,IAAMijD,GAAuC,CAClD03C,oBAAqB,GACrBxkF,WAAY,GACZC,MAAO,aAGO9F,GACdtQ,EACAuQ,GAIA,YALA,IAAAvQ,IAAAA,EAAA22I,IAKQpmI,EAAO/Q,MACb,KAAKo3I,GACH,OAAOrmI,EAAOhR,QAAUgR,EAAOhR,QAAU0jD,GAG3C,KAAKoyF,GACH,IAAMwB,EAA8BtmI,EAAOhR,QACrCu3I,EAAuB1gJ,EAAO4J,EAAM26F,qBAEpCtmE,EAAQyiH,EAAwB1/G,WACpC,SAAC0hE,GACC,OAAAA,EAAmB7R,yBACnB4vD,EAA4B5vD,0BAGhC,OAAe,IAAX5yD,EACK4uB,IAEP6zF,EAAwBziH,GAAM3iC,OAAAqF,OAAA,GACzB8/I,GAIPnlJ,OAAAqF,OAAArF,OAAAqF,OAAA,GAAYiJ,GAAK,CAAE26F,oBAAqBm8C,KAG5C,OAAO92I,WCqBO8vB,KACd,MAAO,CACLsqE,QAAS+L,EAAAA,gBAAgB,CACvBpkF,QAASg1H,KAEXlzD,UAAWxzE,GACTo7C,GACAurF,IAEFlhD,iBAAkBmhD,GAClBp9H,SAAUxJ,GACRi7C,GACA4rF,IAEFvwD,SAAUt2E,GACRk7C,GACA4rF,IAEF58C,OAAQlqF,GACNm7C,GACA4rF,IAEF9/C,MAAOjnF,GACLu7C,GACAyrF,IAEF18C,oBAAqBtqF,GACnBy7C,GACAwrF,IAEF9/C,YAAannF,GAA6Bs7C,IAC1CisC,gBAAiBvnF,GACfq7C,GACA6rF,IAEFr3D,UAAWs3D,GACXnvD,OAAQovD,GACRl3D,QAASlwE,GAA4B27C,GAAS0rF,IAC9C9vD,cAAe+vD,GACfruD,oBAAqBsuD,GACrBruD,gBAAiBl5E,GACf47C,GACA4rF,IAEF7gD,wBAAyB3mF,GACvBg8C,GACAyrF,IAEFnuD,iBAAkBt5E,GAChBi8C,GACAyrF,IAEFljE,YAAaxkE,GACXw7C,GACAmsF,IAEFl/C,mBAAoBzoF,GAClB07C,GACAksF,SAKOloH,GAER,IAAI34B,EAAAA,eAA4C,gBAExC44B,GAA4B,CACvC/3B,QAAS83B,GACTx3B,WAAYu3B,aAGEooH,GACd5nI,GAEA,OAAO,SAAUtQ,EAAOuQ,GAKtB,OAJIA,EAAO/Q,OAAS+iD,KAClBviD,OAAQvG,GAGH6W,EAAQtQ,EAAOuQ,QAIbg2F,GAAmC,CAAC2xC,OCtH/C,SACUhpH,EACAyzE,GAFV,IAAApnG,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EApBVzwG,KAAAimJ,sBAEIjmJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+oH,IACPz8H,EAAAA,WAAU,WACR,OAAOpgB,EAAKonG,cAAcrD,aAAavzF,EAAAA,YAAYssI,SAASv+I,KAC1DgD,EAAAA,KACE,SAACojF,GAAc,OAAA,IAAIo4D,GAAwCp4D,MAE7D/2D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIq+I,GAAqCjqH,GAAmBn4B,mCAdvEgE,EAAAA,uDARQu1B,EAAAA,eAIAyvE,MAOP7sG,EAAA,CADCq9B,EAAAA,8DCUD,SAAoBT,GAAAh9B,KAAAg9B,SAAAA,EAVpBh9B,KAAAsmJ,gBAAsCtmJ,KAAKg9B,SAASp1B,KAClDu1B,EAAAA,OACEizB,GACAqe,IAEF7jE,EAAAA,KAAI,WACF,OAAO,IAAI27I,6BAThBt+I,EAAAA,uDAPQu1B,EAAAA,WAUPp9B,EAAA,CADCq9B,EAAAA,wDC8BD,SACUT,EACAwpH,GAFV,IAAAn9I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAwmJ,mBAAAA,EA9BVxmJ,KAAAymJ,yBAEIzmJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOupH,IACP97I,EAAAA,KAAI,SAACyT,GAAgD,OAAAA,EAAOhR,WAC5Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKm9I,mBACT5yD,uBACCvmF,EAAQomF,UACRpmF,EAAQwmF,gBACRxmF,EAAQwK,QAETjQ,KACCgD,EAAAA,KACE,SAACw5F,GACC,OAAA,IAAIuiD,GAA2CviD,MAEnDntE,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4+I,GACFxqH,GAAmBn4B,mCAvBlCgE,EAAAA,uDARQu1B,EAAAA,eAKAo3G,MAMPx0I,EAAA,CADCq9B,EAAAA,iECuHD,SACUT,EACA6pH,GAFV,IAAAx9I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA6mJ,wBAAAA,EAxHV7mJ,KAAA8mJ,qBAEI9mJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO4pH,IACPn8I,EAAAA,KACE,SAACyT,GAA0D,OAAAA,EAAOhR,WAEpEgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKw9I,wBACT11D,mBACC9jF,EAAQwK,OACRxK,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,MAET9b,KACCgD,EAAAA,KAAI,SAACs2I,GACH,OAAO,IAAI8F,GACT9F,MAGJjqH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIi/I,GACF7qH,GAAmBn4B,aASjCjE,KAAAknJ,yBAEIlnJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOgqH,IACPv8I,EAAAA,KACE,SAACyT,GACC,OAAAA,EAAOhR,WAEXgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKw9I,wBACTt1D,mBAAmBlkF,EAAQwK,OAAQxK,EAAQikF,YAC3C1pF,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAI6yI,GACT7yI,MAGJ0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIq/I,GACFjrH,GAAmBn4B,aASjCjE,KAAAsnJ,2BAEItnJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOoqH,IACP38I,EAAAA,KACE,SAACyT,GACC,OAAAA,EAAOhR,WAEXgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKw9I,wBACTx1D,oBAAoBhkF,EAAQwK,OAAQxK,EAAQikF,YAC5C1pF,KACCgD,EAAAA,KAAI,WACF,OAAO,IAAI48I,GACTn6I,EAAQikF,eAGZr6D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIy/I,GACFrrH,GAAmBn4B,aASjCjE,KAAA0nJ,qBAEI1nJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwqH,IACP/8I,EAAAA,KACE,SAACyT,GAA0D,OAAAA,EAAOhR,WAEpEgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKw9I,wBACTr1D,oBAAoBnkF,EAAQwK,OAAQxK,EAAQikF,YAC5C1pF,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAIqzI,GACTrzI,MAGJ0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI6/I,GACFzrH,GAAmBn4B,mCAjHlCgE,EAAAA,uDARQu1B,EAAAA,eAIAk3G,MAOPt0I,EAAA,CADCq9B,EAAAA,sDAkCDr9B,EAAA,CADCq9B,EAAAA,0DA8BDr9B,EAAA,CADCq9B,EAAAA,4DA8BDr9B,EAAA,CADCq9B,EAAAA,6DCxED,SACUT,EACAyzE,GAFV,IAAApnG,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EApBVzwG,KAAA8nJ,uBAEI9nJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO4qH,IACPt+H,EAAAA,WAAU,WACR,OAAOpgB,EAAKonG,cAAcrD,aAAavzF,EAAAA,YAAYmuI,UAAUpgJ,KAC3DgD,EAAAA,KACE,SAACojF,GAAc,OAAA,IAAIi6D,GAAyCj6D,MAE9D/2D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIkgJ,GAAsC9rH,GAAmBn4B,mCAdxEgE,EAAAA,uDARQu1B,EAAAA,eAIAyvE,MAOP7sG,EAAA,CADCq9B,EAAAA,+DCiCD,SACUT,EACAmrH,GAFV,IAAA9+I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmoJ,qBAAAA,EAjCVnoJ,KAAAooJ,4BAIIpoJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOkrH,IACPz9I,EAAAA,KAAI,SAACyT,GACH,OAAOA,EAAOhR,WAEhB8kE,EAAAA,WAAU,SAACsjB,GACT,OAAOpsF,EAAK8+I,qBACT3yD,2BAA2BC,GAC3B7tF,KACC6hB,EAAAA,WAAU,WAAM,MAAA,CACd,IAAI6+H,GACJ,IAAItmH,GAAgC,CAClCF,KAAM,CAAEvhC,IAAK,4CACb+M,KAAMkzB,EAAAA,kBAAkBm7E,4BAG5B1kF,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIugJ,GACFnsH,GAAmBn4B,mCA1BlCgE,EAAAA,uDATQu1B,EAAAA,eAMAy3G,MAMP70I,EAAA,CADCq9B,EAAAA,oEC8CD,SACUT,EACAwrH,GAFV,IAAAn/I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAwoJ,UAAAA,EAjDVxoJ,KAAAyoJ,iBAEIzoJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOurH,IACP99I,EAAAA,KAAI,SAACyT,GAAoD,OAAAA,EAAOhR,WAChEoc,EAAAA,WAAU,SAACpc,GACT,OAAAhE,EAAKm/I,UAAUz7G,QAAQ1/B,GAASzF,KAC9BgD,EAAAA,KACE,SAACmoF,GACC,OAAA,IAAI41D,GAA+C51D,MAEvD97D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI4gJ,GACFxsH,GAAmBn4B,aAS/BjE,KAAA6oJ,mBAEI7oJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO2rH,IACPl+I,EAAAA,KAAI,SAACyT,GAAsD,OAAAA,EAAOhR,WAClEgnC,EAAAA,UAAS,SAAChnC,GACR,OAAAhE,EAAKm/I,UAAUn8G,OAAOh/B,EAAQwK,OAAQxK,EAAQ0lF,aAAanrF,KACzDgD,EAAAA,KACE,WACE,OAAA,IAAIm+I,GACF17I,EAAQ0lF,gBAGd97D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIghJ,GACF5sH,GAAmBn4B,mCA1ChCgE,EAAAA,uDAPQu1B,EAAAA,eAIAs1D,MAMP1yF,EAAA,CADCq9B,EAAAA,kDAwBDr9B,EAAA,CADCq9B,EAAAA,2DCyBD,SACUT,EACAisH,EACA1mH,GAHV,IAAAl5B,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAipJ,eAAAA,EACAjpJ,KAAAuiC,qBAAAA,EA7CVviC,KAAAkpJ,kBAEIlpJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOgsH,IACPv+I,EAAAA,KAAI,SAACyT,GAAyC,OAAAA,EAAOhR,WACrDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eAAe59I,IAAIgC,EAAQwK,OAAQxK,EAAQomF,WAAW7rF,KAChEgD,EAAAA,KAAI,SAACw6F,GACH,OAAO,IAAIgkD,GAAoChkD,MAEjDnuE,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIqhJ,GAAiCjtH,GAAmBn4B,aAOnEjE,KAAAspJ,aAA2DtpJ,KAAKg9B,SAASp1B,KACvEu1B,EAAAA,OAAOosH,IACP3+I,EAAAA,KAAI,SAACyT,GAAoC,OAAAA,EAAOhR,WAChDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eACTn1D,OAAOzmF,EAAQwK,OAAQxK,EAAQomF,UAAWpmF,EAAQ0mF,oBAClDnsF,KACCgD,EAAAA,KAAI,WAAM,OAAA,IAAI4+I,MACdvyH,EAAAA,YAAW,SAAChzB,SAQV,OAPW,QAAXa,EAAAb,EAAMA,aAAK,IAAAa,GAAAA,EAAE2yB,OAAOluB,SAAQ,SAACo7G,GAC3B,OAAAt7G,EAAKk5B,qBAAqBvvB,IACxB2xG,EAAIroF,QACJkE,EAAAA,kBAAkB0C,mBAIfl7B,EAAAA,GACL,IAAIyhJ,GAA4BrtH,GAAmBn4B,mCAtChEgE,EAAAA,uDAZQu1B,EAAAA,eAKAo3G,UAGPhzG,MAOAxhC,EAAA,CADCq9B,EAAAA,mDAmBDr9B,EAAA,CADCq9B,EAAAA,qDCsFD,SACUT,EACAisH,GAFV,IAAA5/I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAipJ,eAAAA,EA7GVjpJ,KAAA0pJ,qBAEI1pJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwsH,IACP/+I,EAAAA,KAAI,SAACyT,GAAiD,OAAAA,EAAOhR,WAC7Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eACThmJ,OAAOoK,EAAQwK,OAAQxK,EAAQ4mF,oBAC/BrsF,KACCgD,EAAAA,KACE,SAACg/I,GACC,OAAA,IAAIC,GAA4CD,MAEpD3yH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI8hJ,GACF1tH,GAAmBn4B,aASjCjE,KAAA+pJ,mBAEI/pJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO6sH,IACPp/I,EAAAA,KAAI,SAACyT,GAA+C,OAAAA,EAAOhR,WAC3Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eACTnU,uBAAuBznI,EAAQwK,OAAQxK,EAAQ+mF,mBAC/CxsF,KACCgD,EAAAA,KACE,SAACg/I,GACC,OAAA,IAAIK,GAA0CL,MAElD3yH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIkiJ,GACF9tH,GAAmBn4B,aASjCjE,KAAAmqJ,qBAEInqJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOitH,IACPx/I,EAAAA,KAAI,SAACyT,GAAiD,OAAAA,EAAOhR,WAC7Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eACT50D,oBACChnF,EAAQwK,OACRxK,EAAQ+mF,kBACR/mF,EAAQinF,2BAET1sF,KACCgD,EAAAA,KAAI,WAAM,OAAA,IAAIy/I,MACdpzH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIsiJ,GACFluH,GAAmBn4B,aASjCjE,KAAAuqJ,uBAEIvqJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOqtH,IACP5/I,EAAAA,KAAI,SAACyT,GAAmD,OAAAA,EAAOhR,WAC/Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAK4/I,eACTlU,qBACC1nI,EAAQwK,OACRxK,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,MAET9b,KACCgD,EAAAA,KACE,SAAC6/I,GACC,OAAA,IAAIC,GACFD,MAGNxzH,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI2iJ,GACFvuH,GAAmBn4B,mCAtGlCgE,EAAAA,uDARQu1B,EAAAA,eAKAo3G,MAMPx0I,EAAA,CADCq9B,EAAAA,sDA0BDr9B,EAAA,CADCq9B,EAAAA,oDA0BDr9B,EAAA,CADCq9B,EAAAA,sDA2BDr9B,EAAA,CADCq9B,EAAAA,+DCVD,SACUT,EACA4tH,GAFV,IAAAvhJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA4qJ,2BAAAA,EAlEV5qJ,KAAA6qJ,wBAA8C7qJ,KAAKg9B,SAASp1B,KAC1Du1B,EAAAA,OAAO2tH,IACPlgJ,EAAAA,KAAI,SAACyT,GAA+C,OAAAA,EAAOhR,WAC3DgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKuhJ,2BAA2Bn5H,OAAOpkB,GAASzF,KACrDgD,EAAAA,KAAI,SAAC6pF,GACH,OAAO,IAAIs2D,GAA0Ct2D,MAEvDx9D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIgjJ,GACF5uH,GAAmBn4B,aAS/BjE,KAAAirJ,6BAAmDjrJ,KAAKg9B,SAASp1B,KAC/Du1B,EAAAA,OAAO+tH,IACPtgJ,EAAAA,KAAI,SAACyT,GAAoD,OAAAA,EAAOhR,WAChEgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKuhJ,2BACTh2D,WAAWvnF,EAAQwK,OAAQxK,EAAQkxI,iBACnC32I,KACC6hB,EAAAA,WAAU,SAAClV,GAAS,MAAA,CAClB,IAAI42I,GAA+C52I,GACnD,IAAIo8D,GAAmCtjE,EAAQwK,YAEjDof,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIojJ,GACFhvH,GAAmBn4B,aAQjCjE,KAAAqrJ,yBAA+CrrJ,KAAKg9B,SAASp1B,KAC3Du1B,EAAAA,OAAOmuH,IACP1gJ,EAAAA,KAAI,SAACyT,GAAgD,OAAAA,EAAOhR,WAC5DgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKuhJ,2BACT92H,OAAOzmB,EAAQwK,OAAQxK,EAAQkxI,iBAC/B32I,KACC6hB,EAAAA,WAAU,SAAClV,GAAS,MAAA,CAClB,IAAIg3I,GAA2Ch3I,GAC/C,IAAIo8D,GAAmCtjE,EAAQwK,YAEjDof,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIwjJ,GACFpvH,GAAmBn4B,mCA3DlCgE,EAAAA,uDATQu1B,EAAAA,eAMAw3G,MAMP50I,EAAA,CADCq9B,EAAAA,yDAqBDr9B,EAAA,CADCq9B,EAAAA,8DAuBDr9B,EAAA,CADCq9B,EAAAA,iECzCD,SACUT,EACAyuH,GAFV,IAAApiJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAyrJ,uBAAAA,EAIVzrJ,KAAA0rJ,oBAEI1rJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwuH,IACP/gJ,EAAAA,KAAI,SAACyT,GAA6C,OAAAA,EAAOhR,WACzDoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKoiJ,uBACTp5D,aACChlF,EAAQwK,OACRxK,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,KACRrW,EAAQ4+B,YACR5+B,EAAQilF,kBAET1qF,KACCgD,EAAAA,KAAI,SAACghJ,GACH,OAAO,IAAIC,GAAwCD,MAErD30H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAI8jJ,GACF1vH,GAAmBn4B,aASjCjE,KAAA+rJ,uBAA6C/rJ,KAAKg9B,SAASp1B,KACzDu1B,EAAAA,OAAO6uH,IACPphJ,EAAAA,KAAI,SAACyT,GAA8C,OAAAA,EAAOhR,WAC1Doc,EAAAA,WAAU,SAACpc,GACT,OAAAhE,EAAKoiJ,uBACFl5D,eAAellF,EAAQwK,OAAQxK,EAAQhJ,MACvCuD,KACC6hB,EAAAA,WAAU,SAAClV,GAAS,MAAA,CAClB,IAAI6lI,GACF/sI,EAAQutI,aACJ,CACE/iI,OAAQxK,EAAQwK,OAChBo0B,YAAa5+B,EAAQhJ,KAAKqmC,QAAQ1mB,KAClCsuE,iBACEjlF,EAAQhJ,KAAKmuF,qBAAqB,GAAGC,cAEzC,CAAE56E,OAAQxK,EAAQwK,SAExB,IAAIo0I,GAAyC13I,OAE/C0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIkkJ,GACF9vH,GAAmBn4B,aASjCjE,KAAAmsJ,oBAA0CnsJ,KAAKg9B,SAASp1B,KACtDu1B,EAAAA,OAAOivH,IACPxhJ,EAAAA,KAAI,SAACyT,GAA2C,OAAAA,EAAOhR,WACvDoc,EAAAA,WAAU,SAACpc,GACT,OAAAhE,EAAKoiJ,uBACF94D,YACCtlF,EAAQwK,OACRxK,EAAQ4+B,YACR5+B,EAAQilF,kBAET1qF,KACC6hB,EAAAA,WAAU,SAAC3F,GAAa,MAAA,CACtB,IAAIs2H,GAAiC,CACnCviI,OAAQxK,EAAQwK,OAChBo0B,YAAa5+B,EAAQ4+B,YACrBqmD,iBAAkBjlF,EAAQilF,mBAE5B,IAAI+5D,GAAsCvoI,OAE5CmT,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIskJ,GAAmClwH,GAAmBn4B,mCA5FvEgE,EAAAA,uDATgBu1B,EAAAA,eAMRm3G,MAWPv0I,EAAA,CADCq9B,EAAAA,qDAgCDr9B,EAAA,CADCq9B,EAAAA,wDAiCDr9B,EAAA,CADCq9B,EAAAA,4DCtCD,SACUT,EACAyzE,GAFV,IAAApnG,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAywG,cAAAA,EA/BVzwG,KAAAusJ,aAAsDvsJ,KAAKg9B,SAASp1B,KAClEu1B,EAAAA,OAAOqvH,IACP5hJ,EAAAA,KAAI,SAACyT,GACH,OAAOA,EAAOhR,WAEhBoc,EAAAA,WAAU,SAACgjI,GACT,OAAOpjJ,EAAKonG,cAAcpD,WAAWo/C,GAAa7kJ,KAChDgD,EAAAA,KACE,SAACyjF,GACC,OAAA,IAAIq+D,GAA+B,CACjC7tI,SAAUwvE,EACV94C,QAASk3G,OAGfx1H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI2kJ,GAA4BvwH,GAAmBn4B,aAO9DjE,KAAA4sJ,cAAoC5sJ,KAAKg9B,SAASp1B,KAChDu1B,EAAAA,OAAO2jH,GAAmC+L,IAC1CjiJ,EAAAA,KAAI,WACF,OAAO,IAAI+a,GAA6Bm0C,8BA5B7C7xD,EAAAA,uDAVQu1B,EAAAA,eAIAyvE,MASP7sG,EAAA,CADCq9B,EAAAA,8CAuBDr9B,EAAA,CADCq9B,EAAAA,sDC2CD,SACUT,EACA8vH,EACAvqH,GAHV,IAAAl5B,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA8sJ,4BAAAA,EACA9sJ,KAAAuiC,qBAAAA,EAjEVviC,KAAA+sJ,+BAEI/sJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO6vH,IACPpiJ,EAAAA,KAAI,SAACyT,GAAsD,OAAAA,EAAOhR,WAClEoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKyjJ,4BACTlwI,KAAKvP,EAAQwK,OAAQxK,EAAQ0nF,wBAC7BntF,KACCgD,EAAAA,KAAI,SAACg8F,GACH,OAAO,IAAIqmD,GACTrmD,MAGJ3vE,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIklJ,GACF9wH,GAAmBn4B,aASjCjE,KAAAmtJ,0BAEIntJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOiwH,IACPxiJ,EAAAA,KAAI,SAACyT,GAAiD,OAAAA,EAAOhR,WAC7Doc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKyjJ,4BACT73D,yBACC5nF,EAAQwK,OACRxK,EAAQ0nF,wBAETntF,KACCgD,EAAAA,KACE,SAACg8F,GACC,OAAA,IAAIymD,GACFzmD,MAGN3vE,EAAAA,YAAW,SAAChzB,SAQV,OAPY,QAAZa,EAAAb,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAa,GAAAA,EAAE2yB,OAAOluB,SAAQ,SAACo7G,GAC5B,OAAAt7G,EAAKk5B,qBAAqBvvB,IACxB2xG,EAAIroF,QACJkE,EAAAA,kBAAkB0C,mBAIfl7B,EAAAA,GACL,IAAIslJ,GACFlxH,GAAmBn4B,mCAzDlCgE,EAAAA,uDAZQu1B,EAAAA,eASA44D,UALPx0D,MAWAxhC,EAAA,CADCq9B,EAAAA,gEA2BDr9B,EAAA,CADCq9B,EAAAA,kECUD,SACUT,EACAmrH,GAFV,IAAA9+I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmoJ,qBAAAA,EAxCVnoJ,KAAAutJ,eAIIvtJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOqwH,IACP5iJ,EAAAA,KAAI,SAACyT,GAAsC,OAAAA,EAAOhR,WAClDoc,EAAAA,WAAU,SAAC1kB,OAAEiP,EAAKjP,EAAAiP,MAAE8D,EAAQ/S,EAAA+S,SAC1B,OAAOzO,EAAK8+I,qBAAqBzyD,cAAc1hF,EAAO8D,GAAUlQ,KAC9D6hB,EAAAA,WAAU,WAAM,MAAA,CACd,IAAIgkI,GACJ,IAAIzrH,GAAgC,CAClCF,KAAM,CAAEvhC,IAAK,0CACb+M,KAAMkzB,EAAAA,kBAAkBm7E,4BAG5B1kF,EAAAA,YAAW,SAAChzB,SACJooG,EAEF,CAAC,IAAIqhD,GAA8BtxH,GAAmBn4B,KAa1D,OAZgB,QAAhBa,EAAIb,MAAAA,OAAK,EAALA,EAAOA,aAAK,IAAAa,OAAA,EAAAA,EAAE2yB,SAChBxzB,EAAMA,MAAMwzB,OAAOluB,SAAQ,SAACo7G,GACtBA,EAAIroF,SACN+vE,EAAQ3oG,KACN,IAAIs+B,GAAgC,CAClCF,KAAM,CAAEG,IAAK0iF,EAAIroF,SACjBhvB,KAAMkzB,EAAAA,kBAAkB0C,qBAM3B2E,EAAAA,KAAKwkE,iCAnCrBpkG,EAAAA,uDATQu1B,EAAAA,eAMAy3G,MAMP70I,EAAA,CADCq9B,EAAAA,uDCaD,SACUT,EACAmrH,GAFV,IAAA9+I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmoJ,qBAAAA,EAhBVnoJ,KAAA2tJ,YAAoD3tJ,KAAKg9B,SAASp1B,KAChEu1B,EAAAA,OAAOywH,IACPnkI,EAAAA,WAAU,WACR,OAAOpgB,EAAK8+I,qBAAqBjyC,YAAYtuG,KAC3CgD,EAAAA,KAAI,SAACurF,GACH,OAAO,IAAI03D,GAA8B13D,MAE3Cl/D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI8lJ,GAA2B1xH,GAAmBn4B,mCAX9DgE,EAAAA,uDAPQu1B,EAAAA,eAIAy3G,MAMP70I,EAAA,CADCq9B,EAAAA,oDCAD,SACUT,EACAmrH,GAFV,IAAA9+I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmoJ,qBAAAA,EAIVnoJ,KAAA+tJ,aAEI/tJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO6wH,IACPpjJ,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAhE,EAAK8+I,qBACFvyD,YAAYvoF,EAAQ4iB,IAAK5iB,EAAQyK,SAAUzK,EAAQm5D,QACnD5+D,KACCgD,EAAAA,KAAI,WAAM,OAAA,IAAIqjJ,GAAqC5gJ,EAAQm5D,WAC3DvvC,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIkmJ,GAAmC9xH,GAAmBn4B,mCApBvEgE,EAAAA,uDAPQu1B,EAAAA,eAIAy3G,MAWP70I,EAAA,CADCq9B,EAAAA,qDCLD,SACUT,EACAmrH,GAFV,IAAA9+I,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmoJ,qBAAAA,EAIVnoJ,KAAAmuJ,gBAEInuJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOixH,IACPxjJ,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAhE,EAAK8+I,qBACFpyD,eACC1oF,EAAQwK,OACRxK,EAAQ2oF,YACR3oF,EAAQsoF,aAET/tF,KACCgD,EAAAA,KAAI,WAAM,OAAA,IAAIyjJ,MACdp3H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIsmJ,GAA+BlyH,GAAmBn4B,mCAvBpEgE,EAAAA,uDAPQu1B,EAAAA,eAIAy3G,MAWP70I,EAAA,CADCq9B,EAAAA,mEC4HD,SAAA8wH,EACUvxH,EACA85B,EACA03F,EACAjrC,GAJV,IAAAl6G,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA82D,qBAAAA,EACA92D,KAAAwuJ,mBAAAA,EACAxuJ,KAAAujH,eAAAA,EA9HVvjH,KAAAyuJ,mBAEIzuJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOuxH,IACP9jJ,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKytD,qBAAqBrlC,OAAOpkB,GAASzF,KAC/CgD,EAAAA,KAAI,SAAC+mF,GACH,OAAO,IAAIg9D,GAAqCh9D,MAElD16D,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI4mJ,GAAkCxyH,GAAmBn4B,aAOpEjE,KAAA6uJ,gBAEI7uJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO2xH,IACPlkJ,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKytD,qBACT9jD,IAAI3F,EAAQwK,OAAQxK,EAAQyhC,SAC5BlnC,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAIw6I,GAAkCx6I,MAE/C0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIgnJ,GAA+B5yH,GAAmBn4B,aAOnEjE,KAAAivJ,mBAEIjvJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+xH,IACPtkJ,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKytD,qBACTzqB,OAAOh/B,EAAQwK,OAAQxK,EAAQ2hC,UAAW3hC,EAAQyhC,SAClDlnC,KACCgD,EAAAA,KAAI,SAAC2J,GAEH,OACElH,EAAQyhC,SACgC,IAAxCtvC,OAAO6f,KAAKhS,EAAQyhC,SAASnuC,QAC7B0M,EAAQyhC,QAAQ2pG,eAET,IAAI3pE,GAA8BzhE,EAAQwK,QAE1C,IAAIs3I,GAAqC56I,MAGpD0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIonJ,GAAkChzH,GAAmBn4B,aAOtEjE,KAAAqvJ,mBAEIrvJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOmyH,IACP1kJ,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtDgnC,EAAAA,UAAS,SAAChnC,GACR,OAAOhE,EAAKytD,qBACThjC,OAAOzmB,EAAQwK,OAAQxK,EAAQ2hC,WAC/BpnC,KACCgD,EAAAA,KAAI,SAAC2J,GACH,OAAO,IAAIg7I,GAAqCh7I,MAElD0iB,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIwnJ,GAAkCpzH,GAAmBn4B,aAUtEjE,KAAAyvJ,+BAAiCzvJ,KAAKg9B,SAASp1B,KAC7Cu1B,EAAAA,OAAOuyH,IACPlnI,EAAAA,KAAI,WACFnf,EAAK+uI,gBACL/uI,EAAKq6G,kBAAkB,yCAQ3B1jH,KAAA2vJ,kCAAoC3vJ,KAAKg9B,SAASp1B,KAChDu1B,EAAAA,OAAOyyH,IACPpnI,EAAAA,KAAI,WACFnf,EAAK+uI,gBACL/uI,EAAKq6G,kBAAkB,4CAQ3B1jH,KAAA6vJ,kCAAoC7vJ,KAAKg9B,SAASp1B,KAChDu1B,EAAAA,OAAO2yH,IACPtnI,EAAAA,KAAI,WACFnf,EAAK+uI,gBACL/uI,EAAKq6G,kBAAkB,mDAcnB6qC,EAAAruJ,UAAAwjH,kBAAA,SAAkB5hF,GACxB9hC,KAAKujH,eAAevwG,IAClB,CAAEzS,IAAKuhC,GACPtB,EAAAA,kBAAkBm7E,wBAId4yC,EAAAruJ,UAAAk4I,cAAA,WACNp4I,KAAKwuJ,mBAAmBpW,2CA/I3BnwI,EAAAA,uDAbQu1B,EAAAA,eASAm5B,UACAwhF,UANPv2G,MAYAxhC,EAAA,CADCq9B,EAAAA,oDAmBDr9B,EAAA,CADCq9B,EAAAA,iDAqBDr9B,EAAA,CADCq9B,EAAAA,oDA8BDr9B,EAAA,CADCq9B,EAAAA,oDAwBDr9B,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,2DAapBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,8DAapBtQ,EAAA,CADCq9B,EAAAA,OAAO,CAAE/sB,UAAU,qECvCpB,SACUssB,EACA+yH,GAFV,IAAA1mJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA+vJ,qBAAAA,EA/EV/vJ,KAAAgwJ,eAEIhwJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOizB,IACPxlD,EAAAA,KAAI,WAAM,OAAA,IAAI4+F,OAIhBxpG,KAAAiwJ,aAA2DjwJ,KAAKg9B,SAASp1B,KACvEu1B,EAAAA,OAAO+yH,IACPtlJ,EAAAA,KAAI,SAACyT,GAAyC,OAAAA,EAAOhR,WACrD8kE,EAAAA,WAAU,SAACt6D,GACT,OAAAxO,EAAK0mJ,qBAAqBl+D,aAAah6E,GAAQjQ,KAC7CgD,EAAAA,KAAI,SAAC+c,GAAa,OAAA,IAAIwoI,GAAoCxoI,MAC1DsP,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIooJ,GAAiCh0H,GAAmBn4B,aAOnEjE,KAAAqwJ,aAEIrwJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OACEmzH,GACAC,IAEFp+E,EAAAA,WAAU,SAAC9zD,GACT,OAAAhV,EAAK0mJ,qBACFpmI,YACCtL,EAAOhR,QAAQwK,OACfwG,EAAOhR,QAAQ0kF,kBACf1zE,EAAOhR,QAAQ2kF,wBAEhBpqF,KACCgD,EAAAA,KAAI,SAACid,GAAY,OAAA,IAAI2oI,GAAmC3oI,MACxDoP,EAAAA,YAAW,SAAChzB,GACV,IAAMwzB,EAGF,CACF,IAAIg5H,GAAgCr0H,GAAmBn4B,KAYzD,OATEoa,EAAO/Q,OAASijJ,IACC,MAAjBtsJ,EAAMmzB,QAENK,EAAO/zB,KACL,IAAI2+B,GACF7B,EAAAA,kBAAkB0C,iBAIjBl7B,EAAAA,GAAE7F,WAAA,EAAA+B,EAAIuzB,YAOvBz3B,KAAA0wJ,iBAEI1wJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOwzH,IACP/lJ,EAAAA,KAAI,SAACyT,GAA4C,OAAAA,EAAOhR,WACxD8kE,EAAAA,WAAU,SAACrtE,OAAE+S,EAAM/S,EAAA+S,OAAEo6E,EAAWntF,EAAAmtF,YAC9B,OAAA5oF,EAAK0mJ,qBAAqB9lI,gBAAgBpS,EAAQo6E,GAAarqF,KAC7DgD,EAAAA,KAAI,WAAM,OAAA,IAAIgmJ,MACd35H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI6oJ,GAAoCz0H,GAAmBn4B,mCA1EvEgE,EAAAA,uDAVQu1B,EAAAA,eAOA+2G,MAMPn0I,EAAA,CADCq9B,EAAAA,gDASDr9B,EAAA,CADCq9B,EAAAA,8CAeDr9B,EAAA,CADCq9B,EAAAA,8CAyCDr9B,EAAA,CADCq9B,EAAAA,yDCzCD,SACUT,EACA8zH,GAFV,IAAAznJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA8wJ,wBAAAA,EAvBV9wJ,KAAA+wJ,uBAEI/wJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO6zH,IACPpmJ,EAAAA,KAAI,SAACyT,GAA8C,OAAAA,EAAOhR,WAC1Doc,EAAAA,WAAU,SAACpc,GACT,OAAAhE,EAAKynJ,wBAAwBrc,cAAcpnI,GAASzF,KAElDgD,EAAAA,KACE,SAAC2J,GACC,OAAA,IAAI08I,GAAyC18I,EAAKwP,WAEtDkT,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIkpJ,GAAsC90H,GAAmBn4B,mCAjBxEgE,EAAAA,uDATQu1B,EAAAA,eAMAg3G,MAMPp0I,EAAA,CADCq9B,EAAAA,+DCmCD,SACUT,EACAm0H,GAFV,IAAA9nJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmxJ,cAAAA,EArCVnxJ,KAAAoxJ,iBAEIpxJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOk0H,IACPzmJ,EAAAA,KAAI,SAACyT,GAAwC,OAAAA,EAAOhR,WACpDgnC,EAAAA,UAAS,SAACx8B,GACR,OAAOxO,EAAK8nJ,cAAc9lJ,IAAIwM,GAAQjQ,KACpCgD,EAAAA,KAAI,SAAC6qD,GACH,OAAO,IAAI67F,GAAmC77F,MAEhDx+B,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIupJ,GAAgCn1H,GAAmBn4B,aAOlEjE,KAAAwxJ,mBAEIxxJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOs0H,IACP7mJ,EAAAA,KAAI,SAACyT,GAA0C,OAAAA,EAAOhR,WACtD8kE,EAAAA,WAAU,SAAC9kE,GACT,OAAAhE,EAAK8nJ,cAAc9kH,OAAOh/B,EAAQqpG,SAAUrpG,EAAQmpG,aAAa5uG,KAC/DgD,EAAAA,KACE,WAAM,OAAA,IAAI8mJ,GAAqCrkJ,EAAQmpG,gBAEzDv/E,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI2pJ,GAAkCv1H,GAAmBn4B,mCAhCrEgE,EAAAA,uDARQu1B,EAAAA,eAKAy3G,MAMP70I,EAAA,CADCq9B,EAAAA,kDAmBDr9B,EAAA,CADCq9B,EAAAA,2DCdD,SACUT,EACAisH,EACA6D,GAHV,IAAAzjJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAipJ,eAAAA,EACAjpJ,KAAA8sJ,4BAAAA,EAIV9sJ,KAAA4xJ,gBAEI5xJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO00H,IACPjnJ,EAAAA,KAAI,SAACyT,GAAuC,OAAAA,EAAOhR,WACnDoc,EAAAA,WAAU,SAACpc,GACT,OAAQrB,QAAQqB,EAAQ0nF,wBACpB1rF,EAAKyjJ,4BAA4B93D,gCAC/B3nF,EAAQwK,OACRxK,EAAQ0nF,uBACR1nF,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,MAEVra,EAAK4/I,eAAepU,WAClBxnI,EAAQwK,OACRxK,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,OAEZ9b,KACAgD,EAAAA,KAAI,SAACy9F,GACH,OAAO,IAAIypD,GAAkCzpD,MAE/CpxE,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI+pJ,GAA+B31H,GAAmBn4B,aAOjEjE,KAAAgyJ,iBAEIhyJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOizB,IACPxlD,EAAAA,KAAI,WACF,OAAO,IAAI0yI,6BA9ChBr1I,EAAAA,uDAZQu1B,EAAAA,eAOPo3G,UACAx+C,MAaAh2F,EAAA,CADCq9B,EAAAA,iDAiCDr9B,EAAA,CADCq9B,EAAAA,yDCaD,SACUT,EACAm0H,EACAppI,GAHV,IAAA1e,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAAmxJ,cAAAA,EACAnxJ,KAAA+nB,YAAAA,EAxDV/nB,KAAAiyJ,cAEIjyJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO+0H,IACPtnJ,EAAAA,KAAI,SAACyT,GAAqC,OAAAA,EAAOhR,WACjDgnC,EAAAA,UAAS,SAACohB,GACR,OAAApsD,EAAK8nJ,cAAc9rH,SAASowB,GAAM7tD,KAChCgD,EAAAA,KAAI,WAAM,OAAA,IAAIunJ,MACdl7H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIoqJ,GAA6Bh2H,GAAmBn4B,aAO/DjE,KAAAqyJ,eAEIryJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOm1H,IACP1nJ,EAAAA,KAAI,SAACyT,GAAsC,OAAAA,EAAOhR,WAClDgnC,EAAAA,UAAS,SAACvvC,OAAEwgD,EAAIxgD,EAAAwgD,KAAExtC,EAAQhT,EAAAgT,SACxB,OAAAzO,EAAK8nJ,cAAc57D,cAAcjwC,EAAMxtC,GAAUlQ,KAC/C6hB,EAAAA,WAAU,SAACgsC,GAET,OADApsD,EAAK0e,YAAYnN,qBAAqB66C,EAAKxlC,IAAKnY,GACzC,CAAC,IAAIy6I,OAEdt7H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAIwqJ,GAA8Bp2H,GAAmBn4B,aAOhEjE,KAAAyyJ,YAEIzyJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAOu1H,IACP9nJ,EAAAA,KAAI,SAACyT,GAAmC,OAAAA,EAAOhR,WAC/CgnC,EAAAA,UAAS,SAACx8B,GACR,OAAOxO,EAAK8nJ,cAAcjvH,OAAOrqB,GAAQjQ,KACvC6hB,EAAAA,WAAU,WAER,OADApgB,EAAK0e,YAAYzP,SACV,CAAC,IAAIq6I,OAEd17H,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GAAG,IAAI4qJ,GAA2Bx2H,GAAmBn4B,mCAlD9DgE,EAAAA,uDATQu1B,EAAAA,eAMAy3G,UAHA96H,MASP/Z,EAAA,CADCq9B,EAAAA,+CAiBDr9B,EAAA,CADCq9B,EAAAA,gDAoBDr9B,EAAA,CADCq9B,EAAAA,oDCPD,SACUT,EACA8vH,GAFV,IAAAzjJ,EAAArJ,KACUA,KAAAg9B,SAAAA,EACAh9B,KAAA8sJ,4BAAAA,EA9BV9sJ,KAAA6yJ,6BAEI7yJ,KAAKg9B,SAASp1B,KAChBu1B,EAAAA,OAAO21H,IACPloJ,EAAAA,KAAI,SAACyT,GAAoD,OAAAA,EAAOhR,WAChEoc,EAAAA,WAAU,SAACpc,GACT,OAAOhE,EAAKyjJ,4BACTn5D,YACCtmF,EAAQwK,OACRxK,EAAQmW,SACRnW,EAAQoW,YACRpW,EAAQqW,MAET9b,KACCgD,EAAAA,KAAI,SAACy9F,GACH,OAAO,IAAI0qD,GAA+C1qD,MAE5DpxE,EAAAA,YAAW,SAAChzB,GACV,OAAA+D,EAAAA,GACE,IAAIgrJ,GACF52H,GAAmBn4B,mCAvBlCgE,EAAAA,uDARQu1B,EAAAA,eAKA44D,MAMPh2F,EAAA,CADCq9B,EAAAA,kECcUC,GAAiB,CAC5Bu1H,GACAC,GACAC,GACAC,GACAC,GACA9E,GACA+E,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,OC5BF,kCAVC93H,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CACPC,EAAAA,aACAhC,GACAkC,EAAAA,YAAYC,WAAWm6B,GAAcz6B,GAAc,CAAEw2E,aAAYmgD,KACjEp2H,EAAAA,cAAcD,WAAWT,IACzB+2H,EAAAA,cAEFt4H,UAAW,CAAC2B,0BCbd,SAAA42H,YACSA,EAAAz4H,QAAP,WACE,MAAO,CACLC,SAAUw4H,8BANfj4H,EAAAA,SAAQv0B,KAAA,CAAC,CACR61B,QAAS,CAAC42H,0BCGV,SAAAC,EAAwCvtJ,GAAArH,KAAAqH,SAAAA,SASjCutJ,EAAA10J,UAAA0c,KAAA,SACLi4I,EACAzoJ,EACA41H,EACA8yB,GAEA,IAAM9vB,EAA4BhlI,KAAKqH,SAAS0tJ,cAAc,UAC9D/vB,EAAO13H,KAAO,kBAEZ03H,EAAO6vB,IADLzoJ,EACWyoJ,EAAM70J,KAAKg1J,YAAY5oJ,GAEvByoJ,EAGf7vB,EAAOiwB,OAAQ,EACfjwB,EAAOrQ,OAAQ,EACXqN,GACFgD,EAAOkwB,iBAAiB,OAAQlzB,GAE9B8yB,GACF9vB,EAAOkwB,iBAAiB,QAASJ,GAGnCztJ,SAAS0pF,KAAKokE,YAAYnwB,IAOpB4vB,EAAA10J,UAAA80J,YAAA,SAAY5oJ,GAClB,IAAIpK,EAAS,GACPozJ,EAAY51J,OAAO6f,KAAKjT,GAQ9B,OAPIgpJ,EAAUz0J,OAAS,IACrBqB,EACE,IACAozJ,EACGxqJ,KAAI,SAACrK,GAAQ,OAAA80J,UAAU90J,GAAO,IAAM80J,UAAUjpJ,EAAO7L,OACrD25B,KAAK,MAELl4B,mJArDViG,EAAAA,WAAUC,KAAA,CAAC,CACV/C,WAAY,8EAGCgD,EAAAA,OAAMD,KAAA,CAACE,EAAAA,2gPxcJU,41JgK4B9B,MAAO,CACLlC,EAAqBi2F,GAAmC,CAACm5D,EAAAA,OACzDpvJ,EAAqBm2F,GAAqC,CAACi5D,EAAAA,iHxVyD/B,CAC9BC,MAAO,QACPC,OAAQ,SACRC,QAAS","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { inject, InjectFlags, InjectionToken } from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration', {\n  providedIn: 'root',\n  factory: () => deepMerge({}, inject(DefaultConfig), inject(RootConfig)),\n});\n\n/**\n * Default Configuration token, used to build Global Configuration, built from DefaultConfigChunks\n */\nexport const DefaultConfig = new InjectionToken('DefaultConfiguration', {\n  providedIn: 'root',\n  factory: () =>\n    deepMerge({}, ...(inject(DefaultConfigChunk, InjectFlags.Optional) ?? [])),\n});\n\n/**\n * Root Configuration token, used to build Global Configuration, built from ConfigChunks\n */\nexport const RootConfig = new InjectionToken('RootConfiguration', {\n  providedIn: 'root',\n  factory: () =>\n    deepMerge({}, ...(inject(ConfigChunk, InjectFlags.Optional) ?? [])),\n});\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken<object[]>('ConfigurationChunk');\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken<object[]>(\n  'DefaultConfigurationChunk'\n);\n","import { FactoryProvider, ValueProvider } from '@angular/core';\nimport { ConfigChunk, DefaultConfigChunk } from './config-tokens';\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): ValueProvider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): FactoryProvider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): ValueProvider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): FactoryProvider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object available (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config-tokens';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\nimport { RouteConfig } from './routes-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  /**\n   * Reversed routing config for quick lookup of the route name by the configured path.\n   */\n  protected routeNamesByPath: { [path: string]: string };\n\n  constructor(protected config: RoutingConfig) {}\n\n  /**\n   * Returns the route config for the given route name.\n   */\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  /**\n   * Returns the configured route loading strategy.\n   */\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n\n  /**\n   * Returns the route name of the configured path.\n   *\n   * For example, when the config is:\n   * ```\n   * routing: {\n   *   routes: {\n   *      addressBook: { paths: ['my-account/address-book'] }\n   *   }\n   * }\n   * ```\n   *\n   * the `getRouteName('my-account/address-book')` returns `'addressBook'`.\n   */\n  getRouteName(path: string) {\n    if (!this.routeNamesByPath) {\n      this.initRouteNamesByPath();\n    }\n    return this.routeNamesByPath[path];\n  }\n\n  /**\n   * Initializes the property `routeNamesByPath`.\n   *\n   * The original config allows for reading configured path by the route name.\n   * But this method builds up a structure with a 'reversed config'\n   * to read quickly the route name by the path.\n   */\n  protected initRouteNamesByPath() {\n    this.routeNamesByPath = {};\n\n    for (const [routeName, routeConfig] of Object.entries(\n      this.config?.routing?.routes\n    )) {\n      routeConfig?.paths?.forEach((path) => {\n        if (isDevMode() && this.routeNamesByPath[path]) {\n          console.error(\n            `The same path '${path}' is configured for two different route names: '${this.routeNamesByPath[path]}' and '${routeName}`\n          );\n        }\n        this.routeNamesByPath[path] = routeName;\n      });\n    }\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ParamsMapping, RouteConfig } from '../routes-config';\nimport { RoutingConfigService } from '../routing-config.service';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommand, UrlCommandRoute, UrlCommands } from './url-command';\nimport { UrlParsingService } from './url-parsing.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\nexport const CHANGE_NEXT_PAGE_CONTEXT = '[Router] Change Next PageContext';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport class ChangeNextPageContext implements Action {\n  readonly type = CHANGE_NEXT_PAGE_CONTEXT;\n  constructor(public payload: PageContext) {}\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction\n  | ChangeNextPageContext;\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter, map, shareReplay, startWith } from 'rxjs/operators';\n\n/**\n * Helper service to expose all activated routes\n */\n@Injectable({ providedIn: 'root' })\nexport class ActivatedRoutesService {\n  constructor(protected router: Router) {}\n\n  /**\n   * Array of currently activated routes (from the root route to the leaf route).\n   */\n  readonly routes$: Observable<\n    ActivatedRouteSnapshot[]\n  > = this.router.events.pipe(\n    filter((event) => event instanceof NavigationEnd),\n    // tslint:disable-next-line: deprecation https://github.com/ReactiveX/rxjs/issues/4772\n    startWith(undefined), // emit value for consumer who subscribed lately after NavigationEnd event\n    map(() => {\n      let route = this.router.routerState.snapshot.root;\n      const routes: ActivatedRouteSnapshot[] = [route];\n\n      // traverse to the leaf route:\n      while ((route = route.firstChild)) {\n        routes.push(route);\n      }\n\n      return routes;\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ActivatedRoutesService } from '../services/activated-routes.service';\n\n/**\n * Service to expose all parameters for the router, including child routes.\n * This is convenient in case the parent route (component) requires awareness\n * of child routes parameters.\n */\n@Injectable({ providedIn: 'root' })\nexport class RoutingParamsService {\n  protected readonly params$: Observable<{\n    [key: string]: string;\n  }> = this.activatedRoutesService.routes$.pipe(\n    map((routes) => this.findAllParam(routes)),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  constructor(\n    protected router: Router,\n    protected activatedRoutesService: ActivatedRoutesService\n  ) {}\n\n  /**\n   * Get the list of all parameters of the full route. This includes\n   * active child routes.\n   */\n  getParams(): Observable<{ [key: string]: string }> {\n    return this.params$;\n  }\n\n  protected findAllParam(\n    routes: ActivatedRouteSnapshot[]\n  ): { [key: string]: string } {\n    return Object.assign({}, ...routes.map((route) => route.params));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\nimport { RoutingParamsService } from './routing-params.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService,\n    protected routingParamsService: RoutingParamsService\n  ) {}\n\n  /**\n   * Get the list of all parameters of the full route. This includes\n   * active child routes.\n   */\n  getParams(): Observable<{ [key: string]: string }> {\n    return this.routingParamsService?.getParams();\n  }\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Allow to change next page context for the ongoing navigation\n   *\n   * @param pageContext\n   */\n  changeNextPageContext(pageContext: PageContext) {\n    this.store.dispatch(new RoutingActions.ChangeNextPageContext(pageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Service serves storage role for AuthRedirectService.\n * Used by AuthStatePersistenceService to store redirect url for OAuth flows that rely on redirects.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectStorageService {\n  constructor() {}\n\n  private redirectUrl$: Observable<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  /**\n   * Get redirect url after logging in.\n   *\n   * @returns observable with the redirect url as string\n   */\n  getRedirectUrl(): Observable<string> {\n    return this.redirectUrl$;\n  }\n\n  /**\n   * Set url to redirect to after login.\n   *\n   * @param redirectUrl\n   */\n  setRedirectUrl(redirectUrl: string): void {\n    (this.redirectUrl$ as BehaviorSubject<string>).next(redirectUrl);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthRedirectStorageService } from './auth-redirect-storage.service';\n\n/**\n * Responsible for saving last accessed page (or attempted) before login and for redirecting to that page after login.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(\n    protected routing: RoutingService,\n    protected router: Router,\n    protected authRedirectStorageService: AuthRedirectStorageService\n  ) {}\n\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  /**\n   * Redirect to saved url (homepage if nothing is saved).\n   */\n  redirect() {\n    this.authRedirectStorageService\n      .getRedirectUrl()\n      .pipe(take(1))\n      .subscribe((redirectUrl) => {\n        if (redirectUrl === undefined) {\n          this.routing.go('/');\n        } else {\n          this.routing.goByUrl(redirectUrl);\n        }\n        this.authRedirectStorageService.setRedirectUrl(undefined);\n\n        this.lastAuthGuardNavigation = undefined;\n      });\n  }\n\n  /**\n   * Saves url of a page that user wanted to access, but wasn't yet logged in.\n   */\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.authRedirectStorageService.setRedirectUrl(url);\n  }\n\n  /**\n   * Saves url of a page that was accessed before entering a page only for not auth users.\n   */\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.authRedirectStorageService.setRedirectUrl(initialUrl);\n\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OAuthStorage } from 'angular-oauth2-oidc';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AuthToken } from '../models/auth-token.model';\n\n/**\n * Storage service for AuthToken. Used as a storage for angular-oauth2-oidc library.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthStorageService extends OAuthStorage {\n  /**\n   * Extracted keys that are not `JSON.stringify` from reading the angular-oauth2-oidc source code\n   */\n  protected static readonly nonStringifiedOAuthLibKeys = [\n    'PKCE_verifier',\n    'access_token',\n    'refresh_token',\n    'expires_at',\n    'access_token_stored_at',\n    'id_token',\n    'id_token_expires_at',\n    'id_token_stored_at',\n    'session_state',\n    'nonce',\n  ];\n\n  protected _token$: Observable<AuthToken> = new BehaviorSubject<AuthToken>(\n    {} as AuthToken\n  );\n\n  protected decode(key: string, value: any) {\n    if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {\n      return value;\n    }\n    return JSON.stringify(value);\n  }\n\n  protected encode(key: string, value: any) {\n    if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {\n      return value;\n    } else {\n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    }\n  }\n\n  /* Async API for spartacus use */\n\n  /**\n   * Returns complete token (all fields).\n   *\n   * @return observable emitting AuthToken\n   */\n  getToken(): Observable<AuthToken> {\n    return this._token$;\n  }\n\n  /**\n   * Set current value of token.\n   *\n   * @param token\n   */\n  setToken(token: AuthToken): void {\n    (this._token$ as BehaviorSubject<AuthToken>).next(token);\n  }\n\n  /* Sync API for OAuth lib use */\n\n  /**\n   * Get parameter from the token (eg. access_token)\n   *\n   * @param key\n   */\n  getItem(key: string): any {\n    let token;\n    this.getToken()\n      .subscribe((currentToken) => (token = currentToken))\n      .unsubscribe();\n    return this.decode(key, token?.[key]);\n  }\n\n  /**\n   * Removes parameter from the token (eg. access_token)\n   *\n   * @param key\n   */\n  removeItem(key: string): void {\n    const val = { ...(this._token$ as BehaviorSubject<AuthToken>).value };\n    delete val[key];\n    (this._token$ as BehaviorSubject<AuthToken>).next({\n      ...val,\n    });\n  }\n\n  /**\n   * Sets parameter of the token (eg. access_token)\n   *\n   * @param key\n   */\n  setItem(key: string, data: any): void {\n    if (key) {\n      (this._token$ as BehaviorSubject<AuthToken>).next({\n        ...(this._token$ as BehaviorSubject<AuthToken>).value,\n        [key]: this.encode(key, data),\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","/**\n * Supported OAuth flows.\n */\nexport enum OAuthFlow {\n  /**\n   * Flow when username and password is passed to the application and then the application through API fetches tokens from OAuth server.\n   */\n  ResourceOwnerPasswordFlow,\n  /**\n   * Flow with redirect to OAuth server where user inputs credentials and the are redirected back with token.\n   */\n  ImplicitFlow,\n  /**\n   * Similar to Implicit flow, but user is redirected with code that need to later exchange through API for a token.\n   */\n  AuthorizationCode,\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfig as LibConfig } from 'angular-oauth2-oidc';\nimport { Config } from '../../../config/config-tokens';\n\n// siletRefreshTimeout - omitted as it is deprecated of typo\n// clientId - we need it for client credentials flow\n// dummyClientSecret - we need it for client credentials flow\n// loginUrl - similarly like the rest of endpoints we want to have full control over that\n// logoutUrl - similarly like the rest of endpoints we want to have full control over that\n// tokenEndpoint - similarly like the rest of endpoints we want to have full control over that\n// revocationEndpoint - similarly like the rest of endpoints we want to have full control over that\n// userinfoEndpoint - similarly like the rest of endpoints we want to have full control over that\n//\nexport type AuthLibConfig = Omit<\n  LibConfig,\n  | 'clientId'\n  | 'dummyClientSecret'\n  | 'siletRefreshTimeout'\n  | 'loginUrl'\n  | 'logoutUrl'\n  | 'tokenEndpoint'\n  | 'revocationEndpoint'\n  | 'userinfoEndpoint'\n>;\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig {\n  authentication?: {\n    /**\n     * OAuth client id.\n     */\n    client_id?: string;\n    /**\n     * Secret for client required by Hybris OAuth.\n     */\n    client_secret?: string;\n    /**\n     * Base url for auth server (for login, token, revoke endpoints).\n     */\n    baseUrl?: string;\n    /**\n     * Endpoint for getting token.\n     */\n    tokenEndpoint?: string;\n    /**\n     * Endpoint url for revoking tokens.\n     */\n    revokeEndpoint?: string;\n    /**\n     * Url for login redirect for Implicit and Authorization Code Flow.\n     */\n    loginUrl?: string;\n    /**\n     * Redirect url after logout.\n     */\n    logoutUrl?: string;\n    /**\n     * Userinfo endpoint.\n     */\n    userinfoEndpoint?: string;\n    /**\n     * Config for angular-oauth-oidc library.\n     */\n    OAuthLibConfig?: AuthLibConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { AuthConfig, AuthLibConfig } from '../config/auth-config';\nimport { OAuthFlow } from '../models/oauth-flow';\n\n/**\n * Utility service on top of the authorization config.\n * Provides handy defaults, when not everything is set in the configuration.\n * Use this service instead of direct configuration.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthConfigService {\n  constructor(\n    protected authConfig: AuthConfig,\n    protected occConfig: OccConfig\n  ) {}\n\n  /**\n   * Get client_id\n   *\n   * @return client_id\n   */\n  public getClientId(): string {\n    return this.authConfig.authentication.client_id ?? '';\n  }\n\n  /**\n   * Get client_secret. OAuth server shouldn't require it from web apps (but Hybris OAuth server requires).\n   *\n   * @return client_secret\n   */\n  public getClientSecret(): string {\n    return this.authConfig.authentication.client_secret ?? '';\n  }\n\n  /**\n   * Returns base url of the authorization server\n   */\n  public getBaseUrl(): string {\n    return (\n      this.authConfig.authentication.baseUrl ??\n      this.occConfig.backend.occ.baseUrl + '/authorizationserver'\n    );\n  }\n\n  /**\n   * Returns endpoint for getting the auth token\n   */\n  public getTokenEndpoint(): string {\n    const tokenEndpoint = this.authConfig.authentication.tokenEndpoint ?? '';\n    return this.prefixEndpoint(tokenEndpoint);\n  }\n\n  /**\n   * Returns url for redirect to the authorization server to get token/code\n   */\n  public getLoginUrl(): string {\n    const loginUrl = this.authConfig.authentication.loginUrl ?? '';\n    return this.prefixEndpoint(loginUrl);\n  }\n\n  /**\n   * Returns endpoint for token revocation (both access and refresh token).\n   */\n  public getRevokeEndpoint(): string {\n    const revokeEndpoint = this.authConfig.authentication.revokeEndpoint ?? '';\n    return this.prefixEndpoint(revokeEndpoint);\n  }\n\n  /**\n   * Returns logout url to redirect to on logout.\n   */\n  public getLogoutUrl(): string {\n    const logoutUrl = this.authConfig.authentication.logoutUrl ?? '';\n    return this.prefixEndpoint(logoutUrl);\n  }\n\n  /**\n   * Returns userinfo endpoint of the OAuth server.\n   */\n  public getUserinfoEndpoint(): string {\n    const userinfoEndpoint =\n      this.authConfig.authentication.userinfoEndpoint ?? '';\n    return this.prefixEndpoint(userinfoEndpoint);\n  }\n\n  /**\n   * Returns configuration specific for the angular-oauth2-oidc library.\n   */\n  public getOAuthLibConfig(): AuthLibConfig {\n    return this.authConfig.authentication?.OAuthLibConfig ?? {};\n  }\n\n  protected prefixEndpoint(endpoint: string): string {\n    let url = endpoint;\n    if (!url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return `${this.getBaseUrl()}${url}`;\n  }\n\n  /**\n   * Returns the type of the OAuth flow based on auth config.\n   * Use when you have to perform particular action only in some of the OAuth flow scenarios.\n   */\n  public getOAuthFlow(): OAuthFlow {\n    const responseType = this.authConfig.authentication?.OAuthLibConfig\n      ?.responseType;\n    if (responseType) {\n      const types = responseType.split(' ');\n      if (types.includes('code')) {\n        return OAuthFlow.AuthorizationCode;\n      } else if (types.includes('token')) {\n        return OAuthFlow.ImplicitFlow;\n      } else {\n        return OAuthFlow.ResourceOwnerPasswordFlow;\n      }\n    }\n    return OAuthFlow.ResourceOwnerPasswordFlow;\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { OAuthService, TokenResponse } from 'angular-oauth2-oidc';\nimport { WindowRef } from '../../../window/window-ref';\nimport { AuthConfigService } from './auth-config.service';\n\n/**\n * Wrapper service on the library OAuthService. Normalizes the lib API for services.\n * Use this service when you want to access low level OAuth library methods.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OAuthLibWrapperService {\n  constructor(\n    protected oAuthService: OAuthService,\n    protected authConfigService: AuthConfigService,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected winRef: WindowRef\n  ) {\n    this.initialize();\n  }\n\n  protected initialize() {\n    const isSSR = isPlatformServer(this.platformId);\n    this.oAuthService.configure({\n      tokenEndpoint: this.authConfigService.getTokenEndpoint(),\n      loginUrl: this.authConfigService.getLoginUrl(),\n      clientId: this.authConfigService.getClientId(),\n      dummyClientSecret: this.authConfigService.getClientSecret(),\n      revocationEndpoint: this.authConfigService.getRevokeEndpoint(),\n      logoutUrl: this.authConfigService.getLogoutUrl(),\n      userinfoEndpoint: this.authConfigService.getUserinfoEndpoint(),\n      issuer:\n        this.authConfigService.getOAuthLibConfig()?.issuer ??\n        this.authConfigService.getBaseUrl(),\n      redirectUri:\n        this.authConfigService.getOAuthLibConfig()?.redirectUri ?? !isSSR\n          ? this.winRef.nativeWindow.location.origin\n          : '',\n      ...this.authConfigService.getOAuthLibConfig(),\n    });\n  }\n\n  /**\n   * Authorize with ResourceOwnerPasswordFlow.\n   *\n   * @param userId\n   * @param password\n   *\n   * @return token response from the lib\n   */\n  authorizeWithPasswordFlow(\n    userId: string,\n    password: string\n  ): Promise<TokenResponse> {\n    return this.oAuthService.fetchTokenUsingPasswordFlow(userId, password);\n  }\n\n  /**\n   * Refresh access_token.\n   */\n  refreshToken(): void {\n    this.oAuthService.refreshToken();\n  }\n\n  /**\n   * Revoke access tokens and clear tokens in lib state.\n   */\n  revokeAndLogout(): Promise<any> {\n    return new Promise((resolve) => {\n      this.oAuthService\n        .revokeTokenAndLogout()\n        .catch(() => {\n          // when there would be some kind of error during revocation we can't do anything else, so at least we logout user.\n          this.oAuthService.logOut();\n        })\n        .finally(() => {\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Clear tokens in library state (no revocation).\n   */\n  logout(): void {\n    this.oAuthService.logOut();\n  }\n\n  /**\n   * Returns Open Id token. Might be empty, when it was not requested with the `responseType` config.\n   *\n   * @return id token\n   */\n  getIdToken(): string {\n    return this.oAuthService.getIdToken();\n  }\n\n  /**\n   * Initialize Implicit Flow or Authorization Code flows with the redirect to OAuth login url.\n   */\n  initLoginFlow() {\n    return this.oAuthService.initLoginFlow();\n  }\n\n  /**\n   * Tries to login user based on `code` or `token` present in the url.\n   */\n  tryLogin() {\n    return this.oAuthService.tryLogin({\n      // We don't load discovery document, because it doesn't contain revoke endpoint information\n      disableOAuth2StateCheck: true,\n    });\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../../occ/utils/occ-constants';\n\n/**\n * This implementation is OCC specific.\n * Different backend might have completely different need regarding user id.\n * It might not need user id at all and work based on access_token.\n * To implement custom solution provide your own implementation and customize services that use UserIdService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserIdService {\n  private _userId: Observable<string> = new ReplaySubject<string>(1);\n\n  /**\n   * Sets current user id.\n   *\n   * @param userId\n   */\n  public setUserId(userId: string): void {\n    (this._userId as ReplaySubject<string>).next(userId);\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'. In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  public getUserId(): Observable<string> {\n    return this._userId;\n  }\n\n  /**\n   * @deprecated Use `takeUserId` method instead.\n   *\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  public invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Utility method if you need userId to perform single action (eg. dispatch call to API).\n   *\n   * @param loggedIn Set to true if you want the observable to emit id only for logged in user. Throws in case of anonymous user.\n   *\n   * @returns Observable that emits once and completes with the last userId value.\n   */\n  public takeUserId(loggedIn = false): Observable<string | never> {\n    return this.getUserId().pipe(\n      take(1),\n      map((userId) => {\n        if (loggedIn && userId === OCC_USER_ID_ANONYMOUS) {\n          throw new Error(\n            'Requested user id for logged user while user is not logged in.'\n          );\n        }\n        return userId;\n      })\n    );\n  }\n\n  /**\n   * Sets user id to the default value for logged out user.\n   */\n  public clearUserId(): void {\n    this.setUserId(OCC_USER_ID_ANONYMOUS);\n  }\n\n  /**\n   * Checks if the userId is of emulated user type.\n   */\n  public isEmulated(): Observable<boolean> {\n    return this.getUserId().pipe(\n      map(\n        (userId) =>\n          userId !== OCC_USER_ID_ANONYMOUS && userId !== OCC_USER_ID_CURRENT\n      )\n    );\n  }\n}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  id?: string;\n\n  title?: string;\n  titleCode?: string;\n\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  companyName?: string;\n\n  line1?: string;\n  line2?: string;\n  postalCode?: string;\n  town?: string;\n  region?: Region;\n  district?: string;\n  country?: Country;\n  cellphone?: string;\n\n  defaultAddress?: boolean;\n  shippingAddress?: boolean;\n\n  formattedAddress?: string;\n  phone?: string;\n\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { CostCenter } from './org-unit.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport enum B2BPaymentTypeEnum {\n  ACCOUNT_PAYMENT = 'ACCOUNT',\n  CARD_PAYMENT = 'CARD',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentType {\n  code?: string;\n  displayName?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  costCenter?: CostCenter;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  paymentType?: PaymentType;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  purchaseOrderNumber?: string;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n\n  /**\n   * Style classes can be added to the CMS Link component to enhance the UX.\n   * The style classes are typically derived from the (CMS) backend and should\n   * match an existing CSS selector.\n   *\n   * The styleClasses can contain a \"list\" of space separated style classes.\n   */\n  styleClasses?: string;\n\n  /**\n   * Style rules can be added to the CMS Link component to enhance the UX.\n   * The style attributes are typically derived from the (CMS) backend.\n   *\n   * The styleAttributes can contain a \"list\" of semicolon separated style rules.\n   */\n  styleAttributes?: string;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { StateWithClientAuth } from '../../client-auth/store/client-auth-state';\nimport { AuthRedirectService } from '../services/auth-redirect.service';\nimport { AuthStorageService } from '../services/auth-storage.service';\nimport { OAuthLibWrapperService } from '../services/oauth-lib-wrapper.service';\nimport { AuthActions } from '../store/actions/index';\nimport { UserIdService } from './user-id.service';\n\n/**\n * Auth service for normal user authentication.\n * Use to check auth status, login/logout with different OAuth flows.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(\n    protected store: Store<StateWithClientAuth>,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected authStorageService: AuthStorageService,\n    protected authRedirectService: AuthRedirectService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Check params in url and if there is an code/token then try to login with those.\n   */\n  async checkOAuthParamsInUrl(): Promise<void> {\n    try {\n      const result = await this.oAuthLibWrapperService.tryLogin();\n      const token = this.authStorageService.getItem('access_token');\n      // We get the result in the code flow even if we did not logged in that why we also need to check if we have access_token\n      if (result && token) {\n        this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n        this.store.dispatch(new AuthActions.Login());\n        this.authRedirectService.redirect();\n      }\n    } catch {}\n  }\n\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server.\n   */\n  loginWithRedirect(): boolean {\n    this.oAuthLibWrapperService.initLoginFlow();\n    return true;\n  }\n\n  /**\n   * Loads a new user token with Resource Owner Password Flow.\n   * @param userId\n   * @param password\n   */\n  async loginWithCredentials(userId: string, password: string): Promise<void> {\n    try {\n      await this.oAuthLibWrapperService.authorizeWithPasswordFlow(\n        userId,\n        password\n      );\n      // OCC specific user id handling. Customize when implementing different backend\n      this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n\n      this.store.dispatch(new AuthActions.Login());\n\n      this.authRedirectService.redirect();\n    } catch {}\n  }\n\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n  coreLogout(): Promise<any> {\n    this.userIdService.clearUserId();\n    return new Promise((resolve) => {\n      this.oAuthLibWrapperService.revokeAndLogout().finally(() => {\n        this.store.dispatch(new AuthActions.Logout());\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.authStorageService.getToken().pipe(\n      map((userToken) => Boolean(userToken?.access_token)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Logout a storefront customer. It will initialize logout procedure by redirecting to the `logout` endpoint.\n   */\n  logout(): void {\n    this.routingService.go({ cxRoute: 'logout' });\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Address } from './address.model';\nimport { User } from './misc.model';\n\n// TODO(#8876): Should we simplify the models only for the fields required by the B2B checkout?\nexport interface CostCenter {\n  active?: boolean;\n  code?: string;\n  name?: string;\n  unit?: B2BUnit;\n}\n\nexport enum B2BUserRole {\n  ADMIN = 'b2badmingroup',\n  CUSTOMER = 'b2bcustomergroup',\n  MANAGER = 'b2bmanagergroup',\n  APPROVER = 'b2bapprovergroup',\n}\n\nexport interface B2BUnit {\n  active?: boolean;\n  addresses?: Address[];\n  uid?: string;\n  name?: string;\n}\n\nexport interface B2BUser extends User {\n  active?: boolean;\n}\n\nexport interface B2BApprovalProcess {\n  code?: string;\n  name?: string;\n}\n\nexport interface OrderApprovalPermissionType {\n  code?: string;\n  name?: string;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { Address } from './address.model';\nimport {\n  DeliveryOrderEntryGroup,\n  PaymentDetails,\n  PaymentType,\n  Principal,\n  PromotionResult,\n  Voucher,\n} from './cart.model';\nimport { PaginationModel, SortModel } from './misc.model';\nimport { DeliveryMode, OrderEntry, PickupOrderEntryGroup } from './order.model';\nimport { CostCenter } from './org-unit.model';\nimport { Price } from './product.model';\n\nexport interface ReplenishmentOrder {\n  active?: boolean;\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  costCenter?: CostCenter;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: string;\n  firstDate?: string;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  paymentStatus?: string;\n  paymentType?: PaymentType;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  purchaseOrderNumber?: string;\n  replenishmentOrderCode?: string;\n  saveTime?: string;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  trigger?: Trigger;\n  user?: Principal;\n}\n\nexport interface ReplenishmentOrderList {\n  replenishmentOrders?: ReplenishmentOrder[];\n  pagination?: PaginationModel;\n  sorts?: SortModel[];\n}\n\nexport interface Trigger {\n  activationTime?: string;\n  displayTimeTable?: string;\n}\n\nexport interface ScheduleReplenishmentForm {\n  daysOfWeek?: DaysOfWeek[];\n  nthDayOfMonth?: string;\n  numberOfDays?: string;\n  numberOfWeeks?: string;\n  recurrencePeriod?: string;\n  replenishmentStartDate?: string;\n}\n\nexport enum DaysOfWeek {\n  MONDAY = 'MONDAY',\n  TUESDAY = 'TUESDAY',\n  WEDNESDAY = 'WEDNESDAY',\n  THURSDAY = 'THURSDAY',\n  FRIDAY = 'FRIDAY',\n  SATURDAY = 'SATURDAY',\n  SUNDAY = 'SUNDAY',\n}\n\nexport const recurrencePeriod = {\n  DAILY: 'DAILY',\n  WEEKLY: 'WEEKLY',\n  MONTHLY: 'MONTHLY',\n};\n\nexport enum ORDER_TYPE {\n  PLACE_ORDER = 'PLACE_ORDER',\n  SCHEDULE_REPLENISHMENT_ORDER = 'SCHEDULE_REPLENISHMENT_ORDER',\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { ListModel, EntitiesModel } from '../../model/index';\nimport { SearchConfig } from '../../product/model/search-config';\nimport { EntityListState } from './entity-list-state';\nimport { EntityLoaderState } from './entity-loader/entity-loader-state';\nimport { entityLoaderStateSelector } from './entity-loader/entity-loader.selectors';\nimport { LoaderState } from './loader/loader-state';\n\nconst ALL = 'all';\n\nexport function serializeSearchConfig(\n  config: SearchConfig,\n  id?: string\n): string {\n  return `${id ?? ''}?pageSize=${config.pageSize ?? ''}&currentPage=${\n    config.currentPage ?? ''\n  }&sort=${config.sort ?? ''}`;\n}\n\nexport function denormalizeSearch<T>(\n  state: EntityListState<T>,\n  params?: SearchConfig\n): LoaderState<EntitiesModel<T>> {\n  return denormalizeCustomB2BSearch<T>(state.list, state.entities, params);\n}\n\nexport function denormalizeCustomB2BSearch<T>(\n  list: EntityLoaderState<ListModel>,\n  entities: EntityLoaderState<T>,\n  params?: SearchConfig,\n  id?: string\n): LoaderState<EntitiesModel<T>> {\n  const serializedList: any = entityLoaderStateSelector(\n    list,\n    params ? serializeSearchConfig(params, id) : id ?? ALL\n  );\n  if (!serializedList.value || !serializedList.value.ids) {\n    return serializedList;\n  }\n  const res: LoaderState<EntitiesModel<T>> = Object.assign({}, serializedList, {\n    value: {\n      values: serializedList.value.ids.map(\n        (code) => entityLoaderStateSelector(entities, code).value\n      ),\n    },\n  });\n  if (params) {\n    res.value.pagination = serializedList.value.pagination;\n    res.value.sorts = serializedList.value.sorts;\n  }\n  return res;\n}\n\nexport function normalizeListPage<T>(\n  list: EntitiesModel<T>,\n  id: string\n): { values: T[]; page: ListModel } {\n  const values = list?.values || [];\n  const page: ListModel = {\n    ids: values.map((data) => data[id]),\n  };\n  if (list.pagination) {\n    page.pagination = list.pagination;\n  }\n  if (list.sorts) {\n    page.sorts = list.sorts;\n  }\n  return { values, page };\n}\n\nexport function serializeParams(\n  params: string | string[],\n  searchConfig: SearchConfig\n): string {\n  return [params, serializeSearchConfig(searchConfig)].toString();\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Otherwise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a mismatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\n\nexport const LOAD_BASE_SITES = '[Site-context] Load BaseSites';\nexport const LOAD_BASE_SITES_FAIL = '[Site-context] Load BaseSites Fail';\nexport const LOAD_BASE_SITES_SUCCESS = '[Site-context] Load BaseSites Success';\n\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class LoadBaseSites implements Action {\n  readonly type = LOAD_BASE_SITES;\n}\n\nexport class LoadBaseSitesFail implements Action {\n  readonly type = LOAD_BASE_SITES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSitesSuccess implements Action {\n  readonly type = LOAD_BASE_SITES_SUCCESS;\n  constructor(public payload: BaseSite[]) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | LoadBaseSites\n  | LoadBaseSitesFail\n  | LoadBaseSitesSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { BaseSite, Currency, Language } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  entities: BaseSiteEntities;\n  activeSite: string;\n  details: BaseSite;\n}\n\nexport interface BaseSiteEntities {\n  [uid: string]: BaseSite;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport {\n  BaseSiteEntities,\n  BaseSiteState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst sitesEntitiesSelector = (state: BaseSiteState) => state.entities;\n\nexport const getBaseSiteState: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSiteState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.baseSite\n);\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n\nexport const getBaseSitesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSiteEntities\n> = createSelector(getBaseSiteState, sitesEntitiesSelector);\n\nexport const getAllBaseSites: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite[]\n> = createSelector(getBaseSitesEntities, (entities) => {\n  return entities ? Object.keys(entities).map((uid) => entities[uid]) : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<BaseSite> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Get all base sites data\n   */\n  getAll(): Observable<BaseSite[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllBaseSites),\n      tap((sites) => {\n        if (!sites) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSites());\n        }\n      }),\n      filter((sites) => Boolean(sites))\n    );\n  }\n\n  /**\n   * Get base site data based on site uid\n   */\n  get(siteUid?: string): Observable<BaseSite> {\n    if (siteUid) {\n      return this.getAll().pipe(\n        map((sites) => sites.find((site) => site.uid === siteUid))\n      );\n    }\n\n    return this.getActive().pipe(\n      switchMap((activeSiteUid) =>\n        this.getAll().pipe(\n          map((sites) => sites.find((site) => site.uid === activeSiteUid))\n        )\n      )\n    );\n  }\n\n  setActive(baseSite: string): void {\n    this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n}\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class HttpParamsURIEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n  /**\n   * Endpoint for set delivery address to cart\n   */\n  setDeliveryAddress?: string | OccEndpoint;\n  /**\n   * Endpoint for place order\n   */\n  placeOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupOrderApprovalPermission\n   *\n   * @member {string}\n   */\n  budget?: string | OccEndpoint;\n  /**\n   * Endpoint for budgets list\n   *\n   * @member {string}\n   */\n  budgets?: string | OccEndpoint;\n  /**\n   * Endpoint for organizations\n   *\n   * @member {string}\n   */\n  orgUnits?: string | OccEndpoint;\n  /**\n   * Endpoint for organizations list\n   *\n   * @member {string}\n   */\n  orgUnitsAvailable?: string | OccEndpoint;\n  /**\n   * Endpoint for organization units tree\n   *\n   * @member {string}\n   */\n  orgUnitsTree?: string | OccEndpoint;\n  /**\n   * Endpoint for approval processes for organization units\n   *\n   * @member {string}\n   */\n  orgUnitsApprovalProcesses?: string | OccEndpoint;\n  /**\n   * Endpoint for organization\n   *\n   * @member {string}\n   */\n  orgUnit?: string | OccEndpoint;\n  /**\n   * Endpoint for orgUnitUsers:\n   *\n   * @member {string}\n   */\n  orgUnitUsers?: string | OccEndpoint;\n  /**\n   * Endpoint for add orgUnitUserRoles (except approver):\n   *\n   * @member {string}\n   */\n  orgUnitUserRoles?: string | OccEndpoint;\n  /**\n   * Endpoint for remove orgUnitUserRole (except approver):\n   *\n   * @member {string}\n   */\n  orgUnitUserRole?: string | OccEndpoint;\n  /**\n   * Endpoint for add orgUnitApprovers:\n   *\n   * @member {string}\n   */\n  orgUnitApprovers?: string | OccEndpoint;\n  /**\n   * Endpoint for delete orgUnitApprover:\n   *\n   * @member {string}\n   */\n  orgUnitApprover?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit addresses\n   *\n   * @member {string}\n   */\n  orgUnitsAddresses?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit address\n   *\n   * @member {string}\n   */\n  orgUnitsAddress?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit user groups list\n   *\n   * @member {string}\n   */\n  userGroups?: string | OccEndpoint;\n  /**\n   * Endpoint for organizational unit user group\n   *\n   * @member {string}\n   */\n  userGroup?: string | OccEndpoint;\n  /**\n   * Endpoint for costCenter list\n   *\n   * @member {string}\n   */\n  userGroupAvailableOrderApprovalPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupAvailableOrderApprovalPermissions list\n   *\n   * @member {string}\n   */\n  userGroupAvailableOrgCustomers?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupAvailableOrgCustomers list\n   *\n   * @member {string}\n   */\n  userGroupMembers?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupMembers list\n   *\n   * @member {string}\n   */\n  userGroupMember?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupMember\n   *\n   * @member {string}\n   */\n  userGroupOrderApprovalPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupOrderApprovalPermissions list\n   *\n   * @member {string}\n   */\n  userGroupOrderApprovalPermission?: string | OccEndpoint;\n  /**\n   * Endpoint for userGroupOrderApprovalPermission\n   *\n   * @member {string}\n   */\n  costCenters?: string | OccEndpoint;\n  /**\n   * Endpoint to schedule a replenishment order\n   *\n   * * @member {string}\n   */\n  scheduleReplenishmentOrder?: string | OccEndpoint;\n  /**\n   * * Endpoint for the list of one user's replenishment orders\n   *\n   * * @member {string}\n   */\n  replenishmentOrderHistory?: string | OccEndpoint;\n  /* Endpoint to get a replenishment order details\n   *\n   * * @member {string}\n   */\n  replenishmentOrderDetails?: string | OccEndpoint;\n  /**\n   * Endpoint to get a replenishment order history for a replenishment\n   *\n   * * @member {string}\n   */\n  replenishmentOrderDetailsHistory?: string | OccEndpoint;\n  /**\n   * Endpoint to get a replenishment order history for a replenishment\n   *\n   * * @member {string}\n   */\n  cancelReplenishmentOrder?: string | OccEndpoint;\n  /**\n   * Endpoint for all costCenters\n   *\n   * @member {string}\n   */\n  costCentersAll?: string | OccEndpoint;\n  /**\n   * Endpoint for costCenter\n   *\n   * @member {string}\n   */\n  costCenter?: string | OccEndpoint;\n  /**\n   * Endpoint for budgets assigned to costCenter\n   *\n   * @member {string}\n   */\n  costCenterBudgets?: string | OccEndpoint;\n  /**\n   * Endpoint for budget assigned to costCenter\n   *\n   * @member {string}\n   */\n  costCenterBudget?: string | OccEndpoint;\n  /**\n   * Endpoint for permission list\n   *\n   * @member {string}\n   */\n  permissions?: string | OccEndpoint;\n  /**\n   * Endpoint for permission\n   *\n   * @member {string}\n   */\n  permission?: string | OccEndpoint;\n  /**\n   * Endpoint for order approval permission types\n   *\n   * @member {string}\n   */\n  orderApprovalPermissionTypes?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customers\n   *\n   * @member {string}\n   */\n  b2bUsers?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer\n   *\n   * @member {string}\n   */\n  b2bUser?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer approvers\n   *\n   * @member {string}\n   */\n  b2bUserApprovers?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer approver\n   *\n   * @member {string}\n   */\n  b2bUserApprover?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer user groups\n   *\n   * @member {string}\n   */\n  b2bUserUserGroups?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer user group\n   *\n   * @member {string}\n   */\n  b2bUserUserGroup?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer permissions\n   *\n   * @member {string}\n   */\n  b2bUserPermissions?: string | OccEndpoint;\n  /**\n   * Endpoint for organization customer permission\n   *\n   * @member {string}\n   */\n  b2bUserPermission?: string | OccEndpoint;\n  /**\n   * Endpoint for order approvals\n   *\n   * @member {string}\n   */\n  orderApprovals?: string | OccEndpoint;\n  /**\n   * Endpoint for order approval\n   *\n   * @member {string}\n   */\n  orderApproval?: string | OccEndpoint;\n  /**\n   * Endpoint for order approval decision\n   *\n   * @member {string}\n   */\n  orderApprovalDecision?: string | OccEndpoint;\n  /**\n   * Endpoint for getting all base sites\n   *\n   * @member {string}\n   */\n  baseSites?: string | OccEndpoint;\n  /** Endpoint to returns active cost centers\n   *\n   * @member {string}\n   */\n  getActiveCostCenters?: string | OccEndpoint;\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { HttpParamsURIEncoder } from '../../util/http-params-uri.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns an endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns an endpoint starting from the OCC prefix (no baseSite), i.e. /occ/v2/{endpoint}\n   * Most OCC endpoints are related to a baseSite context and are therefor prefixed\n   * with the baseSite. The `/basesites` endpoint does not relate to a specific baseSite\n   * as it will load all baseSites.\n   *\n   * @param endpoint Endpoint suffix\n   */\n  getOccEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (\n      !endpoint.startsWith('/') &&\n      !this.config.backend.occ.prefix.endsWith('/')\n    ) {\n      endpoint = '/' + endpoint;\n    }\n\n    return (\n      this.config.backend.occ.baseUrl +\n      this.config.backend.occ.prefix +\n      endpoint\n    );\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new HttpParamsURIEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../models/client-token.model';\n\nexport const CLIENT_AUTH_FEATURE = 'client-auth';\nexport const CLIENT_TOKEN_DATA = '[Client auth] Client Token Data';\n\nexport interface StateWithClientAuth {\n  [CLIENT_AUTH_FEATURE]: ClientAuthState;\n}\n\nexport interface ClientAuthState {\n  clientToken: LoaderState<ClientToken>;\n}\n","import { StateUtils } from '../../../../state/utils/index';\nimport { ClientToken } from '../../models/client-token.model';\nimport { CLIENT_TOKEN_DATA } from '../client-auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ClientAuthState,\n  CLIENT_AUTH_FEATURE,\n  StateWithClientAuth,\n} from '../client-auth-state';\n\nexport const getClientAuthState: MemoizedSelector<\n  StateWithClientAuth,\n  ClientAuthState\n> = createFeatureSelector<ClientAuthState>(CLIENT_AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/client-token.model';\nimport { ClientAuthState, StateWithClientAuth } from '../client-auth-state';\nimport { getClientAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithClientAuth,\n  LoaderState<ClientToken>\n> = createSelector(\n  getClientAuthState,\n  (state: ClientAuthState) => state.clientToken\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, queueScheduler } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../models/client-token.model';\nimport { ClientAuthActions } from '../store/actions/index';\nimport { StateWithClientAuth } from '../store/client-auth-state';\nimport { ClientAuthSelectors } from '../store/selectors/index';\n\n/**\n * Serves a role of a facade on client token store.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientTokenService {\n  constructor(protected store: Store<StateWithClientAuth>) {}\n\n  /**\n   * Returns a client token. The client token from the store is returned if there is one.\n   * Otherwise a new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(ClientAuthSelectors.getClientTokenState),\n      observeOn(queueScheduler),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new ClientAuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend and saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new ClientAuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(ClientAuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n}\n","import { HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { ClientToken } from '../models/client-token.model';\nimport { ClientTokenService } from './client-token.service';\n\n/**\n * Service for handling `Authorization` header and errors for requests that\n * require client token (eg. user registration).\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected clientTokenService: ClientTokenService) {}\n\n  /**\n   * Refreshes client token and retries the request with the new token.\n   *\n   * @param request\n   * @param httpHandler\n   */\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.clientTokenService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  /**\n   * Clones the requests and provided `Authorization` header.\n   *\n   * @param request\n   * @param token\n   */\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type || 'Bearer'} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/client-token.model';\nimport { ClientErrorHandlingService } from '../services/client-error-handling.service';\nimport { ClientTokenService } from '../services/client-token.service';\n\n/**\n * Interceptor for handling requests with `USE_CLIENT_TOKEN` header.\n * Provides `Authorization` header with client token and handles errors related to client auth.\n */\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    protected clientTokenService: ClientTokenService,\n    protected clientErrorHandlingService: ClientErrorHandlingService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return this.getClientToken(isClientTokenRequest).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token?.access_token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type || 'Bearer'} ${\n                token.access_token\n              }`,\n            },\n          });\n        }\n\n        return next.handle(request).pipe(\n          catchError((errResponse: any) => {\n            if (errResponse instanceof HttpErrorResponse) {\n              if (errResponse.status === 401) {\n                if (isClientTokenRequest) {\n                  if (this.isExpiredToken(errResponse)) {\n                    return this.clientErrorHandlingService.handleExpiredClientToken(\n                      request,\n                      next\n                    );\n                  }\n                }\n              }\n            }\n            return throwError(errResponse);\n          })\n        );\n      })\n    );\n  }\n\n  protected getClientToken(\n    isClientTokenRequest: boolean\n  ): Observable<ClientToken> {\n    if (isClientTokenRequest) {\n      return this.clientTokenService.getClientToken();\n    }\n    return of(null);\n  }\n\n  protected isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  protected isExpiredToken(resp: HttpErrorResponse): boolean {\n    return resp.error?.errors?.[0]?.type === 'InvalidTokenError';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    /**\n     * @deprecated Since 3.0, to synchronize state from the browser storage, use StatePersistentService\n     */\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  /**\n   * Helper to read state from persistent storage (localStorage, sessionStorage).\n   * It is useful if you need synchronously access state saved with `syncWithStorage`.\n   *\n   * @param key Key to use in storage for state. Should be unique for each feature.\n   * @param context Context value for state\n   * @param storageType Storage type from to read state\n   *\n   * @returns State from the storage\n   */\n  readStateFromStorage<T>({\n    key,\n    context = '',\n    storageType = StorageSyncType.LOCAL_STORAGE,\n  }: {\n    key: string;\n    context?: string | Array<string>;\n    storageType?: StorageSyncType;\n  }): T {\n    const storage = getStorage(storageType, this.winRef);\n\n    return readFromStorage(\n      storage,\n      this.generateKeyWithContext(context, key)\n    ) as T;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StatePersistenceService } from '../../../state/services/state-persistence.service';\nimport { UserIdService } from '../facade/user-id.service';\nimport { AuthToken } from '../models/auth-token.model';\nimport { AuthRedirectStorageService } from './auth-redirect-storage.service';\nimport { AuthStorageService } from './auth-storage.service';\n\n/**\n * Auth state synced to browser storage.\n */\nexport interface SyncedAuthState {\n  userId?: string;\n  token?: AuthToken;\n  redirectUrl?: string;\n}\n\n/**\n * Responsible for saving the authorization data (userId, token, redirectUrl) in browser storage.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected userIdService: UserIdService,\n    protected authStorageService: AuthStorageService,\n    protected authRedirectStorageService: AuthRedirectStorageService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'auth';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.getAuthState(),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  protected getAuthState(): Observable<SyncedAuthState> {\n    return combineLatest([\n      this.authStorageService.getToken().pipe(\n        filter((state) => !!state),\n        map((state) => {\n          return {\n            ...state,\n          };\n        })\n      ),\n      this.userIdService.getUserId(),\n      this.authRedirectStorageService.getRedirectUrl(),\n    ]).pipe(\n      map(([authToken, userId, redirectUrl]) => {\n        let token = authToken;\n        if (token) {\n          token = { ...token };\n          // To minimize risk of user account hijacking we don't persist user refresh_token\n          delete token.refresh_token;\n        }\n        return { token, userId, redirectUrl };\n      })\n    );\n  }\n\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  protected onRead(state: SyncedAuthState) {\n    if (state?.token) {\n      this.authStorageService.setToken(state.token);\n    }\n    if (state?.redirectUrl) {\n      this.authRedirectStorageService.setRedirectUrl(state.redirectUrl);\n    }\n    if (state?.userId) {\n      this.userIdService.setUserId(state.userId);\n    } else {\n      this.userIdService.clearUserId();\n    }\n  }\n\n  /**\n   * Reads synchronously state from storage and returns it.\n   */\n  protected readStateFromStorage() {\n    return this.statePersistenceService.readStateFromStorage<SyncedAuthState>({\n      key: this.key,\n    });\n  }\n\n  /**\n   * Check synchronously in browser storage if user is logged in (required by transfer state reducer).\n   * For most cases `isUserLoggedIn` from the `AuthService` should be used instead of this.\n   */\n  public isUserLoggedIn(): boolean {\n    return Boolean(this.readStateFromStorage()?.token?.access_token);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AuthStatePersistenceService } from '../../auth/user-auth/services/auth-state-persistence.service';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig,\n  authStatePersistenceService?: AuthStatePersistenceService\n) {\n  if (transferState && config?.state?.ssrTransfer?.keys) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys,\n        Boolean(authStatePersistenceService?.isUserLoggedIn())\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType },\n  isLoggedIn: boolean\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { InjectionToken, Optional, PLATFORM_ID, Provider } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { AuthStatePersistenceService } from '../../auth/user-auth/services/auth-state-persistence.service';\nimport { Config } from '../../config/config-tokens';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n      [new Optional(), AuthStatePersistenceService],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\nimport { provideDefaultConfig } from '../config/config-providers';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorModel } from '../model/misc.model';\nimport { isDevMode } from '@angular/core';\n\n/**\n * Normalizes HttpErrorResponse to HttpErrorModel.\n *\n * Can be used as a safe and generic way for embodying http errors into\n * NgRx Action payload, as it will strip potentially unserializable parts from\n * it and warn in debug mode if passed error is not instance of HttpErrorModel\n * (which usually happens when logic in NgRx Effect is not sealed correctly)\n */\nexport function normalizeHttpError(\n  error: HttpErrorResponse | any\n): HttpErrorModel | undefined {\n  if (error instanceof HttpErrorResponse) {\n    const normalizedError: HttpErrorModel = {\n      message: error.message,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    };\n\n    // include backend's error details\n    if (Array.isArray(error.error.errors)) {\n      normalizedError.details = error.error.errors;\n    } else if (typeof error.error.error === 'string') {\n      normalizedError.details = [\n        {\n          type: error.error.error,\n          message: error.error.error_description,\n        },\n      ];\n    }\n\n    return normalizedError;\n  }\n\n  if (isDevMode()) {\n    console.error(\n      'Error passed to normalizeHttpError is not HttpErrorResponse instance',\n      error\n    );\n  }\n\n  return undefined;\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthConfigService } from '../../user-auth/services/auth-config.service';\nimport { ClientToken } from '../models/client-token.model';\n\n/**\n * Responsible for requesting from OAuth server `ClientToken` for a particular\n * auth client.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  /**\n   * Loads token with client authentication flow.\n   *\n   * @returns observable with ClientToken\n   */\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.authConfigService.getTokenEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.authConfigService.getClientId())\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.authConfigService.getClientSecret())\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../../util/normalize-http-error';\nimport { ClientToken } from '../../../client-auth/models/client-token.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication-token.service';\nimport { ClientAuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    ClientAuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(ClientAuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new ClientAuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new ClientAuthActions.LoadClientTokenFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\n\nexport const effects: any[] = [ClientTokenEffect];\n\nexport * from './client-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { loaderReducer } from '../../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/client-token.model';\nimport { ClientAuthState, CLIENT_TOKEN_DATA } from '../client-auth-state';\n\nexport function getReducers(): ActionReducerMap<ClientAuthState> {\n  return {\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ClientAuthState\n>> = new InjectionToken<ActionReducerMap<ClientAuthState>>(\n  'ClientAuthReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../../state/state.module';\nimport { CLIENT_AUTH_FEATURE } from './client-auth-state';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CLIENT_AUTH_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class ClientAuthStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { interceptors } from './http-interceptors/index';\nimport { ClientAuthStoreModule } from './store/client-auth-store.module';\n\n/**\n * Some of the OCC endpoints require Authorization header with the client token (eg. user registration).\n * This pattern should not be used in the frontend apps, but until OCC changes this requirement\n * we provide this module to support using those endpoints.\n *\n * After OCC improvements regarding client authentication this module can be safely removed.\n */\n@NgModule({\n  imports: [CommonModule, ClientAuthStoreModule],\n})\nexport class ClientAuthModule {\n  static forRoot(): ModuleWithProviders<ClientAuthModule> {\n    return {\n      ngModule: ClientAuthModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\nimport { Config, RootConfig } from '../config-tokens';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard,\n    @Inject(RootConfig) protected rootConfig: any\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          const initializerConfig = await initializer.configFactory();\n          // contribute configuration to rootConfig\n          deepMerge(this.rootConfig, initializerConfig);\n          // contribute configuration to global config\n          deepMerge(this.config, initializerConfig);\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n    tokenEndpoint: '/oauth/token',\n    revokeEndpoint: '/oauth/revoke',\n    loginUrl: '/oauth/authorize',\n    OAuthLibConfig: {\n      scope: '',\n      customTokenParameters: ['token_type'],\n      strictDiscoveryDocumentValidation: false,\n      skipIssuerCheck: true,\n      disablePKCE: true,\n      oidc: false,\n      clearHashAfterLogin: false,\n    },\n  },\n};\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthToken } from '../models/auth-token.model';\nimport { AuthStorageService } from './auth-storage.service';\nimport { OAuthLibWrapperService } from './oauth-lib-wrapper.service';\n\n/**\n * Extendable service for `AuthInterceptor`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthHttpHeaderService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AuthStorageService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected routingService: RoutingService,\n    protected occEndpoints: OccEndpointsService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Checks if request should be handled by this service (if it's OCC call).\n   */\n  public shouldCatchError(request: HttpRequest<any>): boolean {\n    return this.isOccUrl(request.url);\n  }\n\n  /**\n   * Adds `Authorization` header for OCC calls.\n   */\n  public alterRequest(request: HttpRequest<any>): HttpRequest<any> {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isOccUrl = this.isOccUrl(request.url);\n    if (!hasAuthorizationHeader && isOccUrl) {\n      return request.clone({\n        setHeaders: {\n          ...this.createAuthorizationHeader(),\n        },\n      });\n    }\n    return request;\n  }\n\n  protected isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  protected getAuthorizationHeader(request: HttpRequest<any>): string {\n    const rawValue = request.headers.get('Authorization');\n    return rawValue;\n  }\n\n  protected createAuthorizationHeader(): { Authorization?: string } {\n    let token;\n    this.authStorageService\n      .getToken()\n      .subscribe((tok) => (token = tok))\n      .unsubscribe();\n\n    if (token?.access_token) {\n      return {\n        Authorization: `${token.token_type || 'Bearer'} ${token.access_token}`,\n      };\n    }\n    return {};\n  }\n\n  /**\n   * Refreshes access_token and then retries the call with the new token.\n   */\n  public handleExpiredAccessToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<AuthToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: AuthToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  /**\n   * Logout user, redirected to login page and informs about expired session.\n   */\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService.coreLogout();\n    this.routingService.go({ cxRoute: 'login' });\n    this.globalMessageService.add(\n      {\n        key: 'httpHandlers.sessionExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  /**\n   * Attempts to refresh token if possible.\n   * If it is not possible calls `handleExpiredRefreshToken`.\n   *\n   * @return observable which omits new access_token. (Warn: might never emit!).\n   */\n  protected handleExpiredToken(): Observable<AuthToken> {\n    const stream = this.authStorageService.getToken();\n    let oldToken: AuthToken;\n    return stream.pipe(\n      tap((token: AuthToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.oAuthLibWrapperService.refreshToken();\n        } else if (!token.refresh_token) {\n          this.handleExpiredRefreshToken();\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: AuthToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: AuthToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type || 'Bearer'} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthConfigService } from '../services/auth-config.service';\nimport { AuthHttpHeaderService } from '../services/auth-http-header.service';\n\n/**\n * Responsible for catching auth errors and providing `Authorization` header for API calls.\n * Uses AuthHttpHeaderService for request manipulation and error handling. Interceptor only hooks into request send/received events.\n */\n@Injectable({ providedIn: 'root' })\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    protected authHttpHeaderService: AuthHttpHeaderService,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const shouldCatchError = this.authHttpHeaderService.shouldCatchError(\n      request\n    );\n\n    request = this.authHttpHeaderService.alterRequest(request);\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (this.isExpiredToken(errResponse) && shouldCatchError) {\n                return this.authHttpHeaderService.handleExpiredAccessToken(\n                  request,\n                  next\n                );\n              } else if (\n                // Refresh expired token\n                // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                errResponse.url.includes(\n                  this.authConfigService.getTokenEndpoint()\n                ) &&\n                errResponse.error.error === 'invalid_token'\n              ) {\n                this.authHttpHeaderService.handleExpiredRefreshToken();\n                return of<HttpEvent<any>>();\n              }\n\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(\n                  this.authConfigService.getTokenEndpoint()\n                ) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  this.authHttpHeaderService.handleExpiredRefreshToken();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  protected isExpiredToken(resp: HttpErrorResponse): boolean {\n    return resp.error?.errors?.[0]?.type === 'InvalidTokenError';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AuthConfigService } from '../services/auth-config.service';\nimport { AuthStorageService } from '../services/auth-storage.service';\n\n/**\n * This interceptor is dedicated for Hybris OAuth server which requires `Authorization` header for revoke token calls.\n */\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor(\n    protected authStorageService: AuthStorageService,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    return this.authStorageService.getToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (isTokenRevocationRequest) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type || 'Bearer'} ${\n                token.access_token\n              }`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    return request.url === this.authConfigService.getRevokeEndpoint();\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthInterceptor } from './auth.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { provideDefaultConfig } from '../../config/config-providers';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { AuthService } from './facade/auth.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStatePersistenceService } from './services/auth-state-persistence.service';\nimport { AuthStorageService } from './services/auth-storage.service';\n\n/**\n * Initialize the check for `token` or `code` in the url returned from the OAuth server.\n */\nexport function checkOAuthParamsInUrl(\n  authService: AuthService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig().then(() => {\n      // Wait for stable config is used, because with auth redirect would kick so quickly that the page would not be loaded correctly\n      authService.checkOAuthParamsInUrl();\n    });\n\n  return result;\n}\n\nexport function authStatePersistenceFactory(\n  authStatePersistenceService: AuthStatePersistenceService\n) {\n  const result = () => authStatePersistenceService.initSync();\n  return result;\n}\n\n/**\n * Authentication module for a user. Handlers requests for logged in users,\n * provides authorization services and storage for tokens.\n */\n@NgModule({\n  imports: [CommonModule, OAuthModule.forRoot()],\n})\nexport class UserAuthModule {\n  static forRoot(): ModuleWithProviders<UserAuthModule> {\n    return {\n      ngModule: UserAuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        {\n          provide: OAuthStorage,\n          useExisting: AuthStorageService,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: authStatePersistenceFactory,\n          deps: [AuthStatePersistenceService],\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: checkOAuthParamsInUrl,\n          deps: [AuthService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ClientAuthModule } from './client-auth/client-auth.module';\nimport { UserAuthModule } from './user-auth/user-auth.module';\n\n@NgModule({\n  imports: [CommonModule, ClientAuthModule.forRoot(), UserAuthModule.forRoot()],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SemanticPathService } from '../../../routing/configurable-routes/url-translation/semantic-path.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from '../services/auth-redirect.service';\n\n/**\n * Checks if there is currently logged in user.\n * Use to protect pages dedicated only for logged in users.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.authService.isUserLoggedIn().pipe(\n      map((isLoggedIn) => {\n        if (!isLoggedIn) {\n          this.authRedirectService.reportAuthGuard();\n          return this.router.parseUrl(this.semanticPathService.get('login'));\n        }\n        return isLoggedIn;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SemanticPathService } from '../../../routing/configurable-routes/url-translation/semantic-path.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from '../services/auth-redirect.service';\n\n/**\n * Checks if there isn't any logged in user.\n * Use to protect pages dedicated only for guests (eg. login page).\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.isUserLoggedIn().pipe(\n      map((isLoggedIn) => {\n        if (isLoggedIn) {\n          return this.router.parseUrl(this.semanticPathService.get('home'));\n        }\n        return !isLoggedIn;\n      })\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { NgModuleRef } from '@angular/core';\n\n/**\n * Will be thrown in case lazy loaded modules are loaded and instantiated.\n *\n * This event is thrown for cms driven lazy loaded feature modules amd it's\n * dependencies\n */\nexport class ModuleInitializedEvent {\n  /**\n   * Name/identifier of the feature associated with this module.\n   *\n   * You can differentiate between feature and dependency modules, as the latter\n   * won't have thus property set.\n   */\n  feature?: string;\n  /**\n   * Reference fpr lazy loaded module instance\n   */\n  moduleRef: NgModuleRef<any>;\n}\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together.\n *\n * Can be used to instantiate lazy loaded modules with dependency modules,\n * so lazy loaded module can use instances provided in all dependency modules.\n *\n * Injector tries to resolve token in all Injector, taking into account the order\n * in which they were provided in complementaryInjectors and fallbacks to the\n * mainInjector.\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [...this.complementaryInjectors]) {\n      // First we are resolving providers provided at Self level\n      // in all complementary injectors...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import {\n  Compiler,\n  Injectable,\n  Injector,\n  NgModuleFactory,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  combineLatest,\n  ConnectableObservable,\n  from,\n  Observable,\n  of,\n  queueScheduler,\n  Subscription,\n} from 'rxjs';\nimport { map, observeOn, publishReplay, switchMap, tap } from 'rxjs/operators';\nimport { createFrom } from '../util/create-from';\nimport { ModuleInitializedEvent } from './events/module-initialized-event';\nimport { EventService } from '../event/event.service';\nimport { CombinedInjector } from '../util/combined-injector';\n\n/**\n * Utility service for managing dynamic imports of Angular services\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyModulesService implements OnDestroy {\n  /**\n   * Expose lazy loaded module references\n   */\n  readonly modules$: Observable<NgModuleRef<any>> = this.events\n    .get(ModuleInitializedEvent)\n    .pipe(\n      map((event) => event.moduleRef),\n      publishReplay()\n    );\n\n  private readonly dependencyModules = new Map<any, NgModuleRef<any>>();\n  private readonly eventSubscription: Subscription;\n\n  constructor(\n    protected compiler: Compiler,\n    protected injector: Injector,\n    protected events: EventService\n  ) {\n    this.eventSubscription = (this.modules$ as ConnectableObservable<\n      NgModuleRef<any>\n    >).connect();\n  }\n\n  /**\n   * Resolves module instance based dynamic import wrapped in an arrow function\n   *\n   * New module instance will be created with each call.\n   *\n   * @param moduleFunc\n   * @param feature\n   */\n  public resolveModuleInstance(\n    moduleFunc: () => Promise<any>,\n    feature?: string,\n    dependencyModuleRefs: NgModuleRef<any>[] = []\n  ): Observable<NgModuleRef<any>> {\n    const parentInjector = dependencyModuleRefs.length\n      ? new CombinedInjector(\n          this.injector,\n          dependencyModuleRefs.map((moduleRef) => moduleRef.injector)\n        )\n      : this.injector;\n\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      map(([moduleFactory]) => moduleFactory.create(parentInjector)),\n      tap((moduleRef) =>\n        this.events.dispatch(\n          createFrom(ModuleInitializedEvent, {\n            feature,\n            moduleRef,\n          })\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns dependency module instance and initializes it when needed.\n   *\n   * Module will be instantiated only once, at first request for a this specific module class\n   */\n  public resolveDependencyModuleInstance(\n    moduleFunc: () => Promise<any>\n  ): Observable<NgModuleRef<any>> {\n    // We grab moduleFactory symbol from module function and if there is no\n    // such a module created yet, we create it and store it in a\n    // dependencyModules map\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      map(([moduleFactory, module]) => {\n        if (!this.dependencyModules.has(module)) {\n          const moduleRef = moduleFactory.create(this.injector);\n          this.dependencyModules.set(module, moduleRef);\n        }\n\n        return this.dependencyModules.get(module);\n      }),\n      tap((moduleRef) =>\n        this.events.dispatch(\n          createFrom(ModuleInitializedEvent, {\n            moduleRef,\n          })\n        )\n      )\n    );\n  }\n\n  /**\n   * Resolve any Angular module from an function that return module or moduleFactory\n   */\n  private resolveModuleFactory(\n    moduleFunc: () => Promise<any>\n  ): Observable<[NgModuleFactory<any>, any]> {\n    return from(moduleFunc()).pipe(\n      switchMap((module) =>\n        module instanceof NgModuleFactory\n          ? (of([module, module]) as Observable<[NgModuleFactory<any>, any]>)\n          : combineLatest([\n              // using compiler here is for jit compatibility, there is no overhead\n              // for aot production builds as it will be stubbed\n              from(this.compiler.compileModuleAsync(module as any)),\n              of(module),\n            ])\n      ),\n      observeOn(queueScheduler)\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.eventSubscription) {\n      this.eventSubscription.unsubscribe();\n    }\n\n    // clean up all initialized dependency modules\n    this.dependencyModules.forEach((dependency) => dependency.destroy());\n  }\n}\n","import {\n  AbstractType,\n  Injectable,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\nimport { LazyModulesService } from './lazy-modules.service';\nimport { Observable } from 'rxjs';\nimport { filter, map, scan, startWith } from 'rxjs/operators';\n\nconst NOT_FOUND_SYMBOL: any = {};\n\n/**\n * UnifiedInjector provides a way to get instances of tokens not only once, from the root injector,\n * but also from lazy loaded module injectors that can be initialized over time.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnifiedInjector {\n  /**\n   * Gather all the injectors, with the root injector as a first one\n   *\n   */\n  readonly injectors$: Observable<Injector> = this.lazyModules.modules$.pipe(\n    map((moduleRef) => moduleRef.injector),\n    startWith(this.rootInjector)\n  );\n\n  constructor(\n    protected rootInjector: Injector,\n    protected lazyModules: LazyModulesService\n  ) {}\n\n  /**\n   * Gen instances for specified tokens.\n   *\n   * When notFoundValue is provided, it will consistently emit once per injector,\n   * even if injector doesn't contain instances for specified token.\n   * Otherwise, emissions will only involve cases, where new instances will be found.\n   *\n   * @param token\n   * @param notFoundValue\n   */\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T\n  ): Observable<T> {\n    return this.injectors$.pipe(\n      map((injector, index) =>\n        injector.get<T>(\n          token,\n          notFoundValue ?? NOT_FOUND_SYMBOL,\n          // we want to get only Self instances from all injectors except the\n          // first one, which is a root injector\n          index ? InjectFlags.Self : undefined\n        )\n      ),\n      filter((instance) => instance !== NOT_FOUND_SYMBOL)\n    );\n  }\n\n  /**\n   * Get multi provided instances for a specified token\n   *\n   * @param token\n   */\n  getMulti<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>\n  ): Observable<T[]>;\n  getMulti<T>(token: any): Observable<T>;\n  getMulti<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T> | any\n  ): Observable<T[]> {\n    return this.get(token, []).pipe(\n      filter((instances) => {\n        if (!Array.isArray(instances)) {\n          throw new Error(\n            `Multi-providers mixed with single providers for ${token.toString()}!`\n          );\n        }\n        return instances.length > 0;\n      }),\n      scan((acc, services) => [...acc, ...services], [])\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\n/**\n * Will grab last synchronously available value from the observable stream\n * at the time of the call.\n *\n * Should be used with caution, as it's not a legitimate way for getting value\n * from the observable. Observable composition or standard subscribe method\n * should be used for most of the cases.\n *\n * @param source\n */\nexport function getLastValueSync<T>(source: Observable<T>): T | undefined {\n  let value: T | undefined;\n  source.subscribe((emission) => (value = emission)).unsubscribe();\n  return value;\n}\n","import { Injectable, InjectionToken, OnDestroy } from '@angular/core';\nimport { Observable, OperatorFunction, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { UnifiedInjector } from '../lazy-loading/unified-injector';\nimport { getLastValueSync } from './rxjs/get-last-value-sync';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService implements OnDestroy {\n  protected subscriptions = new Subscription();\n\n  constructor(protected unifiedInjector: UnifiedInjector) {\n    // Clear cached converters when new injectors appear\n    const cacheResetLogic = this.unifiedInjector.injectors$.pipe(\n      tap(() => this.converters.clear())\n    );\n\n    this.subscriptions.add(cacheResetLogic.subscribe());\n  }\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = getLastValueSync(\n        this.unifiedInjector.getMulti(injectionToken)\n      );\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config-providers';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n        quantity, // The \"quantity\" parameter is required for the b2b add to cart endpoint.\n      },\n      { code: productCode, qty: quantity } // The \"qty\" parameter is used for the base b2c add to cart endpoint.\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\nimport { provideDefaultConfig } from '../../../config/config-providers';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   * @param termsChecked The `boolean value` whether the terms were accepted or not\n   */\n  abstract placeOrder(\n    userId: string,\n    cartId: string,\n    termsChecked: boolean\n  ): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CheckoutCostCenterAdapter {\n  /**\n   * Abstract method used to set cost center to cart\n   *\n   * @param userId: user id\n   * @param cartId: cart id\n   * @param costCenterId: cost center id\n   */\n  abstract setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart>;\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport { CheckoutAdapter } from './checkout.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(\n    userId: string,\n    cartId: string,\n    termsChecked: boolean\n  ): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId, termsChecked);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutCostCenterAdapter } from './checkout-cost-center.adapter';\nimport { Cart } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutCostCenterConnector {\n  constructor(protected adapter: CheckoutCostCenterAdapter) {}\n\n  setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart> {\n    return this.adapter.setCostCenter(userId, cartId, costCenterId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { Observable } from 'rxjs';\nimport { PaymentType } from '../../../model/cart.model';\n\nexport abstract class PaymentTypeAdapter {\n  /**\n   * Abstract method used to get available payment types\n   */\n  abstract loadPaymentTypes(): Observable<PaymentType[]>;\n\n  /**\n   * Abstract method used to set payment type to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param typeCode\n   * @param poNumber: purchase order number\n   */\n  abstract setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    poNumber?: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { PaymentTypeAdapter } from './payment-type.adapter';\nimport { PaymentType } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeConnector {\n  constructor(protected adapter: PaymentTypeAdapter) {}\n\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.adapter.loadPaymentTypes();\n  }\n\n  setPaymentType(\n    userId: string,\n    cartId: string,\n    typeCode: string,\n    poNumber?: string\n  ): Observable<any> {\n    return this.adapter.setPaymentType(userId, cartId, typeCode, poNumber);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { PaymentType } from '../../../model/cart.model';\n\nexport const PAYMENT_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentType>\n>('PaymentTypeNormalizer');\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../../model/replenishment-order.model';\n\nexport abstract class CheckoutReplenishmentOrderAdapter {\n  /**\n   * Abstract method used to schedule a replenishment order.\n   *\n   * @param cartId The `cartId` for cart used for scheduling a replenishment order\n   * @param scheduleReplenishmentForm The `object` that contains the form data for replenishment\n   * @param termsChecked The `boolean value` whether the terms were accepted or not\n   * @param userId The `userId` for given user\n   */\n  abstract scheduleReplenishmentOrder(\n    cartId: string,\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean,\n    userId: string\n  ): Observable<ReplenishmentOrder>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../../model/replenishment-order.model';\nimport { CheckoutReplenishmentOrderAdapter } from './checkout-replenishment-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutReplenishmentOrderConnector {\n  constructor(protected adapter: CheckoutReplenishmentOrderAdapter) {}\n\n  public scheduleReplenishmentOrder(\n    cartId: string,\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean,\n    userId: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.scheduleReplenishmentOrder(\n      cartId,\n      scheduleReplenishmentForm,\n      termsChecked,\n      userId\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../../model/replenishment-order.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const REPLENISHMENT_ORDER_NORMALIZER = new InjectionToken<\n  Converter<any, ReplenishmentOrder>\n>('ReplenishmentOrderNormalizer');\n\nexport const REPLENISHMENT_ORDER_FORM_SERIALIZER = new InjectionToken<\n  Converter<ScheduleReplenishmentForm, any>\n>('ReplenishmentOrderFormSerializer');\n","import { Injectable } from '@angular/core';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","export class TimeUtils {\n  /**\n   * Returns the local timezone in a format that can be appended to a date-like string.\n   * @param invert (default: false): returns the opposite operator relative to the local timezone\n   *\n   * @example\n   * When locale is set to a CEST timezone, `getLocalTimezoneOffset()` returns '+02:00'\n   * and `getLocalTimezoneOffset(true)` returns '-02:00'\n   */\n  static getLocalTimezoneOffset(invert?: boolean): string {\n    const offset = new Date().getTimezoneOffset() * -1;\n    const hours = Math.abs(Math.floor(offset / 60))\n      .toString()\n      .padStart(2, '0');\n    const minutes = (offset % 60).toString().padStart(2, '0');\n    const sign = offset >= 0 ? (invert ? `-` : `+`) : invert ? `+` : `-`;\n    return `${sign}${hours}:${minutes}`;\n  }\n\n  static convertDateToDatetime(date: string, endOfDay?: boolean): string {\n    return `${date}T${\n      !endOfDay ? '00:00:00' : '23:59:59'\n    }${TimeUtils.getLocalTimezoneOffset()}`;\n  }\n\n  static convertDatetimeToDate(datetime: string): string {\n    return new Date(\n      `${datetime.substring(0, 19)}${TimeUtils.getLocalTimezoneOffset(true)}`\n    )\n      .toISOString()\n      .substring(0, 10);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TimeUtils } from '../../../../util/time-utils';\nimport { ScheduleReplenishmentForm } from '../../../../model/replenishment-order.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReplenishmentOrderFormSerializer\n  implements\n    Converter<Occ.ScheduleReplenishmentForm, ScheduleReplenishmentForm> {\n  convert(\n    source: Occ.ScheduleReplenishmentForm,\n    target?: ScheduleReplenishmentForm\n  ): ScheduleReplenishmentForm {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.replenishmentStartDate) {\n      target.replenishmentStartDate = this.convertDate(\n        source.replenishmentStartDate\n      );\n    }\n\n    return target;\n  }\n\n  /**\n   * Adds the current timestamp (including timezone offset) to a date string in the format YYYY-mm-dd\n   * @Example\n   * Converts 2021-10-15 to 2021-10-15T15:38:05-05:00\n   */\n  private convertDate(date: string): string {\n    const localTime = new Date().toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false,\n    });\n    return `${date}T${localTime}:00${TimeUtils.getLocalTimezoneOffset()}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OrderEntry } from '../../../../model/order.model';\nimport { ReplenishmentOrder } from '../../../../model/replenishment-order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReplenishmentOrderNormalizer\n  implements Converter<Occ.ReplenishmentOrder, ReplenishmentOrder> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ReplenishmentOrder,\n    target?: ReplenishmentOrder\n  ): ReplenishmentOrder {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCheckoutConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        setDeliveryAddress:\n          'users/${userId}/carts/${cartId}/addresses/delivery',\n        placeOrder: 'users/${userId}/orders?fields=FULL',\n      },\n    },\n  },\n};\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CheckoutCostCenterAdapter } from '../../../checkout/connectors/cost-center/checkout-cost-center.adapter';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutCostCenterAdapter implements CheckoutCostCenterAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  setCostCenter(\n    userId: string,\n    cartId: string,\n    costCenterId: string\n  ): Observable<Cart> {\n    let httpParams = new HttpParams().set('costCenterId', costCenterId);\n    /* tslint:disable:max-line-length */\n    httpParams = httpParams.set(\n      'fields',\n      'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user'\n    );\n    // TODO(#8877): Should we improve configurable endpoints for this use case?\n\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/costcenter',\n        {},\n        {\n          params: httpParams,\n        }\n      )\n      .pipe(this.converter.pipeable(CART_NORMALIZER));\n  }\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_LIST_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<Address>>\n>('AddressesNormalizer');\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.occEndpoints.getUrl('setDeliveryAddress', { userId, cartId }),\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { PAYMENT_TYPE_NORMALIZER } from '../../../checkout/connectors/payment-type/converters';\nimport { PaymentTypeAdapter } from '../../../checkout/connectors/payment-type/payment-type.adapter';\nimport { Cart, PaymentType } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst ENDPOINT_PAYMENT_TYPES = 'paymenttypes';\n\n@Injectable()\nexport class OccCheckoutPaymentTypeAdapter implements PaymentTypeAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadPaymentTypes(): Observable<PaymentType[]> {\n    return this.http\n      .get<Occ.PaymentTypeList>(\n        this.occEndpoints.getEndpoint(ENDPOINT_PAYMENT_TYPES)\n      )\n      .pipe(\n        map((paymentTypeList) => paymentTypeList.paymentTypes),\n        this.converter.pipeableMany(PAYMENT_TYPE_NORMALIZER)\n      );\n  }\n\n  setPaymentType(\n    userId: string,\n    cartId: string,\n    paymentType: string,\n    purchaseOrderNumber?: string\n  ): Observable<Cart> {\n    let httpParams = new HttpParams().set('paymentType', paymentType);\n    if (purchaseOrderNumber !== undefined) {\n      httpParams = httpParams.set('purchaseOrderNumber', purchaseOrderNumber);\n    }\n    /* tslint:disable:max-line-length */\n    httpParams = httpParams.set(\n      'fields',\n      'DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user'\n    );\n    // TODO(#8877): Should we improve configurable endpoints for this use case?\n\n    return this.http\n      .put(\n        this.getCartEndpoint(userId) + cartId + '/paymenttype',\n        {},\n        {\n          params: httpParams,\n        }\n      )\n      .pipe(this.converter.pipeable(CART_NORMALIZER));\n  }\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { HttpParamsURIEncoder } from '../../../util/http-params-uri.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new HttpParamsURIEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new HttpParamsURIEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Address, AddressValidation } from '../../model/address.model';\nimport { CardType, PaymentDetails, PaymentType } from '../../model/cart.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\nimport {\n  ORDER_TYPE,\n  ReplenishmentOrder,\n} from '../../model/replenishment-order.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\nexport const GET_PAYMENT_TYPES_PROCESS_ID = 'getPaymentTypes';\nexport const SET_COST_CENTER_PROCESS_ID = 'setCostCenter';\nexport const PLACED_ORDER_PROCESS_ID = 'placeOrder';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  poNumber: {\n    po: string;\n    costCenter: string;\n  };\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order | ReplenishmentOrder;\n}\n\nexport interface PaymentTypesState {\n  entities: { [code: string]: PaymentType };\n  selected: string;\n}\n\nexport interface OrderTypesState {\n  selected: ORDER_TYPE;\n}\n\nexport interface PaymentTypesState {\n  entities: { [code: string]: PaymentType };\n  selected: string;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n  paymentTypes: PaymentTypesState;\n  orderType: OrderTypesState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  PLACED_ORDER_PROCESS_ID,\n  SET_COST_CENTER_PROCESS_ID,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\nexport const CLEAR_PLACE_ORDER = '[Checkout] Clear Place Order';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport const SET_COST_CENTER = '[Checkout] Set Cost Center';\nexport const SET_COST_CENTER_FAIL = '[Checkout] Set Cost Center Fail';\nexport const SET_COST_CENTER_SUCCESS = '[Checkout] Set Cost Center Success';\nexport const RESET_SET_COST_CENTER_PROCESS =\n  '[Checkout] Reset Set Cost Center Process';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder extends StateUtils.EntityLoadAction {\n  readonly type = PLACE_ORDER;\n  constructor(\n    public payload: { userId: string; cartId: string; termsChecked: boolean }\n  ) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrderFail extends StateUtils.EntityFailAction {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class PlaceOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ClearPlaceOrder extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_PLACE_ORDER;\n  constructor() {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class SetCostCenter extends StateUtils.EntityLoadAction {\n  readonly type = SET_COST_CENTER;\n  constructor(\n    public payload: { userId: string; cartId: string; costCenterId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport class SetCostCenterFail extends StateUtils.EntityFailAction {\n  readonly type = SET_COST_CENTER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID, payload);\n  }\n}\n\nexport class SetCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_COST_CENTER_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport class ResetSetCostCenterProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_COST_CENTER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData\n  | SetCostCenter\n  | SetCostCenterFail\n  | SetCostCenterSuccess\n  | ResetSetCostCenterProcess;\n","import { Action } from '@ngrx/store';\nimport { ORDER_TYPE } from '../../../model/replenishment-order.model';\n\nexport const SET_ORDER_TYPE = '[Checkout] Set Order Type';\n\nexport class SetOrderType implements Action {\n  readonly type = SET_ORDER_TYPE;\n  constructor(public payload: ORDER_TYPE) {}\n}\n\nexport type OrderTypesActions = SetOrderType;\n","import { Action } from '@ngrx/store';\nimport { PaymentType, Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';\n\nexport const LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';\nexport const LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';\nexport const LOAD_PAYMENT_TYPES_SUCCESS =\n  '[Checkout] Load Payment Types Success';\nexport const RESET_LOAD_PAYMENT_TYPES_PROCESS_ID =\n  '[Checkout] Reset Load Payment Type Process';\n\nexport const SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';\nexport const SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';\nexport const SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';\n\nexport class LoadPaymentTypes extends EntityLoadAction {\n  readonly type = LOAD_PAYMENT_TYPES;\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class LoadPaymentTypesFail extends EntityFailAction {\n  readonly type = LOAD_PAYMENT_TYPES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class LoadPaymentTypesSuccess extends EntitySuccessAction {\n  readonly type = LOAD_PAYMENT_TYPES_SUCCESS;\n  constructor(public payload: PaymentType[]) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadPaymentTypesProcess extends EntityLoaderResetAction {\n  readonly type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentType implements Action {\n  readonly type = SET_PAYMENT_TYPE;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      typeCode: string;\n      poNumber?: string;\n    }\n  ) {}\n}\n\nexport class SetPaymentTypeFail implements Action {\n  readonly type = SET_PAYMENT_TYPE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class SetPaymentTypeSuccess implements Action {\n  readonly type = SET_PAYMENT_TYPE_SUCCESS;\n  constructor(public payload: Cart) {}\n}\n\nexport type PaymentTypesAction =\n  | LoadPaymentTypes\n  | LoadPaymentTypesFail\n  | LoadPaymentTypesSuccess\n  | ResetLoadPaymentTypesProcess\n  | SetPaymentType\n  | SetPaymentTypeFail\n  | SetPaymentTypeSuccess;\n","import {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../../model/replenishment-order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PLACED_ORDER_PROCESS_ID } from '../checkout-state';\n\nexport const SCHEDULE_REPLENISHMENT_ORDER =\n  '[Checkout] Schedule Replenishment Order';\nexport const SCHEDULE_REPLENISHMENT_ORDER_SUCCESS =\n  '[Checkout] Schedule Replenishment Order Success';\nexport const SCHEDULE_REPLENISHMENT_ORDER_FAIL =\n  '[Checkout] Schedule Replenishment Order Fail';\nexport const CLEAR_SCHEDULE_REPLENISHMENT_ORDER =\n  '[Checkout] Clear Schedule Replenishment Data';\n\nexport class ScheduleReplenishmentOrder extends StateUtils.EntityLoadAction {\n  readonly type = SCHEDULE_REPLENISHMENT_ORDER;\n  constructor(\n    public payload: {\n      cartId: string;\n      scheduleReplenishmentForm: ScheduleReplenishmentForm;\n      termsChecked: boolean;\n      userId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ScheduleReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SCHEDULE_REPLENISHMENT_ORDER_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ScheduleReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  readonly type = SCHEDULE_REPLENISHMENT_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class ClearScheduleReplenishmentOrderAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_SCHEDULE_REPLENISHMENT_ORDER;\n  constructor() {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n  }\n}\n\nexport type ReplenishmentOrderActions =\n  | ScheduleReplenishmentOrder\n  | ScheduleReplenishmentOrderSuccess\n  | ScheduleReplenishmentOrderFail\n  | ClearScheduleReplenishmentOrderAction;\n","/**\n * Indicates that a user has successfully placed an order\n */\nexport class OrderPlacedEvent {\n  code: string;\n}\n","import { Injectable } from '@angular/core';\nimport { StateEventService } from '../../state/event/state-event.service';\nimport { CheckoutActions } from '../store/actions/index';\nimport { OrderPlacedEvent } from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutEventBuilder {\n  constructor(protected stateEventService: StateEventService) {\n    this.register();\n  }\n\n  /**\n   * Registers checkout events\n   */\n  protected register(): void {\n    this.orderPlacedEvent();\n  }\n\n  /**\n   * Register an order successfully placed event\n   */\n  protected orderPlacedEvent(): void {\n    this.stateEventService.register({\n      action: CheckoutActions.PLACE_ORDER_SUCCESS,\n      event: OrderPlacedEvent,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CheckoutEventBuilder } from './checkout-event.builder';\n\n@NgModule({})\nexport class CheckoutEventModule {\n  constructor(_checkoutEventBuilder: CheckoutEventBuilder) {}\n}\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged, map } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/index';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Get last entry for specific product code from cart.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getLastEntry(\n    cartId: string,\n    productCode: string\n  ): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId)),\n      map((entries) => {\n        const filteredEntries = entries.filter(\n          (entry) => entry.product.code === productCode\n        );\n        return filteredEntries\n          ? filteredEntries[filteredEntries.length - 1]\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get first entry from cart matching the specified product code\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string): void {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n\n  /**\n   * Reloads the cart with specified id.\n   *\n   * @param cartId\n   * @param extraData\n   */\n  reloadCart(cartId: string, extraData?: { active: boolean }): void {\n    this.userIdService.invokeWithUserId((userId) =>\n      this.store.dispatch(\n        new CartActions.LoadCart({\n          userId,\n          cartId,\n          extraData,\n        })\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig?.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/user-auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateByUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { Injectable, InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { RoutingConfigService } from '../../configurable-routes/routing-config.service';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\nimport { CHANGE_NEXT_PAGE_CONTEXT } from '../actions/router.action';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: undefined,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case CHANGE_NEXT_PAGE_CONTEXT: {\n      return state.nextState\n        ? {\n            ...state,\n            nextState: { ...state.nextState, context: action.payload },\n          }\n        : state;\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: {\n          ...action.payload.routerState,\n          context:\n            // we want to preserve already resolved context,\n            // in case it was changed while navigating\n            state.nextState?.context ?? action.payload.routerState.context,\n        },\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\n@Injectable()\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n    let urlString = '';\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      urlString +=\n        '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n\n      // we use semantic route information embedded from any parent route\n      if (state.data?.cxRoute) {\n        semanticRoute = state.data?.cxRoute;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n\n    // If `semanticRoute` couldn't be already recognized using `data.cxRoute` property\n    // let's lookup the routing configuration to find the semantic route that has exactly the same configured path as the current URL.\n    // This will work only for simple URLs without any dynamic routing parameters.\n    semanticRoute = semanticRoute || this.lookupSemanticRoute(urlString);\n\n    const { params } = state;\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url: routerState.url,\n      queryParams: routerState.root.queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n\n  /**\n   * Returns the semantic route name for given page label.\n   *\n   * *NOTE*: It works only for simple static urls that are equal to the page label\n   * of cms-driven content page. For example: `/my-account/address-book`.\n   *\n   * It doesn't work for URLs with dynamic parameters. But such case can be handled\n   * by reading the defined `data.cxRoute` from the Angular Routes.\n   *\n   * @param path path to be found in the routing config\n   */\n  private lookupSemanticRoute(path: string): string {\n    // Page label is assumed to start with `/`, but Spartacus configured paths\n    // don't start with slash. So we remove the leading slash:\n    return this.routingConfig.getRouteName(path.substr(1));\n  }\n\n  constructor(private routingConfig: RoutingConfigService) {}\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\nimport { MultiCartService } from '../../cart/facade/multi-cart.service';\nimport { RouterState, RoutingService } from '../../routing/index';\n\n/**\n * Interceptor that handles \"Cart not found\" errors while a user is in a checkout step.\n *\n * When a user doing a checkout has a \"Cart not found\" error, he is redirected to checkout and the cart is reloaded.\n * If a \"Cart not found\" error happens and the user is not on checkout, this interceptor does not perform any actions.\n */\n@Injectable({ providedIn: 'root' })\nexport class CheckoutCartInterceptor implements HttpInterceptor {\n  constructor(\n    protected routingService: RoutingService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.routingService.getRouterState().pipe(\n      take(1),\n      switchMap((state: RouterState) => {\n        return next.handle(request).pipe(\n          catchError((response: any) => {\n            if (\n              response instanceof HttpErrorResponse &&\n              this.isUserInCheckoutRoute(state.state?.semanticRoute)\n            ) {\n              if (this.isCartNotFoundError(response)) {\n                this.routingService.go({ cxRoute: 'cart' });\n\n                const cartCode = this.getCartIdFromError(response);\n                if (cartCode) {\n                  this.multiCartService.reloadCart(cartCode);\n                }\n              }\n            }\n            return throwError(response);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Returns true if the parameter semantic route is part of \"checkout\"\n   * Checkout semantic routes:\n   * checkout\n   * checkoutPaymentType\n   * CheckoutShippingAddress\n   * checkoutDeliveryMode\n   * checkoutPaymentDetails\n   * checkoutReviewOrder\n   * checkoutLogin\n   * @param semanticRoute\n   */\n  protected isUserInCheckoutRoute(semanticRoute: string): boolean {\n    return semanticRoute?.toLowerCase().startsWith('checkout');\n  }\n\n  /**\n   * Checks of the error is for a cart not found, i.e. the cart doesn't exist anymore\n   *\n   * @param response\n   */\n  protected isCartNotFoundError(response: HttpErrorResponse): boolean {\n    return (\n      response.status === 400 &&\n      response.error?.errors?.[0]?.type === 'CartError' &&\n      response.error?.errors?.[0]?.reason === 'notFound'\n    );\n  }\n\n  protected getCartIdFromError(response: HttpErrorResponse): string {\n    return response.error?.errors?.[0]?.subject;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CheckoutCartInterceptor } from './checkout-cart.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CheckoutCartInterceptor,\n    multi: true,\n  },\n];\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = null;\nexport const activeCartDefaultState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartDefaultState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartDefaultState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return state === activeCartInitialState\n        ? activeCartInitialState\n        : activeCartDefaultState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  EMPTY,\n  Observable,\n  of,\n  Subscription,\n  timer,\n  using,\n} from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  pairwise,\n  shareReplay,\n  switchMap,\n  switchMapTo,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { UserIdService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { activeCartInitialState } from '../store/reducers/multi-cart.reducer';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService implements OnDestroy {\n  private activeCart$: Observable<Cart>;\n  protected subscription = new Subscription();\n\n  // This stream is used for referencing carts in API calls.\n  private activeCartId$ = this.userIdService.getUserId().pipe(\n    // We want to wait with initialization of cartId until we have userId initialized\n    // We have take(1) to not trigger this stream, when userId changes.\n    take(1),\n    switchMapTo(this.store),\n    select(MultiCartSelectors.getActiveCartId),\n    // We also wait until we initialize cart from localStorage. Before that happens cartId in store === null\n    filter((cartId) => cartId !== activeCartInitialState),\n    map((cartId) => {\n      if (cartId === '') {\n        // We fallback to current when we don't have particular cart id -> cartId === '', because that's how you reference latest user cart.\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected multiCartService: MultiCartService,\n    protected userIdService: UserIdService\n  ) {\n    this.initActiveCart();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected initActiveCart() {\n    // Any change of user id is also interesting for us, because we have to merge/load/switch cart in those cases.\n    this.subscription.add(\n      this.userIdService\n        .getUserId()\n        .pipe(\n          // We never trigger cart merge/load on app initialization here and that's why we wait with pairwise for a change of userId (not initialization).\n          pairwise(),\n          switchMap(([previousUserId, userId]) =>\n            // We need cartId once we have the previous and current userId. We don't want to subscribe to cartId stream before.\n            combineLatest([\n              of(previousUserId),\n              of(userId),\n              this.activeCartId$,\n            ]).pipe(take(1))\n          )\n        )\n        .subscribe(([previousUserId, userId, cartId]) => {\n          // Only change of user and not a logout (current user id !== anonymous) should trigger loading mechanism\n          if (this.isJustLoggedIn(userId, previousUserId)) {\n            this.loadOrMerge(cartId, userId, previousUserId);\n          }\n        })\n    );\n\n    // Stream for getting the cart value\n    const activeCartValue$ = this.cartSelector$.pipe(\n      map((cartEntity: ProcessesLoaderState<Cart>): {\n        cart: Cart;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart))\n    );\n\n    // Responsible for loading cart when it's not (eg. app initialization when we have only cart id)\n    const activeCartLoading$ = activeCartValue$.pipe(\n      withLatestFrom(this.activeCartId$, this.userIdService.getUserId()),\n      tap(([{ cart, loaded, isStable }, cartId, userId]) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId, userId);\n        }\n      })\n    );\n\n    this.activeCart$ = using(\n      () => activeCartLoading$.subscribe(),\n      () => activeCartValue$\n    ).pipe(\n      // Normalization for empty cart value. It will always be returned as empty object.\n      map(({ cart }) => (cart ? cart : {})),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      withLatestFrom(this.userIdService.getUserId()),\n      map(([cart, userId]) => getCartIdByUserId(cart, userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns last cart entry for provided product code.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param productCode\n   */\n  getLastEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getLastEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(\n    cartId: string,\n    userId: string,\n    previousUserId: string\n  ): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    // cartId will be defined (not '', null, undefined)\n    if (cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else if (\n      userId !== previousUserId &&\n      userId !== OCC_USER_ID_ANONYMOUS &&\n      previousUserId !== OCC_USER_ID_ANONYMOUS\n    ) {\n      // This case covers the case when you are logged in and then asm user logs in and you don't want to merge, but only load emulated user cart\n      // Similarly when you are logged in as asm user and you logout and want to resume previous user session\n      this.multiCartService.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    } else {\n      // We have particular cart locally, but we logged in, so we need to combine this with current cart or make it ours.\n      this.multiCartService.mergeToCurrentCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string, userId: string): void {\n    // We want to load cart in every case apart from anonymous user and current cart combination\n    if (!(userId === OCC_USER_ID_ANONYMOUS && cartId === OCC_CART_ID_CURRENT)) {\n      this.multiCartService.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge()\n      .pipe(withLatestFrom(this.userIdService.getUserId()))\n      .subscribe(([cartState, userId]) => {\n        this.multiCartService.addEntries(\n          userId,\n          getCartIdByUserId(cartState.value, userId),\n          entriesToAdd\n        );\n      });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(\n    cartState: ProcessesLoaderState<Cart>,\n    cartId: string\n  ) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      withLatestFrom(this.activeCartId$),\n      filter(([cartState, cartId]) => !this.isCartCreating(cartState, cartId)),\n      map(([cartState]) => cartState),\n      take(1),\n      withLatestFrom(this.userIdService.getUserId()),\n      tap(([cartState, userId]) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (this.isEmpty(cartState.value) && userId !== OCC_USER_ID_ANONYMOUS) {\n          this.load(OCC_CART_ID_CURRENT, userId);\n        }\n      }),\n      switchMap(() => {\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      withLatestFrom(this.userIdService.getUserId()),\n      filter(\n        ([cartState, userId]) =>\n          userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      tap(([cartState, userId]) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n      }),\n      switchMap(() => {\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      withLatestFrom(this.activeCartId$),\n      filter(([cartState, cartId]) => !this.isCartCreating(cartState, cartId)),\n      map(([cartState]) => cartState),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart()\n      .pipe(withLatestFrom(this.userIdService.getUserId()))\n      .subscribe(([cartState, userId]) => {\n        this.multiCartService.addEntry(\n          userId,\n          getCartIdByUserId(cartState.value, userId),\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartService.removeEntry(userId, cartId, entry.entryNumber);\n      });\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartService.updateEntry(\n          userId,\n          cartId,\n          entryNumber,\n          quantity\n        );\n      });\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.activeCartId$\n      .pipe(withLatestFrom(this.userIdService.getUserId()), take(1))\n      .subscribe(([cartId, userId]) => {\n        this.multiCartService.assignEmail(cartId, userId, email);\n      });\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  // TODO: Make cart required param in 4.0 and drop the subscribe/unsubscribe.\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(cart?: Cart): boolean {\n    if (!cart) {\n      this.activeCart$\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n    }\n    const cartUser = cart?.user;\n    return (\n      cartUser &&\n      (cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n        this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n        this.addEntriesGuestMerge(cartEntries);\n      });\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string, previousUserId: string): boolean {\n    return (\n      userId !== OCC_USER_ID_ANONYMOUS && // not logged out\n      previousUserId !== userId // *just* logged in / switched to ASM emulation\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver\n  extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(new CheckoutActions.VerifyAddressFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(new CheckoutActions.LoadCardTypesFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { Title, User } from '../../model/misc.model';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { ReplenishmentOrderList } from '../../model/replenishment-order.model';\nimport { CostCenter } from '../../model/org-unit.model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\nimport { ReplenishmentOrder } from '../../model/replenishment-order.model';\nimport { StateUtils } from '../../state/utils/index';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\nexport const CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = 'cancelReplenishmentOrder';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const USER_COST_CENTERS = '[User] User Cost Centers';\nexport const USER_REPLENISHMENT_ORDERS = '[User] User Replenishment Orders';\nexport const USER_REPLENISHMENT_ORDER_DETAILS =\n  '[User] User Replenishment Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  replenishmentOrders: StateUtils.LoaderState<ReplenishmentOrderList>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n  costCenters: StateUtils.LoaderState<CostCenter[]>;\n  replenishmentOrder: StateUtils.LoaderState<ReplenishmentOrder>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  USER_REPLENISHMENT_ORDER_DETAILS,\n} from '../user-state';\n\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS =\n  '[User] Load Replenishment Order Details';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS =\n  '[User] Load Replenishment Order Details Success';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL =\n  '[User] Load Replenishment Order Details Fail';\nexport const ClEAR_REPLENISHMENT_ORDER_DETAILS =\n  '[User] Clear Replenishment Order Details';\n\nexport const CANCEL_REPLENISHMENT_ORDER = '[User] Cancel Replenishment Order';\nexport const CANCEL_REPLENISHMENT_ORDER_SUCCESS =\n  '[User] Cancel Replenishment Order Success';\nexport const CANCEL_REPLENISHMENT_ORDER_FAIL =\n  '[User] Cancel Replenishment Order Fail';\nexport const CLEAR_CANCEL_REPLENISHMENT_ORDER =\n  '[User] Clear Cancel Replenishment Order';\n\nexport class LoadReplenishmentOrderDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(USER_REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(USER_REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_REPLENISHMENT_ORDER_DETAILS, payload);\n  }\n}\n\nexport class ClearReplenishmentOrderDetails extends StateUtils.LoaderResetAction {\n  readonly type = ClEAR_REPLENISHMENT_ORDER_DETAILS;\n  constructor() {\n    super(USER_REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class CancelReplenishmentOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class ClearCancelReplenishmentOrder extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_CANCEL_REPLENISHMENT_ORDER;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport type ReplenishmentOrderDetailsAction =\n  | LoadReplenishmentOrderDetails\n  | LoadReplenishmentOrderDetailsSuccess\n  | LoadReplenishmentOrderDetailsFail\n  | ClearReplenishmentOrderDetails\n  | CancelReplenishmentOrder\n  | CancelReplenishmentOrderSuccess\n  | CancelReplenishmentOrderFail\n  | ClearCancelReplenishmentOrder;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { CostCenter } from '../../../model/org-unit.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_COST_CENTERS } from '../user-state';\n\nexport const LOAD_ACTIVE_COST_CENTERS = '[User] Load Active CostCenters';\nexport const LOAD_ACTIVE_COST_CENTERS_FAIL =\n  '[User] Load Active CostCenters Fail';\nexport const LOAD_ACTIVE_COST_CENTERS_SUCCESS =\n  '[User] Load Active CostCenters Success';\n\nexport class LoadActiveCostCenters extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS;\n  constructor(public payload: string) {\n    super(USER_COST_CENTERS);\n  }\n}\n\nexport class LoadActiveCostCentersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_COST_CENTERS, payload);\n  }\n}\n\nexport class LoadActiveCostCentersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ACTIVE_COST_CENTERS_SUCCESS;\n  constructor(public payload: CostCenter[]) {\n    super(USER_COST_CENTERS);\n  }\n}\n\nexport type UserCostCenterAction =\n  | LoadActiveCostCenters\n  | LoadActiveCostCentersFail\n  | LoadActiveCostCentersSuccess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      replenishmentOrderCode?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import { ReplenishmentOrderList } from '../../../model/replenishment-order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_REPLENISHMENT_ORDERS } from '../user-state';\n\nexport const LOAD_USER_REPLENISHMENT_ORDERS =\n  '[User] Load User Replenishment Orders';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_FAIL =\n  '[User] Load User Replenishment Orders Fail';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS =\n  '[User] Load User Replenishment Orders Success';\nexport const CLEAR_USER_REPLENISHMENT_ORDERS =\n  '[User] Clear User Replenishment Orders';\n\nexport class LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_REPLENISHMENT_ORDERS, payload);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;\n  constructor(public payload: ReplenishmentOrderList) {\n    super(USER_REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_REPLENISHMENT_ORDERS;\n  constructor() {\n    super(USER_REPLENISHMENT_ORDERS);\n  }\n}\n\nexport type UserReplenishmentOrdersAction =\n  | LoadUserReplenishmentOrders\n  | LoadUserReplenishmentOrdersFail\n  | LoadUserReplenishmentOrdersSuccess\n  | ClearUserReplenishmentOrders;\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { withdrawOn } from '../../../util/rxjs/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutCostCenterConnector } from '../../connectors/cost-center/checkout-cost-center.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.ResetLoadPaymentTypesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n      new CheckoutActions.ResetLoadPaymentTypesProcess(),\n      new CheckoutActions.CheckoutClearMiscsData(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(normalizeHttpError(error))\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId, payload.termsChecked)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(normalizeHttpError(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setCostCenter$: Observable<\n    | CheckoutActions.SetCostCenterSuccess\n    | CheckoutActions.SetCostCenterFail\n    | CheckoutActions.ClearCheckoutDeliveryAddress\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_COST_CENTER),\n    map((action: CheckoutActions.SetCostCenter) => action.payload),\n    switchMap((payload) => {\n      return this.checkoutCostCenterConnector\n        .setCostCenter(payload.userId, payload.cartId, payload.costCenterId)\n        .pipe(\n          mergeMap((_data) => [\n            new CartActions.LoadCart({\n              cartId: payload.cartId,\n              userId: payload.userId,\n            }),\n            new CheckoutActions.SetCostCenterSuccess(payload.costCenterId),\n            new CheckoutActions.ClearCheckoutDeliveryAddress({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.SetCostCenterFail(normalizeHttpError(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutCostCenterConnector: CheckoutCostCenterConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { PaymentTypeConnector } from '../../connectors/payment-type/payment-type.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class PaymentTypesEffects {\n  @Effect()\n  loadPaymentTypes$: Observable<\n    | CheckoutActions.LoadPaymentTypesSuccess\n    | CheckoutActions.LoadPaymentTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_PAYMENT_TYPES),\n    switchMap(() => {\n      return this.paymentTypeConnector.getPaymentTypes().pipe(\n        map(\n          (paymentTypes) =>\n            new CheckoutActions.LoadPaymentTypesSuccess(paymentTypes)\n        ),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadPaymentTypesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setPaymentType$: Observable<\n    | CheckoutActions.SetPaymentTypeSuccess\n    | CheckoutActions.SetPaymentTypeFail\n    | CartActions.LoadCartSuccess\n    | CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_TYPE),\n    map((action: CheckoutActions.SetPaymentType) => action.payload),\n    switchMap((payload) => {\n      return this.paymentTypeConnector\n        .setPaymentType(\n          payload.userId,\n          payload.cartId,\n          payload.typeCode,\n          payload.poNumber\n        )\n        .pipe(\n          mergeMap((data) => {\n            return [\n              new CartActions.LoadCartSuccess({\n                cart: data,\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n              new CheckoutActions.ClearCheckoutData(),\n              new CheckoutActions.SetPaymentTypeSuccess(data),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentTypeFail(normalizeHttpError(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private paymentTypeConnector: PaymentTypeConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CheckoutReplenishmentOrderConnector } from '../../connectors/index';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrderEffects {\n  @Effect()\n  scheduleReplenishmentOrder$: Observable<\n    | CheckoutActions.ScheduleReplenishmentOrderSuccess\n    | CheckoutActions.ScheduleReplenishmentOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER),\n    map((action: CheckoutActions.ScheduleReplenishmentOrder) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutReplOrderConnector\n        .scheduleReplenishmentOrder(\n          payload.cartId,\n          payload.scheduleReplenishmentForm,\n          payload.termsChecked,\n          payload.userId\n        )\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.ScheduleReplenishmentOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ScheduleReplenishmentOrderFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutReplOrderConnector: CheckoutReplenishmentOrderConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\nimport { PaymentTypesEffects } from './payment-types.effect';\nimport { ReplenishmentOrderEffects } from './replenishment-order.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n  PaymentTypesEffects,\n  ReplenishmentOrderEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\nexport * from './payment-types.effect';\nexport * from './replenishment-order.effect';\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { Cart } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  poNumber: { po: undefined, costCenter: undefined },\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.SetPaymentTypeSuccess\n    | CheckoutActions.ReplenishmentOrderActions\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {\n      const cart: Cart = action.payload;\n      return {\n        ...state,\n        poNumber: {\n          ...state.poNumber,\n          po: cart.purchaseOrderNumber,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_COST_CENTER_SUCCESS: {\n      return {\n        ...state,\n        poNumber: {\n          ...state.poNumber,\n          costCenter: action.payload,\n        },\n      };\n    }\n\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS:\n    case CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: {\n      const orderDetails: Order | ReplenishmentOrder = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { ORDER_TYPE } from '../../../model/replenishment-order.model';\nimport { CheckoutActions } from '../actions/index';\nimport { OrderTypesState } from '../checkout-state';\n\nexport const initialState: OrderTypesState = {\n  selected: ORDER_TYPE.PLACE_ORDER,\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.OrderTypesActions | CheckoutActions.CheckoutAction\n): OrderTypesState {\n  switch (action.type) {\n    case CheckoutActions.SET_ORDER_TYPE: {\n      return {\n        ...state,\n        selected: action.payload,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { PaymentType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { PaymentTypesState } from '../checkout-state';\n\nexport const initialState: PaymentTypesState = {\n  entities: {},\n  selected: undefined,\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.PaymentTypesAction\n    | CheckoutActions.ClearCheckoutData\n    | CheckoutActions.CheckoutClearMiscsData\n): PaymentTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_PAYMENT_TYPES_SUCCESS: {\n      const paymentTypes: PaymentType[] = action.payload;\n      const entities = paymentTypes.reduce(\n        (\n          paymentTypesEntities: { [code: string]: PaymentType },\n          name: PaymentType\n        ) => {\n          return {\n            ...paymentTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {\n      return {\n        ...state,\n        selected: action.payload.paymentType.code,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return {\n        ...state,\n        selected: undefined,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getPaymentTypesEntites = (state: PaymentTypesState) =>\n  state.entities;\nexport const getSelectedPaymentType = (state: PaymentTypesState) =>\n  state.selected;\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_DETAILS,\n} from '../checkout-state';\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport * as fromOrderTypes from './order-types.reducer';\nimport * as fromPaymentTypes from './payment-types.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n    paymentTypes: fromPaymentTypes.reducer,\n    orderType: fromOrderTypes.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { CHECKOUT_FEATURE } from './checkout-state';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutEventModule } from './events/checkout-event.module';\nimport { interceptors } from './http-interceptors/index';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule, CheckoutEventModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        ...interceptors,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order | ReplenishmentOrder\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPoNumer: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(\n  getCheckoutSteps,\n  (state: CheckoutStepsState) => state.poNumber.po\n);\n\nexport const getCostCenter: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(\n  getCheckoutSteps,\n  (state: CheckoutStepsState) => state.poNumber.costCenter\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ORDER_TYPE } from '../../../model/replenishment-order.model';\nimport {\n  CheckoutState,\n  OrderTypesState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getSelectedOrderTypeSelector = (state: OrderTypesState) =>\n  state.selected;\n\nexport const getOrderTypesState: MemoizedSelector<\n  StateWithCheckout,\n  OrderTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.orderType);\n\nexport const getSelectedOrderType: MemoizedSelector<\n  StateWithCheckout,\n  ORDER_TYPE\n> = createSelector(getOrderTypesState, getSelectedOrderTypeSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentType } from '../../../model/cart.model';\nimport {\n  PaymentTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/payment-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getPaymentTypesState: MemoizedSelector<\n  StateWithCheckout,\n  PaymentTypesState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.paymentTypes\n);\n\nexport const getPaymentTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: PaymentType }\n> = createSelector(getPaymentTypesState, fromReducer.getPaymentTypesEntites);\n\nexport const getAllPaymentTypes: MemoizedSelector<\n  StateWithCheckout,\n  PaymentType[]\n> = createSelector(getPaymentTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n\nexport const getSelectedPaymentType: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getPaymentTypesState, fromReducer.getSelectedPaymentType);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutCostCenterService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Set cost center to cart\n   * @param costCenterId : cost center id\n   */\n  setCostCenter(costCenterId: string): void {\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .pipe(take(1))\n      .subscribe((activeCartId) => (cartId = activeCartId));\n\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetCostCenter({\n            userId: userId,\n            cartId: cartId,\n            costCenterId: costCenterId,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Get cost center id from cart\n   */\n  getCostCenter(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getCostCenter)),\n    ]).pipe(\n      filter(([cart]) => Boolean(cart)),\n      map(([cart, costCenterId]) => {\n        if (costCenterId === undefined && cart.costCenter) {\n          costCenterId = cart.costCenter.code;\n          this.checkoutStore.dispatch(\n            new CheckoutActions.SetCostCenterSuccess(cart.costCenter.code)\n          );\n        }\n        return costCenterId;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport {\n  ORDER_TYPE,\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../model/replenishment-order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process-group.selectors';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  PLACED_ORDER_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(termsChecked: boolean): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.userIdService\n        .getUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n            termsChecked,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Schedule a replenishment order\n   */\n  scheduleReplenishmentOrder(\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean\n  ): void {\n    let cartId;\n\n    this.activeCartService\n      .getActiveCartId()\n      .pipe(take(1))\n      .subscribe((activeCartId) => (cartId = activeCartId));\n\n    this.userIdService.invokeWithUserId((userId) => {\n      if (\n        Boolean(cartId) &&\n        Boolean(userId) &&\n        userId !== OCC_USER_ID_ANONYMOUS\n      ) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.ScheduleReplenishmentOrder({\n            cartId,\n            scheduleReplenishmentForm,\n            termsChecked,\n            userId,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Returns the place or schedule replenishment order's loading flag\n   */\n  getPlaceOrderLoading(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the place or schedule replenishment order's success flag\n   */\n  getPlaceOrderSuccess(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the place or schedule replenishment order's error flag\n   */\n  getPlaceOrderError(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(getProcessErrorFactory(PLACED_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the place or schedule replenishment order's processing state\n   */\n  clearPlaceOrderState(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearPlaceOrder());\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order | ReplenishmentOrder> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  /**\n   * Set checkout order type\n   * @param orderType : an enum of types of order we are placing\n   */\n  setOrderType(orderType: ORDER_TYPE): void {\n    this.checkoutStore.dispatch(new CheckoutActions.SetOrderType(orderType));\n  }\n\n  /**\n   * Get current checkout order type\n   */\n  getCurrentOrderType(): Observable<ORDER_TYPE> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedOrderType)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.userIdService\n      .getUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  map,\n  pluck,\n  shareReplay,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { B2BPaymentTypeEnum, PaymentType } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  GET_PAYMENT_TYPES_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentTypeService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Get payment types\n   */\n  getPaymentTypes(): Observable<PaymentType[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAllPaymentTypes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID))\n        )\n      ),\n      tap(([_, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadPaymentTypes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Load the supported payment types\n   */\n  loadPaymentTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadPaymentTypes());\n  }\n\n  /**\n   * Set payment type to cart\n   * @param typeCode\n   * @param poNumber : purchase order number\n   */\n  setPaymentType(typeCode: string, poNumber?: string): void {\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .pipe(take(1))\n      .subscribe((activeCartId) => (cartId = activeCartId));\n\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentType({\n            userId: userId,\n            cartId: cartId,\n            typeCode: typeCode,\n            poNumber: poNumber,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Get the selected payment type\n   */\n  getSelectedPaymentType(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedPaymentType)),\n    ]).pipe(\n      tap(([cart, selected]) => {\n        if (selected === undefined) {\n          // in b2b, cart always has paymentType (default value 'CARD')\n          if (cart && cart.paymentType) {\n            this.checkoutStore.dispatch(\n              new CheckoutActions.SetPaymentTypeSuccess(cart)\n            );\n          }\n        }\n      }),\n      map(([, selected]) => selected)\n    );\n  }\n\n  /**\n   * Get whether the selected payment type is \"ACCOUNT\" payment\n   */\n  isAccountPayment(): Observable<boolean> {\n    return this.getSelectedPaymentType().pipe(\n      map((selected) => selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT)\n    );\n  }\n\n  /**\n   * Get PO Number\n   */\n  getPoNumber(): Observable<string> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.checkoutStore.pipe(select(CheckoutSelectors.getPoNumer)),\n    ]).pipe(\n      tap(([cart, po]) => {\n        if (po === undefined && cart && cart.purchaseOrderNumber) {\n          this.checkoutStore.dispatch(\n            new CheckoutActions.SetPaymentTypeSuccess(cart)\n          );\n        }\n      }),\n      map(([_, po]) => po)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CheckoutReplenishmentOrderAdapter,\n  REPLENISHMENT_ORDER_FORM_SERIALIZER,\n  REPLENISHMENT_ORDER_NORMALIZER,\n} from '../../../checkout/index';\nimport {\n  ReplenishmentOrder,\n  ScheduleReplenishmentForm,\n} from '../../../model/replenishment-order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutReplenishmentOrderAdapter\n  implements CheckoutReplenishmentOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  scheduleReplenishmentOrder(\n    cartId: string,\n    scheduleReplenishmentForm: ScheduleReplenishmentForm,\n    termsChecked: boolean,\n    userId: string\n  ): Observable<ReplenishmentOrder> {\n    scheduleReplenishmentForm = this.converter.convert(\n      scheduleReplenishmentForm,\n      REPLENISHMENT_ORDER_FORM_SERIALIZER\n    );\n\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n    const params = new HttpParams()\n      .set('cartId', cartId)\n      .set('termsChecked', termsChecked.toString());\n\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('scheduleReplenishmentOrder', {\n          userId,\n        }),\n        scheduleReplenishmentForm,\n        { headers, params }\n      )\n      .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(\n    userId: string,\n    cartId: string,\n    termsChecked: boolean\n  ): Observable<Order> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    const params = new HttpParams()\n      .set('cartId', cartId)\n      .set('termsChecked', termsChecked.toString());\n\n    return this.http\n      .post<Occ.Order>(\n        this.occEndpoints.getUrl('placeOrder', { userId }),\n        {},\n        { headers, params }\n      )\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutCostCenterAdapter } from '../../../checkout/connectors/cost-center/checkout-cost-center.adapter';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport {\n  CheckoutReplenishmentOrderAdapter,\n  REPLENISHMENT_ORDER_FORM_SERIALIZER,\n  REPLENISHMENT_ORDER_NORMALIZER,\n} from '../../../checkout/connectors/index';\nimport { PaymentTypeAdapter } from '../../../checkout/connectors/payment-type/payment-type.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { provideDefaultConfig } from '../../../config/config-providers';\nimport {\n  OccOrderNormalizer,\n  OccReplenishmentOrderFormSerializer,\n  OccReplenishmentOrderNormalizer,\n} from './converters/index';\nimport { defaultOccCheckoutConfig } from './default-occ-checkout-config';\nimport { OccCheckoutCostCenterAdapter } from './occ-checkout-cost-center.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { OccCheckoutPaymentTypeAdapter } from './occ-checkout-payment-type.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\nimport { OccCheckoutReplenishmentOrderAdapter } from './occ-checkout-replenishment-order.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccCheckoutConfig),\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n    {\n      provide: PaymentTypeAdapter,\n      useClass: OccCheckoutPaymentTypeAdapter,\n    },\n    {\n      provide: CheckoutCostCenterAdapter,\n      useClass: OccCheckoutCostCenterAdapter,\n    },\n    {\n      provide: CheckoutReplenishmentOrderAdapter,\n      useClass: OccCheckoutReplenishmentOrderAdapter,\n    },\n    {\n      provide: REPLENISHMENT_ORDER_NORMALIZER,\n      useExisting: OccReplenishmentOrderNormalizer,\n      multi: true,\n    },\n    {\n      provide: REPLENISHMENT_ORDER_FORM_SERIALIZER,\n      useExisting: OccReplenishmentOrderFormSerializer,\n      multi: true,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  protected getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  protected getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { Config } from '../../config/config-tokens';\nimport { OccConfig } from '../../occ/config/occ-config';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\n/**\n * Configuration of the CMS component's child routes\n */\nexport interface CmsComponentChildRoutesConfig {\n  /**\n   * Route `data` property to apply on the parent (host) route of the CMS child routes.\n   */\n  parent?: Pick<Route, 'data'>;\n\n  /**\n   * Child routes defined by the existence of the CMS component on the page.\n   */\n  children?: Route[];\n}\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Route[] | CmsComponentChildRoutesConfig;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\nexport interface FeatureModuleConfig {\n  /**\n   * Lazy resolved feature module\n   */\n  module?: () => Promise<any>;\n  /**\n   * Lazy resolved dependency modules\n   */\n  dependencies?: (() => Promise<any>)[];\n  /**\n   * Cms components covered by this feature\n   */\n  cmsComponents?: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig {\n  featureModules?: { [featureName: string]: FeatureModuleConfig };\n  cmsComponents?: CMSComponentConfig;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel, Page } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  /**\n   * Converts the OCC cms page model to the `Page` in the `CmsStructureModel`.\n   */\n  protected normalizePageData(\n    source: Occ.CMSPage,\n    target: CmsStructureModel\n  ): void {\n    if (!source) {\n      return;\n    }\n    const page: Page = {};\n\n    if (source.name) {\n      page.name = source.name;\n    }\n    if (source.typeCode) {\n      page.type = source.typeCode;\n    }\n    if (source.label) {\n      page.label = source.label;\n    }\n    if (source.template) {\n      page.template = source.template;\n    }\n    if (source.uid) {\n      page.pageId = source.uid;\n    }\n    if (source.title) {\n      page.title = source.title;\n    }\n    if (source.properties) {\n      page.properties = source.properties;\n    }\n\n    target.page = page;\n  }\n\n  /**\n   * Adds a ContentSlotData for each page slot in the `CmsStructureModel`.\n   */\n  protected normalizePageSlotData(\n    source: Occ.CMSPage,\n    target: CmsStructureModel\n  ): void {\n    if (!source?.contentSlots) {\n      return;\n    }\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    target.page.slots = {};\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {} as ContentSlotData;\n      if (slot.properties) {\n        target.page.slots[slot.position].properties = slot.properties;\n      }\n    }\n  }\n\n  /**\n   * Registers the `ContentSlotComponentData` for each component.\n   */\n  protected normalizePageComponentData(\n    source: Occ.CMSPage,\n    target: CmsStructureModel\n  ): void {\n    if (!source?.contentSlots?.contentSlot) {\n      return;\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      if (Array.isArray(slot.components?.component)) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n          };\n          if (component.properties) {\n            comp.properties = component.properties;\n          }\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          if (!target.page.slots[slot.position].components) {\n            target.page.slots[slot.position].components = [];\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  /**\n   * Adds the actual component data whenever available in the CMS page data.\n   *\n   * If the data is not populated in this payload, it is loaded separately\n   * (`OccCmsComponentAdapter`).\n   */\n  protected normalizeComponentData(\n    source: Occ.CMSPage,\n    target: CmsStructureModel\n  ): void {\n    if (!source?.contentSlots?.contentSlot) {\n      return;\n    }\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (Array.isArray(slot.components?.component)) {\n        for (const component of slot.components.component as any) {\n          // while we're hoping to get this right from the backend api,\n          // the OCC api stills seems out of sync with the right model.\n          if (component.modifiedtime) {\n            component.modifiedTime = component.modifiedtime;\n            delete component.modifiedtime;\n          }\n\n          // we don't put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          if (!target.components) {\n            target.components = [];\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  protected getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  protected getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\n\n/**\n * Before 1905, the OCC CMS component API required was using POST method\n * to load a (potentially large) number of components. With 1905, the endpoint\n * evaluated to use GET. Switching from POST to GET has been initially implemented\n * with the `legacy` flag, but from version 3.0 onwards, we're moving the\n * implementation to this optional Adapter.\n *\n * If you like to connect to a pre 1905 version, you can provide this adapter for the\n * `CmsComponentAdapter` injection token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LegacyOccCmsComponentAdapter extends OccCmsComponentAdapter {\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CostCenter } from '../../../../model/org-unit.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCostCenterNormalizer\n  implements Converter<Occ.CostCenter, CostCenter> {\n  convert(source: Occ.CostCenter, target?: CostCenter): CostCenter {\n    if (target === undefined) {\n      target = {\n        ...(source as any),\n        active: this.normalizeBoolean(source.active),\n      };\n    }\n    return target;\n  }\n\n  /**\n   * Returns the boolean value for a string property that is supposed\n   * to be of type boolean.\n   */\n  protected normalizeBoolean(property: string | boolean): boolean {\n    return typeof property === 'string' ? property === 'true' : property;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CostCenter } from '../../../../model/org-unit.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCostCenterSerializer\n  implements Converter<CostCenter, Occ.CostCenter> {\n  convert(source: CostCenter, target?: Occ.CostCenter): Occ.CostCenter {\n    if (target === undefined) {\n      target = {\n        ...(source as any),\n        activeFlag: source.active,\n      };\n      delete target.active;\n    }\n    return target;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\n\nexport const COST_CENTER_NORMALIZER = new InjectionToken<\n  Converter<any, CostCenter>\n>('CostCenterNormalizer');\n\nexport const COST_CENTERS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<CostCenter>>\n>('CostCentersListNormalizer');\n\nexport const COST_CENTER_SERIALIZER = new InjectionToken<\n  Converter<CostCenter, any>\n>('CostCenterSerializer');\n","import { Injectable } from '@angular/core';\nimport { COST_CENTER_NORMALIZER } from '../../../../cost-center/connectors/cost-center/converters';\nimport { EntitiesModel } from '../../../../model/misc.model';\nimport { CostCenter } from '../../../../model/org-unit.model';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccCostCenterListNormalizer\n  implements Converter<Occ.CostCentersList, EntitiesModel<CostCenter>> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.CostCentersList,\n    target?: EntitiesModel<CostCenter>\n  ): EntitiesModel<CostCenter> {\n    if (target === undefined) {\n      target = {\n        ...(source as any),\n        values: source.costCenters.map((costCenter) => ({\n          ...this.converter.convert(costCenter, COST_CENTER_NORMALIZER),\n        })),\n      };\n    }\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\nimport { provideDefaultConfig } from '../config/config-providers';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription, zip } from 'rxjs';\nimport { deepMerge } from '../utils/deep-merge';\nimport { isFeatureEnabled } from '../../features-config';\nimport {\n  Config,\n  ConfigChunk,\n  DefaultConfig,\n  DefaultConfigChunk,\n  RootConfig,\n} from '../config-tokens';\nimport { UnifiedInjector } from '../../lazy-loading/unified-injector';\nimport { skip, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigurationService implements OnDestroy {\n  /**\n   * Will emit unified configuration when some ambient configuration will appear\n   *\n   * Ambient configuration can appear when we lazy load module with configuration\n   */\n  readonly unifiedConfig$: Observable<any>;\n\n  /**\n   * Global application configuration\n   */\n  readonly config: any;\n\n  private readonly ambientDefaultConfig: any = {};\n  private readonly ambientConfig: any = {};\n\n  private subscription: Subscription;\n\n  constructor(\n    @Inject(RootConfig) protected rootConfig: any,\n    @Inject(DefaultConfig) protected defaultConfig: any,\n    protected unifiedInjector: UnifiedInjector,\n    @Inject(Config) config: any\n  ) {\n    this.config = config;\n    this.unifiedConfig$ = new BehaviorSubject(config);\n\n    // We need to use subscription to propagate changes to the config from the beginning.\n    // It will be possible to make it lazy, when we drop this compatibility feature\n    // in the future.\n    this.subscription = this.feedUnifiedConfig().subscribe();\n  }\n\n  private feedUnifiedConfig(): Observable<any> {\n    const configChunks$: Observable<object[]> = this.unifiedInjector.get(\n      ConfigChunk,\n      []\n    );\n    const defaultConfigChunks$ = this.unifiedInjector.get(\n      DefaultConfigChunk,\n      []\n    );\n\n    return zip(configChunks$, defaultConfigChunks$).pipe(\n      // we don't need result from the root injector\n      skip(1),\n      tap(([configChunks, defaultConfigChunks]) =>\n        this.processConfig(configChunks, defaultConfigChunks)\n      )\n    );\n  }\n\n  private processConfig(configChunks: any[], defaultConfigChunks: any[]) {\n    if (defaultConfigChunks?.length) {\n      deepMerge(this.ambientDefaultConfig, ...defaultConfigChunks);\n    }\n    if (configChunks.length) {\n      deepMerge(this.ambientConfig, ...configChunks);\n    }\n\n    if (configChunks.length || defaultConfigChunks.length) {\n      this.emitUnifiedConfig();\n    }\n  }\n\n  private emitUnifiedConfig(): void {\n    const newConfig = deepMerge(\n      {},\n      this.defaultConfig,\n      this.ambientDefaultConfig,\n      this.ambientConfig,\n      this.rootConfig\n    );\n    (this.unifiedConfig$ as BehaviorSubject<any>).next(newConfig);\n\n    // compatibility mechanism, can be disabled with feature toggle\n    if (!isFeatureEnabled(this.config, 'disableConfigUpdates')) {\n      deepMerge(this.config, newConfig);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    (this.unifiedConfig$ as BehaviorSubject<any>).complete();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfig, provideConfigFactory } from './config-providers';\nimport { ConfigurationService } from './services/configuration.service';\n\n@NgModule({})\nexport class ConfigModule {\n  // To make sure ConfigurationService will be instantiated, we inject it into\n  // module constructor\n  constructor(_configurationService: ConfigurationService) {}\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCostCentersConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        getActiveCostCenters:\n          '/costcenters?fields=DEFAULT,unit(BASIC,addresses(DEFAULT))',\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ConfigModule } from '../../../config/config.module';\nimport {\n  COST_CENTERS_NORMALIZER,\n  COST_CENTER_NORMALIZER,\n  COST_CENTER_SERIALIZER,\n} from '../../../cost-center/connectors/cost-center/converters';\nimport { OccCostCenterListNormalizer } from './converters/occ-cost-center-list-normalizer';\nimport { OccCostCenterNormalizer } from './converters/occ-cost-center-normalizer';\nimport { OccCostCenterSerializer } from './converters/occ-cost-center-serializer';\nimport { defaultOccCostCentersConfig } from './default-occ-cost-centers-config';\n\n@NgModule({\n  imports: [CommonModule, ConfigModule.withConfig(defaultOccCostCentersConfig)],\n  providers: [\n    {\n      provide: COST_CENTERS_NORMALIZER,\n      useExisting: OccCostCenterListNormalizer,\n      multi: true,\n    },\n    {\n      provide: COST_CENTER_NORMALIZER,\n      useExisting: OccCostCenterNormalizer,\n      multi: true,\n    },\n    {\n      provide: COST_CENTER_SERIALIZER,\n      useExisting: OccCostCenterSerializer,\n      multi: true,\n    },\n  ],\n})\nexport class CostCenterOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behavior, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.filter((facet) => {\n        return (\n          !target.pagination ||\n          !target.pagination.totalResults ||\n          ((!facet.hasOwnProperty('visible') || facet.visible) &&\n            facet.values &&\n            facet.values.find((value) => {\n              return (\n                value.selected || value.count < target.pagination.totalResults\n              );\n            }))\n        );\n      });\n    }\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount =\n          topValues?.length > 0 ? topValues.length : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        ...searchConfig,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').forEach((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\nimport { provideDefaultConfig } from '../../../config/config-providers';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n\nexport const BASE_SITE_NORMALIZER = new InjectionToken<\n  Converter<any, BaseSite>\n>('BaseSiteNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  BASE_SITE_NORMALIZER,\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  /**\n   * There is no OCC API to load one site based on Uid.\n   * So, we have to load all sites, and find the one from the list.\n   */\n  loadBaseSite(siteUid?: string): Observable<BaseSite> {\n    if (!siteUid) {\n      const baseUrl = this.occEndpointsService.getBaseEndpoint();\n      const urlSplits = baseUrl.split('/');\n      siteUid = urlSplits.pop();\n    }\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(\n        this.occEndpointsService.getOccEndpoint('baseSites')\n      )\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === siteUid);\n        })\n      );\n  }\n\n  loadBaseSites(): Observable<BaseSite[]> {\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(\n        this.occEndpointsService.getOccEndpoint('baseSites')\n      )\n      .pipe(\n        map((baseSiteList) => baseSiteList.baseSites),\n        this.converterService.pipeableMany(BASE_SITE_NORMALIZER)\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data based on siteUid.\n   */\n  abstract loadBaseSite(siteUid?: string): Observable<BaseSite>;\n\n  /**\n   * Abstract method used to get all base sites data.\n   */\n  abstract loadBaseSites(): Observable<BaseSite[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n        baseSites:\n          'basesites?fields=DEFAULT,baseSites(defaultPreviewCatalogId,defaultPreviewCategoryCode,defaultPreviewProductCode,urlEncodingAttributes)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string): void {\n    this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string): void {\n    this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\nimport { provideDefaultConfig } from '../../../config/config-providers';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ReplenishmentOrderList } from '../../../model/replenishment-order.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const REPLENISHMENT_ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, ReplenishmentOrderList>\n>('ReplenishmentOrderHistoryNormalizer');\n","import { ReplenishmentOrderList } from '../../../model/replenishment-order.model';\nimport { REPLENISHMENT_ORDER_HISTORY_NORMALIZER } from '../../../user/connectors/replenishment-order/converters';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { REPLENISHMENT_ORDER_NORMALIZER } from '../../../checkout/connectors/replenishment-order/converters';\nimport { OrderHistoryList, ReplenishmentOrder } from '../../../model/index';\nimport { ORDER_HISTORY_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserReplenishmentOrderAdapter } from '../../../user/connectors/replenishment-order/user-replenishment-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserReplenishmentOrderAdapter\n  implements UserReplenishmentOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n  public load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.http\n      .get<Occ.ReplenishmentOrder>(\n        this.occEndpoints.getUrl('replenishmentOrderDetails', {\n          userId,\n          replenishmentOrderCode,\n        })\n      )\n      .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));\n  }\n\n  public loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    return this.http\n      .get<Occ.OrderHistoryList>(\n        this.occEndpoints.getUrl(\n          'replenishmentOrderDetailsHistory',\n          {\n            userId,\n            replenishmentOrderCode,\n          },\n          params\n        )\n      )\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n    return this.http\n      .patch<Occ.ReplenishmentOrder>(\n        this.occEndpoints.getUrl('cancelReplenishmentOrder', {\n          userId,\n          replenishmentOrderCode,\n        }),\n        {},\n        { headers }\n      )\n      .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl(\n      'replenishmentOrderHistory',\n      { userId },\n      params\n    );\n\n    return this.http\n      .get<Occ.ReplenishmentOrderList>(url)\n      .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_HISTORY_NORMALIZER));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  abstract loadAnonymousConsents(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { EntitiesModel } from '../../../model/misc.model';\n\nexport abstract class UserCostCenterAdapter {\n  /**\n   * Returns the list of all active cost centers of the login user\n   * @param userId\n   */\n  abstract loadActiveList(\n    userId: string\n  ): Observable<EntitiesModel<CostCenter>>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '../../../model/index';\n\nexport abstract class UserReplenishmentOrderAdapter {\n  /**\n   * Abstract method used to load replenishment order details.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load order history from a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   * @param pageSize The `pageSize` to display number of data as order history\n   * @param currentPage The `currentPage` of the order history list\n   * @param sort The `sort` for a sorting method\n   */\n  abstract loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to cancel a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load replenishment order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '../../../model/index';\nimport { UserReplenishmentOrderAdapter } from './user-replenishment-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserReplenishmentOrderConnector {\n  constructor(protected adapter: UserReplenishmentOrderAdapter) {}\n\n  public load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.load(userId, replenishmentOrderCode);\n  }\n\n  public loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadReplenishmentDetailsHistory(\n      userId,\n      replenishmentOrderCode,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.cancelReplenishmentOrder(\n      userId,\n      replenishmentOrderCode\n    );\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { Injectable } from '@angular/core';\nimport { Address } from '../../../../model/address.model';\nimport { EntitiesModel } from '../../../../model/misc.model';\nimport { ADDRESS_NORMALIZER } from '../../../../user/connectors/address/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccAddressListNormalizer\n  implements Converter<Occ.AddressList, EntitiesModel<Address>> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.AddressList,\n    target?: EntitiesModel<Address>\n  ): EntitiesModel<Address> {\n    if (target === undefined) {\n      target = {\n        ...(source as any),\n        values: source.addresses.map((address) => ({\n          ...this.converter.convert(address, ADDRESS_NORMALIZER),\n        })),\n      };\n    }\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { COST_CENTERS_NORMALIZER } from '../../../cost-center/connectors/cost-center/converters';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { UserCostCenterAdapter } from '../../../user/connectors/cost-center/user-cost-center.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserCostCenterAdapter implements UserCostCenterAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadActiveList(userId: string): Observable<EntitiesModel<CostCenter>> {\n    return this.http\n      .get<Occ.CostCentersList>(this.getCostCentersEndpoint(userId))\n      .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));\n  }\n\n  protected getCostCentersEndpoint(\n    userId: string,\n    params?: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl('getActiveCostCenters', { userId }, params);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config-providers';\nimport { ADDRESS_LIST_NORMALIZER } from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserCostCenterAdapter } from '../../../user/connectors/cost-center/user-cost-center.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserReplenishmentOrderAdapter } from '../../../user/connectors/replenishment-order';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccAddressListNormalizer } from './converters/occ-address-list-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserCostCenterAdapter } from './occ-user-cost-centers.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserReplenishmentOrderAdapter } from './occ-user-replenishment-order.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    { provide: UserCostCenterAdapter, useClass: OccUserCostCenterAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n    {\n      provide: ADDRESS_LIST_NORMALIZER,\n      useExisting: OccAddressListNormalizer,\n      multi: true,\n    },\n    {\n      provide: UserReplenishmentOrderAdapter,\n      useClass: OccUserReplenishmentOrderAdapter,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../util/ssr.tokens';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\nimport { Config } from '../../config/config-tokens';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { OccConfig } from './occ-config';\nimport { provideConfigFactory } from '../../config/config-providers';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/occ/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from './occ-config';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  export interface AddressList {\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [town]\n     */\n    cellphone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {string} [town]\n     */\n    district?: string;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n    /**\n     * @member {any} [properties]\n     */\n    properties?: any;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n    /**\n     * @member {string} [label]\n     */\n    label?: string;\n    /**\n     * @member {any} [properties]\n     */\n    properties?: any;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PaymentType.\n   */\n  export interface PaymentType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n  }\n\n  /**\n   *\n   * An interface representing PaymentTypeList.\n   */\n  export interface PaymentTypeList {\n    /**\n     * @member {PaymentType[]} [paymentTypes]\n     */\n    paymentTypes?: PaymentType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n\n  export interface Budget {\n    active?: boolean;\n    budget?: number;\n    code?: string;\n    currency?: Currency;\n    endDate?: string;\n    startDate?: string;\n    name?: string;\n    orgUnit?: B2BUnit;\n    costCenters?: CostCenter[];\n  }\n\n  export interface BudgetsList {\n    budgets?: Budget[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface CostCenter {\n    active?: string;\n    activeFlag?: boolean;\n    code?: string;\n    currency?: Currency;\n    name?: string;\n    originalCode?: string;\n    unit?: B2BUnit;\n  }\n\n  export interface CostCentersList {\n    costCenters: CostCenter[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  // TODO(#8878): Which models we can remove from here?\n  export interface OrgUnitUserGroup {\n    members?: B2BUser[];\n    membersCoun?: number;\n    name?: string;\n    orgUnit?: B2BUnit;\n    permissions?: Permission[];\n    roles?: any;\n    selected?: boolean;\n    subGroups?: any;\n    uid?: string;\n  }\n\n  export interface OrgUnitUserGroupList {\n    orgUnitUserGroups: OrgUnitUserGroup[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface B2BUnitNode {\n    active?: boolean;\n    children?: B2BUnitNode[];\n    id?: string;\n    name?: string;\n    parent?: string;\n  }\n\n  export interface B2BUnitNodeList {\n    unitNodes?: B2BUnitNode[];\n  }\n\n  export interface B2BUser extends User {\n    active?: boolean;\n    approvers?: [];\n    orgUnit?: B2BUnit;\n    roles?: string[];\n    selected?: boolean;\n  }\n\n  export interface OrgUnitUserList {\n    users: B2BUser[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface B2BApprovalProcess {\n    code?: string;\n    name?: string;\n  }\n\n  export interface B2BApprovalProcessList {\n    approvalProcesses?: B2BApprovalProcess[];\n  }\n\n  export interface B2BUnit {\n    active?: boolean;\n    addresses?: Address[];\n    uid?: string;\n    name?: string;\n    parentOrgUnit?: Partial<B2BUnit>;\n    approvalProcess?: B2BApprovalProcess;\n    administrators?: B2BUser[];\n    approvers?: B2BUser[];\n    customers?: B2BUser[];\n    managers?: B2BUser[];\n  }\n\n  export interface OrderApprovalPermissionType {\n    code?: string;\n    name?: string;\n  }\n\n  export interface OrderApprovalPermissionTypeList {\n    orderApprovalPermissionTypes?: OrderApprovalPermissionType[];\n  }\n\n  export enum Period {\n    DAY = 'DAY',\n    WEEK = 'WEEK',\n    MONTH = 'MONTH',\n    QUARTER = 'QUARTER',\n    YEAR = 'YEAR',\n  }\n\n  export interface Permission {\n    active?: boolean;\n    code?: string;\n    currency?: Currency;\n    orderApprovalPermissionType?: OrderApprovalPermissionType;\n    orgUnit?: B2BUnitNode;\n    periodRange?: Period;\n    selected?: boolean;\n    treshold?: number;\n  }\n\n  export interface PermissionsList {\n    orderApprovalPermissions?: Permission[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface ReplenishmentOrder {\n    active?: boolean;\n    appliedOrderPromotions?: PromotionResult[];\n    appliedProductPromotions?: PromotionResult[];\n    appliedVouchers?: Voucher[];\n    calculated?: boolean;\n    code?: string;\n    costCenter?: CostCenter;\n    deliveryAddress?: Address;\n    deliveryCost?: Price;\n    deliveryItemsQuantity?: number;\n    deliveryMode?: DeliveryMode;\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    description?: string;\n    entries?: OrderEntry[];\n    expirationTime?: string;\n    firstDate?: string;\n    guid?: string;\n    name?: string;\n    net?: boolean;\n    orderDiscounts?: Price;\n    paymentInfo?: PaymentDetails;\n    paymentStatus?: string;\n    paymentType?: PaymentType;\n    pickupItemsQuantity?: number;\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    potentialOrderPromotions?: PromotionResult[];\n    potentialProductPromotions?: PromotionResult[];\n    productDiscounts?: Price;\n    purchaseOrderNumber?: string;\n    replenishmentOrderCode?: string;\n    saveTime?: string;\n    savedBy?: Principal;\n    site?: string;\n    store?: string;\n    subTotal?: Price;\n    totalDiscounts?: Price;\n    totalItems?: number;\n    totalPrice?: Price;\n    totalPriceWithTax?: Price;\n    totalTax?: Price;\n    totalUnitCount?: number;\n    trigger?: Trigger;\n    user?: Principal;\n  }\n\n  export interface ReplenishmentOrderList {\n    replenishmentOrders?: ReplenishmentOrder[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n\n  export interface Trigger {\n    activationTime?: string;\n    displayTimeTable?: string;\n  }\n\n  export interface ScheduleReplenishmentForm {\n    daysOfWeek?: DaysOfWeek[];\n    nthDayOfMonth?: string;\n    numberOfDays?: string;\n    numberOfWeeks?: string;\n    recurrencePeriod?: string;\n    replenishmentStartDate?: string;\n  }\n\n  export enum DaysOfWeek {\n    MONDAY = 'MONDAY',\n    TUESDAY = 'TUESDAY',\n    WEDNESDAY = 'WEDNESDAY',\n    THURSDAY = 'THURSDAY',\n    FRIDAY = 'FRIDAY',\n    SATURDAY = 'SATURDAY',\n    SUNDAY = 'SUNDAY',\n  }\n\n  export enum OrderApprovalDecisionValue {\n    APPROVE = 'APPROVE',\n    REJECT = 'REJECT',\n  }\n  export interface OrderApprovalDecision {\n    decision?: OrderApprovalDecisionValue;\n    comment?: string;\n  }\n\n  export interface OrderApprovalRecord {\n    approver?: Principal;\n    comments?: string;\n    permissionTypes?: OrderApprovalPermissionType[];\n    statusDisplay?: string;\n  }\n\n  export interface OrderApproval {\n    approvalDecisionRequired?: boolean;\n    code?: string;\n    customerOrderApprovalRecords?: OrderApprovalRecord[];\n    merchantOrderApprovalRecords?: OrderApprovalRecord[];\n    order?: Order;\n    trigger?: Trigger;\n  }\n\n  export interface OrderApprovalsList {\n    orderApprovals?: OrderApproval[];\n    pagination?: PaginationModel;\n    sorts?: SortModel[];\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { provideDefaultConfig } from '../config/config-providers';\nimport { CostCenterOccModule } from './adapters/cost-center/cost-center-occ.module';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n    CostCenterOccModule,\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getReplenishmentOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReplenishmentOrder>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.replenishmentOrder\n);\n\nexport const getReplenishmentOrderDetailsValue: MemoizedSelector<\n  StateWithUser,\n  ReplenishmentOrder\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getCostCentersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CostCenter[]>\n> = createSelector(getUserState, (state: UserState) => state.costCenters);\n\nexport const getCostCenters: MemoizedSelector<\n  StateWithUser,\n  CostCenter[]\n> = createSelector(getCostCentersState, (state: LoaderState<CostCenter[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReplenishmentOrderList } from '../../../model/replenishment-order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StateWithUser, UserState } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { getUserState } from './feature.selector';\n\nexport const getReplenishmentOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReplenishmentOrderList>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.replenishmentOrders\n);\n\nexport const getReplenishmentOrders: MemoizedSelector<\n  StateWithUser,\n  ReplenishmentOrderList\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrdersLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrdersError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n\nexport const getReplenishmentOrdersSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    return this.adapter.loadAnonymousConsents();\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService, UserIdService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            if (!newConsents) {\n              if (isDevMode()) {\n                console.warn(\n                  'No consents were loaded. Please check the Spartacus documentation as this could be a back-end configuration issue.'\n                );\n              }\n              return false;\n            }\n\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  // TODO(#9416): This won't work with flow different than `Resource Owner Password Flow` which involves redirect (maybe in popup in will work)\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.Login>(AuthActions.LOGIN),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.userIdService.getUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.Login>(AuthActions.LOGIN),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.userIdService.getUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService,\n    private userIdService: UserIdService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(siteUid?: string): Observable<BaseSite> {\n    return this.adapter.loadBaseSite(siteUid);\n  }\n\n  getBaseSites(): Observable<BaseSite[]> {\n    return this.adapter.loadBaseSites();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   */\n  init() {\n    this.router = this.injector.get<Router>(Router);\n\n    this.location = this.injector.get<Location>(Location);\n    const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n    if (routingParams.length) {\n      this.setContextParamsFromRoute(this.location.path(true));\n      this.subscribeChanges(routingParams);\n      this.subscribeRouting();\n    }\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   */\n  private subscribeRouting() {\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return async () => {\n    await configInit.getStableConfig('context');\n    siteContextRoutesHandler.init();\n    baseSiteService.initialize();\n    langService.initialize();\n    currService.initialize();\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(new SiteContextActions.LoadBaseSiteFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadBaseSites$: Observable<\n    | SiteContextActions.LoadBaseSitesSuccess\n    | SiteContextActions.LoadBaseSitesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITES),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSites().pipe(\n        map(\n          (baseSites) => new SiteContextActions.LoadBaseSitesSuccess(baseSites)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSitesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { BaseSiteEffects } from './base-site.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { LanguagesEffects } from './languages.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './base-site.effect';\nexport * from './currencies.effect';\nexport * from './languages.effect';\n","import { BaseSite } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  entities: null,\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      // if active base site is updated,\n      // the active base site details data should also be updated\n      let details = {};\n      if (state.entities) {\n        details = state.entities[action.payload];\n      }\n      return {\n        ...state,\n        details,\n        activeSite: action.payload,\n      };\n    }\n\n    case SiteContextActions.LOAD_BASE_SITES_SUCCESS: {\n      const sites: BaseSite[] = action.payload;\n      const entities = sites.reduce(\n        (siteEntities: { [uid: string]: BaseSite }, site: BaseSite) => {\n          return {\n            ...siteEntities,\n            [site.uid]: site,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n      // after base sites entities are populated,\n      // the active base site details data is also populated\n      const details = entities[state.activeSite];\n\n      return {\n        ...state,\n        details,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\nimport { provideDefaultConfigFactory } from '../../config/config-providers';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\nimport { provideDefaultConfigFactory } from '../config/config-providers';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { StatePersistenceService } from '../../state/index';\nimport { AnonymousConsentsService } from '../facade/index';\nimport { LoadAnonymousConsentTemplatesSuccess } from '../store/actions/anonymous-consents-group';\nimport {\n  AnonymousConsentsState,\n  StateWithAnonymousConsents,\n} from '../store/index';\nimport { getAnonymousConsentState } from '../store/selectors/feature.selector';\n\n/**\n * Anonymous consents state synced to browser storage.\n */\nexport type SyncedAnonymousConsentsState = Partial<AnonymousConsentsState>;\n\n/**\n * Responsible for saving the anonymous consents data in browser storage.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentsStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithAnonymousConsents>,\n    protected anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'anonymous-consents';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.getAuthState(),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  protected getAuthState(): Observable<SyncedAnonymousConsentsState> {\n    return this.store.select(getAnonymousConsentState);\n  }\n\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  protected onRead(state: SyncedAnonymousConsentsState) {\n    const templates = state?.templates;\n    const consents = state?.consents;\n    const ui = state?.ui;\n\n    // templates\n    if (templates?.success) {\n      this.store.dispatch(\n        new LoadAnonymousConsentTemplatesSuccess(templates.value)\n      );\n    }\n\n    // consents\n    if (consents) {\n      this.anonymousConsentsService.setConsents(consents);\n    }\n\n    // ui\n    if (ui) {\n      this.anonymousConsentsService.toggleBannerDismissed(ui?.bannerDismissed);\n      this.anonymousConsentsService.toggleTemplatesUpdated(ui?.updated);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\nimport { AnonymousConsentsStatePersistenceService } from '../services/anonymous-consents-state-persistence.service';\n\nexport function anonymousConsentsStatePersistenceFactory(\n  anonymousConsentsStatePersistenceService: AnonymousConsentsStatePersistenceService\n): () => void {\n  const result = () => anonymousConsentsStatePersistenceService.initSync();\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    reducerProvider,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: anonymousConsentsStatePersistenceFactory,\n      deps: [AnonymousConsentsStatePersistenceService],\n      multi: true,\n    },\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config-providers';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AuthToken } from '../../auth/user-auth/models/auth-token.model';\nimport { AuthStorageService } from '../../auth/user-auth/services/auth-storage.service';\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nexport enum TokenTarget {\n  CSAgent = 'CSAgent',\n  User = 'User',\n}\n\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthStorageService extends AuthStorageService {\n  protected _tokenTarget$: Observable<TokenTarget> = new BehaviorSubject<\n    TokenTarget\n  >(TokenTarget.User);\n\n  /**\n   * When CS Agent logs in during regular user session we store the regular\n   * user token to restore the session after CS Agent logout.\n   *\n   * This supports in-store use case when CS Agent want's to quickly help\n   * customer and then give an option to customer to continue the process.\n   */\n  protected emulatedUserToken: AuthToken;\n\n  /**\n   * Get target user for current auth token.\n   *\n   * @return observable with TokenTarget\n   */\n  getTokenTarget(): Observable<TokenTarget> {\n    return this._tokenTarget$;\n  }\n\n  /**\n   * Set new token target.\n   *\n   * @param tokenTarget\n   */\n  setTokenTarget(tokenTarget: TokenTarget): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(tokenTarget);\n  }\n\n  /**\n   * Get token for previously user session, when it was interrupted by CS agent login.\n   *\n   * @return previously logged in user token.\n   */\n  getEmulatedUserToken(): AuthToken {\n    return this.emulatedUserToken;\n  }\n\n  /**\n   * Save user token on CS agent login.\n   *\n   * @param token\n   */\n  setEmulatedUserToken(token: AuthToken): void {\n    this.emulatedUserToken = token;\n  }\n\n  /**\n   * Change token target to CS Agent.\n   */\n  switchTokenTargetToCSAgent(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(\n      TokenTarget.CSAgent\n    );\n  }\n\n  /**\n   * Change token target to user.\n   */\n  switchTokenTargetToUser(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(TokenTarget.User);\n  }\n\n  /**\n   * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n   * Only available solution is to drop session we could restore, to avoid account hijack.\n   */\n  clearEmulatedUserToken(): void {\n    this.emulatedUserToken = undefined;\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles.\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getAllTitles),\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.loadTitles();\n        }\n      })\n    );\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { Action } from '@ngrx/store';\n\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { AuthActions } from '../../auth/user-auth/store/actions';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport {\n  AsmAuthStorageService,\n  TokenTarget,\n} from '../services/asm-auth-storage.service';\nimport { AsmActions } from '../store/actions';\nimport { StateWithAsm } from '../store/asm-state';\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CsAgentAuthService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AsmAuthStorageService,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected store: Store<StateWithAsm>,\n    protected userService: UserService\n  ) {}\n\n  /**\n   * Loads access token for a customer support agent.\n   * @param userId\n   * @param password\n   */\n  async authorizeCustomerSupportAgent(\n    userId: string,\n    password: string\n  ): Promise<void> {\n    let userToken;\n    this.authStorageService\n      .getToken()\n      .subscribe((token) => (userToken = token))\n      .unsubscribe();\n\n    this.authStorageService.switchTokenTargetToCSAgent();\n    try {\n      await this.oAuthLibWrapperService.authorizeWithPasswordFlow(\n        userId,\n        password\n      );\n      // Start emulation for currently logged in user\n      let customerId: string;\n      this.userService\n        .get()\n        .subscribe((user) => (customerId = user?.customerId))\n        .unsubscribe();\n      this.store.dispatch(new AuthActions.Logout());\n\n      if (Boolean(customerId)) {\n        // OCC specific user id handling. Customize when implementing different backend\n        this.userIdService.setUserId(customerId);\n        this.authStorageService.setEmulatedUserToken(userToken);\n        this.store.dispatch(new AuthActions.Login());\n      } else {\n        // When we can't get the customerId just end all current sessions\n        this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n        this.authStorageService.clearEmulatedUserToken();\n      }\n    } catch {\n      this.authStorageService.switchTokenTargetToUser();\n    }\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stopped by calling logout().\n   * @param customerId\n   */\n  public startCustomerEmulationSession(customerId: string): void {\n    this.authStorageService.clearEmulatedUserToken();\n\n    // OCC specific user id handling. Customize when implementing different backend\n    this.store.dispatch(new AuthActions.Logout());\n    this.userIdService.setUserId(customerId);\n    this.store.dispatch(new AuthActions.Login());\n  }\n\n  /**\n   * Check if CS agent is currently logged in.\n   *\n   * @returns observable emitting true when CS agent is logged in or false when not.\n   */\n  public isCustomerSupportAgentLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([token, tokenTarget]) =>\n        Boolean(token?.access_token && tokenTarget === TokenTarget.CSAgent)\n      )\n    );\n  }\n\n  /**\n   * Utility function to determine if customer is emulated.\n   *\n   * @returns observable emitting true when there is active emulation session or false when not.\n   */\n  public isCustomerEmulated(): Observable<boolean> {\n    return this.userIdService.isEmulated();\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  public getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    // TODO(#8248): Create new loading state outside of store\n    return of(false);\n  }\n\n  /**\n   * Logout a customer support agent.\n   */\n  async logoutCustomerSupportAgent(): Promise<void> {\n    const emulatedToken = this.authStorageService.getEmulatedUserToken();\n\n    let isCustomerEmulated;\n    this.userIdService\n      .isEmulated()\n      .subscribe((emulated) => (isCustomerEmulated = emulated))\n      .unsubscribe();\n\n    await this.oAuthLibWrapperService.revokeAndLogout();\n\n    this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n    this.authStorageService.setTokenTarget(TokenTarget.User);\n\n    if (isCustomerEmulated && emulatedToken) {\n      this.store.dispatch(new AuthActions.Logout());\n      this.authStorageService.setToken(emulatedToken);\n      this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n      this.authStorageService.clearEmulatedUserToken();\n      this.store.dispatch(new AuthActions.Login());\n    } else {\n      this.authService.logout();\n    }\n  }\n}\n","import { HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { AuthHttpHeaderService } from '../../auth/user-auth/services/auth-http-header.service';\nimport { AuthStorageService } from '../../auth/user-auth/services/auth-storage.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { GlobalMessageService } from '../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../global-message/models/global-message.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { CsAgentAuthService } from '../facade/csagent-auth.service';\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AuthStorageService,\n    protected csAgentAuthService: CsAgentAuthService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected occEndpointsService: OccEndpointsService\n  ) {\n    super(\n      authService,\n      authStorageService,\n      oAuthLibWrapperService,\n      routingService,\n      occEndpointsService,\n      globalMessageService\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Checks if particular request should be handled by this service.\n   */\n  public shouldCatchError(request: HttpRequest<any>): boolean {\n    return (\n      super.shouldCatchError(request) || this.isCSAgentTokenRequest(request)\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Adds `Authorization` header to occ and CS agent requests.\n   * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n   */\n  public alterRequest(request: HttpRequest<any>): HttpRequest<any> {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n\n    let req = super.alterRequest(request);\n\n    if (!hasAuthorizationHeader && isCSAgentRequest) {\n      req = request.clone({\n        setHeaders: {\n          ...this.createAuthorizationHeader(),\n        },\n      });\n      return InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        req\n      );\n    }\n    return req;\n  }\n\n  protected isCSAgentTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestWithCSAgentToken);\n  }\n\n  /**\n   * @override\n   *\n   * On backend errors indicating expired `refresh_token` we need to logout\n   * currently logged in user and CS agent.\n   */\n  public handleExpiredRefreshToken(): void {\n    this.csAgentAuthService\n      .isCustomerSupportAgentLoggedIn()\n      .pipe(take(1))\n      .subscribe((csAgentLoggedIn) => {\n        if (csAgentLoggedIn) {\n          this.csAgentAuthService.logoutCustomerSupportAgent();\n          this.globalMessageService.add(\n            {\n              key: 'asm.csagentTokenExpired',\n            },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        } else {\n          super.handleExpiredRefreshToken();\n        }\n      });\n  }\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthService } from '../../../../auth/user-auth/facade/auth.service';\nimport { OccEndpointsService } from '../../../../occ/services/occ-endpoints.service';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError(request) {\n    if (\n      request.url.endsWith(\n        this.occEndpoints.getUrl('user', { userId: 'current' })\n      )\n    ) {\n      this.authService.logout();\n    }\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  constructor(\n    protected globalMessageService: GlobalMessageService,\n    protected authService: AuthService,\n    protected occEndpoints: OccEndpointsService\n  ) {\n    super(globalMessageService);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priority.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instances\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = (applicables ?? []).filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\nimport { provideDefaultConfigFactory } from '../config/config-providers';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { combineLatest, from, Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { StateWithClientAuth } from '../../auth/client-auth/store/client-auth-state';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { AuthToken } from '../../auth/user-auth/models/auth-token.model';\nimport { AuthRedirectService } from '../../auth/user-auth/services/auth-redirect.service';\nimport { OAuthLibWrapperService } from '../../auth/user-auth/services/oauth-lib-wrapper.service';\nimport { AuthActions } from '../../auth/user-auth/store/actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService extends AuthService {\n  constructor(\n    protected store: Store<StateWithClientAuth>,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected authStorageService: AsmAuthStorageService,\n    protected authRedirectService: AuthRedirectService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {\n    super(\n      store,\n      userIdService,\n      oAuthLibWrapperService,\n      authStorageService,\n      authRedirectService,\n      routingService\n    );\n  }\n\n  protected canUserLogin(): boolean {\n    let tokenTarget: TokenTarget;\n    let token: AuthToken;\n\n    this.authStorageService\n      .getToken()\n      .subscribe((tok) => (token = tok))\n      .unsubscribe();\n    this.authStorageService\n      .getTokenTarget()\n      .subscribe((tokTarget) => (tokenTarget = tokTarget))\n      .unsubscribe();\n    return !(\n      Boolean(token?.access_token) && tokenTarget === TokenTarget.CSAgent\n    );\n  }\n\n  protected warnAboutLoggedCSAgent(): void {\n    this.globalMessageService.add(\n      {\n        key: 'asm.auth.agentLoggedInError',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  /**\n   * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n   * @param userId\n   * @param password\n   */\n  async loginWithCredentials(userId: string, password: string): Promise<void> {\n    if (this.canUserLogin()) {\n      await super.loginWithCredentials(userId, password);\n    } else {\n      this.warnAboutLoggedCSAgent();\n    }\n  }\n\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n   */\n  loginWithRedirect(): boolean {\n    if (this.canUserLogin()) {\n      super.loginWithRedirect();\n      return true;\n    } else {\n      this.warnAboutLoggedCSAgent();\n      return false;\n    }\n  }\n\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n  coreLogout(): Promise<any> {\n    return this.userIdService\n      .isEmulated()\n      .pipe(\n        take(1),\n        switchMap((isEmulated) => {\n          if (isEmulated) {\n            this.authStorageService.clearEmulatedUserToken();\n            this.userIdService.clearUserId();\n            this.store.dispatch(new AuthActions.Logout());\n            return of(true);\n          } else {\n            return from(super.coreLogout());\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns `true` if user is logged in or being emulated.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.userIdService.isEmulated(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(\n        ([token, isEmulated, tokenTarget]) =>\n          Boolean(token?.access_token) &&\n          (tokenTarget === TokenTarget.User ||\n            (tokenTarget === TokenTarget.CSAgent && isEmulated))\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { CustomerEffects } from './customer.effect';\n\nexport const effects: any[] = [CustomerEffects];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions';\nimport { AsmState, CUSTOMER_SEARCH_DATA } from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthToken } from '../../auth/user-auth/models/auth-token.model';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { AsmUi } from '../models/asm.models';\nimport { AsmActions, AsmSelectors, StateWithAsm } from '../store';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * ASM state synced to browser storage.\n */\nexport interface SyncedAsmState {\n  ui?: AsmUi;\n  emulatedUserToken?: AuthToken;\n  tokenTarget?: TokenTarget;\n}\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithAsm>,\n    protected authStorageService: AsmAuthStorageService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'asm';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.getAsmState(),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  protected getAsmState(): Observable<SyncedAsmState> {\n    return combineLatest([\n      this.store.pipe(select(AsmSelectors.getAsmUi)),\n      of(this.authStorageService.getEmulatedUserToken()),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([ui, emulatedUserToken, tokenTarget]) => {\n        let emulatedToken = emulatedUserToken;\n        if (emulatedToken) {\n          emulatedToken = { ...emulatedUserToken };\n          // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n          delete emulatedToken.refresh_token;\n        }\n        return {\n          ui,\n          emulatedUserToken: emulatedToken,\n          tokenTarget,\n        };\n      })\n    );\n  }\n\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  protected onRead(state: SyncedAsmState) {\n    if (state) {\n      if (state.ui) {\n        this.store.dispatch(new AsmActions.AsmUiUpdate(state.ui));\n      }\n      if (state.emulatedUserToken) {\n        this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n      }\n      if (state.tokenTarget) {\n        this.authStorageService.setTokenTarget(state.tokenTarget);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class AsmStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { AuthService } from '../auth/user-auth/facade/auth.service';\nimport { AuthHttpHeaderService } from '../auth/user-auth/services/auth-http-header.service';\nimport { AuthStorageService } from '../auth/user-auth/services/auth-storage.service';\nimport { provideDefaultConfig } from '../config/config-providers';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmAuthHttpHeaderService } from './services/asm-auth-http-header.service';\nimport { AsmAuthStorageService } from './services/asm-auth-storage.service';\nimport { AsmAuthService } from './services/asm-auth.service';\nimport { AsmStatePersistenceService } from './services/asm-state-persistence.service';\nimport { AsmStoreModule } from './store/asm-store.module';\n\nexport function asmStatePersistenceFactory(\n  asmStatePersistenceService: AsmStatePersistenceService\n) {\n  const result = () => asmStatePersistenceService.initSync();\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [\n        provideDefaultConfig(defaultAsmConfig),\n        {\n          provide: AuthStorageService,\n          useExisting: AsmAuthStorageService,\n        },\n        {\n          provide: AuthService,\n          useExisting: AsmAuthService,\n        },\n        {\n          provide: AuthHttpHeaderService,\n          useExisting: AsmAuthHttpHeaderService,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: asmStatePersistenceFactory,\n          deps: [AsmStatePersistenceService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { withdrawOn } from '../../../util/rxjs/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: normalizeHttpError(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { withdrawOn } from '../../../util/rxjs/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: normalizeHttpError(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: normalizeHttpError(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: normalizeHttpError(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { UserIdService } from '../../../auth/user-auth/facade/user-id.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: normalizeHttpError(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: normalizeHttpError(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.userIdService.getUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: normalizeHttpError(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private userIdService: UserIdService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: 'cart',\n        state$: this.getCartState(),\n        context$: this.siteContextParamsService.getValues([\n          BASE_SITE_CONTEXT_ID,\n        ]),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    } else {\n      this.store.dispatch(new CartActions.SetActiveCartId(''));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { ActionReducer, MetaReducer, META_REDUCERS } from '@ngrx/store';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { activeCartInitialState } from './store/reducers/multi-cart.reducer';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.initSync();\n    });\n  return result;\n}\n\n/**\n * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`\n * will use `current` cart instead of the one saved in browser. This meta reducer\n * sets the value on store initialization to null cart which holds active cart loading\n * until the data from storage is restored.\n */\nexport function uninitializeActiveCartMetaReducerFactory(): MetaReducer<any> {\n  const metaReducer = (reducer: ActionReducer<any>) => (state, action) => {\n    const newState = { ...state };\n    if (action.type === '@ngrx/store/init') {\n      newState.cart = {\n        ...newState.cart,\n        ...{ active: activeCartInitialState },\n      };\n    }\n    return reducer(newState, action);\n  };\n  return metaReducer;\n}\n\n/**\n * Complimentary module for cart to store cart id in browser storage.\n * This makes it possible to work on the same anonymous cart even after page refresh.\n */\n@NgModule()\nexport class CartPersistenceModule {\n  static forRoot(): ModuleWithProviders<CartPersistenceModule> {\n    return {\n      ngModule: CartPersistenceModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n        {\n          provide: META_REDUCERS,\n          useFactory: uninitializeActiveCartMetaReducerFactory,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartRemoveEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n  entry: OrderEntry;\n}\n\nexport class CartUpdateEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  cartCode: string;\n  userId: string;\n  quantity: number;\n  entry: OrderEntry;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n  CartRemoveEntrySuccessEvent,\n  CartUpdateEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n    this.registerRemoveEntry();\n    this.registerUpdateEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  protected registerRemoveEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      event: CartRemoveEntrySuccessEvent,\n    });\n  }\n\n  protected registerUpdateEntry(): void {\n    this.registerMapped({\n      action: CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      event: CartUpdateEntrySuccessEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) => {\n        // SwitchMap was used instead of withLatestFrom, because we only want to subscribe to cart stream when action is dispatched.\n        // Using withLatestFrom would trigger subscription to cart observables on event subscription and that causes side effects,\n        // such as loading cart when we don't yet need it.\n        return of(action).pipe(\n          withLatestFrom(\n            this.activeCartService.getActive(),\n            this.activeCartService.getActiveCartId()\n          )\n        );\n      }),\n      filter(\n        ([action, _activeCart, activeCartId]) =>\n          action.payload['cartId'] === activeCartId\n      ),\n      map(([action, activeCart]) =>\n        createFrom(mapping.event, {\n          ...action.payload,\n          cartCode: activeCart.code,\n          entry: action.payload.entry\n            ? action.payload.entry\n            : activeCart.entries[Number(action.payload.entryNumber)],\n        })\n      )\n    );\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overridden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver\n  extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CartPersistenceModule } from './cart-persistence.module';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\n@NgModule({\n  imports: [\n    MultiCartStoreModule,\n    CartEventModule,\n    CartPersistenceModule.forRoot(),\n  ],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected activeCartService: ActiveCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.userIdService.getUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.userIdService.getUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService,\n    protected userIdService: UserIdService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.userIdService.getUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService,\n    protected userIdService: UserIdService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.userIdService.getUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.userIdService.getUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.userIdService.getUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { TranslationService } from '../../../i18n/translation.service';\nimport { BreadcrumbMeta } from '../../model/page.model';\nimport {\n  RouteBreadcrumbConfig,\n  RouteBreadcrumbResolver,\n  RouteBreadcrumbResolverParams,\n} from './route-page-meta.model';\n\n/**\n * Resolves the breadcrumb for the Angular ActivatedRouteSnapshot\n */\n@Injectable({ providedIn: 'root' })\nexport abstract class DefaultRoutePageMetaResolver\n  implements RouteBreadcrumbResolver {\n  constructor(protected translation: TranslationService) {}\n\n  /**\n   * Resolves breadcrumb based on the given url and the breadcrumb config.\n   *\n   * - When breadcrumb config is empty, it returns an empty breadcrumb.\n   * - When breadcrumb config is a string or object with `i18n` property,\n   *    it translates it and use as a label of the returned breadcrumb.\n   * - When breadcrumb config is an object with property `raw`, then\n   *    it's used as a label of the returned breadcrumb.\n   */\n  resolveBreadcrumbs({\n    url,\n    pageMetaConfig,\n  }: RouteBreadcrumbResolverParams): Observable<BreadcrumbMeta[]> {\n    const breadcrumbConfig = pageMetaConfig?.breadcrumb;\n\n    if (!breadcrumbConfig) {\n      return of([]);\n    }\n\n    if (typeof breadcrumbConfig !== 'string' && breadcrumbConfig.raw) {\n      return of([{ link: url, label: breadcrumbConfig.raw }]);\n    }\n\n    return this.translateBreadcrumbLabel(breadcrumbConfig).pipe(\n      map((label) => [{ label, link: url }])\n    );\n  }\n\n  /**\n   * Translates the configured breadcrumb label\n   */\n  protected translateBreadcrumbLabel(\n    breadcrumbConfig: string | RouteBreadcrumbConfig\n  ): Observable<string> {\n    const i18nKey =\n      typeof breadcrumbConfig === 'string'\n        ? breadcrumbConfig\n        : breadcrumbConfig.i18n;\n\n    return this.getParams().pipe(\n      switchMap((params) => this.translation.translate(i18nKey, params ?? {}))\n    );\n  }\n\n  /**\n   * Resolves dynamic data for the whole resolver.\n   */\n  protected getParams(): Observable<{ [_: string]: any }> {\n    return of({});\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { ActivatedRoutesService } from '../../../routing/services/activated-routes.service';\nimport { BreadcrumbMeta } from '../../model/page.model';\nimport { DefaultRoutePageMetaResolver } from './default-route-page-meta.resolver';\nimport {\n  ActivatedRouteSnapshotWithPageMeta,\n  RouteBreadcrumbResolver,\n  RoutePageMetaConfig,\n} from './route-page-meta.model';\n\n// PRIVATE\nexport interface RouteWithExtras {\n  route: ActivatedRouteSnapshotWithPageMeta;\n  resolver: any;\n  url: string;\n}\n\nexport interface RoutingResolveBreadcrumbsOptions {\n  /**\n   * Includes the current route in the breadcrumbs.\n   */\n  includeCurrentRoute?: boolean;\n}\n\n/**\n * Resolves the page meta based on the Angular Activated Routes\n */\n@Injectable({ providedIn: 'root' })\nexport class RoutingPageMetaResolver {\n  constructor(\n    protected activatedRoutesService: ActivatedRoutesService,\n    protected injector: Injector\n  ) {}\n\n  /**\n   * Array of activated routes, excluding the special Angular `root` route.\n   */\n  protected readonly routes$ = this.activatedRoutesService.routes$.pipe(\n    // drop the first route - the special `root` route:\n    map((routes) => (routes = routes.slice(1, routes.length)))\n  );\n\n  /**\n   * Array of activated routes together with precalculated extras:\n   *\n   * - route's page meta resolver\n   * - route's absolute string URL\n   *\n   * In case when there is no page meta resolver configured for a specific route,\n   * it inherits its parent's resolver.\n   *\n   * When there is no page meta resolver configured for the highest parent in the hierarchy,\n   * it uses the `DefaultRoutePageMetaResolver`.\n   */\n  protected readonly routesWithExtras$: Observable<\n    RouteWithExtras[]\n  > = this.routes$.pipe(\n    map((routes) =>\n      routes.reduce<RouteWithExtras[]>((results, route) => {\n        const parent = results.length\n          ? results[results.length - 1]\n          : {\n              route: null,\n              resolver: this.injector.get(DefaultRoutePageMetaResolver),\n              url: '',\n            };\n\n        const resolver = this.getResolver(route) ?? parent.resolver; // fallback to parent's resolver\n\n        const urlPart = this.getUrlPart(route);\n        const url = parent.url + (urlPart ? `/${urlPart}` : ''); // don't add slash for a route with path '', to avoid double slash ...//...\n\n        return results.concat({ route, resolver, url });\n      }, [])\n    ),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  /**\n   * Array of breadcrumbs defined for all the activated routes (from the root route to the leaf route).\n   * It emits on every completed routing navigation.\n   */\n  resolveBreadcrumbs(\n    options?: RoutingResolveBreadcrumbsOptions\n  ): Observable<BreadcrumbMeta[]> {\n    return this.routesWithExtras$.pipe(\n      map((routesWithExtras) =>\n        options?.includeCurrentRoute\n          ? routesWithExtras\n          : this.trimCurrentRoute(routesWithExtras)\n      ),\n      switchMap((routesWithExtras) =>\n        routesWithExtras.length\n          ? combineLatest(\n              routesWithExtras.map((routeWithExtras) =>\n                this.resolveRouteBreadcrumb(routeWithExtras)\n              )\n            )\n          : of([])\n      ),\n      map((breadcrumbArrays) => breadcrumbArrays.flat())\n    );\n  }\n\n  /**\n   * Returns the instance of the RoutePageMetaResolver configured for the given activated route.\n   * Returns null in case there the resolver can't be injected or is undefined.\n   *\n   * @param route route to resolve\n   */\n  protected getResolver(route: ActivatedRouteSnapshotWithPageMeta): any {\n    const pageMetaConfig = this.getPageMetaConfig(route);\n\n    if (typeof pageMetaConfig !== 'string' && pageMetaConfig?.resolver) {\n      return this.injector.get(pageMetaConfig.resolver, null);\n    }\n    return null;\n  }\n\n  /**\n   * Resolvers breadcrumb for a specific route\n   */\n  protected resolveRouteBreadcrumb({\n    route,\n    resolver,\n    url,\n  }: RouteWithExtras): Observable<BreadcrumbMeta[]> {\n    const breadcrumbResolver = resolver as RouteBreadcrumbResolver;\n\n    if (typeof breadcrumbResolver.resolveBreadcrumbs === 'function') {\n      return breadcrumbResolver.resolveBreadcrumbs({\n        route,\n        url,\n        pageMetaConfig: this.getPageMetaConfig(route),\n      });\n    }\n    return of([]);\n  }\n\n  /**\n   * By default in breadcrumbs list we don't want to show a link to the current page, so this function\n   * trims the last breadcrumb (the breadcrumb of the current route).\n   *\n   * This function also handles special case when the current route has a configured empty path ('' route).\n   * The '' routes are often a _technical_ routes to organize other routes, assign common guards for its children, etc.\n   * It shouldn't happen that '' route has a defined breadcrumb config.\n   *\n   * In that case, we trim not only the last route ('' route), but also its parent route with non-empty path\n   * (which likely defines the breadcrumb config).\n   */\n  private trimCurrentRoute(\n    routesWithExtras: RouteWithExtras[]\n  ): RouteWithExtras[] {\n    // If the last route is '', we trim:\n    // - the '' route\n    // - all parent '' routes (until we meet route with non-empty path)\n\n    let i = routesWithExtras.length - 1;\n    while (routesWithExtras[i]?.route?.url.length === 0 && i >= 0) {\n      i--;\n    }\n\n    // Finally we trim the last route (the one with non-empty path)\n    return routesWithExtras.slice(0, i);\n  }\n\n  /**\n   * Returns the URL path for the given activated route in a string format.\n   * (ActivatedRouteSnapshot#url contains an array of `UrlSegment`s, not a string)\n   */\n  private getUrlPart(route: ActivatedRouteSnapshot): string {\n    return route.url.map((urlSegment) => urlSegment.path).join('/');\n  }\n\n  /**\n   * Returns the breadcrumb config placed in the route's `data` configuration.\n   */\n  protected getPageMetaConfig(\n    route: ActivatedRouteSnapshotWithPageMeta\n  ): RoutePageMetaConfig {\n    // Note: we use `route.routeConfig.data` (not `route.data`) to save us from\n    // an edge case bug. In Angular, by design the `data` of ActivatedRoute is inherited\n    // from the parent route, if only the child has an empty path ''.\n    // But in any case we don't want the page meta configs to be inherited, so we\n    // read data from the original `routeConfig` which is static.\n    //\n    // Note: we may inherit the parent's page meta resolver in case we don't define it,\n    // but we don't want to inherit parent's page meta config!\n    return route?.routeConfig?.data?.cxPageMeta;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, defer, Observable } from 'rxjs';\nimport { filter, map, shareReplay } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\nimport { RoutingPageMetaResolver } from './routing/routing-page-meta.resolver';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver\n  extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provide access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  /**\n   * Breadcrumb for the home page.\n   */\n  protected homeBreadcrumb$: Observable<\n    BreadcrumbMeta[]\n  > = this.translation\n    .translate('common.home')\n    .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n\n  /**\n   * All the resolved breadcrumbs (including those from Angular child routes).\n   */\n  private breadcrumbs$: Observable<BreadcrumbMeta[]> = combineLatest([\n    this.homeBreadcrumb$,\n    defer(() => this.routingPageMetaResolver.resolveBreadcrumbs()),\n  ]).pipe(\n    map(\n      (breadcrumbs) => breadcrumbs.flat(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    )\n  );\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService,\n    protected routingPageMetaResolver: RoutingPageMetaResolver\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breadcrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.breadcrumbs$;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\nimport { Config } from '../../config/config-tokens';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected cmsComponentAdapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.cmsComponentAdapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return this.cmsComponentAdapter\n            .findComponentsByIds(missingIds, pageContext)\n            .pipe(\n              map((loadedComponents) => [\n                ...configuredComponents.filter(Boolean),\n                ...loadedComponents,\n              ])\n            );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/rxjs/buffer-debounce-time';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { withdrawOn } from '../../../util/rxjs/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: normalizeHttpError(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      normalizeHttpError(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsPageAdapter } from './cms-page.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure to the given `CmsStructureModel`.\n   * This is beneficial for a fast setup of the UI without necessary\n   * fine-grained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\nimport { provideDefaultConfigFactory } from '../../config/config-providers';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\nimport { provideDefaultConfig } from '../config/config-providers';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { asapScheduler, combineLatest, defer, Observable } from 'rxjs';\nimport { audit } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = {\n  [P in keyof T]: T[P] extends Observable<infer R> ? R : never;\n};\ntype Observables = [Observable<any>] | Observable<any>[];\n\n/**\n * uniteLatest is an alternative to combineLatest. The first emission is\n * emitted synchronously (just like combineLatest) and all following emissions\n * are audited and emitted using asapScheduler.\n *\n * It effectively smooths out emissions when multiple sources will emit at the\n * same time: uniteLatest will have only one emission, where combine latest will\n * have more than one (one per source changed).\n *\n * @param sources\n */\nexport function uniteLatest<R extends Observables>(\n  sources: R\n): Observable<ReturnTypes<R>> {\n  return defer(() => {\n    let subNo = 0;\n    const trigger = new Observable((subscriber) => {\n      const action = () => {\n        subscriber.next();\n        subscriber.complete();\n      };\n\n      if (subNo) {\n        asapScheduler.schedule(action);\n      } else {\n        action();\n      }\n      subNo++;\n    });\n\n    return combineLatest(sources).pipe(audit(() => trigger));\n  }) as any;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\nimport { UnifiedInjector } from '../../lazy-loading/unified-injector';\nimport { uniteLatest } from '../../util/rxjs/unite-latest';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  private resolvers$: Observable<\n    PageMetaResolver[]\n  > = this.unifiedInjector\n    .getMulti(PageMetaResolver)\n    .pipe(shareReplay({ bufferSize: 1, refCount: true })) as Observable<\n    PageMetaResolver[]\n  >;\n\n  constructor(\n    protected cms: CmsService,\n    protected unifiedInjector?: UnifiedInjector\n  ) {}\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta | null> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => this.getMetaResolver(page)),\n      switchMap((metaResolver: PageMetaResolver) =>\n        metaResolver ? this.resolve(metaResolver) : of(null)\n      )\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return uniteLatest(resolveMethods).pipe(\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): Observable<PageMetaResolver> {\n    return this.resolvers$.pipe(\n      map((resolvers) => resolveApplicable(resolvers, [page], [page]))\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { BaseSite } from '../../model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .get()\n      .pipe(filter(Boolean), take(1))\n      .subscribe((site: BaseSite) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { LOCATION_INITIALIZED } from '@angular/common';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\nexport function locationInitializedFactory(\n  configInitializer: ConfigInitializerService\n) {\n  return configInitializer.getStableConfig();\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n        {\n          // Hold on the initial navigation until the Spartacus configuration is stable\n          provide: LOCATION_INITIALIZED,\n          useFactory: locationInitializedFactory,\n          deps: [ConfigInitializerService],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { getCookie } from './utils/get-cookie';\nimport { provideConfigFactory } from './config-providers';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { DatePipe, getLocaleId } from '@angular/common';\nimport { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  // TODO: Replace `any` to match strict types from angular in 4.0\n  // Overload to support stricter type check from angular 11 onwards\n  transform(value: any, format?: string, timezone?: string): string | null;\n  transform(value: null | undefined, format?: string, timezone?: string): null;\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../util/ssr.tokens';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\nimport { provideDefaultConfig } from '../config/config-providers';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  // Overload to support stricter type check from angular 11 onwards\n  transform(value: null | undefined, args?: string): null;\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\n@NgModule({})\nexport class CostCenterModule {\n  static forRoot(): ModuleWithProviders<CostCenterModule> {\n    return {\n      ngModule: CostCenterModule,\n      providers: [],\n    };\n  }\n}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config-tokens';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\nimport { provideDefaultConfig } from '../config/config-providers';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    normalizeHttpError(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/rxjs/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/rxjs/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            normalizeHttpError(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductSelectors } from '../store';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  loadProductReferences(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): void {\n    this.store.dispatch(\n      new ProductActions.LoadProductReferences({\n        productCode,\n        referenceType,\n        pageSize,\n      })\n    );\n  }\n\n  getProductReferences(\n    productCode: string,\n    referenceType: string\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      )\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { defer, merge, Observable, of, SchedulerLike, using } from 'rxjs';\nimport {\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/rxjs/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { uniteLatest } from '../../util/rxjs/unite-latest';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = uniteLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\nimport { ProductScope } from '../model/product-scope';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver\n  extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components?.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/user-auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver\n  extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver\n  extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver\n  extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\nimport { provideDefaultConfigFactory } from '../../config/config-providers';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { UserCostCenterAdapter } from './user-cost-center.adapter';\nimport { EntitiesModel } from '../../../model/misc.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserCostCenterConnector {\n  constructor(protected adapter: UserCostCenterAdapter) {}\n\n  getActiveList(userId: string): Observable<EntitiesModel<CostCenter>> {\n    return this.adapter.loadActiveList(userId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, queueScheduler } from 'rxjs';\nimport { filter, map, observeOn, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Address } from '../../model/address.model';\nimport { CostCenter } from '../../model/org-unit.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserCostCenterService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Load all visible active cost centers for the currently login user\n   */\n  loadActiveCostCenters(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId && userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadActiveCostCenters(userId));\n      }\n    });\n  }\n\n  private getCostCentersState(): Observable<LoaderState<CostCenter[]>> {\n    return this.store.select(UsersSelectors.getCostCentersState);\n  }\n\n  /**\n   * Get all visible active cost centers\n   */\n  getActiveCostCenters(): Observable<CostCenter[]> {\n    return this.getCostCentersState().pipe(\n      observeOn(queueScheduler),\n      tap((process: LoaderState<CostCenter[]>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadActiveCostCenters();\n        }\n      }),\n      filter(\n        (process: LoaderState<CostCenter[]>) => process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  /**\n   * Get the addresses of the cost center's unit based on cost center id\n   * @param costCenterId cost center id\n   */\n  getCostCenterAddresses(costCenterId: string): Observable<Address[]> {\n    return this.getActiveCostCenters().pipe(\n      map((costCenters) => {\n        const costCenter = costCenters.find((cc) => cc.code === costCenterId);\n        if (costCenter && costCenter.unit) {\n          return costCenter.unit.addresses;\n        } else {\n          return [];\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        let replenishmentOrderCode: string;\n\n        this.routingService\n          .getRouterState()\n          .pipe(take(1))\n          .subscribe((data) => {\n            replenishmentOrderCode =\n              data?.state?.params?.replenishmentOrderCode;\n          })\n          .unsubscribe();\n\n        this.store.dispatch(\n          new UserActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n            replenishmentOrderCode,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { UserIdService } from '../../auth/user-auth/facade/user-id.service';\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '../../model/replenishment-order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserReplenishmentOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns replenishment order details for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  loadReplenishmentOrderDetails(replenishmentOrderCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadReplenishmentOrderDetails({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Returns a replenishment order details\n   */\n  getReplenishmentOrderDetails(): Observable<ReplenishmentOrder> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrderDetailsValue)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details loading flag\n   */\n  getReplenishmentOrderDetailsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrderDetailsLoading)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details success flag\n   */\n  getReplenishmentOrderDetailsSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrderDetailsSuccess)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details error flag\n   */\n  getReplenishmentOrderDetailsError(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrderDetailsError)\n    );\n  }\n\n  /**\n   * Clears the replenishment orders details state\n   */\n  clearReplenishmentOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearReplenishmentOrderDetails());\n  }\n\n  /**\n   * Cancels a specific replenishment order for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  cancelReplenishmentOrder(replenishmentOrderCode: string): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.CancelReplenishmentOrder({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Returns the cancel replenishment order loading flag\n   */\n  getCancelReplenishmentOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order success flag\n   */\n  getCancelReplenishmentOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order error flag\n   */\n  getCancelReplenishmentOrderError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clears the cancel replenishment order processing state\n   */\n  clearCancelReplenishmentOrderProcessState(): void {\n    this.store.dispatch(new UserActions.ClearCancelReplenishmentOrder());\n  }\n\n  /**\n   * Returns replenishment order history list\n   */\n  getReplenishmentOrderHistoryList(\n    pageSize: number\n  ): Observable<ReplenishmentOrderList> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrdersState),\n      tap((replenishmentOrderListState) => {\n        const attemptedLoad =\n          replenishmentOrderListState.loading ||\n          replenishmentOrderListState.success ||\n          replenishmentOrderListState.error;\n        if (!attemptedLoad) {\n          this.loadReplenishmentOrderList(pageSize);\n        }\n      }),\n      map((replenishmentOrderListState) => replenishmentOrderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrdersLoading)\n    );\n  }\n\n  /**\n   * Returns a error flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getReplenishmentOrdersError));\n  }\n\n  /**\n   * Returns a success flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getReplenishmentOrdersSuccess)\n    );\n  }\n\n  /**\n   * Retrieves a replenishment order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadReplenishmentOrderList(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadUserReplenishmentOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning replenishment order list\n   */\n  clearReplenishmentOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserReplenishmentOrders());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReplenishmentOrder = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrder {\n  switch (action.type) {\n    case UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS:\n    case UserActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { CostCenter } from '../../../model/org-unit.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: CostCenter[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserCostCenterAction\n): CostCenter[] {\n  switch (action.type) {\n    case UserActions.LOAD_ACTIVE_COST_CENTERS_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_ACTIVE_COST_CENTERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '../../../model/replenishment-order.model';\nimport { UserActions } from '../actions/index';\nexport const initialState: ReplenishmentOrderList = {\n  replenishmentOrders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | UserActions.UserReplenishmentOrdersAction\n    | UserActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrderList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      const cancelledReplenishmentOrder = action.payload;\n      const userReplenishmentOrders = [...state.replenishmentOrders];\n\n      const index = userReplenishmentOrders.findIndex(\n        (replenishmentOrder: ReplenishmentOrder) =>\n          replenishmentOrder.replenishmentOrderCode ===\n          cancelledReplenishmentOrder.replenishmentOrderCode\n      );\n\n      if (index === -1) {\n        return initialState;\n      } else {\n        userReplenishmentOrders[index] = {\n          ...cancelledReplenishmentOrder,\n        };\n      }\n\n      return { ...state, replenishmentOrders: userReplenishmentOrders };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/user-auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../../model/order.model';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '../../../model/replenishment-order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_COST_CENTERS,\n  USER_ORDERS,\n  USER_ORDER_DETAILS,\n  USER_PAYMENT_METHODS,\n  USER_REPLENISHMENT_ORDERS,\n  USER_REPLENISHMENT_ORDER_DETAILS,\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromReplenishmentOrderDetailsReducer from './replenishment-order-details.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromCostCenterReducer from './user-cost-center.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromUserReplenishmentOrdersReducer from './user-replenishment-orders.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    replenishmentOrders: loaderReducer<ReplenishmentOrderList>(\n      USER_REPLENISHMENT_ORDERS,\n      fromUserReplenishmentOrdersReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n    costCenters: loaderReducer<CostCenter[]>(\n      USER_COST_CENTERS,\n      fromCostCenterReducer.reducer\n    ),\n    replenishmentOrder: loaderReducer<ReplenishmentOrder>(\n      USER_REPLENISHMENT_ORDER_DETAILS,\n      fromReplenishmentOrderDetailsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              normalizeHttpError(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              normalizeHttpError(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(normalizeHttpError(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              normalizeHttpError(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(normalizeHttpError(error))\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { ReplenishmentOrder } from '../../../model/replenishment-order.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserReplenishmentOrderConnector } from '../../connectors/replenishment-order/user-replenishment-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrderDetailsEffect {\n  @Effect()\n  loadReplenishmentOrderDetails$: Observable<\n    UserActions.ReplenishmentOrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS),\n    map((action: UserActions.LoadReplenishmentOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.replenishmentOrderConnector\n        .load(payload.userId, payload.replenishmentOrderCode)\n        .pipe(\n          map((replenishmentOrder: ReplenishmentOrder) => {\n            return new UserActions.LoadReplenishmentOrderDetailsSuccess(\n              replenishmentOrder\n            );\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadReplenishmentOrderDetailsFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReplenishmentOrder$: Observable<\n    UserActions.ReplenishmentOrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_REPLENISHMENT_ORDER),\n    map((action: UserActions.CancelReplenishmentOrder) => action.payload),\n    switchMap((payload) => {\n      return this.replenishmentOrderConnector\n        .cancelReplenishmentOrder(\n          payload.userId,\n          payload.replenishmentOrderCode\n        )\n        .pipe(\n          map(\n            (replenishmentOrder: ReplenishmentOrder) =>\n              new UserActions.CancelReplenishmentOrderSuccess(\n                replenishmentOrder\n              )\n          ),\n          catchError((error) => {\n            error?.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelReplenishmentOrderFail(\n                normalizeHttpError(error)\n              )\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: UserReplenishmentOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(normalizeHttpError(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(normalizeHttpError(error))\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(normalizeHttpError(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserAddressesFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(normalizeHttpError(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(new UserActions.UpdateUserAddressFail(normalizeHttpError(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.DeleteUserAddressFail(normalizeHttpError(error)))\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(normalizeHttpError(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(new UserActions.WithdrawUserConsentFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { EntitiesModel } from '../../../model/misc.model';\nimport { CostCenter } from '../../../model/org-unit.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserCostCenterConnector } from '../../connectors/cost-center/user-cost-center.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserCostCenterEffects {\n  @Effect()\n  loadActiveCostCenters$: Observable<\n    UserActions.UserCostCenterAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ACTIVE_COST_CENTERS),\n    map((action: UserActions.LoadActiveCostCenters) => action.payload),\n    switchMap((payload) =>\n      this.userCostCenterConnector.getActiveList(payload).pipe(\n        // TODO(#8875): Should we use here serialize utils?\n        map(\n          (data: EntitiesModel<CostCenter>) =>\n            new UserActions.LoadActiveCostCentersSuccess(data.values)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadActiveCostCentersFail(normalizeHttpError(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userCostCenterConnector: UserCostCenterConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(new UserActions.UpdateUserDetailsFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport {\n  UserOrderConnector,\n  UserReplenishmentOrderConnector,\n} from '../../connectors/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private replenishmentOrderConnector: UserReplenishmentOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return (Boolean(payload.replenishmentOrderCode)\n        ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(\n            payload.userId,\n            payload.replenishmentOrderCode,\n            payload.pageSize,\n            payload.currentPage,\n            payload.sort\n          )\n        : this.orderConnector.getHistory(\n            payload.userId,\n            payload.pageSize,\n            payload.currentPage,\n            payload.sort\n          )\n      ).pipe(\n        map((orders: OrderHistoryList) => {\n          return new UserActions.LoadUserOrdersSuccess(orders);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserOrdersFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../../auth/user-auth/facade/auth.service';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => {\n          this.authService.loginWithCredentials(user.uid, password);\n          return [new UserActions.RegisterGuestSuccess()];\n        }),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => {\n          this.authService.logout();\n          return [new UserActions.RemoveUserSuccess()];\n        }),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector,\n    private authService: AuthService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReplenishmentOrderList } from '../../../model/replenishment-order.model';\nimport { normalizeHttpError } from '../../../util/normalize-http-error';\nimport { UserReplenishmentOrderConnector } from '../../connectors/replenishment-order/user-replenishment-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserReplenishmentOrdersEffect {\n  @Effect()\n  loadUserReplenishmentOrders$: Observable<\n    UserActions.UserReplenishmentOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_REPLENISHMENT_ORDERS),\n    map((action: UserActions.LoadUserReplenishmentOrders) => action.payload),\n    switchMap((payload) => {\n      return this.replenishmentOrderConnector\n        .loadHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: ReplenishmentOrderList) => {\n            return new UserActions.LoadUserReplenishmentOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadUserReplenishmentOrdersFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: UserReplenishmentOrderConnector\n  ) {}\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ReplenishmentOrderDetailsEffect } from './replenishment-order-details.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserCostCenterEffects } from './user-cost-center.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { UserReplenishmentOrdersEffect } from './user-replenishment-orders.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n  UserCostCenterEffects,\n  ReplenishmentOrderDetailsEffect,\n  UserReplenishmentOrdersEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './customer-coupon.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './product-interests.effect';\nexport * from './regions.effect';\nexport * from './replenishment-order-details.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './user-replenishment-orders.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   * @param errorCallback function to be invoked after error during script loading\n   */\n  public load(\n    src: string,\n    params?: Object,\n    callback?: EventListener,\n    errorCallback?: EventListener\n  ): void {\n    const script: HTMLScriptElement = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n    if (errorCallback) {\n      script.addEventListener('error', errorCallback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n"]}