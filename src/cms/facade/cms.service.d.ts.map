{"version":3,"file":"cms.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/cms/facade/cms.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { StateWithCms } from '../store/cms-state';\nexport declare class CmsService {\n    protected store: Store<StateWithCms>;\n    protected routingService: RoutingService;\n    private _launchInSmartEdit;\n    private components;\n    constructor(store: Store<StateWithCms>, routingService: RoutingService);\n    /**\n     * Set _launchInSmartEdit value\n     */\n    set launchInSmartEdit(value: boolean);\n    /**\n     * Whether the app launched in smart edit\n     */\n    isLaunchInSmartEdit(): boolean;\n    /**\n     * Get current CMS page data\n     */\n    getCurrentPage(): Observable<Page>;\n    /**\n     * Get CMS component data by uid\n     *\n     * This method can be safely and optimally used to load multiple components data at the same time.\n     * Calling getComponentData multiple times for different components will always result in optimized\n     * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n     *\n     * In case the component data is not present, the method will load it.\n     * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n     *\n     * @param uid CMS component uid\n     * @param pageContext if provided, it will be used to lookup the component data.\n     */\n    getComponentData<T extends CmsComponent>(uid: string, pageContext?: PageContext): Observable<T>;\n    private createComponentData;\n    /**\n     * Given the position, get the content slot data\n     * @param position : content slot position\n     */\n    getContentSlot(position: string): Observable<ContentSlotData>;\n    /**\n     * Given navigation node uid, get items (with id and type) inside the navigation entries\n     * @param navigationNodeUid : uid of the navigation node\n     */\n    getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem>;\n    /**\n     * Load navigation items data\n     * @param rootUid : the uid of the root navigation node\n     * @param itemList : list of items (with id and type)\n     */\n    loadNavigationItems(rootUid: string, itemList: {\n        id: string;\n        superType: string;\n    }[]): void;\n    /**\n     * Refresh the content of the latest cms page\n     */\n    refreshLatestPage(): void;\n    /**\n     * Refresh the cms page content by page Id\n     * @param pageId\n     */\n    refreshPageById(pageId: string): void;\n    /**\n     * Refresh cms component's content\n     * @param uid component uid\n     * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n     * If not specified, 'current' page context is used.\n     */\n    refreshComponent(uid: string, pageContext?: PageContext): void;\n    /**\n     * Given pageContext, return the CMS page data\n     * @param pageContext\n     */\n    getPageState(pageContext: PageContext): Observable<Page>;\n    /**\n     * Given pageContext, return the CMS page data\n     * @param pageContext\n     */\n    getPageComponentTypes(pageContext: PageContext): Observable<string[]>;\n    /**\n     * Given pageContext, return whether the CMS page data exists or not\n     * @param pageContext\n     */\n    hasPage(pageContext: PageContext, forceReload?: boolean): Observable<boolean>;\n    /**\n     * Given pageContext, return the CMS page data\n     **/\n    getPage(pageContext: PageContext, forceReload?: boolean): Observable<Page>;\n    getPageIndex(pageContext: PageContext): Observable<string>;\n    setPageFailIndex(pageContext: PageContext, value: string): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA;"}