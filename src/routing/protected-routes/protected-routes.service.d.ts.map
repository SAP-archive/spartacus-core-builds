{"version":3,"file":"protected-routes.service.d.ts","sources":["protected-routes.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { RoutingConfig } from '../configurable-routes/config/routing-config';\nexport declare class ProtectedRoutesService {\n    protected config: RoutingConfig;\n    private nonProtectedPaths;\n    protected get routingConfig(): RoutingConfig['routing'];\n    /**\n     * Returns 'protected' property (boolean) from routing config\n     *\n     * @returns boolean\n     */\n    get shouldProtect(): boolean;\n    constructor(config: RoutingConfig);\n    /**\n     * Tells if the url is protected\n     */\n    isUrlProtected(urlSegments: string[]): boolean;\n    /**\n     * Tells whether the url matches at least one of the paths\n     */\n    protected matchAnyPath(urlSegments: string[], pathsSegments: string[][]): boolean;\n    /**\n     * Tells whether the url matches the path\n     */\n    protected matchPath(urlSegments: string[], pathSegments: string[]): boolean;\n    /**\n     * Returns a list of paths that are not protected\n     */\n    protected getNonProtectedPaths(): string[];\n    /**\n     * Splits the url by slashes\n     */\n    protected getSegments(url: string): string[];\n}\n"]}