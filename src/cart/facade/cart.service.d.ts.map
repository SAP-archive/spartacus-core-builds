{"version":3,"file":"cart.service.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/cart/facade/cart.service.d.ts"],"sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { StateWithCart } from '../store/cart-state';\nimport { ActiveCartService } from './active-cart.service';\nimport { CartDataService } from './cart-data.service';\n/**\n * @deprecated since version 1.4\n * Use ActiveCartService instead (API is almost the same)\n * From 1.4 version CartService uses ActiveCartService if it is available\n * Fixes and improvements will be only implemented in ActiveCartService\n */\nexport declare class CartService {\n    protected store: Store<StateWithCart>;\n    protected cartData: CartDataService;\n    protected authService: AuthService;\n    protected activeCartService?: ActiveCartService;\n    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;\n    private previousUserId;\n    private _activeCart$;\n    constructor(store: Store<StateWithCart>, cartData: CartDataService, authService: AuthService, activeCartService?: ActiveCartService);\n    getActive(): Observable<Cart>;\n    getEntries(): Observable<OrderEntry[]>;\n    getCartMergeComplete(): Observable<boolean>;\n    getLoaded(): Observable<boolean>;\n    private loadOrMerge;\n    private load;\n    addEntry(productCode: string, quantity: number): void;\n    removeEntry(entry: OrderEntry): void;\n    updateEntry(entryNumber: string, quantity: number): void;\n    getEntry(productCode: string): Observable<OrderEntry>;\n    addEmail(email: string): void;\n    getAssignedUser(): Observable<User>;\n    isGuestCart(): boolean;\n    /**\n     * Add multiple entries to a cart\n     * Requires a created cart\n     * @param cartEntries : list of entries to add (OrderEntry[])\n     */\n    addEntries(cartEntries: OrderEntry[]): void;\n    private isCreated;\n    /**\n     * Cart is incomplete if it contains only `guid`, `code` and `user` properties, which come from local storage.\n     * To get cart content, we need to load cart from backend.\n     */\n    private isIncomplete;\n    private isJustLoggedIn;\n    private isLoggedIn;\n    /**\n     * Temporary method to merge guest cart with user cart because of backend limitation\n     * This is for an edge case\n     */\n    private guestCartMerge;\n    addVoucher(voucherId: string): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;"}