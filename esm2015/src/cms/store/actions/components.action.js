import { StateUtils } from '../../../state/utils/index';
import { COMPONENT_ENTITY } from '../cms-state';
export const LOAD_CMS_COMPONENT = '[Cms] Load Component';
export const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
export const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
export const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
export class LoadCmsComponent extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT;
    }
}
export class LoadCmsComponentFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid, payload.error);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_FAIL;
    }
}
export class LoadCmsComponentSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_SUCCESS;
    }
}
export class CmsGetComponentFromPage extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, [].concat(payload).map((cmp) => cmp.component.uid));
        this.payload = payload;
        this.type = CMS_GET_COMPONENT_FROM_PAGE;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvc3RvcmUvYWN0aW9ucy9jb21wb25lbnRzLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLHNCQUFzQixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLDJCQUEyQixDQUFDO0FBQ25FLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLDhCQUE4QixDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLCtCQUErQixDQUFDO0FBRTNFLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRS9ELFlBQ1MsT0FHTjtRQUVELEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFMOUIsWUFBTyxHQUFQLE9BQU8sQ0FHYjtRQUxNLFNBQUksR0FBRyxrQkFBa0IsQ0FBQztJQVFuQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUVuRSxZQUNTLE9BQStEO1FBRXRFLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUY3QyxZQUFPLEdBQVAsT0FBTyxDQUF3RDtRQUYvRCxTQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFLeEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHVCQUVYLFNBQVEsVUFBVSxDQUFDLG1CQUFtQjtJQUV0QyxZQUNTLE9BSU47UUFFRCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztRQU43RCxZQUFPLEdBQVAsT0FBTyxDQUliO1FBTk0sU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBUzNDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFFWCxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFdEMsWUFDUyxPQUV5QztRQUVoRCxLQUFLLENBQ0gsZ0JBQWdCLEVBQ2hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUNuRCxDQUFDO1FBUEssWUFBTyxHQUFQLE9BQU8sQ0FFa0M7UUFKekMsU0FBSSxHQUFHLDJCQUEyQixDQUFDO0lBVTVDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENtc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5pbXBvcnQgeyBQYWdlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL3JvdXRpbmcvaW5kZXgnO1xuaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IENPTVBPTkVOVF9FTlRJVFkgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UID0gJ1tDbXNdIExvYWQgQ29tcG9uZW50JztcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlRfRkFJTCA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUyA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDTVNfR0VUX0NPTVBPTkVOVF9GUk9NX1BBR0UgPSAnW0Ntc10gR2V0IENvbXBvbmVudCBmcm9tIFBhZ2UnO1xuXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1aWQ6IHN0cmluZztcbiAgICAgIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dDtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZENtc0NvbXBvbmVudEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVpZDogc3RyaW5nOyBlcnJvcj86IGFueTsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgcGF5bG9hZC51aWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQ21zQ29tcG9uZW50U3VjY2VzczxcbiAgVCBleHRlbmRzIENtc0NvbXBvbmVudFxuPiBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIGNvbXBvbmVudDogVDtcbiAgICAgIHVpZD86IHN0cmluZztcbiAgICAgIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dDtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkIHx8IHBheWxvYWQuY29tcG9uZW50LnVpZCB8fCAnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENtc0dldENvbXBvbmVudEZyb21QYWdlPFxuICBUIGV4dGVuZHMgQ21zQ29tcG9uZW50XG4+IGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6XG4gICAgICB8IHsgY29tcG9uZW50OiBUOyBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQgfVxuICAgICAgfCB7IGNvbXBvbmVudDogVDsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1bXVxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIENPTVBPTkVOVF9FTlRJVFksXG4gICAgICBbXS5jb25jYXQocGF5bG9hZCkubWFwKChjbXApID0+IGNtcC5jb21wb25lbnQudWlkKVxuICAgICk7XG4gIH1cbn1cblxuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBDbXNDb21wb25lbnRBY3Rpb248VCBleHRlbmRzIENtc0NvbXBvbmVudD4gPVxuICB8IExvYWRDbXNDb21wb25lbnRcbiAgfCBMb2FkQ21zQ29tcG9uZW50RmFpbFxuICB8IExvYWRDbXNDb21wb25lbnRTdWNjZXNzPFQ+XG4gIHwgQ21zR2V0Q29tcG9uZW50RnJvbVBhZ2U8VD47XG4iXX0=