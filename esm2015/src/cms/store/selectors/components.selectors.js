import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
const ɵ0 = (state) => state.components;
export const getComponentsState = createSelector(getCmsState, ɵ0);
export const componentsContextSelectorFactory = (uid) => {
    return createSelector(getComponentsState, (componentsState) => StateUtils.entitySelector(componentsState, uid));
};
export const componentsLoaderStateSelectorFactory = (uid, context) => {
    return createSelector(componentsContextSelectorFactory(uid), (componentsContext) => (componentsContext &&
        componentsContext.pageContext &&
        componentsContext.pageContext[context]) ||
        StateUtils.initialLoaderState);
};
/**
 * This selector will return:
 *   - true: component for this context exists
 *   - false: component for this context doesn't exist
 *   - undefined: if the exists status for component is unknown
 *
 * @param uid
 * @param context
 */
export const componentsContextExistsSelectorFactory = (uid, context) => {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), (loaderState) => StateUtils.loaderValueSelector(loaderState));
};
export const componentsDataSelectorFactory = (uid) => {
    return createSelector(componentsContextSelectorFactory(uid), (state) => state ? state.component : undefined);
};
/**
 * This selector will return:
 *   - CmsComponent instance: if we have component data for specified context
 *   - null: if there is no component data for specified context
 *   - undefined: if status of component data for specified context is unknown
 *
 * @param uid
 * @param context
 */
export const componentsSelectorFactory = (uid, context) => {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (componentState, exists) => {
        switch (exists) {
            case true:
                return componentState;
            case false:
                return null;
            case undefined:
                return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvc3RvcmUvc2VsZWN0b3JzL2NvbXBvbmVudHMuc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7V0FLbEIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVO0FBSDNELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUczQixjQUFjLENBQUMsV0FBVyxLQUE4QixDQUFDO0FBRTdELE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUFHLENBQzlDLEdBQVcsRUFDd0MsRUFBRTtJQUNyRCxPQUFPLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQzVELFVBQVUsQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQUcsQ0FDbEQsR0FBVyxFQUNYLE9BQWUsRUFDa0QsRUFBRTtJQUNuRSxPQUFPLGNBQWMsQ0FDbkIsZ0NBQWdDLENBQUMsR0FBRyxDQUFDLEVBQ3JDLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUNwQixDQUFDLGlCQUFpQjtRQUNoQixpQkFBaUIsQ0FBQyxXQUFXO1FBQzdCLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxVQUFVLENBQUMsa0JBQWtCLENBQ2hDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUFHLENBQ3BELEdBQVcsRUFDWCxPQUFlLEVBQ3NDLEVBQUU7SUFDdkQsT0FBTyxjQUFjLENBQ25CLG9DQUFvQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFDbEQsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FDN0QsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLEdBQVcsRUFDK0MsRUFBRTtJQUM1RCxPQUFPLGNBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3JFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUNwQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUN2QyxHQUFXLEVBQ1gsT0FBZSxFQUNrRCxFQUFFO0lBQ25FLE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxHQUFHLENBQUMsRUFDbEMsc0NBQXNDLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNwRCxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN6QixRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssSUFBSTtnQkFDUCxPQUFPLGNBQWMsQ0FBQztZQUN4QixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLFNBQVM7Z0JBQ1osT0FBTyxTQUFTLENBQUM7U0FDcEI7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDb21wb25lbnRzQ29udGV4dCwgQ29tcG9uZW50c1N0YXRlLCBTdGF0ZVdpdGhDbXMgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcblxuZXhwb3J0IGNvbnN0IGdldENvbXBvbmVudHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICBDb21wb25lbnRzU3RhdGVcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDbXNTdGF0ZSwgKHN0YXRlKSA9PiBzdGF0ZS5jb21wb25lbnRzKTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENvbXBvbmVudHNDb250ZXh0PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRDb21wb25lbnRzU3RhdGUsIChjb21wb25lbnRzU3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5lbnRpdHlTZWxlY3Rvcihjb21wb25lbnRzU3RhdGUsIHVpZClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPGJvb2xlYW4+PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzQ29udGV4dFNlbGVjdG9yRmFjdG9yeSh1aWQpLFxuICAgIChjb21wb25lbnRzQ29udGV4dCkgPT5cbiAgICAgIChjb21wb25lbnRzQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dFtjb250ZXh0XSkgfHxcbiAgICAgIFN0YXRlVXRpbHMuaW5pdGlhbExvYWRlclN0YXRlXG4gICk7XG59O1xuXG4vKipcbiAqIFRoaXMgc2VsZWN0b3Igd2lsbCByZXR1cm46XG4gKiAgIC0gdHJ1ZTogY29tcG9uZW50IGZvciB0aGlzIGNvbnRleHQgZXhpc3RzXG4gKiAgIC0gZmFsc2U6IGNvbXBvbmVudCBmb3IgdGhpcyBjb250ZXh0IGRvZXNuJ3QgZXhpc3RcbiAqICAgLSB1bmRlZmluZWQ6IGlmIHRoZSBleGlzdHMgc3RhdHVzIGZvciBjb21wb25lbnQgaXMgdW5rbm93blxuICpcbiAqIEBwYXJhbSB1aWRcbiAqIEBwYXJhbSBjb250ZXh0XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzQ29udGV4dEV4aXN0c1NlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIGJvb2xlYW4gfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNMb2FkZXJTdGF0ZVNlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxuICAgIChsb2FkZXJTdGF0ZSkgPT4gU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKGxvYWRlclN0YXRlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudCB8IHVuZGVmaW5lZD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkodWlkKSwgKHN0YXRlKSA9PlxuICAgIHN0YXRlID8gc3RhdGUuY29tcG9uZW50IDogdW5kZWZpbmVkXG4gICk7XG59O1xuXG4vKipcbiAqIFRoaXMgc2VsZWN0b3Igd2lsbCByZXR1cm46XG4gKiAgIC0gQ21zQ29tcG9uZW50IGluc3RhbmNlOiBpZiB3ZSBoYXZlIGNvbXBvbmVudCBkYXRhIGZvciBzcGVjaWZpZWQgY29udGV4dFxuICogICAtIG51bGw6IGlmIHRoZXJlIGlzIG5vIGNvbXBvbmVudCBkYXRhIGZvciBzcGVjaWZpZWQgY29udGV4dFxuICogICAtIHVuZGVmaW5lZDogaWYgc3RhdHVzIG9mIGNvbXBvbmVudCBkYXRhIGZvciBzcGVjaWZpZWQgY29udGV4dCBpcyB1bmtub3duXG4gKlxuICogQHBhcmFtIHVpZFxuICogQHBhcmFtIGNvbnRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBDbXNDb21wb25lbnQgfCBudWxsIHwgdW5kZWZpbmVkPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzRGF0YVNlbGVjdG9yRmFjdG9yeSh1aWQpLFxuICAgIGNvbXBvbmVudHNDb250ZXh0RXhpc3RzU2VsZWN0b3JGYWN0b3J5KHVpZCwgY29udGV4dCksXG4gICAgKGNvbXBvbmVudFN0YXRlLCBleGlzdHMpID0+IHtcbiAgICAgIHN3aXRjaCAoZXhpc3RzKSB7XG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICByZXR1cm4gY29tcG9uZW50U3RhdGU7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbiJdfQ==