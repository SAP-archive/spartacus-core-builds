import { __read, __spread } from "tslib";
/**
 * Helper logic to resolve best matching handler
 *
 * Finding best match is a two step process:
 * 1. Find all matching handlers
 *    - all handlers for which hasMatch(...matchParams) will return true
 *    - all handlers without hasMatch method (implicit always match)
 * 2. Find the handler with highest priority
 *    - handler with highest getPriority(...priorityParams) will win
 *    - handler without getPriority method is treated as Priotity.NORMAL or 0
 *    - handlers with the same priority are sorted by order of providers, the handler that was provided later wins
 *
 * @param handlers - array or handler-like instancese
 * @param matchParams - array of parameters passed for hasMatch calls
 * @param priorityParams - array of parameters passed for getPriority calls
 */
export function resolveHandler(handlers, matchParams, priorityParams) {
    var matchedHandlers = (handlers !== null && handlers !== void 0 ? handlers : []).filter(function (handler) { return !handler.hasMatch || handler.hasMatch.apply(handler, __spread(matchParams)); });
    if (matchedHandlers.length > 1) {
        matchedHandlers.sort(function (a, b) {
            return (a.getPriority ? a.getPriority.apply(a, __spread(priorityParams)) : 0 /* NORMAL */) -
                (b.getPriority ? b.getPriority.apply(b, __spread(priorityParams)) : 0 /* NORMAL */);
        });
    }
    return matchedHandlers[matchedHandlers.length - 1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy91dGlsL2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXlCQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUM1QixRQUFhLEVBQ2IsV0FBbUIsRUFDbkIsY0FBc0I7SUFFdEIsSUFBTSxlQUFlLEdBQUcsQ0FBQyxRQUFRLGFBQVIsUUFBUSxjQUFSLFFBQVEsR0FBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQzdDLFVBQUMsT0FBTyxJQUFLLE9BQUEsQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLE9BQWhCLE9BQU8sV0FBYSxXQUFXLEVBQUMsRUFBckQsQ0FBcUQsQ0FDbkUsQ0FBQztJQUNGLElBQUksZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDOUIsZUFBZSxDQUFDLElBQUksQ0FDbEIsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNILE9BQUEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxPQUFiLENBQUMsV0FBZ0IsY0FBYyxHQUFFLENBQUMsZUFBZ0IsQ0FBQztnQkFDcEUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxPQUFiLENBQUMsV0FBZ0IsY0FBYyxHQUFFLENBQUMsZUFBZ0IsQ0FBQztRQURwRSxDQUNvRSxDQUN2RSxDQUFDO0tBQ0g7SUFDRCxPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW51bSBQcmlvcml0eSB7XG4gIEZBTExCQUNLID0gLTUwLCAvLyB1c2VkIGFzIGZhbGxiYWNrLCB3aGVuIHRoZXJlIGlzIG5vIG90aGVyIG1hdGNoZXNcbiAgTE9XID0gLTEwLCAvLyB1c2VkIG1haW5seSBpbiBsaWJyYXJpZXMsIGVhc3kgb3ZlcnJpZGFibGVcbiAgTk9STUFMID0gMCwgLy8gZGVmYXVsdCBpbiBhcHBsaWNhdGlvblxuICBISUdIID0gMTAsIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Vcbn1cblxuLyoqXG4gKiBCYXNlIGludGVyZmFjZSBmb3IgaW1wbGVtZW50aW5nIGhhbmRsZXJzIGluIGEgY29uc2lzdGVudCB3YXlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIYW5kbGVyIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBoYW5kbGVyIGNhbiBiZSB1c2VkIHRvIGhhbmRsZSBzcGVjaWZpZWQgY29uZGl0aW9uXG4gICAqL1xuICBoYXNNYXRjaD8oLi4ucGFyYW1zKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmV0dXJucyBwcmlvcml0eSBvciBzY29yZSBmb3Igc3BlY2lmaWVkIGhhbmRsZXIuXG4gICAqXG4gICAqIElmIG11bHRpcGxlIGhhbmRsZXJzIGNhbiBiZSB1c2VkIHRvIGhhbmRsZSBzcGVjaWZpZWQgY29uZGl0aW9uLCB0aGUgb25lXG4gICAqIHdpdGggaGlnaGVzdCBwcmlvcml0eSBvciBzY29yZSB3aW5zLlxuICAgKi9cbiAgZ2V0UHJpb3JpdHk/KC4uLnBhcmFtcyk6IFByaW9yaXR5IHwgbnVtYmVyO1xufVxuXG4vKipcbiAqIEhlbHBlciBsb2dpYyB0byByZXNvbHZlIGJlc3QgbWF0Y2hpbmcgaGFuZGxlclxuICpcbiAqIEZpbmRpbmcgYmVzdCBtYXRjaCBpcyBhIHR3byBzdGVwIHByb2Nlc3M6XG4gKiAxLiBGaW5kIGFsbCBtYXRjaGluZyBoYW5kbGVyc1xuICogICAgLSBhbGwgaGFuZGxlcnMgZm9yIHdoaWNoIGhhc01hdGNoKC4uLm1hdGNoUGFyYW1zKSB3aWxsIHJldHVybiB0cnVlXG4gKiAgICAtIGFsbCBoYW5kbGVycyB3aXRob3V0IGhhc01hdGNoIG1ldGhvZCAoaW1wbGljaXQgYWx3YXlzIG1hdGNoKVxuICogMi4gRmluZCB0aGUgaGFuZGxlciB3aXRoIGhpZ2hlc3QgcHJpb3JpdHlcbiAqICAgIC0gaGFuZGxlciB3aXRoIGhpZ2hlc3QgZ2V0UHJpb3JpdHkoLi4ucHJpb3JpdHlQYXJhbXMpIHdpbGwgd2luXG4gKiAgICAtIGhhbmRsZXIgd2l0aG91dCBnZXRQcmlvcml0eSBtZXRob2QgaXMgdHJlYXRlZCBhcyBQcmlvdGl0eS5OT1JNQUwgb3IgMFxuICogICAgLSBoYW5kbGVycyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGFyZSBzb3J0ZWQgYnkgb3JkZXIgb2YgcHJvdmlkZXJzLCB0aGUgaGFuZGxlciB0aGF0IHdhcyBwcm92aWRlZCBsYXRlciB3aW5zXG4gKlxuICogQHBhcmFtIGhhbmRsZXJzIC0gYXJyYXkgb3IgaGFuZGxlci1saWtlIGluc3RhbmNlc2VcbiAqIEBwYXJhbSBtYXRjaFBhcmFtcyAtIGFycmF5IG9mIHBhcmFtZXRlcnMgcGFzc2VkIGZvciBoYXNNYXRjaCBjYWxsc1xuICogQHBhcmFtIHByaW9yaXR5UGFyYW1zIC0gYXJyYXkgb2YgcGFyYW1ldGVycyBwYXNzZWQgZm9yIGdldFByaW9yaXR5IGNhbGxzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSGFuZGxlcjxUIGV4dGVuZHMgSGFuZGxlcj4oXG4gIGhhbmRsZXJzOiBUW10sXG4gIG1hdGNoUGFyYW1zPzogYW55W10sXG4gIHByaW9yaXR5UGFyYW1zPzogYW55W11cbik6IFQgfCB1bmRlZmluZWQge1xuICBjb25zdCBtYXRjaGVkSGFuZGxlcnMgPSAoaGFuZGxlcnMgPz8gW10pLmZpbHRlcihcbiAgICAoaGFuZGxlcikgPT4gIWhhbmRsZXIuaGFzTWF0Y2ggfHwgaGFuZGxlci5oYXNNYXRjaCguLi5tYXRjaFBhcmFtcylcbiAgKTtcbiAgaWYgKG1hdGNoZWRIYW5kbGVycy5sZW5ndGggPiAxKSB7XG4gICAgbWF0Y2hlZEhhbmRsZXJzLnNvcnQoXG4gICAgICAoYSwgYikgPT5cbiAgICAgICAgKGEuZ2V0UHJpb3JpdHkgPyBhLmdldFByaW9yaXR5KC4uLnByaW9yaXR5UGFyYW1zKSA6IFByaW9yaXR5Lk5PUk1BTCkgLVxuICAgICAgICAoYi5nZXRQcmlvcml0eSA/IGIuZ2V0UHJpb3JpdHkoLi4ucHJpb3JpdHlQYXJhbXMpIDogUHJpb3JpdHkuTk9STUFMKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZWRIYW5kbGVyc1ttYXRjaGVkSGFuZGxlcnMubGVuZ3RoIC0gMV07XG59XG4iXX0=