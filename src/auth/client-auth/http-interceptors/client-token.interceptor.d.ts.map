{"version":3,"file":"client-token.interceptor.d.ts","sources":["client-token.interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { ClientToken } from '../models/client-token.model';\nimport { ClientErrorHandlingService } from '../services/client-error-handling.service';\nimport { ClientTokenService } from '../services/client-token.service';\n/**\n * Interceptor for handling requests with `USE_CLIENT_TOKEN` header.\n * Provides `Authorization` header with client token and handles errors related to client auth.\n */\nexport declare class ClientTokenInterceptor implements HttpInterceptor {\n    protected clientTokenService: ClientTokenService;\n    protected clientErrorHandlingService: ClientErrorHandlingService;\n    protected occEndpoints: OccEndpointsService;\n    constructor(clientTokenService: ClientTokenService, clientErrorHandlingService: ClientErrorHandlingService, occEndpoints: OccEndpointsService);\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    protected getClientToken(isClientTokenRequest: boolean): Observable<ClientToken>;\n    protected isClientTokenRequest(request: HttpRequest<any>): boolean;\n    protected isExpiredToken(resp: HttpErrorResponse): boolean;\n}\n"]}