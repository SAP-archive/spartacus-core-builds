{"version":3,"file":"config.module.d.ts","sources":["/home/travis/build/SAP/cloud-commerce-spartacus-storefront/dist/core/src/config/config.module.d.ts"],"sourcesContent":["import { InjectionToken, ModuleWithProviders, Provider } from '@angular/core';\nimport { ConfigValidator } from './config-validator/config-validator';\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport declare const Config: InjectionToken<unknown>;\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport declare const ConfigChunk: InjectionToken<unknown>;\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * @param config Config object to merge with the global configuration\n */\nexport declare function provideConfig(config?: any): Provider;\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport declare function provideConfigFactory(configFactory: Function, deps?: any[]): Provider;\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport declare function configurationFactory(configChunks: any[], configValidators: ConfigValidator[], // TODO: remove, deprecated since 1.3, issue #5279\nconfigInitializerGuard?: boolean): any;\nexport declare class ConfigModule {\n    /**\n     * Import ConfigModule and contribute config to the global configuration\n     *\n     * @param config Config object to merge with the global configuration\n     */\n    static withConfig(config: object): ModuleWithProviders<ConfigModule>;\n    /**\n     * Import ConfigModule and contribute config to the global configuration using factory function\n     *\n     * @param configFactory Factory function that will generate configuration\n     * @param deps Optional dependencies to factory function\n     */\n    static withConfigFactory(configFactory: Function, deps?: any[]): ModuleWithProviders<ConfigModule>;\n    /**\n     * Module with providers, should be imported only once, if possible, at the root of the app.\n     *\n     * @param config\n     */\n    static forRoot(config?: any): ModuleWithProviders<ConfigModule>;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;"}