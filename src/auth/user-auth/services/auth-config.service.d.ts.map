{"version":3,"file":"auth-config.service.d.ts","sources":["auth-config.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OccConfig } from '../../../occ/config/occ-config';\nimport { AuthConfig, AuthLibConfig } from '../config/auth-config';\nimport { OAuthFlow } from '../models/oauth-flow';\n/**\n * Utility service on top of the authorization config.\n * Provides handy defaults, when not everything is set in the configuration.\n * Use this service instead of direct configuration.\n */\nexport declare class AuthConfigService {\n    protected authConfig: AuthConfig;\n    protected occConfig: OccConfig;\n    constructor(authConfig: AuthConfig, occConfig: OccConfig);\n    /**\n     * Utility to make access to authentication config easier.\n     */\n    private get config();\n    /**\n     * Get client_id\n     *\n     * @return client_id\n     */\n    getClientId(): string;\n    /**\n     * Get client_secret. OAuth server shouldn't require it from web apps (but Hybris OAuth server requires).\n     *\n     * @return client_secret\n     */\n    getClientSecret(): string;\n    /**\n     * Returns base url of the authorization server\n     */\n    getBaseUrl(): string;\n    /**\n     * Returns endpoint for getting the auth token\n     */\n    getTokenEndpoint(): string;\n    /**\n     * Returns url for redirect to the authorization server to get token/code\n     */\n    getLoginUrl(): string;\n    /**\n     * Returns endpoint for token revocation (both access and refresh token).\n     */\n    getRevokeEndpoint(): string;\n    /**\n     * Returns logout url to redirect to on logout.\n     */\n    getLogoutUrl(): string;\n    /**\n     * Returns userinfo endpoint of the OAuth server.\n     */\n    getUserinfoEndpoint(): string;\n    /**\n     * Returns configuration specific for the angular-oauth2-oidc library.\n     */\n    getOAuthLibConfig(): AuthLibConfig;\n    protected prefixEndpoint(endpoint: string): string;\n    /**\n     * Returns the type of the OAuth flow based on auth config.\n     * Use when you have to perform particular action only in some of the OAuth flow scenarios.\n     */\n    getOAuthFlow(): OAuthFlow;\n}\n"]}