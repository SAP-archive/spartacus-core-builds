{"version":3,"file":"asm-state-persistence.service.d.ts","sources":["asm-state-persistence.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { AuthToken } from '../../auth/user-auth/models/auth-token.model';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { AsmUi } from '../models/asm.models';\nimport { StateWithAsm } from '../store';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n/**\n * ASM state synced to browser storage.\n */\nexport interface SyncedAsmState {\n    ui?: AsmUi;\n    emulatedUserToken?: AuthToken;\n    tokenTarget?: TokenTarget;\n}\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\nexport declare class AsmStatePersistenceService implements OnDestroy {\n    protected statePersistenceService: StatePersistenceService;\n    protected store: Store<StateWithAsm>;\n    protected authStorageService: AsmAuthStorageService;\n    protected subscription: Subscription;\n    constructor(statePersistenceService: StatePersistenceService, store: Store<StateWithAsm>, authStorageService: AsmAuthStorageService);\n    /**\n     * Identifier used for storage key.\n     */\n    protected key: string;\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync(): void;\n    /**\n     * Gets and transforms state from different sources into the form that should\n     * be saved in storage.\n     */\n    protected getAsmState(): Observable<SyncedAsmState>;\n    /**\n     * Function called on each browser storage read.\n     * Used to update state from browser -> state.\n     */\n    protected onRead(state: SyncedAsmState): void;\n    ngOnDestroy(): void;\n}\n"]}