import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import { AuthService } from '../../auth/facade/auth.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { UserService } from '../../user/facade/user.service';
import { CartActions } from '../store/actions/index';
import { MultiCartSelectors } from '../store/selectors/index';
import { MultiCartService } from './multi-cart.service';
let WishListService = class WishListService {
    constructor(store, authService, userService, multiCartService) {
        this.store = store;
        this.authService = authService;
        this.userService = userService;
        this.multiCartService = multiCartService;
    }
    createWishList(userId, name, description) {
        this.store.dispatch(new CartActions.CreateWishList({ userId, name, description }));
    }
    getWishList() {
        return combineLatest([
            this.getWishListId(),
            this.userService.get(),
            this.authService.getOccUserId(),
        ]).pipe(distinctUntilChanged(), tap(([wishListId, user, userId]) => {
            if (!Boolean(wishListId) &&
                userId !== OCC_USER_ID_ANONYMOUS &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), switchMap(([wishListId]) => this.multiCartService.getCart(wishListId)));
    }
    loadWishList(userId, customerId) {
        this.store.dispatch(new CartActions.LoadWishList({ userId, customerId }));
    }
    addEntry(productCode) {
        this.getWishListId()
            .pipe(distinctUntilChanged(), withLatestFrom(this.authService.getOccUserId(), this.userService.get()), tap(([wishListId, userId, user]) => {
            if (!Boolean(wishListId) &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), take(1))
            .subscribe(([wishListId, userId]) => this.multiCartService.addEntry(userId, wishListId, productCode, 1));
    }
    removeEntry(entry) {
        this.getWishListId()
            .pipe(distinctUntilChanged(), withLatestFrom(this.authService.getOccUserId(), this.userService.get()), tap(([wishListId, userId, user]) => {
            if (!Boolean(wishListId) &&
                Boolean(user) &&
                Boolean(user.customerId)) {
                this.loadWishList(userId, user.customerId);
            }
        }), filter(([wishListId]) => Boolean(wishListId)), take(1))
            .subscribe(([wishListId, userId]) => this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber));
    }
    getWishListLoading() {
        return this.getWishListId().pipe(switchMap((wishListId) => this.multiCartService
            .isStable(wishListId)
            .pipe(map((stable) => !stable))));
    }
    getWishListId() {
        return this.store.pipe(select(MultiCartSelectors.getWishListId));
    }
};
WishListService.ctorParameters = () => [
    { type: Store },
    { type: AuthService },
    { type: UserService },
    { type: MultiCartService }
];
WishListService = __decorate([
    Injectable()
], WishListService);
export { WishListService };
//# sourceMappingURL=data:application/json;base64,