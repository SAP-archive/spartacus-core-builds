import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { CART_FEATURE, } from '../cart-state';
const getCartContentSelector = (state) => state.content;
const ɵ0 = getCartContentSelector;
const getCartRefreshSelector = (state) => state.refresh;
const ɵ1 = getCartRefreshSelector;
const getCartEntriesSelector = (state) => state.entries;
const ɵ2 = getCartEntriesSelector;
const getCartMergeCompleteSelector = (state) => state.cartMergeComplete;
const ɵ3 = getCartMergeCompleteSelector;
export const getCartsState = createFeatureSelector(CART_FEATURE);
const ɵ4 = (cartsState) => cartsState.active;
export const getActiveCartState = createSelector(getCartsState, ɵ4);
const ɵ5 = state => StateLoaderSelectors.loaderValueSelector(state);
export const getCartState = createSelector(getActiveCartState, ɵ5);
export const getCartContent = createSelector(getCartState, getCartContentSelector);
export const getCartRefresh = createSelector(getCartState, getCartRefreshSelector);
const ɵ6 = state => (StateLoaderSelectors.loaderSuccessSelector(state) &&
    !StateLoaderSelectors.loaderLoadingSelector(state) &&
    !StateLoaderSelectors.loaderValueSelector(state).refresh) ||
    (StateLoaderSelectors.loaderErrorSelector(state) &&
        !StateLoaderSelectors.loaderLoadingSelector(state) &&
        !StateLoaderSelectors.loaderValueSelector(state).refresh);
export const getCartLoaded = createSelector(getActiveCartState, ɵ6);
const ɵ7 = state => StateLoaderSelectors.loaderLoadingSelector(state);
export const getCartLoading = createSelector(getActiveCartState, ɵ7);
export const getCartMergeComplete = createSelector(getCartState, getCartMergeCompleteSelector);
export const getCartEntriesMap = createSelector(getCartState, getCartEntriesSelector);
export const getCartEntrySelectorFactory = (productCode) => {
    return createSelector(getCartEntriesMap, entries => {
        if (entries) {
            return entries[productCode];
        }
    });
};
const ɵ8 = entities => {
    return Object.keys(entities).map(code => entities[code]);
};
export const getCartEntries = createSelector(getCartEntriesMap, ɵ8);
const ɵ9 = content => content.user;
export const getCartUser = createSelector(getCartContent, ɵ9);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL3NlbGVjdG9ycy9jYXJ0LnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sYUFBYSxDQUFDO0FBR3JCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWxFLE9BQU8sRUFHTCxZQUFZLEdBRWIsTUFBTSxlQUFlLENBQUM7QUFHdkIsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7O0FBQ25FLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDOztBQUNuRSxNQUFNLHNCQUFzQixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7QUFDbkUsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUN4RCxLQUFLLENBQUMsaUJBQWlCLENBQUM7O0FBRTFCLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FHdEIscUJBQXFCLENBQWEsWUFBWSxDQUFDLENBQUM7V0FPbEQsQ0FBQyxVQUFzQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTTtBQUwvQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUNoQixhQUFhLEtBRWQsQ0FBQztXQU9BLEtBQUssQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO0FBTDFELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FHckIsY0FBYyxDQUNoQixrQkFBa0IsS0FFbkIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FHdkIsY0FBYyxDQUNoQixZQUFZLEVBQ1osc0JBQXNCLENBQ3ZCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBR3ZCLGNBQWMsQ0FDaEIsWUFBWSxFQUNaLHNCQUFzQixDQUN2QixDQUFDO1dBT0EsS0FBSyxDQUFDLEVBQUUsQ0FDTixDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUNoRCxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUNsRCxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMzRCxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztRQUM5QyxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUNsRCxDQUFDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQVgvRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBR3RCLGNBQWMsQ0FDaEIsa0JBQWtCLEtBUW5CLENBQUM7V0FJQSxLQUFLLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQUY1RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQW1DLGNBQWMsQ0FDMUUsa0JBQWtCLEtBRW5CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FHN0IsY0FBYyxDQUNoQixZQUFZLEVBQ1osNEJBQTRCLENBQzdCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixZQUFZLEVBQ1osc0JBQXNCLENBQ3ZCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxXQUFtQixFQUMwQixFQUFFO0lBQy9DLE9BQU8sY0FBYyxDQUNuQixpQkFBaUIsRUFDakIsT0FBTyxDQUFDLEVBQUU7UUFDUixJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDLENBQUM7V0FPQSxRQUFRLENBQUMsRUFBRTtJQUNULE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBUEgsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUd2QixjQUFjLENBQ2hCLGlCQUFpQixLQUlsQixDQUFDO1dBT0EsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSTtBQUx6QixNQUFNLENBQUMsTUFBTSxXQUFXLEdBR3BCLGNBQWMsQ0FDaEIsY0FBYyxLQUVmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQgeyBPcmRlckVudHJ5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVMb2FkZXJTZWxlY3RvcnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHtcbiAgQ2FydHNTdGF0ZSxcbiAgQ2FydFN0YXRlLFxuICBDQVJUX0ZFQVRVUkUsXG4gIFN0YXRlV2l0aENhcnQsXG59IGZyb20gJy4uL2NhcnQtc3RhdGUnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL21pc2MubW9kZWwnO1xuXG5jb25zdCBnZXRDYXJ0Q29udGVudFNlbGVjdG9yID0gKHN0YXRlOiBDYXJ0U3RhdGUpID0+IHN0YXRlLmNvbnRlbnQ7XG5jb25zdCBnZXRDYXJ0UmVmcmVzaFNlbGVjdG9yID0gKHN0YXRlOiBDYXJ0U3RhdGUpID0+IHN0YXRlLnJlZnJlc2g7XG5jb25zdCBnZXRDYXJ0RW50cmllc1NlbGVjdG9yID0gKHN0YXRlOiBDYXJ0U3RhdGUpID0+IHN0YXRlLmVudHJpZXM7XG5jb25zdCBnZXRDYXJ0TWVyZ2VDb21wbGV0ZVNlbGVjdG9yID0gKHN0YXRlOiBDYXJ0U3RhdGUpID0+XG4gIHN0YXRlLmNhcnRNZXJnZUNvbXBsZXRlO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgQ2FydHNTdGF0ZVxuPiA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxDYXJ0c1N0YXRlPihDQVJUX0ZFQVRVUkUpO1xuXG5leHBvcnQgY29uc3QgZ2V0QWN0aXZlQ2FydFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDYXJ0LFxuICBMb2FkZXJTdGF0ZTxDYXJ0U3RhdGU+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENhcnRzU3RhdGUsXG4gIChjYXJ0c1N0YXRlOiBDYXJ0c1N0YXRlKSA9PiBjYXJ0c1N0YXRlLmFjdGl2ZVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgQ2FydFN0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFjdGl2ZUNhcnRTdGF0ZSxcbiAgc3RhdGUgPT4gU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0Q29udGVudDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgQ2FydFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDYXJ0U3RhdGUsXG4gIGdldENhcnRDb250ZW50U2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0UmVmcmVzaDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDYXJ0U3RhdGUsXG4gIGdldENhcnRSZWZyZXNoU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0TG9hZGVkOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDYXJ0LFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFjdGl2ZUNhcnRTdGF0ZSxcbiAgc3RhdGUgPT5cbiAgICAoU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSAmJlxuICAgICAgIVN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSkgJiZcbiAgICAgICFTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5yZWZyZXNoKSB8fFxuICAgIChTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJFcnJvclNlbGVjdG9yKHN0YXRlKSAmJlxuICAgICAgIVN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSkgJiZcbiAgICAgICFTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5yZWZyZXNoKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPGFueSwgYm9vbGVhbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QWN0aXZlQ2FydFN0YXRlLFxuICBzdGF0ZSA9PiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydE1lcmdlQ29tcGxldGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENhcnQsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2FydFN0YXRlLFxuICBnZXRDYXJ0TWVyZ2VDb21wbGV0ZVNlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydEVudHJpZXNNYXA6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENhcnQsXG4gIHsgW2NvZGU6IHN0cmluZ106IE9yZGVyRW50cnkgfVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDYXJ0U3RhdGUsXG4gIGdldENhcnRFbnRyaWVzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50cnlTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHByb2R1Y3RDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ2FydCwgT3JkZXJFbnRyeT4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0Q2FydEVudHJpZXNNYXAsXG4gICAgZW50cmllcyA9PiB7XG4gICAgICBpZiAoZW50cmllcykge1xuICAgICAgICByZXR1cm4gZW50cmllc1twcm9kdWN0Q29kZV07XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRyaWVzOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDYXJ0LFxuICBPcmRlckVudHJ5W11cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2FydEVudHJpZXNNYXAsXG4gIGVudGl0aWVzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZW50aXRpZXMpLm1hcChjb2RlID0+IGVudGl0aWVzW2NvZGVdKTtcbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRVc2VyOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDYXJ0LFxuICBVc2VyXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENhcnRDb250ZW50LFxuICBjb250ZW50ID0+IGNvbnRlbnQudXNlclxuKTtcbiJdfQ==