import { __extends } from "tslib";
import { EntityFailAction, EntityLoadAction, EntitySuccessAction, } from '../../../state/utils/entity-loader/entity-loader.action';
import { EntityProcessesDecrementAction, EntityProcessesIncrementAction, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';
import { EntityRemoveAction } from '../../../state/utils/entity/entity.action';
import { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';
import { MULTI_CART_DATA } from '../multi-cart-state';
export var CREATE_CART = '[Cart] Create Cart';
export var CREATE_CART_FAIL = '[Cart] Create Cart Fail';
export var CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
export var LOAD_CART = '[Cart] Load Cart';
export var LOAD_CART_FAIL = '[Cart] Load Cart Fail';
export var LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
export var ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
export var ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
export var ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
export var MERGE_CART = '[Cart] Merge Cart';
export var MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
export var RESET_CART_DETAILS = '[Cart] Reset Cart Details';
export var REMOVE_CART = '[Cart] Remove Cart';
export var DELETE_CART = '[Cart] Delete Cart';
export var DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';
export var DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
var CreateCart = /** @class */ (function (_super) {
    __extends(CreateCart, _super);
    function CreateCart(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
        _this.payload = payload;
        _this.type = CREATE_CART;
        return _this;
    }
    return CreateCart;
}(EntityLoadAction));
export { CreateCart };
var CreateCartFail = /** @class */ (function (_super) {
    __extends(CreateCartFail, _super);
    function CreateCartFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.tempCartId) || this;
        _this.payload = payload;
        _this.type = CREATE_CART_FAIL;
        return _this;
    }
    return CreateCartFail;
}(EntityFailAction));
export { CreateCartFail };
var CreateCartSuccess = /** @class */ (function (_super) {
    __extends(CreateCartSuccess, _super);
    function CreateCartSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = CREATE_CART_SUCCESS;
        return _this;
    }
    return CreateCartSuccess;
}(EntitySuccessAction));
export { CreateCartSuccess };
var AddEmailToCart = /** @class */ (function (_super) {
    __extends(AddEmailToCart, _super);
    function AddEmailToCart(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = ADD_EMAIL_TO_CART;
        return _this;
    }
    return AddEmailToCart;
}(EntityProcessesIncrementAction));
export { AddEmailToCart };
var AddEmailToCartFail = /** @class */ (function (_super) {
    __extends(AddEmailToCartFail, _super);
    function AddEmailToCartFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = ADD_EMAIL_TO_CART_FAIL;
        return _this;
    }
    return AddEmailToCartFail;
}(EntityProcessesDecrementAction));
export { AddEmailToCartFail };
var AddEmailToCartSuccess = /** @class */ (function (_super) {
    __extends(AddEmailToCartSuccess, _super);
    function AddEmailToCartSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = ADD_EMAIL_TO_CART_SUCCESS;
        return _this;
    }
    return AddEmailToCartSuccess;
}(EntityProcessesDecrementAction));
export { AddEmailToCartSuccess };
var LoadCart = /** @class */ (function (_super) {
    __extends(LoadCart, _super);
    function LoadCart(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = LOAD_CART;
        return _this;
    }
    return LoadCart;
}(EntityLoadAction));
export { LoadCart };
var LoadCartFail = /** @class */ (function (_super) {
    __extends(LoadCartFail, _super);
    function LoadCartFail(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId, payload.error) || this;
        _this.payload = payload;
        _this.type = LOAD_CART_FAIL;
        return _this;
    }
    return LoadCartFail;
}(EntityFailAction));
export { LoadCartFail };
var LoadCartSuccess = /** @class */ (function (_super) {
    __extends(LoadCartSuccess, _super);
    function LoadCartSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = LOAD_CART_SUCCESS;
        return _this;
    }
    return LoadCartSuccess;
}(EntitySuccessAction));
export { LoadCartSuccess };
var MergeCart = /** @class */ (function () {
    function MergeCart(payload) {
        this.payload = payload;
        this.type = MERGE_CART;
    }
    return MergeCart;
}());
export { MergeCart };
var MergeCartSuccess = /** @class */ (function (_super) {
    __extends(MergeCartSuccess, _super);
    function MergeCartSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.oldCartId) || this;
        _this.payload = payload;
        _this.type = MERGE_CART_SUCCESS;
        return _this;
    }
    return MergeCartSuccess;
}(EntityRemoveAction));
export { MergeCartSuccess };
/**
 * On site context change we want to keep current list of entities, but we want to clear the value and flags.
 * With ProcessesLoaderResetAction we run it on every entity of this type.
 */
var ResetCartDetails = /** @class */ (function (_super) {
    __extends(ResetCartDetails, _super);
    function ResetCartDetails() {
        var _this = _super.call(this, MULTI_CART_DATA) || this;
        _this.type = RESET_CART_DETAILS;
        return _this;
    }
    return ResetCartDetails;
}(ProcessesLoaderResetAction));
export { ResetCartDetails };
/**
 * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.
 * For removing particular cart in both places use DeleteCart actions.
 */
var RemoveCart = /** @class */ (function (_super) {
    __extends(RemoveCart, _super);
    function RemoveCart(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = REMOVE_CART;
        return _this;
    }
    return RemoveCart;
}(EntityRemoveAction));
export { RemoveCart };
var DeleteCart = /** @class */ (function () {
    function DeleteCart(payload) {
        this.payload = payload;
        this.type = DELETE_CART;
    }
    return DeleteCart;
}());
export { DeleteCart };
var DeleteCartSuccess = /** @class */ (function (_super) {
    __extends(DeleteCartSuccess, _super);
    function DeleteCartSuccess(payload) {
        var _this = _super.call(this, MULTI_CART_DATA, payload.cartId) || this;
        _this.payload = payload;
        _this.type = DELETE_CART_SUCCESS;
        return _this;
    }
    return DeleteCartSuccess;
}(EntityRemoveAction));
export { DeleteCartSuccess };
var DeleteCartFail = /** @class */ (function () {
    function DeleteCartFail(payload) {
        this.payload = payload;
        this.type = DELETE_CART_FAIL;
    }
    return DeleteCartFail;
}());
export { DeleteCartFail };
//# sourceMappingURL=data:application/json;base64,