/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Meta } from '@angular/platform-browser';
import { provideConfigFactory } from '../../config';
/** @type {?} */
export const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';
/** @type {?} */
export const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';
/** @type {?} */
export const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';
/** @type {?} */
export const MEDIA_BASE_URL_META_TAG_PLACEHOLDER = 'MEDIA_BACKEND_BASE_URL_VALUE';
/**
 * @param {?} meta
 * @return {?}
 */
export function occServerConfigFromMetaTagFactory(meta) {
    /** @type {?} */
    const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);
    return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER
        ? { backend: { occ: { baseUrl } } }
        : {};
}
/**
 * @param {?} meta
 * @return {?}
 */
export function mediaServerConfigFromMetaTagFactory(meta) {
    /** @type {?} */
    const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);
    return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER
        ? { backend: { media: { baseUrl } } }
        : {};
}
/**
 * @param {?} name
 * @param {?} meta
 * @return {?}
 */
function getMetaTagContent(name, meta) {
    /** @type {?} */
    const metaTag = meta.getTag(`name="${name}"`);
    return metaTag && metaTag.content;
}
/**
 * @return {?}
 */
export function provideConfigFromMetaTags() {
    return [
        provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),
        provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLWZyb20tbWV0YS10YWctZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvY29uZmlnL2NvbmZpZy1mcm9tLW1ldGEtdGFnLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBR3BELE1BQU0sT0FBTywwQkFBMEIsR0FBRyxzQkFBc0I7O0FBQ2hFLE1BQU0sT0FBTyxpQ0FBaUMsR0FBRyw0QkFBNEI7O0FBQzdFLE1BQU0sT0FBTyw0QkFBNEIsR0FBRyx3QkFBd0I7O0FBQ3BFLE1BQU0sT0FBTyxtQ0FBbUMsR0FDOUMsOEJBQThCOzs7OztBQUVoQyxNQUFNLFVBQVUsaUNBQWlDLENBQUMsSUFBVTs7VUFDcEQsT0FBTyxHQUFHLGlCQUFpQixDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQztJQUNuRSxPQUFPLE9BQU8sSUFBSSxPQUFPLEtBQUssaUNBQWlDO1FBQzdELENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7UUFDbkMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNULENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLG1DQUFtQyxDQUFDLElBQVU7O1VBQ3RELE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyw0QkFBNEIsRUFBRSxJQUFJLENBQUM7SUFDckUsT0FBTyxPQUFPLElBQUksT0FBTyxLQUFLLG1DQUFtQztRQUMvRCxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBQ3JDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDVCxDQUFDOzs7Ozs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLElBQVksRUFBRSxJQUFVOztVQUMzQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDO0lBQzdDLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDcEMsQ0FBQzs7OztBQUVELE1BQU0sVUFBVSx5QkFBeUI7SUFDdkMsT0FBTztRQUNMLG9CQUFvQixDQUFDLGlDQUFpQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0Qsb0JBQW9CLENBQUMsbUNBQW1DLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNsRSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNZXRhIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBwcm92aWRlQ29uZmlnRmFjdG9yeSB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuL29jYy1jb25maWcnO1xuXG5leHBvcnQgY29uc3QgT0NDX0JBU0VfVVJMX01FVEFfVEFHX05BTUUgPSAnb2NjLWJhY2tlbmQtYmFzZS11cmwnO1xuZXhwb3J0IGNvbnN0IE9DQ19CQVNFX1VSTF9NRVRBX1RBR19QTEFDRUhPTERFUiA9ICdPQ0NfQkFDS0VORF9CQVNFX1VSTF9WQUxVRSc7XG5leHBvcnQgY29uc3QgTUVESUFfQkFTRV9VUkxfTUVUQV9UQUdfTkFNRSA9ICdtZWRpYS1iYWNrZW5kLWJhc2UtdXJsJztcbmV4cG9ydCBjb25zdCBNRURJQV9CQVNFX1VSTF9NRVRBX1RBR19QTEFDRUhPTERFUiA9XG4gICdNRURJQV9CQUNLRU5EX0JBU0VfVVJMX1ZBTFVFJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9jY1NlcnZlckNvbmZpZ0Zyb21NZXRhVGFnRmFjdG9yeShtZXRhOiBNZXRhKTogT2NjQ29uZmlnIHtcbiAgY29uc3QgYmFzZVVybCA9IGdldE1ldGFUYWdDb250ZW50KE9DQ19CQVNFX1VSTF9NRVRBX1RBR19OQU1FLCBtZXRhKTtcbiAgcmV0dXJuIGJhc2VVcmwgJiYgYmFzZVVybCAhPT0gT0NDX0JBU0VfVVJMX01FVEFfVEFHX1BMQUNFSE9MREVSXG4gICAgPyB7IGJhY2tlbmQ6IHsgb2NjOiB7IGJhc2VVcmwgfSB9IH1cbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVkaWFTZXJ2ZXJDb25maWdGcm9tTWV0YVRhZ0ZhY3RvcnkobWV0YTogTWV0YSk6IE9jY0NvbmZpZyB7XG4gIGNvbnN0IGJhc2VVcmwgPSBnZXRNZXRhVGFnQ29udGVudChNRURJQV9CQVNFX1VSTF9NRVRBX1RBR19OQU1FLCBtZXRhKTtcbiAgcmV0dXJuIGJhc2VVcmwgJiYgYmFzZVVybCAhPT0gTUVESUFfQkFTRV9VUkxfTUVUQV9UQUdfUExBQ0VIT0xERVJcbiAgICA/IHsgYmFja2VuZDogeyBtZWRpYTogeyBiYXNlVXJsIH0gfSB9XG4gICAgOiB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0YVRhZ0NvbnRlbnQobmFtZTogc3RyaW5nLCBtZXRhOiBNZXRhKSB7XG4gIGNvbnN0IG1ldGFUYWcgPSBtZXRhLmdldFRhZyhgbmFtZT1cIiR7bmFtZX1cImApO1xuICByZXR1cm4gbWV0YVRhZyAmJiBtZXRhVGFnLmNvbnRlbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQ29uZmlnRnJvbU1ldGFUYWdzKCk6IFByb3ZpZGVyW10ge1xuICByZXR1cm4gW1xuICAgIHByb3ZpZGVDb25maWdGYWN0b3J5KG9jY1NlcnZlckNvbmZpZ0Zyb21NZXRhVGFnRmFjdG9yeSwgW01ldGFdKSxcbiAgICBwcm92aWRlQ29uZmlnRmFjdG9yeShtZWRpYVNlcnZlckNvbmZpZ0Zyb21NZXRhVGFnRmFjdG9yeSwgW01ldGFdKSxcbiAgXTtcbn1cbiJdfQ==