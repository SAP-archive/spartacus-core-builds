{"version":3,"file":"user-id.service.d.ts","sources":["user-id.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable, Subscription } from 'rxjs';\n/**\n * This implementation is OCC specific.\n * Different backend might have completely different need regarding user id.\n * It might not need user id at all and work based on access_token.\n * To implement custom solution provide your own implementation and customize services that use UserIdService\n */\nexport declare class UserIdService {\n    private _userId;\n    /**\n     * Sets current user id.\n     *\n     * @param userId\n     */\n    setUserId(userId: string): void;\n    /**\n     * This function provides the userId the OCC calls should use, depending\n     * on whether there is an active storefront session or not.\n     *\n     * It returns the userId of the current storefront user or 'anonymous'\n     * in the case there are no signed in user in the storefront.\n     *\n     * The user id of a regular customer session is 'current'. In the case of an\n     * asm customer emulation session, the userId will be the customerId.\n     */\n    getUserId(): Observable<string>;\n    /**\n     * @deprecated Use `takeUserId` method instead.\n     *\n     * Calls provided callback with current user id.\n     *\n     * @param cb callback function to invoke\n     */\n    invokeWithUserId(cb: (userId: string) => any): Subscription;\n    /**\n     * Utility method if you need userId to perform single action (eg. dispatch call to API).\n     *\n     * @param loggedIn Set to true if you want the observable to emit id only for logged in user. Throws in case of anonymous user.\n     *\n     * @returns Observable that emits once and completes with the last userId value.\n     */\n    takeUserId(loggedIn?: boolean): Observable<string | never>;\n    /**\n     * Sets user id to the default value for logged out user.\n     */\n    clearUserId(): void;\n    /**\n     * Checks if the userId is of emulated user type.\n     */\n    isEmulated(): Observable<boolean>;\n}\n"]}