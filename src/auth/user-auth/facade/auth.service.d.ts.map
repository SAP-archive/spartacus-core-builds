{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { StateWithClientAuth } from '../../client-auth/store/client-auth-state';\nimport { AuthRedirectService } from '../services/auth-redirect.service';\nimport { AuthStorageService } from '../services/auth-storage.service';\nimport { OAuthLibWrapperService } from '../services/oauth-lib-wrapper.service';\nimport { UserIdService } from './user-id.service';\n/**\n * Auth service for normal user authentication.\n * Use to check auth status, login/logout with different OAuth flows.\n */\nexport declare class AuthService {\n    protected store: Store<StateWithClientAuth>;\n    protected userIdService: UserIdService;\n    protected oAuthLibWrapperService: OAuthLibWrapperService;\n    protected authStorageService: AuthStorageService;\n    protected authRedirectService: AuthRedirectService;\n    protected routingService: RoutingService;\n    constructor(store: Store<StateWithClientAuth>, userIdService: UserIdService, oAuthLibWrapperService: OAuthLibWrapperService, authStorageService: AuthStorageService, authRedirectService: AuthRedirectService, routingService: RoutingService);\n    /**\n     * Check params in url and if there is an code/token then try to login with those.\n     */\n    checkOAuthParamsInUrl(): Promise<void>;\n    /**\n     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server.\n     */\n    loginWithRedirect(): boolean;\n    /**\n     * Loads a new user token with Resource Owner Password Flow.\n     * @param userId\n     * @param password\n     */\n    authorize(userId: string, password: string): Promise<void>;\n    /**\n     * Logout a storefront customer.\n     */\n    logout(): Promise<any>;\n    /**\n     * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n     */\n    isUserLoggedIn(): Observable<boolean>;\n    /**\n     * Initialize logout procedure by redirecting to the `logout` endpoint.\n     */\n    initLogout(): void;\n}\n"]}