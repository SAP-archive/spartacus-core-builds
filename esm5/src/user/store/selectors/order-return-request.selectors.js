import { createSelector } from '@ngrx/store';
import { getUserState } from './feature.selector';
import { StateLoaderSelectors } from '../../../state/utils/index';
var ɵ0 = function (state) { return state.orderReturn; };
export var getOrderReturnRequestState = createSelector(getUserState, ɵ0);
var ɵ1 = function (state) {
    return StateLoaderSelectors.loaderValueSelector(state);
};
export var getOrderReturnRequest = createSelector(getOrderReturnRequestState, ɵ1);
var ɵ2 = function (state) {
    return StateLoaderSelectors.loaderLoadingSelector(state);
};
export var getOrderReturnRequestLoading = createSelector(getOrderReturnRequestState, ɵ2);
var ɵ3 = function (state) {
    return StateLoaderSelectors.loaderSuccessSelector(state) &&
        !StateLoaderSelectors.loaderLoadingSelector(state);
};
export var getOrderReturnRequestSuccess = createSelector(getOrderReturnRequestState, ɵ3);
var ɵ4 = function (state) { return state.orderReturnList; };
export var getOrderReturnRequestListState = createSelector(getUserState, ɵ4);
var ɵ5 = function (state) {
    return StateLoaderSelectors.loaderValueSelector(state);
};
export var getOrderReturnRequestList = createSelector(getOrderReturnRequestListState, ɵ5);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLXJlcXVlc3Quc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvc2VsZWN0b3JzL29yZGVyLXJldHVybi1yZXF1ZXN0LnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUcvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7U0FLakMsVUFBQyxLQUFnQixJQUFLLE9BQUEsS0FBSyxDQUFDLFdBQVcsRUFBakIsQ0FBaUI7QUFIeEUsTUFBTSxDQUFDLElBQU0sMEJBQTBCLEdBR25DLGNBQWMsQ0FBQyxZQUFZLEtBQTBDLENBQUM7U0FPeEUsVUFBQyxLQUFpQztJQUNoQyxPQUFBLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztBQUEvQyxDQUErQztBQU5uRCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FHOUIsY0FBYyxDQUNoQiwwQkFBMEIsS0FHM0IsQ0FBQztTQU9BLFVBQUMsS0FBaUM7SUFDaEMsT0FBQSxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7QUFBakQsQ0FBaUQ7QUFOckQsTUFBTSxDQUFDLElBQU0sNEJBQTRCLEdBR3JDLGNBQWMsQ0FDaEIsMEJBQTBCLEtBRzNCLENBQUM7U0FPQSxVQUFDLEtBQWlDO0lBQ2hDLE9BQUEsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO1FBQ2pELENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0FBRGxELENBQ2tEO0FBUHRELE1BQU0sQ0FBQyxJQUFNLDRCQUE0QixHQUdyQyxjQUFjLENBQ2hCLDBCQUEwQixLQUkzQixDQUFDO1NBSytCLFVBQUMsS0FBZ0IsSUFBSyxPQUFBLEtBQUssQ0FBQyxlQUFlLEVBQXJCLENBQXFCO0FBSDVFLE1BQU0sQ0FBQyxJQUFNLDhCQUE4QixHQUd2QyxjQUFjLENBQUMsWUFBWSxLQUE4QyxDQUFDO1NBTzVFLFVBQUMsS0FBcUM7SUFDcEMsT0FBQSxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7QUFBL0MsQ0FBK0M7QUFObkQsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBR2xDLGNBQWMsQ0FDaEIsOEJBQThCLEtBRy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFJldHVyblJlcXVlc3QsIFJldHVyblJlcXVlc3RMaXN0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVXaXRoVXNlciwgVXNlclN0YXRlIH0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRVc2VyU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7IFN0YXRlTG9hZGVyU2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIExvYWRlclN0YXRlPFJldHVyblJlcXVlc3Q+XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0VXNlclN0YXRlLCAoc3RhdGU6IFVzZXJTdGF0ZSkgPT4gc3RhdGUub3JkZXJSZXR1cm4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBSZXR1cm5SZXF1ZXN0XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldE9yZGVyUmV0dXJuUmVxdWVzdFN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJldHVyblJlcXVlc3Q+KSA9PlxuICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmRlclJldHVyblJlcXVlc3RTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0U3VjY2VzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmRlclJldHVyblJlcXVlc3RTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZXR1cm5SZXF1ZXN0PikgPT5cbiAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpICYmXG4gICAgIVN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRPcmRlclJldHVyblJlcXVlc3RMaXN0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIExvYWRlclN0YXRlPFJldHVyblJlcXVlc3RMaXN0PlxuPiA9IGNyZWF0ZVNlbGVjdG9yKGdldFVzZXJTdGF0ZSwgKHN0YXRlOiBVc2VyU3RhdGUpID0+IHN0YXRlLm9yZGVyUmV0dXJuTGlzdCk7XG5cbmV4cG9ydCBjb25zdCBnZXRPcmRlclJldHVyblJlcXVlc3RMaXN0OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBSZXR1cm5SZXF1ZXN0TGlzdFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmRlclJldHVyblJlcXVlc3RMaXN0U3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmV0dXJuUmVxdWVzdExpc3Q+KSA9PlxuICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpXG4pO1xuIl19