import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, Actions, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { UserActions } from '../actions/index';
import { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';
import { makeErrorSerializable } from '../../../util/serialization-utils';
var ProductInterestsEffect = /** @class */ (function () {
    function ProductInterestsEffect(actions$, userInterestsConnector) {
        var _this = this;
        this.actions$ = actions$;
        this.userInterestsConnector = userInterestsConnector;
        this.loadProductInteres$ = this.actions$.pipe(ofType(UserActions.LOAD_PRODUCT_INTERESTS), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.userInterestsConnector
                .getInterests(payload.userId, payload.pageSize, payload.currentPage, payload.sort, payload.productCode, payload.notificationType)
                .pipe(map(function (interests) {
                return new UserActions.LoadProductInterestsSuccess(interests);
            }), catchError(function (error) {
                return of(new UserActions.LoadProductInterestsFail(makeErrorSerializable(error)));
            }));
        }));
        this.removeProductInterest$ = this.actions$.pipe(ofType(UserActions.REMOVE_PRODUCT_INTEREST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.userInterestsConnector
                .removeInterest(payload.userId, payload.item)
                .pipe(switchMap(function (data) { return [
                new UserActions.LoadProductInterests(payload.singleDelete
                    ? {
                        userId: payload.userId,
                        productCode: payload.item.product.code,
                        notificationType: payload.item.productInterestEntry[0].interestType,
                    }
                    : { userId: payload.userId }),
                new UserActions.RemoveProductInterestSuccess(data),
            ]; }), catchError(function (error) {
                return of(new UserActions.RemoveProductInterestFail(makeErrorSerializable(error)));
            }));
        }));
        this.addProductInterest$ = this.actions$.pipe(ofType(UserActions.ADD_PRODUCT_INTEREST), map(function (action) { return action.payload; }), switchMap(function (payload) {
            return _this.userInterestsConnector
                .addInterest(payload.userId, payload.productCode, payload.notificationType)
                .pipe(switchMap(function (res) { return [
                new UserActions.LoadProductInterests({
                    userId: payload.userId,
                    productCode: payload.productCode,
                    notificationType: payload.notificationType,
                }),
                new UserActions.AddProductInterestSuccess(res),
            ]; }), catchError(function (error) {
                return of(new UserActions.AddProductInterestFail(makeErrorSerializable(error)));
            }));
        }));
    }
    ProductInterestsEffect.ctorParameters = function () { return [
        { type: Actions },
        { type: UserInterestsConnector }
    ]; };
    __decorate([
        Effect()
    ], ProductInterestsEffect.prototype, "loadProductInteres$", void 0);
    __decorate([
        Effect()
    ], ProductInterestsEffect.prototype, "removeProductInterest$", void 0);
    __decorate([
        Effect()
    ], ProductInterestsEffect.prototype, "addProductInterest$", void 0);
    ProductInterestsEffect = __decorate([
        Injectable()
    ], ProductInterestsEffect);
    return ProductInterestsEffect;
}());
export { ProductInterestsEffect };
//# sourceMappingURL=data:application/json;base64,