/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelector } from '@ngrx/store';
import { PageType } from '../../../occ/occ-models/occ.models';
import { getCmsState } from './feature.selectors';
/** @type {?} */
export const getPageEntitiesSelector = (state) => state.pageData.entities;
/** @type {?} */
export const getIndexByType = (index, type) => {
    switch (type) {
        case PageType.CONTENT_PAGE: {
            return index.content;
        }
        case PageType.PRODUCT_PAGE: {
            return index.product;
        }
        case PageType.CATEGORY_PAGE: {
            return index.category;
        }
        case PageType.CATALOG_PAGE: {
            return index.catalog;
        }
    }
    return { entities: {} };
};
/** @type {?} */
export const getPageComponentTypesSelector = (page) => {
    /** @type {?} */
    const componentTypes = new Set();
    if (page && page.slots) {
        for (const slot of Object.keys(page.slots)) {
            for (const component of page.slots[slot].components || []) {
                componentTypes.add(component.flexType);
            }
        }
    }
    return Array.from(componentTypes);
};
/** @type {?} */
export const getPageState = createSelector(getCmsState, (state) => state.page);
/** @type {?} */
export const getPageStateIndex = createSelector(getPageState, (page) => page.index);
/** @type {?} */
export const getIndex = (pageContext) => createSelector(getPageStateIndex, (index) => getIndexByType(index, pageContext.type));
/** @type {?} */
export const getIndexEntity = (pageContext) => createSelector(getIndex(pageContext), index => index.entities[pageContext.id] || {});
/** @type {?} */
export const getPageEntities = createSelector(getPageState, getPageEntitiesSelector);
/** @type {?} */
export const getPageData = (pageContext) => createSelector(getPageEntities, getIndexEntity(pageContext), (entities, entity) => entities[entity.value]);
/** @type {?} */
export const getPageComponentTypes = (pageContext) => createSelector(getPageData(pageContext), pageData => getPageComponentTypesSelector(pageData));
/** @type {?} */
export const currentSlotSelectorFactory = (pageContext, position) => {
    return createSelector(getPageData(pageContext), entity => {
        if (entity) {
            return entity.slots[position];
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9wYWdlLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFPL0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFFbEQsTUFBTSxPQUFPLHVCQUF1QixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQzFELEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUTs7QUFDekIsTUFBTSxPQUFPLGNBQWMsR0FBRyxDQUM1QixLQUFnQixFQUNoQixJQUFjLEVBQ2EsRUFBRTtJQUM3QixRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUNELEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUNELEtBQUssUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQztTQUN2QjtRQUNELEtBQUssUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtLQUNGO0lBQ0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUMxQixDQUFDOztBQUVELE1BQU0sT0FBTyw2QkFBNkIsR0FBNkIsQ0FDckUsSUFBVSxFQUNWLEVBQUU7O1VBQ0ksY0FBYyxHQUFHLElBQUksR0FBRyxFQUFVO0lBQ3hDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDdEIsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxLQUFLLE1BQU0sU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLEVBQUUsRUFBRTtnQkFDekQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEM7U0FDRjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FHckIsY0FBYyxDQUNoQixXQUFXLEVBQ1gsQ0FBQyxLQUFlLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2hDOztBQUVELE1BQU0sT0FBTyxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixZQUFZLEVBQ1osQ0FBQyxJQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ2hDOztBQUVELE1BQU0sT0FBTyxRQUFRLEdBQUcsQ0FDdEIsV0FBd0IsRUFDbUMsRUFBRSxDQUM3RCxjQUFjLENBQ1osaUJBQWlCLEVBQ2pCLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQzlEOztBQUVILE1BQU0sT0FBTyxjQUFjLEdBQUcsQ0FDNUIsV0FBd0IsRUFDNkIsRUFBRSxDQUN2RCxjQUFjLENBQ1osUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUNyQixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FDOUM7O0FBRUgsTUFBTSxPQUFPLGVBQWUsR0FHeEIsY0FBYyxDQUNoQixZQUFZLEVBQ1osdUJBQXVCLENBQ3hCOztBQUVELE1BQU0sT0FBTyxXQUFXLEdBQUcsQ0FDekIsV0FBd0IsRUFDYyxFQUFFLENBQ3hDLGNBQWMsQ0FDWixlQUFlLEVBQ2YsY0FBYyxDQUFDLFdBQVcsQ0FBQyxFQUMzQixDQUFDLFFBQWdDLEVBQUUsTUFBMkIsRUFBRSxFQUFFLENBQ2hFLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3pCOztBQUVILE1BQU0sT0FBTyxxQkFBcUIsR0FBRyxDQUNuQyxXQUF3QixFQUNrQixFQUFFLENBQzVDLGNBQWMsQ0FDWixXQUFXLENBQUMsV0FBVyxDQUFDLEVBQ3hCLFFBQVEsQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQ3BEOztBQUVILE1BQU0sT0FBTywwQkFBMEIsR0FBRyxDQUN4QyxXQUF3QixFQUN4QixRQUFnQixFQUNpQyxFQUFFO0lBQ25ELE9BQU8sY0FBYyxDQUNuQixXQUFXLENBQUMsV0FBVyxDQUFDLEVBQ3hCLE1BQU0sQ0FBQyxFQUFFO1FBQ1AsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuaW1wb3J0IHsgQ21zU3RhdGUsIFBhZ2VTdGF0ZSwgU3RhdGVXaXRoQ21zLCBJbmRleFR5cGUgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuaW1wb3J0IHsgUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9yb3V0aW5nJztcbmltcG9ydCB7IEVudGl0eUxvYWRlclN0YXRlLCBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlJztcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uLy4uL21vZGVsL2NvbnRlbnQtc2xvdC1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vLi4vb2NjL29jYy1tb2RlbHMvb2NjLm1vZGVscyc7XG5cbmltcG9ydCB7IGdldENtc1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlRW50aXRpZXNTZWxlY3RvciA9IChzdGF0ZTogUGFnZVN0YXRlKSA9PlxuICBzdGF0ZS5wYWdlRGF0YS5lbnRpdGllcztcbmV4cG9ydCBjb25zdCBnZXRJbmRleEJ5VHlwZSA9IChcbiAgaW5kZXg6IEluZGV4VHlwZSxcbiAgdHlwZTogUGFnZVR5cGVcbik6IEVudGl0eUxvYWRlclN0YXRlPHN0cmluZz4gPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFBhZ2VUeXBlLkNPTlRFTlRfUEFHRToge1xuICAgICAgcmV0dXJuIGluZGV4LmNvbnRlbnQ7XG4gICAgfVxuICAgIGNhc2UgUGFnZVR5cGUuUFJPRFVDVF9QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXgucHJvZHVjdDtcbiAgICB9XG4gICAgY2FzZSBQYWdlVHlwZS5DQVRFR09SWV9QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXguY2F0ZWdvcnk7XG4gICAgfVxuICAgIGNhc2UgUGFnZVR5cGUuQ0FUQUxPR19QQUdFOiB7XG4gICAgICByZXR1cm4gaW5kZXguY2F0YWxvZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgZW50aXRpZXM6IHt9IH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFnZUNvbXBvbmVudFR5cGVzU2VsZWN0b3I6IChwYWdlOiBQYWdlKSA9PiBzdHJpbmdbXSA9IChcbiAgcGFnZTogUGFnZVxuKSA9PiB7XG4gIGNvbnN0IGNvbXBvbmVudFR5cGVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGlmIChwYWdlICYmIHBhZ2Uuc2xvdHMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Qgb2YgT2JqZWN0LmtleXMocGFnZS5zbG90cykpIHtcbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHBhZ2Uuc2xvdHNbc2xvdF0uY29tcG9uZW50cyB8fCBbXSkge1xuICAgICAgICBjb21wb25lbnRUeXBlcy5hZGQoY29tcG9uZW50LmZsZXhUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oY29tcG9uZW50VHlwZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFBhZ2VTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICBQYWdlU3RhdGVcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q21zU3RhdGUsXG4gIChzdGF0ZTogQ21zU3RhdGUpID0+IHN0YXRlLnBhZ2Vcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlU3RhdGVJbmRleDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICBJbmRleFR5cGVcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UGFnZVN0YXRlLFxuICAocGFnZTogUGFnZVN0YXRlKSA9PiBwYWdlLmluZGV4XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0SW5kZXggPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIEVudGl0eUxvYWRlclN0YXRlPHN0cmluZz4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFBhZ2VTdGF0ZUluZGV4LFxuICAgIChpbmRleDogSW5kZXhUeXBlKSA9PiBnZXRJbmRleEJ5VHlwZShpbmRleCwgcGFnZUNvbnRleHQudHlwZSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEluZGV4RW50aXR5ID0gKFxuICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHRcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBMb2FkZXJTdGF0ZTxzdHJpbmc+PiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRJbmRleChwYWdlQ29udGV4dCksXG4gICAgaW5kZXggPT4gaW5kZXguZW50aXRpZXNbcGFnZUNvbnRleHQuaWRdIHx8IHt9XG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlRW50aXRpZXM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENtcyxcbiAgeyBbaWQ6IHN0cmluZ106IFBhZ2UgfVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRQYWdlU3RhdGUsXG4gIGdldFBhZ2VFbnRpdGllc1NlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UGFnZURhdGEgPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIFBhZ2U+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFBhZ2VFbnRpdGllcyxcbiAgICBnZXRJbmRleEVudGl0eShwYWdlQ29udGV4dCksXG4gICAgKGVudGl0aWVzOiB7IFtpZDogc3RyaW5nXTogUGFnZSB9LCBlbnRpdHk6IExvYWRlclN0YXRlPHN0cmluZz4pID0+XG4gICAgICBlbnRpdGllc1tlbnRpdHkudmFsdWVdXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRQYWdlQ29tcG9uZW50VHlwZXMgPSAoXG4gIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dFxuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIHN0cmluZ1tdPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQYWdlRGF0YShwYWdlQ29udGV4dCksXG4gICAgcGFnZURhdGEgPT4gZ2V0UGFnZUNvbXBvbmVudFR5cGVzU2VsZWN0b3IocGFnZURhdGEpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBjdXJyZW50U2xvdFNlbGVjdG9yRmFjdG9yeSA9IChcbiAgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0LFxuICBwb3NpdGlvbjogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ29udGVudFNsb3REYXRhPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQYWdlRGF0YShwYWdlQ29udGV4dCksXG4gICAgZW50aXR5ID0+IHtcbiAgICAgIGlmIChlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0eS5zbG90c1twb3NpdGlvbl07XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbiJdfQ==