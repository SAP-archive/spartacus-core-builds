{"version":3,"file":"routing-page-meta.resolver.d.ts","sources":["routing-page-meta.resolver.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Injector } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoutesService } from '../../../routing/services/activated-routes.service';\nimport { BreadcrumbMeta } from '../../model/page.model';\nimport { ActivatedRouteSnapshotWithPageMeta, RoutePageMetaConfig } from './route-page-meta.model';\nexport interface RouteWithExtras {\n    route: ActivatedRouteSnapshotWithPageMeta;\n    resolver: any;\n    url: string;\n}\nexport interface RoutingResolveBreadcrumbsOptions {\n    /**\n     * Includes the current route in the breadcrumbs.\n     */\n    includeCurrentRoute?: boolean;\n}\n/**\n * Resolves the page meta based on the Angular Activated Routes\n */\nexport declare class RoutingPageMetaResolver {\n    protected activatedRoutesService: ActivatedRoutesService;\n    protected injector: Injector;\n    constructor(activatedRoutesService: ActivatedRoutesService, injector: Injector);\n    /**\n     * Array of activated routes, excluding the special Angular `root` route.\n     */\n    protected readonly routes$: Observable<ActivatedRouteSnapshot[]>;\n    /**\n     * Array of activated routes together with precalculated extras:\n     *\n     * - route's page meta resolver\n     * - route's absolute string URL\n     *\n     * In case when there is no page meta resolver configured for a specific route,\n     * it inherits its parent's resolver.\n     *\n     * When there is no page meta resolver configured for the highest parent in the hierarchy,\n     * it uses the `DefaultRoutePageMetaResolver`.\n     */\n    protected readonly routesWithExtras$: Observable<RouteWithExtras[]>;\n    /**\n     * Array of breadcrumbs defined for all the activated routes (from the root route to the leaf route).\n     * It emits on every completed routing navigation.\n     */\n    resolveBreadcrumbs(options?: RoutingResolveBreadcrumbsOptions): Observable<BreadcrumbMeta[]>;\n    /**\n     * Returns the instance of the RoutePageMetaResolver configured for the given activated route.\n     * Returns null in case there the resolver can't be injected or is undefined.\n     *\n     * @param route route to resolve\n     */\n    protected getResolver(route: ActivatedRouteSnapshotWithPageMeta): any;\n    /**\n     * Resolvers breadcrumb for a specific route\n     */\n    protected resolveRouteBreadcrumb({ route, resolver, url, }: RouteWithExtras): Observable<BreadcrumbMeta[]>;\n    /**\n     * By default in breadcrumbs list we don't want to show a link to the current page, so this function\n     * trims the last breadcrumb (the breadcrumb of the current route).\n     *\n     * This function also handles special case when the current route has a configured empty path ('' route).\n     * The '' routes are often a _technical_ routes to organize other routes, assign common guards for its children, etc.\n     * It shouldn't happen that '' route has a defined breadcrumb config.\n     *\n     * In that case, we trim not only the last route ('' route), but also its parent route with non-empty path\n     * (which likely defines the breadcrumb config).\n     */\n    private trimCurrentRoute;\n    /**\n     * Returns the URL path for the given activated route in a string format.\n     * (ActivatedRouteSnapshot#url contains an array of `UrlSegment`s, not a string)\n     */\n    private getUrlPart;\n    /**\n     * Returns the breadcrumb config placed in the route's `data` configuration.\n     */\n    protected getPageMetaConfig(route: ActivatedRouteSnapshotWithPageMeta): RoutePageMetaConfig;\n}\n"]}