import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
export const initialState = {
    component: undefined,
    pageContext: {},
};
function componentExistsReducer(state, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT_FAIL:
            return false;
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:
            return true;
    }
    return state;
}
export function reducer(state = initialState, action) {
    switch (action.type) {
        case CmsActions.LOAD_CMS_COMPONENT: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_FAIL: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            const context = serializePageContext(action.payload.pageContext, true);
            return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
        }
        case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {
            const pageContextReducer = loaderReducer(action.meta.entityType, componentExistsReducer);
            if (!Array.isArray(action.payload)) {
                const context = serializePageContext(action.payload.pageContext, true);
                return Object.assign(Object.assign({}, state), { component: action.payload.component, pageContext: Object.assign(Object.assign({}, state.pageContext), { [context]: pageContextReducer(state.pageContext[context], action) }) });
            }
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2Ntcy9zdG9yZS9yZWR1Y2Vycy9jb21wb25lbnRzLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc5QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQXNCO0lBQzdDLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxFQUFFO0NBQ2hCLENBQUM7QUFFRixTQUFTLHNCQUFzQixDQUM3QixLQUEwQixFQUMxQixNQUF3QztJQUV4QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxVQUFVLENBQUMsdUJBQXVCO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1FBRWYsS0FBSyxVQUFVLENBQUMsMkJBQTJCLENBQUM7UUFDNUMsS0FBSyxVQUFVLENBQUMsMEJBQTBCO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUF3QztJQUV4QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNsQyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFdBQVcsa0NBQ04sS0FBSyxDQUFDLFdBQVcsS0FDcEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUVuRTtTQUNIO1FBQ0QsS0FBSyxVQUFVLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUN2QyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFdBQVcsa0NBQ04sS0FBSyxDQUFDLFdBQVcsS0FDcEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUVuRTtTQUNIO1FBQ0QsS0FBSyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUMxQyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQ3RCLHNCQUFzQixDQUN2QixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsdUNBQ0ssS0FBSyxLQUNSLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWMsRUFDeEMsV0FBVyxrQ0FDTixLQUFLLENBQUMsV0FBVyxLQUNwQixDQUFDLE9BQU8sQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BRW5FO1NBQ0g7UUFDRCxLQUFLLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFDdEIsc0JBQXNCLENBQ3ZCLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN2RSx1Q0FDSyxLQUFLLEtBQ1IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBYyxFQUN4QyxXQUFXLGtDQUNOLEtBQUssQ0FBQyxXQUFXLEtBQ3BCLENBQUMsT0FBTyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsT0FFbkU7YUFDSDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcbmltcG9ydCB7IHNlcmlhbGl6ZVBhZ2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbHMvY21zLXV0aWxzJztcbmltcG9ydCB7IENtc0FjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IENvbXBvbmVudHNDb250ZXh0IH0gZnJvbSAnLi4vY21zLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQ29tcG9uZW50c0NvbnRleHQgPSB7XG4gIGNvbXBvbmVudDogdW5kZWZpbmVkLFxuICBwYWdlQ29udGV4dDoge30sXG59O1xuXG5mdW5jdGlvbiBjb21wb25lbnRFeGlzdHNSZWR1Y2VyPFQ+KFxuICBzdGF0ZTogYm9vbGVhbiB8IHVuZGVmaW5lZCxcbiAgYWN0aW9uOiBDbXNBY3Rpb25zLkNtc0NvbXBvbmVudEFjdGlvbjxUPlxuKTogYm9vbGVhbiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUw6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlIENtc0FjdGlvbnMuQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFOlxuICAgIGNhc2UgQ21zQWN0aW9ucy5MT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUzpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXI8VD4oXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IENtc0FjdGlvbnMuQ21zQ29tcG9uZW50QWN0aW9uPFQ+XG4pOiBDb21wb25lbnRzQ29udGV4dCB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIENtc0FjdGlvbnMuTE9BRF9DTVNfQ09NUE9ORU5UOiB7XG4gICAgICBjb25zdCBwYWdlQ29udGV4dFJlZHVjZXIgPSBsb2FkZXJSZWR1Y2VyPGJvb2xlYW4+KFxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXG4gICAgICApO1xuICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBwYWdlQ29udGV4dDoge1xuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxuICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVF9GQUlMOiB7XG4gICAgICBjb25zdCBwYWdlQ29udGV4dFJlZHVjZXIgPSBsb2FkZXJSZWR1Y2VyPGJvb2xlYW4+KFxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXG4gICAgICApO1xuICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBwYWdlQ29udGV4dDoge1xuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxuICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBDbXNBY3Rpb25zLkxPQURfQ01TX0NPTVBPTkVOVF9TVUNDRVNTOiB7XG4gICAgICBjb25zdCBwYWdlQ29udGV4dFJlZHVjZXIgPSBsb2FkZXJSZWR1Y2VyPGJvb2xlYW4+KFxuICAgICAgICBhY3Rpb24ubWV0YS5lbnRpdHlUeXBlLFxuICAgICAgICBjb21wb25lbnRFeGlzdHNSZWR1Y2VyXG4gICAgICApO1xuICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjb21wb25lbnQ6IGFjdGlvbi5wYXlsb2FkLmNvbXBvbmVudCBhcyBULFxuICAgICAgICBwYWdlQ29udGV4dDoge1xuICAgICAgICAgIC4uLnN0YXRlLnBhZ2VDb250ZXh0LFxuICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBDbXNBY3Rpb25zLkNNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRToge1xuICAgICAgY29uc3QgcGFnZUNvbnRleHRSZWR1Y2VyID0gbG9hZGVyUmVkdWNlcjxib29sZWFuPihcbiAgICAgICAgYWN0aW9uLm1ldGEuZW50aXR5VHlwZSxcbiAgICAgICAgY29tcG9uZW50RXhpc3RzUmVkdWNlclxuICAgICAgKTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhY3Rpb24ucGF5bG9hZCkpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHNlcmlhbGl6ZVBhZ2VDb250ZXh0KGFjdGlvbi5wYXlsb2FkLnBhZ2VDb250ZXh0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICBjb21wb25lbnQ6IGFjdGlvbi5wYXlsb2FkLmNvbXBvbmVudCBhcyBULFxuICAgICAgICAgIHBhZ2VDb250ZXh0OiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5wYWdlQ29udGV4dCxcbiAgICAgICAgICAgIFtjb250ZXh0XTogcGFnZUNvbnRleHRSZWR1Y2VyKHN0YXRlLnBhZ2VDb250ZXh0W2NvbnRleHRdLCBhY3Rpb24pLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbiJdfQ==