import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { REPLENISHMENT_ORDER_FORM_SERIALIZER, REPLENISHMENT_ORDER_NORMALIZER, } from '../../../checkout/index';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
export class OccCheckoutReplenishmentOrderAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId) {
        scheduleReplenishmentForm = this.converter.convert(scheduleReplenishmentForm, REPLENISHMENT_ORDER_FORM_SERIALIZER);
        const headers = new HttpHeaders().set('Content-Type', 'application/json');
        const params = new HttpParams()
            .set('cartId', cartId)
            .set('termsChecked', termsChecked.toString());
        return this.http
            .post(this.occEndpoints.getUrl('scheduleReplenishmentOrder', {
            userId,
        }), scheduleReplenishmentForm, { headers, params })
            .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));
    }
}
OccCheckoutReplenishmentOrderAdapter.decorators = [
    { type: Injectable }
];
OccCheckoutReplenishmentOrderAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWNoZWNrb3V0LXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL29jYy9hZGFwdGVycy9jaGVja291dC9vY2MtY2hlY2tvdXQtcmVwbGVuaXNobWVudC1vcmRlci5hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUVMLG1DQUFtQyxFQUNuQyw4QkFBOEIsR0FDL0IsTUFBTSx5QkFBeUIsQ0FBQztBQUtqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUczRSxNQUFNLE9BQU8sb0NBQW9DO0lBRS9DLFlBQ1ksSUFBZ0IsRUFDaEIsWUFBaUMsRUFDakMsU0FBMkI7UUFGM0IsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDakMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFDcEMsQ0FBQztJQUVKLDBCQUEwQixDQUN4QixNQUFjLEVBQ2QseUJBQW9ELEVBQ3BELFlBQXFCLEVBQ3JCLE1BQWM7UUFFZCx5QkFBeUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FDaEQseUJBQXlCLEVBQ3pCLG1DQUFtQyxDQUNwQyxDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFMUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7YUFDNUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7YUFDckIsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUVoRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsSUFBSSxDQUNILElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFO1lBQ3JELE1BQU07U0FDUCxDQUFDLEVBQ0YseUJBQXlCLEVBQ3pCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUNwQjthQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7O1lBbkNGLFVBQVU7OztZQWZGLFVBQVU7WUFhVixtQkFBbUI7WUFEbkIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBDaGVja291dFJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXIsXG4gIFJFUExFTklTSE1FTlRfT1JERVJfRk9STV9TRVJJQUxJWkVSLFxuICBSRVBMRU5JU0hNRU5UX09SREVSX05PUk1BTElaRVIsXG59IGZyb20gJy4uLy4uLy4uL2NoZWNrb3V0L2luZGV4JztcbmltcG9ydCB7XG4gIFJlcGxlbmlzaG1lbnRPcmRlcixcbiAgU2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSxcbn0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcmVwbGVuaXNobWVudC1vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBDb252ZXJ0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9jb252ZXJ0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBPY2NFbmRwb2ludHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvb2NjLWVuZHBvaW50cy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9jY0NoZWNrb3V0UmVwbGVuaXNobWVudE9yZGVyQWRhcHRlclxuICBpbXBsZW1lbnRzIENoZWNrb3V0UmVwbGVuaXNobWVudE9yZGVyQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByb3RlY3RlZCBvY2NFbmRwb2ludHM6IE9jY0VuZHBvaW50c1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbnZlcnRlcjogQ29udmVydGVyU2VydmljZVxuICApIHt9XG5cbiAgc2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXIoXG4gICAgY2FydElkOiBzdHJpbmcsXG4gICAgc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybTogU2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSxcbiAgICB0ZXJtc0NoZWNrZWQ6IGJvb2xlYW4sXG4gICAgdXNlcklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxSZXBsZW5pc2htZW50T3JkZXI+IHtcbiAgICBzY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtID0gdGhpcy5jb252ZXJ0ZXIuY29udmVydChcbiAgICAgIHNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0sXG4gICAgICBSRVBMRU5JU0hNRU5UX09SREVSX0ZPUk1fU0VSSUFMSVpFUlxuICAgICk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKVxuICAgICAgLnNldCgnY2FydElkJywgY2FydElkKVxuICAgICAgLnNldCgndGVybXNDaGVja2VkJywgdGVybXNDaGVja2VkLnRvU3RyaW5nKCkpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnBvc3QoXG4gICAgICAgIHRoaXMub2NjRW5kcG9pbnRzLmdldFVybCgnc2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXInLCB7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICB9KSxcbiAgICAgICAgc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSxcbiAgICAgICAgeyBoZWFkZXJzLCBwYXJhbXMgfVxuICAgICAgKVxuICAgICAgLnBpcGUodGhpcy5jb252ZXJ0ZXIucGlwZWFibGUoUkVQTEVOSVNITUVOVF9PUkRFUl9OT1JNQUxJWkVSKSk7XG4gIH1cbn1cbiJdfQ==