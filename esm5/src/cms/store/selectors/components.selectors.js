import { createSelector } from '@ngrx/store';
import { initialLoaderState, StateEntitySelectors, StateLoaderSelectors, } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
var ɵ0 = function (state) { return state.components; };
export var getComponentsState = createSelector(getCmsState, ɵ0);
export var componentsContextSelectorFactory = function (uid) {
    return createSelector(getComponentsState, function (componentsState) {
        return StateEntitySelectors.entitySelector(componentsState, uid);
    });
};
export var componentsLoaderStateSelectorFactory = function (uid, context) {
    return createSelector(componentsContextSelectorFactory(uid), function (componentsContext) {
        return (componentsContext &&
            componentsContext.pageContext &&
            componentsContext.pageContext[context]) ||
            initialLoaderState;
    });
};
export var componentsContextExistsSelectorFactory = function (uid, context) {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), function (loaderState) {
        return StateLoaderSelectors.loaderValueSelector(loaderState) || false;
    });
};
export var componentsDataSelectorFactory = function (uid) {
    return createSelector(componentsContextSelectorFactory(uid), function (state) {
        return state ? state.component : undefined;
    });
};
export var componentsSelectorFactory = function (uid, context) {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), function (componentState, exists) {
        if (componentState && exists) {
            return componentState;
        }
        else {
            return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQ0wsa0JBQWtCLEVBRWxCLG9CQUFvQixFQUNwQixvQkFBb0IsR0FDckIsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7U0FLbEIsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsVUFBVSxFQUFoQixDQUFnQjtBQUgzRCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLFdBQVcsS0FBOEIsQ0FBQztBQUU3RCxNQUFNLENBQUMsSUFBTSxnQ0FBZ0MsR0FBRyxVQUM5QyxHQUFXO0lBRVgsT0FBTyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsVUFBQyxlQUFlO1FBQ3hELE9BQUEsb0JBQW9CLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUM7SUFBekQsQ0FBeUQsQ0FDMUQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLG9DQUFvQyxHQUFHLFVBQ2xELEdBQVcsRUFDWCxPQUFlO0lBRWYsT0FBTyxjQUFjLENBQ25CLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxVQUFDLGlCQUFpQjtRQUNoQixPQUFBLENBQUMsaUJBQWlCO1lBQ2hCLGlCQUFpQixDQUFDLFdBQVc7WUFDN0IsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pDLGtCQUFrQjtJQUhsQixDQUdrQixDQUNyQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sc0NBQXNDLEdBQUcsVUFDcEQsR0FBVyxFQUNYLE9BQWU7SUFFZixPQUFPLGNBQWMsQ0FDbkIsb0NBQW9DLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNsRCxVQUFDLFdBQVc7UUFDVixPQUFBLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUs7SUFBOUQsQ0FBOEQsQ0FDakUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLDZCQUE2QixHQUFHLFVBQzNDLEdBQVc7SUFFWCxPQUFPLGNBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFDLEtBQUs7UUFDakUsT0FBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFBbkMsQ0FBbUMsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHLFVBQ3ZDLEdBQVcsRUFDWCxPQUFlO0lBRWYsT0FBTyxjQUFjLENBQ25CLDZCQUE2QixDQUFDLEdBQUcsQ0FBQyxFQUNsQyxzQ0FBc0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ3BELFVBQUMsY0FBYyxFQUFFLE1BQU07UUFDckIsSUFBSSxjQUFjLElBQUksTUFBTSxFQUFFO1lBQzVCLE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHtcbiAgaW5pdGlhbExvYWRlclN0YXRlLFxuICBMb2FkZXJTdGF0ZSxcbiAgU3RhdGVFbnRpdHlTZWxlY3RvcnMsXG4gIFN0YXRlTG9hZGVyU2VsZWN0b3JzLFxufSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDb21wb25lbnRzQ29udGV4dCwgQ29tcG9uZW50c1N0YXRlLCBTdGF0ZVdpdGhDbXMgfSBmcm9tICcuLi9jbXMtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0Q21zU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3JzJztcblxuZXhwb3J0IGNvbnN0IGdldENvbXBvbmVudHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ21zLFxuICBDb21wb25lbnRzU3RhdGVcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRDbXNTdGF0ZSwgKHN0YXRlKSA9PiBzdGF0ZS5jb21wb25lbnRzKTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENvbXBvbmVudHNDb250ZXh0PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRDb21wb25lbnRzU3RhdGUsIChjb21wb25lbnRzU3RhdGUpID0+XG4gICAgU3RhdGVFbnRpdHlTZWxlY3RvcnMuZW50aXR5U2VsZWN0b3IoY29tcG9uZW50c1N0YXRlLCB1aWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgTG9hZGVyU3RhdGU8Ym9vbGVhbj4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksXG4gICAgKGNvbXBvbmVudHNDb250ZXh0KSA9PlxuICAgICAgKGNvbXBvbmVudHNDb250ZXh0ICYmXG4gICAgICAgIGNvbXBvbmVudHNDb250ZXh0LnBhZ2VDb250ZXh0ICYmXG4gICAgICAgIGNvbXBvbmVudHNDb250ZXh0LnBhZ2VDb250ZXh0W2NvbnRleHRdKSB8fFxuICAgICAgaW5pdGlhbExvYWRlclN0YXRlXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRFeGlzdHNTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoQ21zLCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBjb21wb25lbnRzTG9hZGVyU3RhdGVTZWxlY3RvckZhY3RvcnkodWlkLCBjb250ZXh0KSxcbiAgICAobG9hZGVyU3RhdGUpID0+XG4gICAgICBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKGxvYWRlclN0YXRlKSB8fCBmYWxzZVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNEYXRhU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkodWlkKSwgKHN0YXRlKSA9PlxuICAgIHN0YXRlID8gc3RhdGUuY29tcG9uZW50IDogdW5kZWZpbmVkXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c1NlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0RhdGFTZWxlY3RvckZhY3RvcnkodWlkKSxcbiAgICBjb21wb25lbnRzQ29udGV4dEV4aXN0c1NlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxuICAgIChjb21wb25lbnRTdGF0ZSwgZXhpc3RzKSA9PiB7XG4gICAgICBpZiAoY29tcG9uZW50U3RhdGUgJiYgZXhpc3RzKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbiJdfQ==