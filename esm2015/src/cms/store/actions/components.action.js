import { StateUtils } from '../../../state/utils/index';
import { COMPONENT_ENTITY } from '../cms-state';
export const LOAD_CMS_COMPONENT = '[Cms] Load Component';
export const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';
export const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';
export const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';
export class LoadCmsComponent extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT;
    }
}
export class LoadCmsComponentFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid, payload.error);
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_FAIL;
    }
}
export class LoadCmsComponentSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');
        this.payload = payload;
        this.type = LOAD_CMS_COMPONENT_SUCCESS;
    }
}
export class CmsGetComponentFromPage extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(COMPONENT_ENTITY, [].concat(payload).map((cmp) => cmp.component.uid));
        this.payload = payload;
        this.type = CMS_GET_COMPONENT_FROM_PAGE;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL2FjdGlvbnMvY29tcG9uZW50cy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxzQkFBc0IsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRywyQkFBMkIsQ0FBQztBQUNuRSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyw4QkFBOEIsQ0FBQztBQUN6RSxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRywrQkFBK0IsQ0FBQztBQUUzRSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUUvRCxZQUNTLE9BR047UUFFRCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBTDlCLFlBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFRbkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFbkUsWUFDUyxPQUE4RDtRQUVyRSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFGN0MsWUFBTyxHQUFQLE9BQU8sQ0FBdUQ7UUFGOUQsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBS3hDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFFWCxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFdEMsWUFDUyxPQUlOO1FBRUQsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7UUFON0QsWUFBTyxHQUFQLE9BQU8sQ0FJYjtRQU5NLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQVMzQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sdUJBRVgsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXRDLFlBQ1MsT0FFeUM7UUFFaEQsS0FBSyxDQUNILGdCQUFnQixFQUNoQixFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FDbkQsQ0FBQztRQVBLLFlBQU8sR0FBUCxPQUFPLENBRWtDO1FBSnpDLFNBQUksR0FBRywyQkFBMkIsQ0FBQztJQVU1QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgUGFnZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9yb3V0aW5nL2luZGV4JztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBDT01QT05FTlRfRU5USVRZIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IExPQURfQ01TX0NPTVBPTkVOVCA9ICdbQ21zXSBMb2FkIENvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UX0ZBSUwgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9DTVNfQ09NUE9ORU5UX1NVQ0NFU1MgPSAnW0Ntc10gTG9hZCBDb21wb25lbnQgU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgQ01TX0dFVF9DT01QT05FTlRfRlJPTV9QQUdFID0gJ1tDbXNdIEdldCBDb21wb25lbnQgZnJvbSBQYWdlJztcblxuZXhwb3J0IGNsYXNzIExvYWRDbXNDb21wb25lbnQgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfQ09NUE9ORU5UO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdWlkOiBzdHJpbmc7XG4gICAgICBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQ7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihDT01QT05FTlRfRU5USVRZLCBwYXlsb2FkLnVpZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRDbXNDb21wb25lbnRGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ01TX0NPTVBPTkVOVF9GQUlMO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1aWQ6IHN0cmluZzsgZXJyb3I6IGFueTsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1cbiAgKSB7XG4gICAgc3VwZXIoQ09NUE9ORU5UX0VOVElUWSwgcGF5bG9hZC51aWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQ21zQ29tcG9uZW50U3VjY2VzczxcbiAgVCBleHRlbmRzIENtc0NvbXBvbmVudFxuPiBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19DT01QT05FTlRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIGNvbXBvbmVudDogVDtcbiAgICAgIHVpZD86IHN0cmluZztcbiAgICAgIHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dDtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKENPTVBPTkVOVF9FTlRJVFksIHBheWxvYWQudWlkIHx8IHBheWxvYWQuY29tcG9uZW50LnVpZCB8fCAnJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENtc0dldENvbXBvbmVudEZyb21QYWdlPFxuICBUIGV4dGVuZHMgQ21zQ29tcG9uZW50XG4+IGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENNU19HRVRfQ09NUE9ORU5UX0ZST01fUEFHRTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6XG4gICAgICB8IHsgY29tcG9uZW50OiBUOyBwYWdlQ29udGV4dDogUGFnZUNvbnRleHQgfVxuICAgICAgfCB7IGNvbXBvbmVudDogVDsgcGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0IH1bXVxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIENPTVBPTkVOVF9FTlRJVFksXG4gICAgICBbXS5jb25jYXQocGF5bG9hZCkubWFwKChjbXApID0+IGNtcC5jb21wb25lbnQudWlkKVxuICAgICk7XG4gIH1cbn1cblxuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBDbXNDb21wb25lbnRBY3Rpb248VCBleHRlbmRzIENtc0NvbXBvbmVudD4gPVxuICB8IExvYWRDbXNDb21wb25lbnRcbiAgfCBMb2FkQ21zQ29tcG9uZW50RmFpbFxuICB8IExvYWRDbXNDb21wb25lbnRTdWNjZXNzPFQ+XG4gIHwgQ21zR2V0Q29tcG9uZW50RnJvbVBhZ2U8VD47XG4iXX0=