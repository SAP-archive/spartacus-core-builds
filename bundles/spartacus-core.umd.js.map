{"version":3,"file":"spartacus-core.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/shared.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/anonymous-consents/connectors/converters.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/checkout/events/checkout.events.ts","ng://@spartacus/core/src/checkout/events/checkout-event.builder.ts","ng://@spartacus/core/src/checkout/events/checkout-event.module.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/util/normalize-http-error.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  inject,\n  InjectFlags,\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n// separate function needed for production build:\nexport function configurationFactoryProvidedInRoot() {\n  return configurationFactory(\n    inject(ConfigChunk, InjectFlags.Optional),\n    inject(DefaultConfigChunk, InjectFlags.Optional)\n  );\n}\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration', {\n  providedIn: 'root',\n  factory: configurationFactoryProvidedInRoot,\n});\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken<object[]>('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken<object[]>(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\nimport { RouteConfig } from './routes-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  /**\n   * Reversed routing config for quick lookup of the route name by the configured path.\n   */\n  protected routeNamesByPath: { [path: string]: string };\n\n  constructor(protected config: RoutingConfig) {}\n\n  /**\n   * Returns the route config for the given route name.\n   */\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  /**\n   * Returns the configured route loading strategy.\n   */\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n\n  /**\n   * Returns the route name of the configured path.\n   *\n   * For example, when the config is:\n   * ```\n   * routing: {\n   *   routes: {\n   *      addressBook: { paths: ['my-account/address-book'] }\n   *   }\n   * }\n   * ```\n   *\n   * the `getRouteName('my-account/address-book')` returns `'addressBook'`.\n   */\n  getRouteName(path: string) {\n    if (!this.routeNamesByPath) {\n      this.initRouteNamesByPath();\n    }\n    return this.routeNamesByPath[path];\n  }\n\n  /**\n   * Initializes the property `routeNamesByPath`.\n   *\n   * The original config allows for reading configured path by the route name.\n   * But this method builds up a structure with a 'reversed config'\n   * to read quickly the route name by the path.\n   */\n  protected initRouteNamesByPath() {\n    this.routeNamesByPath = {};\n\n    for (const [routeName, routeConfig] of Object.entries(\n      this.config?.routing?.routes\n    )) {\n      routeConfig?.paths?.forEach((path) => {\n        if (isDevMode() && this.routeNamesByPath[path]) {\n          console.error(\n            `The same path '${path}' is configured for two different route names: '${this.routeNamesByPath[path]}' and '${routeName}`\n          );\n        }\n        this.routeNamesByPath[path] = routeName;\n      });\n    }\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\n/**\n * @deprecated since 2.1, use normalizeHttpError instead\n */\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","export const testestsd = 'sare';\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\nexport interface FeatureModuleConfig {\n  /**\n   * Lazy resolved feature module\n   */\n  module?: () => Promise<any>;\n  /**\n   * Lazy resolved dependency modules\n   */\n  dependencies?: (() => Promise<any>)[];\n  /**\n   * Cms components covered by this feature\n   */\n  cmsComponents?: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n  featureModules?: { [featureName: string]: FeatureModuleConfig };\n  cmsComponents?: CMSComponentConfig;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behavior, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount =\n          topValues?.length > 0 ? topValues.length : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  // TODO{#8158} - make this method required by removing the the `?` after the method name\n  abstract loadAnonymousConsents?(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> | null {\n    // TODO{#8158} - remove the conditional check, and just `return this.adapter.loadAnonymousConsents()`\n    return this.adapter.loadAnonymousConsents\n      ? this.adapter.loadAnonymousConsents()\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      // TODO{#8158} - remove this if block\n      if (!this.anonymousConsentTemplatesConnector.loadAnonymousConsents()) {\n        return of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates());\n      }\n\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = (applicables ?? []).filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, Subscription, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService implements OnDestroy {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n  protected subscription = new Subscription();\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.initActiveCart();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected initActiveCart() {\n    this.subscription.add(\n      this.authService.getOccUserId().subscribe((userId) => {\n        this.userId = userId;\n        if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n          if (this.isJustLoggedIn(userId)) {\n            this.loadOrMerge(this.cartId);\n          }\n        }\n        this.previousUserId = userId;\n      })\n    );\n\n    this.subscription.add(\n      this.activeCartId$.subscribe((cartId) => {\n        this.cartId = cartId;\n      })\n    );\n\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","/**\n * Indicates that a user has successfully placed an order\n */\nexport class OrderPlacedEvent {\n  code: string;\n}\n","import { Injectable } from '@angular/core';\nimport { StateEventService } from '../../state/event/state-event.service';\nimport { CheckoutActions } from '../store/actions/index';\nimport { OrderPlacedEvent } from './checkout.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutEventBuilder {\n  constructor(protected stateEventService: StateEventService) {\n    this.register();\n  }\n\n  /**\n   * Registers checkout events\n   */\n  protected register(): void {\n    this.orderPlacedEvent();\n  }\n\n  /**\n   * Register an order successfully placed event\n   */\n  protected orderPlacedEvent(): void {\n    this.stateEventService.register({\n      action: CheckoutActions.PLACE_ORDER_SUCCESS,\n      event: OrderPlacedEvent,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CheckoutEventBuilder } from './checkout-event.builder';\n\n@NgModule({})\nexport class CheckoutEventModule {\n  constructor(_checkoutEventBuilder: CheckoutEventBuilder) {}\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutEventModule } from './events/checkout-event.module';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule, CheckoutEventModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { Injectable, InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { RoutingConfigService } from '../../configurable-routes/routing-config.service';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: undefined,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\n@Injectable()\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n    let urlString = '';\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      urlString +=\n        '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n\n      // we use semantic route information embedded from any parent route\n      if (state.data?.cxRoute) {\n        semanticRoute = state.data?.cxRoute;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n\n    // If `semanticRoute` couldn't be already recognized using `data.cxRoute` property\n    // let's lookup the routing configuration to find the semantic route that has exactly the same configured path as the current URL.\n    // This will work only for simple URLs without any dynamic routing parameters.\n    semanticRoute = semanticRoute || this.lookupSemanticRoute(urlString);\n\n    const { params } = state;\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url: routerState.url,\n      queryParams: routerState.root.queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n\n  /**\n   * Returns the semantic route name for given page label.\n   *\n   * *NOTE*: It works only for simple static urls that are equal to the page label\n   * of cms-driven content page. For example: `/my-account/address-book`.\n   *\n   * It doesn't work for URLs with dynamic parameters. But such case can be handled\n   * by reading the defined `data.cxRoute` from the Angular Routes.\n   *\n   * @param path path to be found in the routing config\n   */\n  private lookupSemanticRoute(path: string): string {\n    // Page label is assumed to start with `/`, but Spartacus configured paths\n    // don't start with slash. So we remove the leading slash:\n    return this.routingConfig.getRouteName(path.substr(1));\n  }\n\n  constructor(private routingConfig: RoutingConfigService) {}\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   * @param errorCallback function to be invoked after error during script loading\n   */\n  public load(\n    src: string,\n    params?: Object,\n    callback?: EventListener,\n    errorCallback?: EventListener\n  ): void {\n    const script: HTMLScriptElement = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n    if (errorCallback) {\n      script.addEventListener('error', errorCallback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(\n          new UserActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorModel } from '../model/misc.model';\nimport { isDevMode } from '@angular/core';\n\n/**\n * Normalizes HttpErrorResponse to HttpErrorModel.\n *\n * Can be used as a safe and generic way for embodying http errors into\n * NgRx Action payload, as it will strip potentially unserializable parts from\n * it and warn in debug mode if passed error is not instance of HttpErrorModel\n * (which usually happens when logic in NgRx Effect is not sealed correctly)\n */\nexport function normalizeHttpError(\n  error: HttpErrorResponse | any\n): HttpErrorModel | undefined {\n  if (error instanceof HttpErrorResponse) {\n    const normalizedError: HttpErrorModel = {\n      message: error.message,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    };\n\n    // include backend's error details\n    if (Array.isArray(error.error.errors)) {\n      normalizedError.details = error.error.errors;\n    } else if (typeof error.error.error === 'string') {\n      normalizedError.details = [\n        {\n          type: error.error.error,\n          message: error.error.error_description,\n        },\n      ];\n    }\n\n    return normalizedError;\n  }\n\n  if (isDevMode()) {\n    console.error(\n      'Error passed to normalizeHttpError is not HttpErrorResponse instance',\n      error\n    );\n  }\n\n  return undefined;\n}\n"],"names":["inject","InjectFlags","InjectionToken","Optional","NgModule","CommonModule","HttpHeaders","loaderResetMeta","isDevMode","StateUtils.LoaderLoadAction","StateUtils.LoaderFailAction","StateUtils.LoaderSuccessAction","createFeatureSelector","createSelector","AuthActions.LoadUserToken","map","take","select","AuthSelectors.getUserToken","AuthActions.RefreshUserToken","AuthActions.LoadUserTokenSuccess","AuthActions.Logout","AuthActions.RevokeUserToken","AuthSelectors.getClientTokenState","filter","AuthActions.LoadClientToken","Store","Injectable","switchMap","of","fromEvent","debounceTime","startWith","distinctUntilChanged","Inject","DOCUMENT","PRIMARY_OUTLET","Router","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","RoutingActions.RouteGoByUrlAction","RoutingActions.RouteBackAction","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","tap","catchError","HttpErrorResponse","throwError","SiteContextSelectors.getActiveBaseSite","SiteContextActions.SetActiveBaseSite","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","HttpParams","EMPTY","HTTP_INTERCEPTORS","StorageSyncType","StateTransferType","INIT","UPDATE","makeStateKey","isPlatformBrowser","isPlatformServer","PLATFORM_ID","TransferState","META_REDUCERS","HttpClient","ofType","AuthActions.LOAD_CLIENT_TOKEN","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","AuthActions.LOAD_USER_TOKEN","mergeMap","AuthActions.LoadUserTokenFail","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","AuthActions.REFRESH_USER_TOKEN","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","AuthActions.REVOKE_USER_TOKEN","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","AuthActions.REFRESH_USER_TOKEN_SUCCESS","AuthActions.LOAD_USER_TOKEN_FAIL","AuthActions.REFRESH_USER_TOKEN_FAIL","combineReducers","fromUserTokenReducer.reducer","AuthActions.LOGOUT","HttpClientModule","StoreModule","EffectsModule","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","NotificationType","StateUtils.LoaderResetAction","StateUtils.loaderValueSelector","StateUtils.loaderLoadingSelector","StateUtils.loaderSuccessSelector","StateUtils.loaderErrorSelector","AnonymousConsentsActions.LoadAnonymousConsentTemplates","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","AnonymousConsentsSelectors.getAnonymousConsents","AnonymousConsentsActions.SetAnonymousConsents","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","AnonymousConsentsActions.GiveAnonymousConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","combineLatest","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","Injector","pluck","http","DeferLoadingStrategy","shareReplay","ProductScope","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","forkJoin","headers","Meta","Occ","HttpResponse","interceptors","Observable","share","Subject","ActionsSubject","Subscription","StateUtils.entityLoaderStateSelector","StateUtils.EntityLoadAction","StateUtils.EntityFailAction","StateUtils.EntitySuccessAction","StateUtils.EntityLoaderResetAction","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","UsersSelectors.getConsentsError","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","UserActions.GiveUserConsent","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","UserActions.ResetWithdrawUserConsentProcess","AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS","concatMap","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","UserActions.REGISTER_USER_SUCCESS","UserActions.TransferAnonymousConsent","effects","BehaviorSubject","mapTo","DefaultUrlSerializer","Location","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","APP_INITIALIZER","UrlSerializer","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","bufferCount","SiteContextActions.LanguageChange","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","SiteContextActions.CurrencyChange","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState","reducer","SiteContextActions.LOAD_BASE_SITE_SUCCESS","SiteContextActions.SET_ACTIVE_BASE_SITE","SiteContextActions.LOAD_CURRENCIES_SUCCESS","SiteContextActions.LOAD_LANGUAGES_SUCCESS","getReducers","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","reducerToken","reducerProvider","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED","AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED","AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT","AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT","AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","SiteContextActions.LANGUAGE_CHANGE","metaReducers","AsmActions.CUSTOMER_SEARCH","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","AsmActions.ASM_UI_UPDATE","fromAsmUiReducer.reducer","AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT","GlobalMessageType","GlobalMessageSelectors.getGlobalMessageEntities","GlobalMessageActions.AddMessage","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","OAUTH_ENDPOINT","GlobalMessageActions.ADD_MESSAGE","GlobalMessageActions.REMOVE_MESSAGE","GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE","fromGlobalMessage.reducer","store","GlobalMessageSelectors.getGlobalMessageEntitiesByType","GlobalMessageSelectors.getGlobalMessageCountByType","delay","AsmActions.LoadCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","AsmActions.LogoutCustomerSupportAgent","AsmActions.CustomerSearch","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","AsmActions.AsmUiUpdate","AsmSelectors.getAsmUi","MultiCartSelectors.getCartSelectorFactory","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","CartActions.CreateCart","CartActions.MergeCart","CartActions.LoadCart","MultiCartSelectors.getCartEntriesSelectorFactory","CartActions.CartAddEntry","CartActions.CartRemoveEntry","CartActions.CartUpdateEntry","MultiCartSelectors.getCartEntrySelectorFactory","CartActions.AddEmailToCart","CartActions.DeleteCart","MultiCartSelectors.getActiveCartId","SiteContextActions.CURRENCY_CHANGE","CartActions.CART_ADD_ENTRY","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","CartActions.CART_REMOVE_ENTRY","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","CartActions.CART_UPDATE_ENTRY","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartActions.CART_ADD_VOUCHER","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","CartActions.CART_REMOVE_VOUCHER","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","CartActions.LOAD_CART","groupBy","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","CartActions.CREATE_CART","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","CartActions.MERGE_CART","CartActions.CART_ADD_VOUCHER_SUCCESS","CartActions.CART_ADD_ENTRY_SUCCESS","CartActions.CART_REMOVE_ENTRY_SUCCESS","CartActions.CART_UPDATE_ENTRY_SUCCESS","CartActions.CART_REMOVE_VOUCHER_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS","CartActions.ResetCartDetails","CartActions.ADD_EMAIL_TO_CART","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","CartActions.DELETE_CART","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","CartActions.CREATE_WISH_LIST","CartActions.CreateWishListSuccess","CartActions.CreateWishListFail","CartActions.LOAD_WISH_LIST","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","MultiCartSelectors.getWishListId","CartActions.LOAD_CART_SUCCESS","CartActions.CREATE_CART_SUCCESS","CartActions.SET_ACTIVE_CART_ID","CartActions.REMOVE_CART","CartActions.DELETE_CART_SUCCESS","CartActions.CLEAR_CART_STATE","CartActions.CREATE_WISH_LIST_SUCCESS","CartActions.LOAD_WISH_LIST_SUCCESS","CartActions.SET_TEMP_CART","CartActions.CART_ADD_ENTRY_FAIL","StateUtils.entitySelector","StateUtils.initialLoaderState","CmsSelectors.getPageData","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","CmsActions.LoadCmsComponent","CmsSelectors.componentsSelectorFactory","using","CmsSelectors.getCurrentSlotSelectorFactory","CmsSelectors.getNavigationEntryItems","CmsActions.LoadCmsNavigationItems","CmsActions.LoadCmsPageData","CmsSelectors.getPageComponentTypes","CmsSelectors.getPageStateIndexLoaderState","CmsSelectors.getPageStateIndexValue","CmsActions.CmsSetPageFailIndex","PageRobotsMeta","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","CartActions.CartProcessesIncrement","CartActions.CartAddVoucher","CartActions.CartRemoveVoucher","CartActions.CartResetAddVoucher","UsersSelectors.getDetails","UserActions.LoadUserDetails","UserActions.RegisterUser","UserActions.RegisterGuest","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","UserActions.RemoveUserReset","UsersSelectors.getAllTitles","UserActions.LoadTitles","UsersSelectors.getResetPassword","UserActions.UpdateUserDetails","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","UserActions.UpdatePasswordReset","CartActions.LoadWishList","CheckoutActions.PLACE_ORDER_SUCCESS","CheckoutActions.VERIFY_ADDRESS_SUCCESS","CheckoutActions.VERIFY_ADDRESS_FAIL","CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS","CheckoutActions.LOAD_CARD_TYPES_SUCCESS","CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA","CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS","CheckoutActions.SET_DELIVERY_MODE_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS","CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS","CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL","CheckoutActions.CLEAR_CHECKOUT_DATA","CheckoutActions.CLEAR_CHECKOUT_STEP","CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES","CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS","CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","CheckoutActions.VERIFY_ADDRESS","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutActions.LOAD_CARD_TYPES","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutActions.ADD_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","CheckoutActions.SET_DELIVERY_ADDRESS","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","CheckoutActions.CheckoutClearMiscsData","CheckoutActions.ClearCheckoutData","AuthActions.LOGIN","CheckoutActions.SET_DELIVERY_MODE","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","CheckoutActions.CREATE_PAYMENT_DETAILS","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","CheckoutActions.SET_PAYMENT_DETAILS","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","CheckoutActions.LOAD_CHECKOUT_DETAILS","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","CartActions.MERGE_CART_SUCCESS","CheckoutActions.LoadCheckoutDetails","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","getAddressVerificationResults","fromReducer.getAddressVerificationResults","getCardTypesEntites","fromReducer.getCardTypesEntites","CheckoutActions.PlaceOrder","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutSelectors.getSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","CheckoutActions.ResetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryModeProcess","CheckoutSelectors.getAddressVerificationResults","CheckoutActions.AddDeliveryAddress","CheckoutActions.SetDeliveryMode","CheckoutActions.VerifyAddress","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","CheckoutActions.ResetSetPaymentDetailsProcess","CheckoutActions.LoadCardTypes","CheckoutActions.CreatePaymentDetails","CheckoutActions.SetPaymentDetails","CheckoutActions.PaymentProcessSuccess","createEffect","CmsActions.LOAD_CMS_COMPONENT","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","router","Pipe","RoutingActions.ROUTER_GO","RoutingActions.ROUTER_GO_BY_URL","RoutingActions.ROUTER_BACK","RoutingActions.ROUTER_FORWARD","fromNgrxRouter.ROUTER_NAVIGATION","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","RouterStateSerializer","StoreRouterConnectingModule","CmsActions.LOAD_CMS_NAVIGATION_ITEMS","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","CmsActions.LOAD_CMS_PAGE_DATA","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","CmsActions.LOAD_CMS_COMPONENT_FAIL","CmsActions.CMS_GET_COMPONENT_FROM_PAGE","CmsActions.LOAD_CMS_COMPONENT_SUCCESS","CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS","CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS","CmsActions.LOAD_CMS_PAGE_DATA_FAIL","CmsActions.CMS_SET_PAGE_FAIL_INDEX","CmsActions.CMS_SET_PAGE_SUCCESS_INDEX","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","takeWhile","NgZone","TemplateRef","ViewContainerRef","Input","Directive","getLocaleId","DatePipe","ChangeDetectorRef","KymaActions.LoadOpenIdToken","KymaSelectors.getOpenIdTokenValue","KymaActions.LOAD_OPEN_ID_TOKEN","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","ProductActions.SEARCH_PRODUCTS_SUCCESS","ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS","ProductActions.CLEAR_PRODUCT_SEARCH_RESULT","getSearchResults","fromProductSearch.getSearchResults","getAuxSearchResults","fromProductSearch.getAuxSearchResults","getProductSuggestions","fromProductSearch.getProductSuggestions","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","ProductActions.CleanProductReferences","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductActions.SearchProducts","ProductSelectors.getSearchResults","ProductActions.ClearProductSearchResult","auditTime","ProductSelectors.getSelectedProductStateFactory","ProductSelectors.getSelectedProductLoadingFactory","merge","ProductActions.LoadProduct","ProductSelectors.getSelectedProductFactory","ProductActions.LOAD_PRODUCT_SUCCESS","ProductActions.LOAD_PRODUCT_FAIL","ProductActions.LOAD_PRODUCT","defer","ProductSelectors.getSelectedProductSuccessFactory","ProductSelectors.getSelectedProductErrorFactory","ProductSelectors.getAuxSearchResults","ProductSelectors.getProductSuggestions","ProductActions.GetProductSuggestions","ActivatedRoute","ProductActions.LOAD_PRODUCT_REFERENCES","ProductActions.LoadProductReferencesSuccess","ProductActions.LoadProductReferencesFail","ProductActions.LOAD_PRODUCT_REVIEWS","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","ProductActions.POST_PRODUCT_REVIEW","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","ProductActions.POST_PRODUCT_REVIEW_SUCCESS","ProductActions.SEARCH_PRODUCTS","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","ProductActions.GET_PRODUCT_SUGGESTIONS","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS","ProductActions.CLEAN_PRODUCT_REFERENCES","ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","StoreFinderActions.FindStoresOnHold","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","StoreFinderActions.FindStoreById","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","StoreFinderActions.VIEW_ALL_STORES","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","UserActions.AddUserAddress","UserActions.UpdateUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","UserActions.LoadDeliveryCountries","UsersSelectors.getAllDeliveryCountries","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UsersSelectors.getOrderDetails","UserActions.LoadOrderDetails","UserActions.ClearOrderDetails","UsersSelectors.getOrdersState","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","UserActions.LoadConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","UserActions.ResetCancelOrderProcess","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","UserActions.SubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","UserActions.ClaimCustomerCoupon","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","UserActions.SetDefaultUserPaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","UserActions.LoadBillingCountries","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","UsersSelectors.getOrderReturnRequestLoading","UsersSelectors.getOrderReturnRequestSuccess","UserActions.ClearOrderReturnRequest","UserActions.CancelOrderReturnRequest","UserActions.ResetCancelReturnProcess","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","UserActions.LoadNotificationPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","UserActions.UpdateNotificationPreferences","UserActions.ResetNotificationPreferences","UserActions.LoadProductInterests","UsersSelectors.getInterests","UsersSelectors.getInterestsState","UsersSelectors.getInterestsLoading","UserActions.RemoveProductInterest","UserActions.AddProductInterest","UserActions.ResetAddInterestState","UserActions.ResetRemoveInterestState","UserActions.ClearProductInterests","UserActions.LOAD_BILLING_COUNTRIES_SUCCESS","UserActions.CLEAR_USER_MISCS_DATA","UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS","UserActions.CLEAR_CONSIGNMENT_TRACKING","UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS","UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL","UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS","UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS","UserActions.LOAD_ORDER_DETAILS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS","UserActions.LOAD_USER_PAYMENT_METHODS_FAIL","UserActions.LOAD_REGIONS_SUCCESS","UserActions.RESET_PASSWORD_SUCCESS","UserActions.LOAD_TITLES_SUCCESS","UserActions.LOAD_USER_ADDRESSES_FAIL","UserActions.LOAD_USER_ADDRESSES_SUCCESS","UserActions.LOAD_USER_CONSENTS_SUCCESS","UserActions.GIVE_USER_CONSENT_SUCCESS","UserActions.LOAD_USER_DETAILS_SUCCESS","UserActions.UPDATE_USER_DETAILS_SUCCESS","UserActions.LOAD_USER_ORDERS_SUCCESS","UserActions.LOAD_USER_ORDERS_FAIL","fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS","fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS","fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS","UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS","UserActions.LOAD_PRODUCT_INTERESTS_FAIL","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","UserActions.LOAD_BILLING_COUNTRIES","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","UserActions.ClearUserMiscsData","UserActions.LOAD_CONSIGNMENT_TRACKING","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","UserActions.LOAD_DELIVERY_COUNTRIES","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","UserActions.FORGOT_PASSWORD_EMAIL_REQUEST","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","UserActions.LOAD_NOTIFICATION_PREFERENCES","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","UserActions.UPDATE_NOTIFICATION_PREFERENCES","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","UserActions.LOAD_ORDER_DETAILS","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","UserActions.CANCEL_ORDER","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","UserActions.CREATE_ORDER_RETURN_REQUEST","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","UserActions.LOAD_ORDER_RETURN_REQUEST","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","UserActions.CANCEL_ORDER_RETURN_REQUEST","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","UserActions.LOAD_ORDER_RETURN_REQUEST_LIST","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserActions.LOAD_USER_PAYMENT_METHODS","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","UserActions.SET_DEFAULT_USER_PAYMENT_METHOD","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","UserActions.DELETE_USER_PAYMENT_METHOD","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","UserActions.LOAD_REGIONS","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","UserActions.CLEAR_REGIONS","UserActions.RESET_PASSWORD","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","UserActions.LOAD_TITLES","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UserActions.UPDATE_EMAIL","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UserActions.UPDATE_PASSWORD","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserActions.LOAD_USER_ADDRESSES","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","UserActions.ADD_USER_ADDRESS","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","UserActions.UPDATE_USER_ADDRESS","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","UserActions.DELETE_USER_ADDRESS","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","UserActions.ADD_USER_ADDRESS_SUCCESS","UserActions.UPDATE_USER_ADDRESS_SUCCESS","UserActions.DELETE_USER_ADDRESS_SUCCESS","UserActions.LOAD_USER_CONSENTS","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","UserActions.GIVE_USER_CONSENT","UserActions.TRANSFER_ANONYMOUS_CONSENT","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","UserActions.WITHDRAW_USER_CONSENT","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserActions.LOAD_USER_DETAILS","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","UserActions.UPDATE_USER_DETAILS","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserActions.LOAD_USER_ORDERS","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","UserActions.REGISTER_USER","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","UserActions.REGISTER_GUEST","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","UserActions.REMOVE_USER","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","UserActions.LOAD_PRODUCT_INTERESTS","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","UserActions.REMOVE_PRODUCT_INTEREST","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","UserActions.ADD_PRODUCT_INTEREST","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","RouterModule"],"mappings":"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}