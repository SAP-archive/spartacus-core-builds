import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { CHECKOUT_FEATURE, } from '../checkout-state';
const getDeliveryAddressSelector = (state) => state.address;
const ɵ0 = getDeliveryAddressSelector;
const getDeliveryModeSelector = (state) => state.deliveryMode;
const ɵ1 = getDeliveryModeSelector;
const getPaymentDetailsSelector = (state) => state.paymentDetails;
const ɵ2 = getPaymentDetailsSelector;
const getOrderDetailsSelector = (state) => state.orderDetails;
const ɵ3 = getOrderDetailsSelector;
export const getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);
const ɵ4 = (checkoutState) => checkoutState.steps;
export const getCheckoutStepsState = createSelector(getCheckoutState, ɵ4);
const ɵ5 = (state) => StateUtils.loaderValueSelector(state);
export const getCheckoutSteps = createSelector(getCheckoutStepsState, ɵ5);
export const getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);
export const getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);
const ɵ6 = (deliveryMode) => {
    return (deliveryMode &&
        Object.keys(deliveryMode.supported).map((code) => deliveryMode.supported[code]));
};
export const getSupportedDeliveryModes = createSelector(getDeliveryMode, ɵ6);
const ɵ7 = (deliveryMode) => {
    return deliveryMode && deliveryMode.selected;
};
export const getSelectedDeliveryModeCode = createSelector(getDeliveryMode, ɵ7);
const ɵ8 = (deliveryMode) => {
    if (deliveryMode.selected !== '') {
        if (Object.keys(deliveryMode.supported).length === 0) {
            return null;
        }
        return deliveryMode.supported[deliveryMode.selected];
    }
};
export const getSelectedDeliveryMode = createSelector(getDeliveryMode, ɵ8);
export const getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);
export const getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);
const ɵ9 = (state) => StateUtils.loaderSuccessSelector(state) &&
    !StateUtils.loaderLoadingSelector(state);
export const getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, ɵ9);
const ɵ10 = (state) => state.poNumber.po;
export const getPoNumer = createSelector(getCheckoutSteps, ɵ10);
const ɵ11 = (state) => state.poNumber.costCenter;
export const getCostCenter = createSelector(getCheckoutSteps, ɵ11);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11 };
//# sourceMappingURL=data:application/json;base64,