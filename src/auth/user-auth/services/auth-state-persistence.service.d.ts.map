{"version":3,"file":"auth-state-persistence.service.d.ts","sources":["auth-state-persistence.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { StatePersistenceService } from '../../../state/services/state-persistence.service';\nimport { UserIdService } from '../facade/user-id.service';\nimport { AuthToken } from '../models/auth-token.model';\nimport { AuthRedirectStorageService } from './auth-redirect-storage.service';\nimport { AuthStorageService } from './auth-storage.service';\n/**\n * Auth state synced to browser storage.\n */\nexport interface SyncedAuthState {\n    userId?: string;\n    token?: AuthToken;\n    redirectUrl?: string;\n}\n/**\n * Responsible for saving the authorization data (userId, token, redirectUrl) in browser storage.\n */\nexport declare class AuthStatePersistenceService implements OnDestroy {\n    protected statePersistenceService: StatePersistenceService;\n    protected userIdService: UserIdService;\n    protected authStorageService: AuthStorageService;\n    protected authRedirectStorageService: AuthRedirectStorageService;\n    protected subscription: Subscription;\n    constructor(statePersistenceService: StatePersistenceService, userIdService: UserIdService, authStorageService: AuthStorageService, authRedirectStorageService: AuthRedirectStorageService);\n    /**\n     * Identifier used for storage key.\n     */\n    protected key: string;\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync(): void;\n    /**\n     * Gets and transforms state from different sources into the form that should\n     * be saved in storage.\n     */\n    protected getAuthState(): Observable<SyncedAuthState>;\n    /**\n     * Function called on each browser storage read.\n     * Used to update state from browser -> state.\n     */\n    protected onRead(state: SyncedAuthState): void;\n    /**\n     * Reads synchronously state from storage and returns it.\n     */\n    protected readStateFromStorage(): SyncedAuthState;\n    /**\n     * Check synchronously in browser storage if user is logged in (required by transfer state reducer).\n     * For most cases `isUserLoggedIn` from the `AuthService` should be used instead of this.\n     */\n    isUserLoggedIn(): boolean;\n    ngOnDestroy(): void;\n}\n"]}