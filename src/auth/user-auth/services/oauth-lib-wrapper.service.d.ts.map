{"version":3,"file":"oauth-lib-wrapper.service.d.ts","sources":["oauth-lib-wrapper.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OAuthService, TokenResponse } from 'angular-oauth2-oidc';\nimport { WindowRef } from '../../../window/window-ref';\nimport { AuthConfigService } from './auth-config.service';\n/**\n * Wrapper service on the library OAuthService. Normalizes the lib API for services.\n * Use this service when you want to access low level OAuth library methods.\n */\nexport declare class OAuthLibWrapperService {\n    protected oAuthService: OAuthService;\n    protected authConfigService: AuthConfigService;\n    protected platformId: Object;\n    protected winRef: WindowRef;\n    constructor(oAuthService: OAuthService, authConfigService: AuthConfigService, platformId: Object, winRef: WindowRef);\n    protected initialize(): void;\n    /**\n     * Authorize with ResourceOwnerPasswordFlow.\n     *\n     * @param userId\n     * @param password\n     *\n     * @return token response from the lib\n     */\n    authorizeWithPasswordFlow(userId: string, password: string): Promise<TokenResponse>;\n    /**\n     * Refresh access_token.\n     */\n    refreshToken(): void;\n    /**\n     * Revoke access tokens and clear tokens in lib state.\n     */\n    revokeAndLogout(): Promise<any>;\n    /**\n     * Clear tokens in library state (no revocation).\n     */\n    logout(): void;\n    /**\n     * Returns Open Id token. Might be empty, when it was not requested with the `responseType` config.\n     *\n     * @return id token\n     */\n    getIdToken(): string;\n    /**\n     * Initialize Implicit Flow or Authorization Code flows with the redirect to OAuth login url.\n     */\n    initLoginFlow(): void;\n    /**\n     * Tries to login user based on `code` or `token` present in the url.\n     */\n    tryLogin(): Promise<boolean>;\n}\n"]}