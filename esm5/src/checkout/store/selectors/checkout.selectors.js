import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { CHECKOUT_FEATURE, } from '../checkout-state';
var getDeliveryAddressSelector = function (state) { return state.address; };
var ɵ0 = getDeliveryAddressSelector;
var getDeliveryModeSelector = function (state) {
    return state.deliveryMode;
};
var ɵ1 = getDeliveryModeSelector;
var getPaymentDetailsSelector = function (state) {
    return state.paymentDetails;
};
var ɵ2 = getPaymentDetailsSelector;
var getOrderDetailsSelector = function (state) {
    return state.orderDetails;
};
var ɵ3 = getOrderDetailsSelector;
export var getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);
var ɵ4 = function (checkoutState) { return checkoutState.steps; };
export var getCheckoutStepsState = createSelector(getCheckoutState, ɵ4);
var ɵ5 = function (state) { return StateLoaderSelectors.loaderValueSelector(state); };
export var getCheckoutSteps = createSelector(getCheckoutStepsState, ɵ5);
export var getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);
export var getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);
var ɵ6 = function (deliveryMode) {
    return (deliveryMode &&
        Object.keys(deliveryMode.supported).map(function (code) { return deliveryMode.supported[code]; }));
};
export var getSupportedDeliveryModes = createSelector(getDeliveryMode, ɵ6);
var ɵ7 = function (deliveryMode) {
    return deliveryMode && deliveryMode.selected;
};
export var getSelectedDeliveryModeCode = createSelector(getDeliveryMode, ɵ7);
var ɵ8 = function (deliveryMode) {
    if (deliveryMode.selected !== '') {
        if (Object.keys(deliveryMode.supported).length === 0) {
            return null;
        }
        return deliveryMode.supported[deliveryMode.selected];
    }
};
export var getSelectedDeliveryMode = createSelector(getDeliveryMode, ɵ8);
export var getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);
export var getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);
var ɵ9 = function (state) {
    return StateLoaderSelectors.loaderSuccessSelector(state) &&
        !StateLoaderSelectors.loaderLoadingSelector(state);
};
export var getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, ɵ9);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQuc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3NlbGVjdG9ycy9jaGVja291dC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEdBRWYsTUFBTSxhQUFhLENBQUM7QUFJckIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbEUsT0FBTyxFQUdMLGdCQUFnQixHQUVqQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLElBQU0sMEJBQTBCLEdBQUcsVUFBQyxLQUF5QixJQUFLLE9BQUEsS0FBSyxDQUFDLE9BQU8sRUFBYixDQUFhLENBQUM7O0FBQ2hGLElBQU0sdUJBQXVCLEdBQUcsVUFBQyxLQUF5QjtJQUN4RCxPQUFBLEtBQUssQ0FBQyxZQUFZO0FBQWxCLENBQWtCLENBQUM7O0FBQ3JCLElBQU0seUJBQXlCLEdBQUcsVUFBQyxLQUF5QjtJQUMxRCxPQUFBLEtBQUssQ0FBQyxjQUFjO0FBQXBCLENBQW9CLENBQUM7O0FBQ3ZCLElBQU0sdUJBQXVCLEdBQUcsVUFBQyxLQUF5QjtJQUN4RCxPQUFBLEtBQUssQ0FBQyxZQUFZO0FBQWxCLENBQWtCLENBQUM7O0FBRXJCLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUd6QixxQkFBcUIsQ0FBZ0IsZ0JBQWdCLENBQUMsQ0FBQztTQU96RCxVQUFDLGFBQTRCLElBQUssT0FBQSxhQUFhLENBQUMsS0FBSyxFQUFuQixDQUFtQjtBQUx2RCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FHOUIsY0FBYyxDQUNoQixnQkFBZ0IsS0FFakIsQ0FBQztTQU9BLFVBQUEsS0FBSyxJQUFJLE9BQUEsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQS9DLENBQStDO0FBTDFELE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUd6QixjQUFjLENBQ2hCLHFCQUFxQixLQUV0QixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FDaEIsZ0JBQWdCLEVBQ2hCLDBCQUEwQixDQUMzQixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZUFBZSxHQU14QixjQUFjLENBQ2hCLGdCQUFnQixFQUNoQix1QkFBdUIsQ0FDeEIsQ0FBQztTQU9BLFVBQUEsWUFBWTtJQUNWLE9BQU8sQ0FDTCxZQUFZO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUNyQyxVQUFBLElBQUksSUFBSSxPQUFBLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQTVCLENBQTRCLENBQ3JDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFaSCxNQUFNLENBQUMsSUFBTSx5QkFBeUIsR0FHbEMsY0FBYyxDQUNoQixlQUFlLEtBU2hCLENBQUM7U0FPQSxVQUFBLFlBQVk7SUFDVixPQUFPLFlBQVksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQy9DLENBQUM7QUFQSCxNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FHcEMsY0FBYyxDQUNoQixlQUFlLEtBSWhCLENBQUM7U0FPQSxVQUFBLFlBQVk7SUFDVixJQUFJLFlBQVksQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO1FBQ2hDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0RDtBQUNILENBQUM7QUFaSCxNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUNoQixlQUFlLEtBU2hCLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FHMUIsY0FBYyxDQUNoQixnQkFBZ0IsRUFDaEIseUJBQXlCLENBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUNoQixnQkFBZ0IsRUFDaEIsdUJBQXVCLENBQ3hCLENBQUM7U0FPQSxVQUFBLEtBQUs7SUFDSCxPQUFBLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUNqRCxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztBQURsRCxDQUNrRDtBQVB0RCxNQUFNLENBQUMsSUFBTSx3QkFBd0IsR0FHakMsY0FBYyxDQUNoQixxQkFBcUIsS0FJdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIE1lbW9pemVkU2VsZWN0b3IsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnREZXRhaWxzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQgeyBEZWxpdmVyeU1vZGUsIE9yZGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgU3RhdGVMb2FkZXJTZWxlY3RvcnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHtcbiAgQ2hlY2tvdXRTdGF0ZSxcbiAgQ2hlY2tvdXRTdGVwc1N0YXRlLFxuICBDSEVDS09VVF9GRUFUVVJFLFxuICBTdGF0ZVdpdGhDaGVja291dCxcbn0gZnJvbSAnLi4vY2hlY2tvdXQtc3RhdGUnO1xuXG5jb25zdCBnZXREZWxpdmVyeUFkZHJlc3NTZWxlY3RvciA9IChzdGF0ZTogQ2hlY2tvdXRTdGVwc1N0YXRlKSA9PiBzdGF0ZS5hZGRyZXNzO1xuY29uc3QgZ2V0RGVsaXZlcnlNb2RlU2VsZWN0b3IgPSAoc3RhdGU6IENoZWNrb3V0U3RlcHNTdGF0ZSkgPT5cbiAgc3RhdGUuZGVsaXZlcnlNb2RlO1xuY29uc3QgZ2V0UGF5bWVudERldGFpbHNTZWxlY3RvciA9IChzdGF0ZTogQ2hlY2tvdXRTdGVwc1N0YXRlKSA9PlxuICBzdGF0ZS5wYXltZW50RGV0YWlscztcbmNvbnN0IGdldE9yZGVyRGV0YWlsc1NlbGVjdG9yID0gKHN0YXRlOiBDaGVja291dFN0ZXBzU3RhdGUpID0+XG4gIHN0YXRlLm9yZGVyRGV0YWlscztcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBDaGVja291dFN0YXRlXG4+ID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPENoZWNrb3V0U3RhdGU+KENIRUNLT1VUX0ZFQVRVUkUpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgTG9hZGVyU3RhdGU8Q2hlY2tvdXRTdGVwc1N0YXRlPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDaGVja291dFN0YXRlLFxuICAoY2hlY2tvdXRTdGF0ZTogQ2hlY2tvdXRTdGF0ZSkgPT4gY2hlY2tvdXRTdGF0ZS5zdGVwc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldENoZWNrb3V0U3RlcHM6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBDaGVja291dFN0ZXBzU3RhdGVcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGVwc1N0YXRlLFxuICBzdGF0ZSA9PiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldERlbGl2ZXJ5QWRkcmVzczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIEFkZHJlc3Ncbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2hlY2tvdXRTdGVwcyxcbiAgZ2V0RGVsaXZlcnlBZGRyZXNzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXREZWxpdmVyeU1vZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICB7XG4gICAgc3VwcG9ydGVkOiB7IFtjb2RlOiBzdHJpbmddOiBEZWxpdmVyeU1vZGUgfTtcbiAgICBzZWxlY3RlZDogc3RyaW5nO1xuICB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENoZWNrb3V0U3RlcHMsXG4gIGdldERlbGl2ZXJ5TW9kZVNlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0U3VwcG9ydGVkRGVsaXZlcnlNb2RlczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIERlbGl2ZXJ5TW9kZVtdXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldERlbGl2ZXJ5TW9kZSxcbiAgZGVsaXZlcnlNb2RlID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgZGVsaXZlcnlNb2RlICYmXG4gICAgICBPYmplY3Qua2V5cyhkZWxpdmVyeU1vZGUuc3VwcG9ydGVkKS5tYXAoXG4gICAgICAgIGNvZGUgPT4gZGVsaXZlcnlNb2RlLnN1cHBvcnRlZFtjb2RlXVxuICAgICAgKVxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZERlbGl2ZXJ5TW9kZUNvZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBzdHJpbmdcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0RGVsaXZlcnlNb2RlLFxuICBkZWxpdmVyeU1vZGUgPT4ge1xuICAgIHJldHVybiBkZWxpdmVyeU1vZGUgJiYgZGVsaXZlcnlNb2RlLnNlbGVjdGVkO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWREZWxpdmVyeU1vZGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENoZWNrb3V0LFxuICBEZWxpdmVyeU1vZGVcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0RGVsaXZlcnlNb2RlLFxuICBkZWxpdmVyeU1vZGUgPT4ge1xuICAgIGlmIChkZWxpdmVyeU1vZGUuc2VsZWN0ZWQgIT09ICcnKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMoZGVsaXZlcnlNb2RlLnN1cHBvcnRlZCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlbGl2ZXJ5TW9kZS5zdXBwb3J0ZWRbZGVsaXZlcnlNb2RlLnNlbGVjdGVkXTtcbiAgICB9XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBnZXRQYXltZW50RGV0YWlsczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIFBheW1lbnREZXRhaWxzXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENoZWNrb3V0U3RlcHMsXG4gIGdldFBheW1lbnREZXRhaWxzU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDaGVja291dE9yZGVyRGV0YWlsczogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2hlY2tvdXQsXG4gIE9yZGVyXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENoZWNrb3V0U3RlcHMsXG4gIGdldE9yZGVyRGV0YWlsc1NlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tvdXREZXRhaWxzTG9hZGVkOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDaGVja291dCxcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDaGVja291dFN0ZXBzU3RhdGUsXG4gIHN0YXRlID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSAmJlxuICAgICFTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4pO1xuIl19