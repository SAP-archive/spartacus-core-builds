import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { CartActions } from '../../../cart/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { CheckoutReplenishmentOrderConnector } from '../../connectors/index';
import { CheckoutActions } from '../actions/index';
export class ReplenishmentOrderEffects {
    constructor(actions$, checkoutReplOrderConnector) {
        this.actions$ = actions$;
        this.checkoutReplOrderConnector = checkoutReplOrderConnector;
        this.scheduleReplenishmentOrder$ = this.actions$.pipe(ofType(CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutReplOrderConnector
                .scheduleReplenishmentOrder(payload.cartId, payload.scheduleReplenishmentForm, payload.termsChecked, payload.userId)
                .pipe(switchMap((data) => [
                new CartActions.RemoveCart({ cartId: payload.cartId }),
                new CheckoutActions.ScheduleReplenishmentOrderSuccess(data),
            ]), catchError((error) => of(new CheckoutActions.ScheduleReplenishmentOrderFail(normalizeHttpError(error)))));
        }));
    }
}
ReplenishmentOrderEffects.decorators = [
    { type: Injectable }
];
ReplenishmentOrderEffects.ctorParameters = () => [
    { type: Actions },
    { type: CheckoutReplenishmentOrderConnector }
];
__decorate([
    Effect()
], ReplenishmentOrderEffects.prototype, "scheduleReplenishmentOrder$", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci5lZmZlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jaGVja291dC9zdG9yZS9lZmZlY3RzL3JlcGxlbmlzaG1lbnQtb3JkZXIuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR25ELE1BQU0sT0FBTyx5QkFBeUI7SUFpQ3BDLFlBQ1UsUUFBaUIsRUFDakIsMEJBQStEO1FBRC9ELGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUFxQztRQWpDekUsZ0NBQTJCLEdBSXZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsZUFBZSxDQUFDLDRCQUE0QixDQUFDLEVBQ3BELEdBQUcsQ0FBQyxDQUFDLE1BQWtELEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDM0UsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbkIsT0FBTyxJQUFJLENBQUMsMEJBQTBCO2lCQUNuQywwQkFBMEIsQ0FDekIsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMseUJBQXlCLEVBQ2pDLE9BQU8sQ0FBQyxZQUFZLEVBQ3BCLE9BQU8sQ0FBQyxNQUFNLENBQ2Y7aUJBQ0EsSUFBSSxDQUNILFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ2xCLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3RELElBQUksZUFBZSxDQUFDLGlDQUFpQyxDQUFDLElBQUksQ0FBQzthQUM1RCxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDbkIsRUFBRSxDQUNBLElBQUksZUFBZSxDQUFDLDhCQUE4QixDQUNoRCxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FDMUIsQ0FDRixDQUNGLENBQ0YsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNILENBQUM7SUFLQyxDQUFDOzs7WUFyQ0wsVUFBVTs7O1lBUkYsT0FBTztZQUtQLG1DQUFtQzs7QUFNMUM7SUFEQyxNQUFNLEVBQUU7OEVBOEJQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDYXJ0QWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2NhcnQvc3RvcmUvYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBub3JtYWxpemVIdHRwRXJyb3IgfSBmcm9tICcuLi8uLi8uLi91dGlsL25vcm1hbGl6ZS1odHRwLWVycm9yJztcbmltcG9ydCB7IENoZWNrb3V0UmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9pbmRleCc7XG5pbXBvcnQgeyBDaGVja291dEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcGxlbmlzaG1lbnRPcmRlckVmZmVjdHMge1xuICBARWZmZWN0KClcbiAgc2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXIkOiBPYnNlcnZhYmxlPFxuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLlNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyU3VjY2Vzc1xuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLlNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyRmFpbFxuICAgIHwgQ2FydEFjdGlvbnMuUmVtb3ZlQ2FydFxuICA+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShDaGVja291dEFjdGlvbnMuU0NIRURVTEVfUkVQTEVOSVNITUVOVF9PUkRFUiksXG4gICAgbWFwKChhY3Rpb246IENoZWNrb3V0QWN0aW9ucy5TY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlcikgPT4gYWN0aW9uLnBheWxvYWQpLFxuICAgIG1lcmdlTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jaGVja291dFJlcGxPcmRlckNvbm5lY3RvclxuICAgICAgICAuc2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXIoXG4gICAgICAgICAgcGF5bG9hZC5jYXJ0SWQsXG4gICAgICAgICAgcGF5bG9hZC5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtLFxuICAgICAgICAgIHBheWxvYWQudGVybXNDaGVja2VkLFxuICAgICAgICAgIHBheWxvYWQudXNlcklkXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgc3dpdGNoTWFwKChkYXRhKSA9PiBbXG4gICAgICAgICAgICBuZXcgQ2FydEFjdGlvbnMuUmVtb3ZlQ2FydCh7IGNhcnRJZDogcGF5bG9hZC5jYXJ0SWQgfSksXG4gICAgICAgICAgICBuZXcgQ2hlY2tvdXRBY3Rpb25zLlNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyU3VjY2VzcyhkYXRhKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICAgIG9mKFxuICAgICAgICAgICAgICBuZXcgQ2hlY2tvdXRBY3Rpb25zLlNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyRmFpbChcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgY2hlY2tvdXRSZXBsT3JkZXJDb25uZWN0b3I6IENoZWNrb3V0UmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICkge31cbn1cbiJdfQ==