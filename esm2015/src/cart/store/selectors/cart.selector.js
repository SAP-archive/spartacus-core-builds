/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { CART_FEATURE, } from '../cart-state';
import { loaderLoadingSelector, loaderSuccessSelector, loaderValueSelector, } from '../../../state/utils/loader/loader.selectors';
/** @type {?} */
export const getCartContentSelector = (state) => state.content;
/** @type {?} */
export const getRefreshSelector = (state) => state.refresh;
/** @type {?} */
export const getEntriesSelector = (state) => state.entries;
/** @type {?} */
export const getCartMergeCompleteSelector = (state) => state.cartMergeComplete;
/** @type {?} */
export const getCartsState = createFeatureSelector(CART_FEATURE);
/** @type {?} */
export const getActiveCartState = createSelector(getCartsState, (cartsState) => cartsState.active);
/** @type {?} */
export const getCartState = createSelector(getActiveCartState, state => loaderValueSelector(state));
/** @type {?} */
export const getCartContent = createSelector(getCartState, getCartContentSelector);
/** @type {?} */
export const getRefresh = createSelector(getCartState, getRefreshSelector);
/** @type {?} */
export const getLoaded = createSelector(getActiveCartState, state => loaderSuccessSelector(state) &&
    !loaderLoadingSelector(state) &&
    !loaderValueSelector(state).refresh);
/** @type {?} */
export const getCartMergeComplete = createSelector(getCartState, getCartMergeCompleteSelector);
/** @type {?} */
export const getEntriesMap = createSelector(getCartState, getEntriesSelector);
/** @type {?} */
export const getEntrySelectorFactory = (productCode) => {
    return createSelector(getEntriesMap, entries => {
        if (entries) {
            return entries[productCode];
        }
    });
};
/** @type {?} */
export const getEntries = createSelector(getEntriesMap, entities => {
    return Object.keys(entities).map(code => entities[code]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL3NlbGVjdG9ycy9jYXJ0LnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGNBQWMsR0FFZixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQ0wsWUFBWSxHQUliLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG1CQUFtQixHQUNwQixNQUFNLDhDQUE4QyxDQUFDOztBQUl0RCxNQUFNLE9BQU8sc0JBQXNCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTzs7QUFDekUsTUFBTSxPQUFPLGtCQUFrQixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU87O0FBQ3JFLE1BQU0sT0FBTyxrQkFBa0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPOztBQUNyRSxNQUFNLE9BQU8sNEJBQTRCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FDL0QsS0FBSyxDQUFDLGlCQUFpQjs7QUFFekIsTUFBTSxPQUFPLGFBQWEsR0FHdEIscUJBQXFCLENBQWEsWUFBWSxDQUFDOztBQUVuRCxNQUFNLE9BQU8sa0JBQWtCLEdBRzNCLGNBQWMsQ0FDaEIsYUFBYSxFQUNiLENBQUMsVUFBc0IsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FDOUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FHckIsY0FBYyxDQUNoQixrQkFBa0IsRUFDbEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FDcEM7O0FBRUQsTUFBTSxPQUFPLGNBQWMsR0FHdkIsY0FBYyxDQUNoQixZQUFZLEVBQ1osc0JBQXNCLENBQ3ZCOztBQUVELE1BQU0sT0FBTyxVQUFVLEdBR25CLGNBQWMsQ0FDaEIsWUFBWSxFQUNaLGtCQUFrQixDQUNuQjs7QUFFRCxNQUFNLE9BQU8sU0FBUyxHQUFtQyxjQUFjLENBQ3JFLGtCQUFrQixFQUNsQixLQUFLLENBQUMsRUFBRSxDQUNOLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FDdEM7O0FBRUQsTUFBTSxPQUFPLG9CQUFvQixHQUc3QixjQUFjLENBQ2hCLFlBQVksRUFDWiw0QkFBNEIsQ0FDN0I7O0FBRUQsTUFBTSxPQUFPLGFBQWEsR0FHdEIsY0FBYyxDQUNoQixZQUFZLEVBQ1osa0JBQWtCLENBQ25COztBQUVELE1BQU0sT0FBTyx1QkFBdUIsR0FBRyxDQUNyQyxXQUFXLEVBQzBCLEVBQUU7SUFDdkMsT0FBTyxjQUFjLENBQ25CLGFBQWEsRUFDYixPQUFPLENBQUMsRUFBRTtRQUNSLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUM7O0FBRUQsTUFBTSxPQUFPLFVBQVUsR0FBMEMsY0FBYyxDQUM3RSxhQUFhLEVBQ2IsUUFBUSxDQUFDLEVBQUU7SUFDVCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQyxDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY3JlYXRlRmVhdHVyZVNlbGVjdG9yLFxuICBjcmVhdGVTZWxlY3RvcixcbiAgTWVtb2l6ZWRTZWxlY3Rvcixcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHtcbiAgQ0FSVF9GRUFUVVJFLFxuICBDYXJ0c1N0YXRlLFxuICBDYXJ0U3RhdGUsXG4gIFN0YXRlV2l0aENhcnQsXG59IGZyb20gJy4uL2NhcnQtc3RhdGUnO1xuaW1wb3J0IHtcbiAgbG9hZGVyTG9hZGluZ1NlbGVjdG9yLFxuICBsb2FkZXJTdWNjZXNzU2VsZWN0b3IsXG4gIGxvYWRlclZhbHVlU2VsZWN0b3IsXG59IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXIuc2VsZWN0b3JzJztcbmltcG9ydCB7IExvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5pbXBvcnQgeyBVSUNhcnQsIFVJT3JkZXJFbnRyeSB9IGZyb20gJy4uLy4uL21vZGVsJztcblxuZXhwb3J0IGNvbnN0IGdldENhcnRDb250ZW50U2VsZWN0b3IgPSAoc3RhdGU6IENhcnRTdGF0ZSkgPT4gc3RhdGUuY29udGVudDtcbmV4cG9ydCBjb25zdCBnZXRSZWZyZXNoU2VsZWN0b3IgPSAoc3RhdGU6IENhcnRTdGF0ZSkgPT4gc3RhdGUucmVmcmVzaDtcbmV4cG9ydCBjb25zdCBnZXRFbnRyaWVzU2VsZWN0b3IgPSAoc3RhdGU6IENhcnRTdGF0ZSkgPT4gc3RhdGUuZW50cmllcztcbmV4cG9ydCBjb25zdCBnZXRDYXJ0TWVyZ2VDb21wbGV0ZVNlbGVjdG9yID0gKHN0YXRlOiBDYXJ0U3RhdGUpID0+XG4gIHN0YXRlLmNhcnRNZXJnZUNvbXBsZXRlO1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydHNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgQ2FydHNTdGF0ZVxuPiA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxDYXJ0c1N0YXRlPihDQVJUX0ZFQVRVUkUpO1xuXG5leHBvcnQgY29uc3QgZ2V0QWN0aXZlQ2FydFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhDYXJ0LFxuICBMb2FkZXJTdGF0ZTxDYXJ0U3RhdGU+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENhcnRzU3RhdGUsXG4gIChjYXJ0c1N0YXRlOiBDYXJ0c1N0YXRlKSA9PiBjYXJ0c1N0YXRlLmFjdGl2ZVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgQ2FydFN0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEFjdGl2ZUNhcnRTdGF0ZSxcbiAgc3RhdGUgPT4gbG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0Q29udGVudDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgVUlDYXJ0XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENhcnRTdGF0ZSxcbiAgZ2V0Q2FydENvbnRlbnRTZWxlY3RvclxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZnJlc2g6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENhcnQsXG4gIGJvb2xlYW5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0Q2FydFN0YXRlLFxuICBnZXRSZWZyZXNoU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRMb2FkZWQ6IE1lbW9pemVkU2VsZWN0b3I8YW55LCBib29sZWFuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRBY3RpdmVDYXJ0U3RhdGUsXG4gIHN0YXRlID0+XG4gICAgbG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKSAmJlxuICAgICFsb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpICYmXG4gICAgIWxvYWRlclZhbHVlU2VsZWN0b3Ioc3RhdGUpLnJlZnJlc2hcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0TWVyZ2VDb21wbGV0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoQ2FydCxcbiAgYm9vbGVhblxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRDYXJ0U3RhdGUsXG4gIGdldENhcnRNZXJnZUNvbXBsZXRlU2VsZWN0b3Jcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRFbnRyaWVzTWFwOiBNZW1vaXplZFNlbGVjdG9yPFxuICBhbnksXG4gIHsgW2NvZGU6IHN0cmluZ106IFVJT3JkZXJFbnRyeSB9XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENhcnRTdGF0ZSxcbiAgZ2V0RW50cmllc1NlbGVjdG9yXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0RW50cnlTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHByb2R1Y3RDb2RlXG4pOiBNZW1vaXplZFNlbGVjdG9yPGFueSwgVUlPcmRlckVudHJ5PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRFbnRyaWVzTWFwLFxuICAgIGVudHJpZXMgPT4ge1xuICAgICAgaWYgKGVudHJpZXMpIHtcbiAgICAgICAgcmV0dXJuIGVudHJpZXNbcHJvZHVjdENvZGVdO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFbnRyaWVzOiBNZW1vaXplZFNlbGVjdG9yPGFueSwgVUlPcmRlckVudHJ5W10+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldEVudHJpZXNNYXAsXG4gIGVudGl0aWVzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZW50aXRpZXMpLm1hcChjb2RlID0+IGVudGl0aWVzW2NvZGVdKTtcbiAgfVxuKTtcbiJdfQ==