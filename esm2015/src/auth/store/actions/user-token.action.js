export const LOAD_USER_TOKEN = '[Auth] Load User Token';
export const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';
export const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';
export const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';
export const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';
export const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';
export const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';
export const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';
export const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';
export class LoadUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN;
    }
}
export class LoadUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN_FAIL;
    }
}
export class LoadUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_USER_TOKEN_SUCCESS;
    }
}
export class RefreshUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN;
    }
}
export class RefreshUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN_SUCCESS;
    }
}
export class RefreshUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REFRESH_USER_TOKEN_FAIL;
    }
}
export class RevokeUserToken {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN;
    }
}
export class RevokeUserTokenSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN_SUCCESS;
    }
}
export class RevokeUserTokenFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REVOKE_USER_TOKEN_FAIL;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10b2tlbi5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYXV0aC9zdG9yZS9hY3Rpb25zL3VzZXItdG9rZW4uYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyw2QkFBNkIsQ0FBQztBQUNsRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRywyQkFBMkIsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxtQ0FBbUMsQ0FBQztBQUM5RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQztBQUM1RCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRywrQkFBK0IsQ0FBQztBQUN0RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUU1RSxNQUFNLE9BQU8sYUFBYTtJQUV4QixZQUFtQixPQUE2QztRQUE3QyxZQUFPLEdBQVAsT0FBTyxDQUFzQztRQUR2RCxTQUFJLEdBQUcsZUFBZSxDQUFDO0lBQ21DLENBQUM7Q0FDckU7QUFFRCxNQUFNLE9BQU8saUJBQWlCO0lBRTVCLFlBQW1CLE9BQVk7UUFBWixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxvQkFBb0IsQ0FBQztJQUNILENBQUM7Q0FDcEM7QUFFRCxNQUFNLE9BQU8sb0JBQW9CO0lBRS9CLFlBQW1CLE9BQWtCO1FBQWxCLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFENUIsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ0EsQ0FBQztDQUMxQztBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFFM0IsWUFBbUIsT0FBaUM7UUFBakMsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFEM0MsU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBQ29CLENBQUM7Q0FDekQ7QUFFRCxNQUFNLE9BQU8sdUJBQXVCO0lBRWxDLFlBQW1CLE9BQWtCO1FBQWxCLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFENUIsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBQ0gsQ0FBQztDQUMxQztBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFFL0IsWUFBbUIsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ04sQ0FBQztDQUNwQztBQUVELE1BQU0sT0FBTyxlQUFlO0lBRTFCLFlBQW1CLE9BQWtCO1FBQWxCLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFENUIsU0FBSSxHQUFHLGlCQUFpQixDQUFDO0lBQ00sQ0FBQztDQUMxQztBQUVELE1BQU0sT0FBTyxzQkFBc0I7SUFFakMsWUFBbUIsT0FBa0I7UUFBbEIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUQ1QixTQUFJLEdBQUcseUJBQXlCLENBQUM7SUFDRixDQUFDO0NBQzFDO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtJQUU5QixZQUFtQixPQUFZO1FBQVosWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsc0JBQXNCLENBQUM7SUFDTCxDQUFDO0NBQ3BDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgVXNlclRva2VuIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Rva2VuLXR5cGVzLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IExPQURfVVNFUl9UT0tFTiA9ICdbQXV0aF0gTG9hZCBVc2VyIFRva2VuJztcbmV4cG9ydCBjb25zdCBMT0FEX1VTRVJfVE9LRU5fRkFJTCA9ICdbQXV0aF0gTG9hZCBVc2VyIFRva2VuIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfVVNFUl9UT0tFTl9TVUNDRVNTID0gJ1tBdXRoXSBMb2FkIFVzZXIgVG9rZW4gU3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgUkVGUkVTSF9VU0VSX1RPS0VOID0gJ1tBdXRoXSBSZWZyZXNoIFVzZXIgVG9rZW4nO1xuZXhwb3J0IGNvbnN0IFJFRlJFU0hfVVNFUl9UT0tFTl9GQUlMID0gJ1tBdXRoXSBSZWZyZXNoIFVzZXIgVG9rZW4gRmFpbCc7XG5leHBvcnQgY29uc3QgUkVGUkVTSF9VU0VSX1RPS0VOX1NVQ0NFU1MgPSAnW0F1dGhdIFJlZnJlc2ggVXNlciBUb2tlbiBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVZPS0VfVVNFUl9UT0tFTiA9ICdbQXV0aF0gUmV2b2tlIFVzZXIgVG9rZW4nO1xuZXhwb3J0IGNvbnN0IFJFVk9LRV9VU0VSX1RPS0VOX0ZBSUwgPSAnW0F1dGhdIFJldm9rZSBVc2VyIFRva2VuIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFJFVk9LRV9VU0VSX1RPS0VOX1NVQ0NFU1MgPSAnW0F1dGhdIFJldm9rZSBVc2VyIFRva2VuIFN1Y2Nlc3MnO1xuXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJUb2tlbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfVE9LRU47XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nIH0pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlclRva2VuRmFpbCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfVE9LRU5fRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge31cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRVc2VyVG9rZW5TdWNjZXNzIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9UT0tFTl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogVXNlclRva2VuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmVmcmVzaFVzZXJUb2tlbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRUZSRVNIX1VTRVJfVE9LRU47XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHJlZnJlc2hUb2tlbjogc3RyaW5nIH0pIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWZyZXNoVXNlclRva2VuU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRUZSRVNIX1VTRVJfVE9LRU5fU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IFVzZXJUb2tlbikge31cbn1cblxuZXhwb3J0IGNsYXNzIFJlZnJlc2hVc2VyVG9rZW5GYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFRlJFU0hfVVNFUl9UT0tFTl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmV2b2tlVXNlclRva2VuIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFVk9LRV9VU0VSX1RPS0VOO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogVXNlclRva2VuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmV2b2tlVXNlclRva2VuU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVZPS0VfVVNFUl9UT0tFTl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogVXNlclRva2VuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgUmV2b2tlVXNlclRva2VuRmFpbCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBSRVZPS0VfVVNFUl9UT0tFTl9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7fVxufVxuXG4vLyBhY3Rpb24gdHlwZXNcbmV4cG9ydCB0eXBlIFVzZXJUb2tlbkFjdGlvbiA9XG4gIHwgTG9hZFVzZXJUb2tlblxuICB8IExvYWRVc2VyVG9rZW5GYWlsXG4gIHwgTG9hZFVzZXJUb2tlblN1Y2Nlc3NcbiAgfCBSZWZyZXNoVXNlclRva2VuXG4gIHwgUmVmcmVzaFVzZXJUb2tlbkZhaWxcbiAgfCBSZWZyZXNoVXNlclRva2VuU3VjY2Vzc1xuICB8IFJldm9rZVVzZXJUb2tlblxuICB8IFJldm9rZVVzZXJUb2tlbkZhaWxcbiAgfCBSZXZva2VVc2VyVG9rZW5TdWNjZXNzO1xuIl19